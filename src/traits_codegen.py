#!/usr/bin/env python3

import sys
import datetime
import ck2parser

g_emf_path = ck2parser.rootpath / 'EMF/EMF'
g_core_effect_path = g_emf_path / 'common/scripted_effects/emf_core_character_codegen_effects.txt'
g_core_trigger_path = g_emf_path / 'common/scripted_triggers/emf_core_character_codegen_triggers.txt'

###

g_codegen_file_hdr = '''
################################################################################
# WARNING: Do NOT modify this file manually!
#
# This file is code-generated and any manual changes will be overwritten.
#
# Generated by src/traits_codegen.py
################################################################################
'''

###

class Trait:
  TYPE_NONE        = 0
  TYPE_EDUCATION   = 1
  TYPE_PERSONALITY = 2
  TYPE_LIFESTYLE   = 3
  TYPE_LEADER      = 4
  TYPE_CHILDHOOD   = 5
  TYPE_BIRTH       = 6

  def __init__(self, index, tag, name):
    self.id = index
    self.tag = tag
    self.name = name
    self.cached = False
    self.customizer = True
    self.random = True
    self.type = Trait.TYPE_NONE
    self.birth = None
    self.inherit_chance = None
    self.is_health = False
    self.is_illness = False
    self.is_symptom = False
    self.is_epidemic = False
    self.religious = False
    self.cannot_marry = False
    self.cannot_inherit = False
    self.pilgrimage = False
    self.incapacitating = False
    self.ai_ambition = 0
    self.ai_rationality = 0
    self.ai_honor = 0
    self.ai_greed = 0
    self.ai_zeal = 0
    self.combat_rating = 0
    self.diplomacy = 0
    self.martial = 0
    self.stewardship = 0
    self.intrigue = 0
    self.learning = 0
    self.fertility = 0
    self.health = 0


def load_traits(parser, localisation):
  traits = []
  idx = 1
  for _, tree in parser.parse_files('common/traits/*.txt'):
    for k, v in tree:
      t = Trait(idx, k.val, localisation.get(k.val, 'NOT LOCALISED'))
      if v.has_pair('random', 'no'):
        t.random = False
      if v.has_pair('customizer', 'no'):
        t.customizer = False
      if v.has_pair('education', 'yes'):
        t.type = Trait.TYPE_EDUCATION
      elif v.has_pair('personality', 'yes'):
        t.type = Trait.TYPE_PERSONALITY
      elif v.has_pair('lifestyle', 'yes'):
        t.type = Trait.TYPE_LIFESTYLE
      elif v.has_pair('leader', 'yes'):
        t.type = Trait.TYPE_LEADER
      elif v.has_pair('childhood', 'yes'):
        t.type = Trait.TYPE_CHILDHOOD
      if v.has_pair('is_health', 'yes'):
        t.is_health = True
      if v.has_pair('is_illness', 'yes'):
        t.is_illness = True
      if v.has_pair('is_symptom', 'yes'):
        t.is_symptom = True
      if v.has_pair('is_epidemic', 'yes'):
        t.is_epidemic = True
      if v.has_pair('religious', 'yes'):
        t.religious = True
      if v.has_pair('cannot_marry', 'yes'):
        t.cannot_marry = True
      if v.has_pair('cannot_inherit', 'yes'):
        t.cannot_inherit = True
      if v.has_pair('pilgrimage', 'yes'):
        t.pilgrimage = True
      if v.has_pair('incapacitating', 'yes'):
        t.incapacitating = True
      for k2, v2 in v:
        if k2.val == 'ai_ambition':
          t.ai_ambition = int(v2.val)
        elif k2.val == 'ai_rationality':
          t.ai_rationality = int(v2.val)
        elif k2.val == 'ai_honor':
          t.ai_honor = int(v2.val)
        elif k2.val == 'ai_greed':
          t.ai_greed = int(v2.val)
        elif k2.val == 'ai_zeal':
          t.ai_zeal = int(v2.val)
        elif k2.val == 'birth':
          t.birth = int(v2.val)
          t.type = Trait.TYPE_BIRTH
        elif k2.val == 'inherit_chance':
          t.inherit_chance = int(v2.val)
        elif k2.val == 'combat_rating':
          t.combat_rating = int(v2.val)
        elif k2.val == 'diplomacy':
          t.diplomacy = int(v2.val)
        elif k2.val == 'martial':
          t.martial = int(v2.val)
        elif k2.val == 'stewardship':
          t.stewardship = int(v2.val)
        elif k2.val == 'intrigue':
          t.intrigue = int(v2.val)
        elif k2.val == 'learning':
          t.learning = int(v2.val)
        elif k2.val == 'fertility':
          t.fertility = float(v2.val)
        elif k2.val == 'health':
          t.health = float(v2.val)
      traits.append(t)
      idx += 1
  return traits


def main():
  moddirs = (g_emf_path,)
  parser = ck2parser.SimpleParser(*moddirs)
  loc = ck2parser.get_localisation(moddirs=moddirs)

  global g_traits
  g_traits = load_traits(parser, loc)

  with g_core_effect_path.open('w', encoding='cp1252', newline='\n') as f:
    print_file_header(f, 'ck2.scripted_effects')
    print_effect_remove_all_traits(f)
    print_effect_remove_leader_traits(f)
    print_effect_remove_personality_traits(f)
    print_effect_remove_symptom_traits(f)
    print_effect_remove_illness_traits(f)
    print_effect_remove_epidemic_traits(f)
    print_effect_remove_incapacitating_traits(f)

  with g_core_trigger_path.open('w', encoding='cp1252', newline='\n') as f:
    print_file_header(f, 'ck2.scripted_triggers')
    print_trigger_has_marriage_blocker_trait(f)

  return 0


def print_file_header(f, spec=None):
  if spec:
    print('# -*- {} -*-'.format(spec), file=f)
  print(g_codegen_file_hdr, file=f)


def print_effect_remove_all_traits(f):
  print(file=f)
  print('# Remove literally every trait', file=f)
  print('emf_remove_all_traits = {', file=f)
  for t in g_traits:
    print('\tremove_trait = {} # ID: {} [{}]'.format(t.tag, t.id, t.name), file=f)
  print('}', file=f)


def print_effect_remove_leader_traits(f):
  print(file=f)
  print('# Remove all leadership traits', file=f)
  print('emf_remove_leader_traits = {', file=f)
  for t in g_traits:
    if t.type == Trait.TYPE_LEADER:
      print('\tremove_trait = {} # ID: {} [{}]'.format(t.tag, t.id, t.name), file=f)
  print('}', file=f)


def print_effect_remove_personality_traits(f):
  print(file=f)
  print('# Remove all personality traits', file=f)
  print('emf_remove_personality_traits = {', file=f)
  for t in g_traits:
    if t.type == Trait.TYPE_PERSONALITY:
      print('\tremove_trait = {} # ID: {} [{}]'.format(t.tag, t.id, t.name), file=f)
  print('}', file=f)


def print_effect_remove_symptom_traits(f):
  print(file=f)
  print('# Remove all symptom traits', file=f)
  print('emf_remove_symptom_traits = {', file=f)
  for t in g_traits:
    if t.is_symptom:
      print('\tremove_trait = {} # ID: {} [{}]'.format(t.tag, t.id, t.name), file=f)
  print('}', file=f)

def print_effect_remove_illness_traits(f):
  print(file=f)
  print('# Remove all illness traits', file=f)
  print('emf_remove_illness_traits = {', file=f)
  for t in g_traits:
    if t.is_illness:
      print('\tremove_trait = {} # ID: {} [{}]'.format(t.tag, t.id, t.name), file=f)
  print('}', file=f)

def print_effect_remove_epidemic_traits(f):
  print(file=f)
  print('# Remove all epidemic traits', file=f)
  print('emf_remove_epidemic_traits = {', file=f)
  for t in g_traits:
    if t.is_epidemic:
      print('\tremove_trait = {} # ID: {} [{}]'.format(t.tag, t.id, t.name), file=f)
  print('}', file=f)


def print_effect_remove_incapacitating_traits(f):
  print(file=f)
  print('# Remove all incapacitating traits', file=f)
  print('emf_remove_incapacitating_traits = {', file=f)
  for t in g_traits:
    if t.incapacitating:
      print('\tremove_trait = {} # ID: {} [{}]'.format(t.tag, t.id, t.name), file=f)
  print('}', file=f)


def print_trigger_has_marriage_blocker_trait(f):
  print(file=f)
  print('# Does THIS have a cannot_marry=yes trait?', file=f)
  print('emf_has_marriage_blocker_trait = {', file=f)
  print('\tOR = {', file=f)
  for t in g_traits:
    if t.cannot_marry:
      print('\t\ttrait = {} # {}'.format(t.tag, t.name), file=f)
  print('\t}', file=f)
  print('}', file=f)

###


if __name__ == '__main__':
  sys.exit(main())
