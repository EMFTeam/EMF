#!/usr/bin/python3

import sys
import re
import ck2parser
from ck2parser import rootpath
from pathlib import Path

###

swmh_path = rootpath / 'SWMH-BETA/SWMH'
emf_path = rootpath / 'EMF/EMF'
emfs_path = rootpath / 'EMF/EMF+SWMH'
emfv_path = rootpath / 'EMF/EMF+Vanilla'

rel_trigger_path = Path('common/scripted_triggers/emf_cadet_codegen_triggers.txt')
rel_cloc_path = Path('localisation/customizable_localisation/emf_cadet_codegen_custom_loc.txt')
rel_loc_path = Path('localisation/emf_cadet_codegen.csv')

trigger_paths = [
	emf_path / rel_trigger_path,
	emfs_path / rel_trigger_path,
]

cloc_paths = [
	emf_path / rel_cloc_path,
	emfs_path / rel_cloc_path,
]

loc_paths = [
	emf_path / rel_loc_path,
	emfs_path / rel_loc_path,
]

mod_dirs = [
	(emf_path, emfv_path),
	(swmh_path, emf_path, emfs_path),
]

###

class Culture:
	def __init__(self, tag, name):
		self.tag = tag
		self.name = name
		self.founder_named_dynasties = False
		self.from_dynasty_prefix = None
		self.from_dynasty_suffix = None


def load_cultures(parser, loc):
	cultures = []
	for _, tree in parser.parse_files('common/cultures/*.txt'):
		for n, v in tree:
			for n2, v2 in v:
				if isinstance(v2, ck2parser.Obj) and n2.val not in ('color', 'graphical_cultures', 'unit_graphical_cultures', 'male_names', 'female_names', 'alternate_start'):
					c = Culture(n2.val, loc.get(n2.val))
					cultures.append(c)
					if v2.has_pair('founder_named_dynasties', 'yes'):
						c.founder_named_dynasties = True
					for n3, v3 in v2:
						if n3.val == 'from_dynasty_prefix' and not re.match(r'^\s*$', v3.val):
							c.from_dynasty_prefix = v3.val
						if n3.val == 'from_dynasty_suffix' and not re.match(r'^\s*$', v3.val):
							c.from_dynasty_suffix = v3.val
	return cultures

###


def print_header(f, spec=None):
	if spec:
		print('# -*- {} -*-'.format(spec), file=f)
		print('''
################################################################################
# WARNING: Do NOT modify this file manually!
#
# This file is code-generated and any manual changes will be overwritten.
#
# Generated by src/cadet_codegen.py
################################################################################
''', file=f)


def main():
	for i, md in enumerate(mod_dirs):
		loc = ck2parser.get_localisation(moddirs=md)
		parser = ck2parser.SimpleParser(*md)
		cultures = load_cultures(parser, loc)
		new_loc = {}

		with trigger_paths[i].open('w', encoding='cp1252', newline='\n') as f:
			print_header(f, 'ck2.scripted_triggers')
			print_trigger_uses_founder_named_dynasties(f, cultures)

		with cloc_paths[i].open('w', encoding='cp1252', newline='\n') as f:
			print_header(f, 'ck2.custom_loc')
			print_cloc_GetFromDynastyPrefix(f, cultures, new_loc)
			print_cloc_GetFromDynastySuffix(f, cultures, new_loc)

		with loc_paths[i].open('w', encoding='cp1252', newline='\n') as f:
			print('#CODE;ENGLISH;FRENCH;GERMAN;;SPANISH;;;;;;;;;x', file=f)
			print('#### WARNING! THIS FILE IS CODE-GENERATED. DO NOT MANUALLY MODIFY! ####', file=f)
			for k in sorted(new_loc):
				print('{};{};;;;;;;;;;;;;x'.format(k, new_loc[k]), file=f)

	return 0


def print_trigger_uses_founder_named_dynasties(f, cultures):
	print(file=f)
	print('# Does THIS culture use founder-named dynasties?', file=f)
	print('emf_uses_founder_named_dynasties = {', file=f)
	print('\tOR = {', file=f)
	for c in cultures:
		if c.founder_named_dynasties:
			print('\t\tculture = {} # {}'.format(c.tag, c.name), file=f)
	print('\t}', file=f)
	print('}', file=f)


def print_cloc_GetFromDynastyPrefix(f, cultures, new_loc):
	print(file=f)
	print("# Return THIS culture's from_dynasty_prefix", file=f)
	print('defined_text = {', file=f)
	print('\tname = EMF_GetFromDynastyPrefix', file=f)
	for c in cultures:
		if c.from_dynasty_prefix:
			key = 'EMF_String_GetFromDynastyPrefix_{}'.format(c.tag)
			new_loc[key] = c.from_dynasty_prefix
			print('\ttext = {{ # {}'.format(c.name), file=f)
			print('\t\tlocalisation_key = {}'.format(key), file=f)
			print('\t\ttrigger = {{ culture = {} }}'.format(c.tag), file=f)
			print('\t}', file=f)
	print('\tfallback_text = {', file=f)
	print('\t\tlocalisation_key = ""', file=f)
	print('\t}', file=f)
	print('}', file=f)


def print_cloc_GetFromDynastySuffix(f, cultures, new_loc):
	print(file=f)
	print("# Return THIS culture's from_dynasty_suffix", file=f)
	print('defined_text = {', file=f)
	print('\tname = EMF_GetFromDynastySuffix', file=f)
	for c in cultures:
		if c.from_dynasty_suffix:
			key = 'EMF_String_GetFromDynastySuffix_{}'.format(c.tag)
			new_loc[key] = c.from_dynasty_suffix
			print('\ttext = {{ # {}'.format(c.name), file=f)
			print('\t\tlocalisation_key = {}'.format(key), file=f)
			print('\t\ttrigger = {{ culture = {} }}'.format(c.tag), file=f)
			print('\t}', file=f)
	print('\tfallback_text = {', file=f)
	print('\t\tlocalisation_key = ""', file=f)
	print('\t}', file=f)
	print('}', file=f)


###


if __name__ == '__main__':
	sys.exit(main())
