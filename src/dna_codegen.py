#!/usr/bin/python3

import sys
from localpaths import rootpath

###

emf_path = rootpath / 'EMF/EMF'
effects_path = emf_path / 'common/scripted_effects/emf_dna_codegen_effects.txt'

###

class Phenotype:
	MENDELIAN = 0
	POLYGENIC = 1

	def __init__(self, p_id, prefix, name, inheritance=MENDELIAN, gene_weights_if_trait=(0,9,11), gene_weights_if_no_trait=(9,9,2)):
		self.id = p_id
		self.prefix = prefix
		self.name = name
		self.type = inheritance
		# Weights are 3-tuples which represent the random weighting of (dominant, heterozygous, recessive)
		# Currently only used for type == MENDELIAN
		self.gene_weights_if_trait = tuple(gene_weights_if_trait) if gene_weights_if_trait else None
		self.gene_weights_if_no_trait = tuple(gene_weights_if_no_trait) if gene_weights_if_no_trait else None


phenotypes = [
	Phenotype('int', 'i', 'Intelligence', Phenotype.POLYGENIC),
	Phenotype('attr', 'a', 'Attractiveness', Phenotype.POLYGENIC),
	Phenotype('str', 'st', 'Strength', Phenotype.POLYGENIC),
	Phenotype('hgt', 'ht', 'Height', Phenotype.POLYGENIC),
	Phenotype('dwarf', 'dw', 'Dwarfism', gene_weights_if_trait=(0,5,3), gene_weights_if_no_trait=(10,9,1)),
	Phenotype('clubfooted', 'c', 'Clubfooted'),
	Phenotype('hunchback', 'hu', 'Hunchback'),
	Phenotype('harelip', 'ha', 'Harelip'),
	Phenotype('lisp', 'l', 'Lisp'),
	Phenotype('stutter', 'sr', 'Stutter'),
	Phenotype('deaf', 'de', 'Deafness'),
	Phenotype('wrymouth', 'w', 'Wrymouth'),
	Phenotype('perc', 'p', 'Perceptiveness', Phenotype.POLYGENIC),
	Phenotype('health', 'hl', 'Health', Phenotype.POLYGENIC),
	Phenotype('handedness', 'lh', 'Handedness', Phenotype.POLYGENIC),
]

genes = ['AA', 'Aa', 'aa', 'BB', 'Bb', 'bb', 'CC', 'Cc', 'cc']
homozygous_recessive_to_dominant_genes = {'aa': 'AA', 'bb': 'BB', 'cc': 'CC'}

###


def print_header(f, spec=None):
	if spec:
		print('# -*- {} -*-'.format(spec), file=f)
		print('''
################################################################################
# WARNING: Do NOT modify this file manually!
#
# This file is code-generated and any manual changes will be overwritten.
#
# Generated by src/dna_codegen.py
################################################################################
''', file=f)


def main():
	with effects_path.open('w', encoding='cp1252', newline='\n') as f:
		print_header(f, 'ck2.scripted_effects')
		print_clear_flags_for_phenotype_effects(f)
		print_set_flags_for_phenotype_effects(f)
		print_set_flags_for_phenotype_if_no_trait_effects(f)
		print_add_trait_with_genetics_effects(f)
		print_remove_trait_with_genetics_effects(f)
		print_reverse_homozygous_recessive_effect(f)
		print_reset_flags_positively_effect(f)
		print_remove_negative_mendelian_traits_effect(f)
		print_remove_negative_mendelian_traits_with_genetics_effect(f)
	return 0


def print_clear_flags_for_phenotype_effects(f):
	for p in phenotypes:
		print(file=f)
		print('# Clear DNA for phenotype: {}'.format(p.name), file=f)
		print('emf_dna_clear_flags_for_{} = {{'.format(p.id), file=f)
		for g in genes:
			print('\tclr_flag = {}_{}'.format(p.prefix, g), file=f)
		print('}', file=f)


def print_set_flags_for_phenotype_effects(f):
	for p in phenotypes:
		if p.type != Phenotype.MENDELIAN:
			continue
		print(file=f)
		print('# Set DNA for known phenotype: {}'.format(p.name), file=f)
		print('''emf_dna_set_flags_for_{0} = {{
	random_list = {{
		{2} = {{
			set_flag = {3}_aa
		}}
		{1} = {{
			set_flag = {3}_Aa
		}}
	}}
	random_list = {{
		{2} = {{
			set_flag = {3}_bb
		}}
		{1} = {{
			set_flag = {3}_Bb
		}}
	}}
	random_list = {{
		{2} = {{
			set_flag = {3}_cc
		}}
		{1} = {{
			set_flag = {3}_Cc
		}}
	}}
	if = {{
		limit = {{
			NOR = {{
				has_flag = {3}_aa
				has_flag = {3}_bb
				has_flag = {3}_cc
			}}
		}}
		random_list = {{
			1 = {{
				clr_flag = {3}_Aa
				set_flag = {3}_aa
			}}
			1 = {{
				clr_flag = {3}_Bb
				set_flag = {3}_bb
			}}
			1 = {{
				clr_flag = {3}_Cc
				set_flag = {3}_cc
			}}
		}}
	}}
}}'''.format(p.id, p.gene_weights_if_trait[1], p.gene_weights_if_trait[2], p.prefix), file=f)


def print_set_flags_for_phenotype_if_no_trait_effects(f):
	for p in phenotypes:
		if p.type != Phenotype.MENDELIAN:
			continue
		print(file=f)
		print('# Set DNA for phenotype if no trait is expressed: {}'.format(p.name), file=f)
		firstpart='''emf_dna_set_flags_for_{0}_if_no_trait = {{
	random_list = {{
		{1} = {{
			set_flag = {4}_AA
		}}
		{2} = {{
			set_flag = {4}_Aa
		}}
		{3} = {{
			set_flag = {4}_aa
		}}
	}}
	random_list = {{
		{1} = {{
			set_flag = {4}_BB
		}}
		{2} = {{
			set_flag = {4}_Bb
		}}
		{3} = {{
			set_flag = {4}_bb
		}}
	}}
	random_list = {{
		{1} = {{
			set_flag = {4}_CC
		}}
		{2} = {{
			set_flag = {4}_Cc
		}}
		{3} = {{
			set_flag = {4}_cc
		}}
	}}'''.format(p.id, *p.gene_weights_if_no_trait, p.prefix)
		if p.id == 'dwarf':
			firstpart=firstpart+'''
	if = {{
		limit = {{
			has_flag = {0}_aa
			has_flag = {0}_bb
			has_flag = {0}_cc
		}}
		random_list = {{
			1 = {{
				clr_flag = {0}_aa
				set_flag = {0}_Aa
			}}
			1 = {{
				clr_flag = {0}_bb
				set_flag = {0}_Bb
			}}
			1 = {{
				clr_flag = {0}_cc
				set_flag = {0}_Cc
			}}
		}}
	}}'''.format(p.prefix)
		print(firstpart+'''
}''', file=f)


def print_add_trait_with_genetics_effects(f):
	for p in phenotypes:
		if p.type != Phenotype.MENDELIAN:
			continue
		print(file=f)
		print('# Add trait and reset DNA for known phenotype: {}'.format(p.name), file=f)
		print('''emf_dna_add_trait_{0} = {{
	emf_dna_clear_flags_for_{0} = yes
	add_trait = {0}
	emf_dna_set_flags_for_{0} = yes
}}'''.format(p.id), file=f)


def print_remove_trait_with_genetics_effects(f):
	for p in phenotypes:
		if p.type != Phenotype.MENDELIAN:
			continue
		print(file=f)
		print('# Remove trait and reset DNA for known phenotype: {}'.format(p.name), file=f)
		print('''emf_dna_remove_trait_{0} = {{
	emf_dna_clear_flags_for_{0} = yes
	remove_trait = {0}
	emf_dna_set_flags_for_{0}_if_no_trait = yes
}}'''.format(p.id), file=f)

def print_reverse_homozygous_recessive_effect(f):
	print(file=f)
	print('# Flip all homozygous recessive genes into homozygous dominant genes', file=f)
	print('emf_dna_reverse_homozygous_recessive = {', file=f)
	for p in phenotypes:
		for rg in sorted(homozygous_recessive_to_dominant_genes):
			print('\tif = {', file=f)
			print('\t\tlimit = {{ has_flag = {}_{} }}'.format(p.prefix, rg), file=f)
			print('\t\tclr_flag = {}_{}'.format(p.prefix, rg), file=f)
			print('\t\tset_flag = {}_{}'.format(p.prefix, homozygous_recessive_to_dominant_genes[rg]), file=f)
			print('\t}', file=f)
	print('}', file=f)


def print_reset_flags_positively_effect(f):
	ok_genes = [('AA', 'Aa'), ('BB', 'Bb'), ('CC', 'Cc')]
	print(file=f)
	print('# Reset genes to only be neutral or positive (do not modify any expressed phenotypes)', file=f)
	print('emf_dna_reset_flags_positively = {', file=f)
	for p in phenotypes:
		print('\temf_dna_clear_flags_for_{} = yes'.format(p.id), file=f)
		for g1, g2 in ok_genes:
			print('\trandom_list = {', file=f)
			print('\t\t1 = {{ set_flag = {}_{} }}'.format(p.prefix, g1), file=f)
			print('\t\t1 = {{ set_flag = {}_{} }}'.format(p.prefix, g2), file=f)
			print('\t}', file=f)
	print('}', file=f)


def	print_remove_negative_mendelian_traits_effect(f):
	print(file=f)
	print('# Remove all negative genetic traits subject to Mendelian inheritance', file=f)
	print('emf_dna_remove_negative_mendelian_traits = {', file=f)
	for p in phenotypes:
		if p.type != Phenotype.MENDELIAN:
			continue
		print('\tremove_trait = {}'.format(p.id), file=f)
	print('}', file=f)


def print_remove_negative_mendelian_traits_with_genetics_effect(f):
	print(file=f)
	print('# Remove all negative genetic traits subject to Mendelian inheritance and adjust genetics accordingly', file=f)
	print('emf_dna_remove_negative_mendelian_traits_with_genetics = {', file=f)
	for p in phenotypes:
		if p.type != Phenotype.MENDELIAN:
			continue
		print('\temf_dna_remove_trait_{} = yes'.format(p.id), file=f)
	print('}', file=f)



###


if __name__ == '__main__':
	sys.exit(main())
