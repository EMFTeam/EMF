#!/usr/bin/python3

import sys
from localpaths import rootpath

###

emf_path = rootpath / 'EMF/EMF'
effects_path = emf_path / 'common/scripted_effects/emf_dna_codegen_effects.txt'

###

class Phenotype:
	MENDELIAN = 0
	POLYGENIC = 1

	def __init__(self, pid, name, inheritance=MENDELIAN, gene_weights_if_trait=(0,2,2), gene_weights_if_no_trait=(9,9,2)):
		self.id = pid
		self.name = name
		self.type = inheritance
		# Weights are 3-tuples which represent the random weighting of (dominant, heterozygous, recessive)
		# Currently only used for type == MENDELIAN
		self.gene_weights_if_trait = tuple(gene_weights_if_trait) if gene_weights_if_trait else None
		self.gene_weights_if_no_trait = tuple(gene_weights_if_no_trait) if gene_weights_if_no_trait else None


phenotypes = [
	Phenotype('int', 'Intelligence', Phenotype.POLYGENIC),
	Phenotype('attr', 'Attractiveness', Phenotype.POLYGENIC),
	Phenotype('str', 'Strength', Phenotype.POLYGENIC),
	Phenotype('hgt', 'Height', Phenotype.POLYGENIC),
	Phenotype('dwarf', 'Dwarfism', gene_weights_if_trait=(0,2,3)),
	Phenotype('clubfooted', 'Clubfooted'),
	Phenotype('hunchback', 'Hunchback'),
	Phenotype('harelip', 'Harelip'),
	Phenotype('lisp', 'Lisp'),
	Phenotype('stutter', 'Stutter'),
	Phenotype('deaf', 'Deafness'),
	Phenotype('wrymouth', 'Wrymouth'),
	Phenotype('perc', 'Perceptiveness', Phenotype.POLYGENIC),
]

genes = [
	'AA',
	'Aa',
	'aa',
	'BB',
	'Bb',
	'bb',
	'CC',
	'Cc',
	'cc',
]

###


def print_header(f, spec=None):
	if spec:
		print('# -*- {} -*-'.format(spec), file=f)
		print('''
################################################################################
# WARNING: Do NOT modify this file manually!
#
# This file is code-generated and any manual changes will be overwritten.
#
# Generated by src/dna_codegen.py
################################################################################
''', file=f)


def main():
	with effects_path.open('w', encoding='cp1252', newline='\n') as f:
		print_header(f, 'ck2.scripted_effects')
		print_clear_flags_for_phenotype_effects(f)
		print_set_flags_for_phenotype_effects(f)
		print_set_flags_for_phenotype_if_no_trait_effects(f)
	return 0


def print_clear_flags_for_phenotype_effects(f):
	for p in phenotypes:
		print(file=f)
		print('# Clear DNA for phenotype: {}'.format(p.name), file=f)
		print('emf_dna_clear_flags_for_{} = {{'.format(p.id), file=f)
		for g in genes:
			print('\tclr_flag = {}_{}'.format(p.id, g), file=f)
		print('}', file=f)


def print_set_flags_for_phenotype_effects(f):
	for p in phenotypes:
		if p.type != Phenotype.MENDELIAN:
			continue
		print(file=f)
		print('# Set DNA for known phenotype: {}'.format(p.name), file=f)
		print('''emf_dna_set_flags_for_{0} = {{
	random_list = {{
		{2} = {{
			set_flag = {0}_aa
		}}
		{1} = {{
			set_flag = {0}_Aa
		}}
	}}
	random_list = {{
		{2} = {{
			set_flag = {0}_bb
		}}
		{1} = {{
			set_flag = {0}_Bb
		}}
	}}
	random_list = {{
		{2} = {{
			set_flag = {0}_cc
		}}
		{1} = {{
			set_flag = {0}_Cc
		}}
	}}
	if = {{
		limit = {{
			NOR = {{
				has_flag = {0}_aa
				has_flag = {0}_bb
				has_flag = {0}_cc
			}}
		}}
		random_list = {{
			1 = {{
				clr_flag = {0}_Aa
				set_flag = {0}_aa
			}}
			1 = {{
				clr_flag = {0}_Bb
				set_flag = {0}_bb
			}}
			1 = {{
				clr_flag = {0}_Cc
				set_flag = {0}_cc
			}}
		}}
	}}
}}'''.format(p.id, p.gene_weights_if_trait[1], p.gene_weights_if_trait[2]), file=f)


def print_set_flags_for_phenotype_if_no_trait_effects(f):
	for p in phenotypes:
		if p.type != Phenotype.MENDELIAN:
			continue
		print(file=f)
		print('# Set DNA for phenotype if no trait is expressed: {}'.format(p.name), file=f)
		print('''emf_dna_set_flags_for_{0}_if_no_trait = {{
	random_list = {{
		{1} = {{
			set_flag = {0}_AA
		}}
		{2} = {{
			set_flag = {0}_Aa
		}}
		{3} = {{
			set_flag = {0}_aa
		}}
	}}
	random_list = {{
		{1} = {{
			set_flag = {0}_BB
		}}
		{2} = {{
			set_flag = {0}_Bb
		}}
		{3} = {{
			set_flag = {0}_bb
		}}
	}}
	random_list = {{
		{1} = {{
			set_flag = {0}_CC
		}}
		{2} = {{
			set_flag = {0}_Cc
		}}
		{3} = {{
			set_flag = {0}_cc
		}}
	}}
}}'''.format(p.id, *p.gene_weights_if_no_trait), file=f)

###


if __name__ == '__main__':
	sys.exit(main())
