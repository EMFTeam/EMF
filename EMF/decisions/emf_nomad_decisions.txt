# -*- ck2.decisions -*-

decisions = {
	emf_become_nomad = {
		is_high_prio = yes
		only_playable = yes
		ai_check_interval = 24

		potential = {
			OR = {
				culture_group = altaic
				capital_scope = { region = world_steppe }
			}
			OR = {
				NOT = { culture_group = magyar }
				emf_alternate_start = yes
			}
			is_tribal = yes
			pacifist = no
			capital_scope = { num_of_empty_holdings > 0 }
			OR = {
				real_tier = DUKE
				real_tier = KING
			}
			is_government_potential = nomadic_government
		}
		allow = {
			is_adult = yes
			is_female = no
			war = no
			is_ill = no
			prisoner = no
			is_incapable = no
			has_regent = no
			prestige >= 1000
			martial >= 10
			custom_tooltip = {
				text = IS_PHYSICALLY_CAPABLE
				hidden_tooltip = {
					is_weak_trigger = no
					has_severe_disability_trigger = no
					has_medium_disability_trigger = no
				}
			}
			NOT = { trait = content }
			trigger_if = {
				limit = {
					liege = {
						NOT = { character = ROOT }
						is_nomadic = no
					}
				}
				independent = yes
				num_of_count_titles >= 3
			}
			custom_tooltip = { text = NEEDS_500_PRESTIGE_COST }
		}
		effect = {
			prestige = -500
			clr_flag = emf_context_tribal_to_nomadic
			set_flag = emf_context_tribal_to_nomadic
			set_government_type = nomadic_government
			if = {
				limit = { prestige > 10000 }
				population = 9500
			}
			else_if = {
				limit = { prestige > 9500 }
				population = 9000
			}
			else_if = {
				limit = { prestige > 9000 }
				population = 8500
			}
			else_if = {
				limit = { prestige > 8500 }
				population = 8000
			}
			else_if = {
				limit = { prestige > 8000 }
				population = 7500
			}
			else_if = {
				limit = { prestige > 7500 }
				population = 7000
			}
			else_if = {
				limit = { prestige > 7000 }
				population = 6500
			}
			else_if = {
				limit = { prestige > 6500 }
				population = 6000
			}
			else_if = {
				limit = { prestige > 6000 }
				population = 5500
			}
			else_if = {
				limit = { prestige > 5500 }
				population = 5000
			}
			else_if = {
				limit = { prestige > 5000 }
				population = 4500
			}
			else_if = {
				limit = { prestige > 4500 }
				population = 4000
			}
			else_if = {
				limit = { prestige > 4000 }
				population = 3500
			}
			else_if = {
				limit = { prestige > 3500 }
				population = 3000
			}
			else_if = {
				limit = { prestige > 3000 }
				population = 2500
			}
			else_if = {
				limit = { prestige > 2500 }
				population = 2000
			}
			else_if = {
				limit = { prestige > 2000 }
				population = 1500
			}
			else_if = {
				limit = { prestige > 1500 }
				population = 1000
			}
			else = {
				population = 500
			}
			hidden_effect = {
				disband_event_forces = settled_nomads
				if = {
					limit = { independent = yes }
					narrative_event = { id = emf_nomad.101 }
				}
				else = {
					narrative_event = { id = emf_nomad.102 }
				}
			}
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0
				total_years_played < 30
			}
			modifier = {
				factor = 0
				independent = no
				liege = {
					OR = {
						dynasty = ROOT
						any_vassal = {
							is_nomadic = yes
							dynasty = ROOT
						}
						any_vassal = {
							is_nomadic = yes
							count = 5
						}
					}
				}
			}
			modifier = {
				factor = 0
				independent = yes
				NOT = {
					calc_true_if = {
						amount = 2
						martial >= 15
						martial >= 20
						trait = brave
						trait = strong
						trait = robust
						combat_rating > 60
					}
				}
			}
			modifier = {
				factor = 0
				any_realm_title = {
					count = 4
					tier = BARON
					holding_type = castle
				}
			}
			modifier = {
				factor = 0
				NOT = { any_realm_province = { region = world_steppe } }
			}
		}
	}
}

title_decisions = {
	emf_nomad_adopt_tribalism = {
		is_high_prio = yes
		only_playable = yes
		filter = sub_realm_owned
		ai_target_filter = sub_realm_owned
		ai_check_interval = 12

		from_potential = {
			is_nomadic = yes
			clan_title = {
				is_title_active = THIS
				holder = PREV
			}
			is_landed = yes
			OR = {
				ai = yes
				emf_religion_unsafe_for_player_if_not_nomad = no
			}
			NOT = { any_demesne_title = { temporary = yes } }
			is_government_potential = tribal_government
		}
		potential = {
			tier = COUNT
			owner = {
				OR = {
					character = FROM
					trigger_if = {
						limit = { ai = yes }
						is_liege_or_above = FROM
						NOR = {
							is_nomadic = yes
							any_liege = {
								NOT = { character = FROM }
								is_nomadic = yes
							}
						}
					}
				}
			}
		}
		allow = {
			FROM = {
				independent = yes
				war = no
			}
			location = {
				custom_tooltip = {
					text = HAS_NO_ONGOING_SIEGE_OR_OCCUPIED_HOLDINGS
					NOT = {
						any_province_holding = {
							OR = {
								has_siege = yes
								is_occupied = yes
							}
						}
					}
				}
				OR = {
					custom_tooltip = {
						text = CONTAINS_TRIBAL_HOLDING
						hidden_tooltip = {
							any_province_holding = {
								holding_type = tribal
								owner = {
									OR = {
										ai = yes
										character = FROM
										PREVPREV = { is_capital = no }
									}
								}
							}
						}
					}
					custom_tooltip = {
						text = MAY_BUILD_TRIBAL_HOLDING
						hidden_tooltip = {
							AND = {
								has_empty_holding = yes
								OR = {
									FROM = { capital_holding = { has_building = no_gathering_hall_2 } }
									any_province_holding = { holding_type = castle }
									AND = {
										FROM = {
											OR = {
												religion_group = muslim
												religion = bogomilist
											}
										}
										any_province_holding = { holding_type = temple }
									}
								}
							}
						}
					}
					custom_tooltip = {
						text = IS_CAPITAL_GATHERING_HALL_2
						hidden_tooltip = {
							any_province_holding = {
								holding_type = nomad
								has_building = no_gathering_hall_2
								holder = FROM
							}
						}
					}
				}
			}
		}
		effect = {
			log = "INFO: emf_nomad_adopt_tribalism: [From.EMF_GetDebugName] settling in [This.EMF_GetDebugTitleNameWithDeJureLieges]:"
			log = "-> current government group: [From.EMF_GetGovernmentGroupName]"
			FROM = {
				capital_holding = {
					log = "-> current capital: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
					log = "---> holding type: [This.EMF_GetHoldingType]"
				}
			}
			location = {
				if = {
					limit = { num_of_max_settlements == 7 }
					log = "-> target province has 7 holding slots"
				}
				else_if = {
					limit = { num_of_max_settlements == 6 }
					log = "-> target province has 6 holding slots"
				}
				else_if = {
					limit = { num_of_max_settlements == 5 }
					log = "-> target province has 5 holding slots"
				}
				else_if = {
					limit = { num_of_max_settlements == 4 }
					log = "-> target province has 4 holding slots"
				}
				else_if = {
					limit = { num_of_max_settlements == 3 }
					log = "-> target province has 3 holding slots"
				}
				else_if = {
					limit = { num_of_max_settlements == 2 }
					log = "-> target province has 2 holding slots"
				}
				else_if = {
					limit = { num_of_max_settlements == 1 }
					log = "-> target province has 1 holding slot"
				}
				else_if = {
					limit = { num_of_max_settlements < 1 }
					log = "-> target province has 0 holding slots"
				}
				if = {
					limit = { num_of_settlements == 7 }
					log = "---> 7 slots are used"
				}
				else_if = {
					limit = { num_of_settlements == 6 }
					log = "---> 6 slots are used"
				}
				else_if = {
					limit = { num_of_settlements == 5 }
					log = "---> 5 slots are used"
				}
				else_if = {
					limit = { num_of_settlements == 4 }
					log = "---> 4 slots are used"
				}
				else_if = {
					limit = { num_of_settlements == 3 }
					log = "---> 3 slots are used"
				}
				else_if = {
					limit = { num_of_settlements == 2 }
					log = "---> 2 slots are used"
				}
				else_if = {
					limit = { num_of_settlements == 1 }
					log = "---> 1 slots are used"
				}
				else_if = {
					limit = { num_of_settlements < 1 }
					log = "---> 0 slots are used"
				}
				if = {
					limit = { any_province_holding = { holding_type = nomad } }
					log = "-----> has at least 1 nomad holding"
				}
				if = {
					limit = { any_province_holding = { holding_type = castle } }
					log = "-----> has at least 1 castle holding"
				}
				if = {
					limit = { any_province_holding = { holding_type = tribal } }
					log = "-----> has at least 1 tribal holding"
				}
				if = {
					limit = { any_province_holding = { holding_type = temple } }
					log = "-----> has at least 1 temple holding"
				}
				if = {
					limit = { any_province_holding = { holding_type = city } }
					log = "-----> has at least 1 city holding"
				}
			}
			save_event_target_as = new_base_title
			FROM = { capital_holding = { save_event_target_as = emf_current_capital } }
			# Change culture and religion of new capital province and possibly more provinces depending on nomad population_and_manpower
			location = {
				show_scope_change = no
				if = {
					limit = { NOT = { culture = FROM } }
					culture = FROM
				}
				if = {
					limit = { NOT = { religion = FROM } }
					religion = FROM
				}
			}
			if = {
				limit = { FROM = { population_and_manpower >= 5000 } }
				custom_tooltip = { text = nomad_settle_conversion_tooltip }
			}
			hidden_tooltip = { # Pre-settlement accounting
				FROM = { character_event = { id = emf_nomad.0 } }
			}
			# Change name of Avaria to Hungary if relevant.
			if = {
				limit = {
					has_random_title_names = no
					FROM = {
						trigger_if = {
							limit = { emf_has_swmh = yes }
							culture = old_hungarian
						}
						trigger_else = {
							culture = hungarian
						}
					}
					location = { kingdom = { title = k_hungary } }
					k_hungary = {
						OR = {
							has_holder = no
							holder = FROM
						}
					}
				}
				set_global_flag = avar_khaganate_renamed
				if = {
					limit = { NOT = { is_title_active = k_hungary } }
					activate_title = { title = k_hungary status = yes }
				}
				k_hungary = {
					reset_coa = THIS
					set_name = ""
					adjective = ""
					grant_title = { target = FROM type = created }
				}
			}
			# Spawn event troops based on amount of empty holdings abandoned.
			custom_tooltip = {
				text = NOMAD_CONVERSION_TROOP_SPAWN
				hidden_tooltip = {
					location = {
						save_event_target_as = emf_new_capital
						FROM = { character_event = { id = emf_nomad.5 } }
						clear_event_target = emf_new_capital
					}
				}
			}
			# Usurp any vassal king titles, plus the county and its duchy
			hidden_effect = {
				# Usurp any non-nomadic vassals' king titles; if can't usurp king title, set them independent and take
				# all their other titles
				FROM = {
					if = {
						limit = {
							any_vassal = {
								tier = KING
								is_nomadic = no
								any_demesne_title = {
									tier = KING
									emf_is_title_type_special = no
								}
							}
						}
						log = "-> usurping kingdoms from non-nomadic vassal(s):"
					}
					any_vassal = {
						limit = {
							tier = KING
							is_nomadic = no
							any_demesne_title = {
								tier = KING
								emf_is_title_type_special = no
							}
						}
						any_demesne_title = {
							limit = {
								tier = KING
								emf_is_title_type_special = no
							}
							log = "---> usurping [This.EMF_GetDebugTitleNameWithDeJureLieges]"
							usurp_title = ROOT_FROM
						}
					}
					if = {
						limit = {
							any_vassal = {
								is_nomadic = no
								tier = KING
							}
						}
						log = "-> [This.GetFirstName] has at least one non-nomadic vassal king (post-usurpation phase)"
					}
				}
				location = {
					kingdom = {
						if = {
							limit = { holder = FROM }
							FROM = {
								any_demesne_title = {
									limit = {
										tier = KING
										NOT = { title = PREVPREV }
										emf_is_title_type_special = no
									}
									emf_destroy_title = yes
								}
							}
						}
					}
					# Usurp/create duchy of target county, if in own realm or no holder
					duchy = {
						if = {
							limit = {
								OR = {
									has_holder = no
									owner_under_FROM = yes
								}
							}
							usurp_title = FROM
						}
					}
				}
				# Usurp the county
				if = {
					limit = { NOT = { holder = FROM } }
					log = "-> usurping the target county, because it was not personally held"
					usurp_title = FROM
				}
			}
			custom_tooltip = { text = TT_BUILD_TRIBAL_HOLDINGS }
			# Switch capital to the new province, creating a tribal holding if necessary
			hidden_effect = {
				log = "-> selecting new capital holding:"
				location = {
					random_province_holding = {
						limit = {
							OR = {
								holding_type = tribal
								AND = {
									holding_type = nomad
									holder = FROM
								}
							}
						}
						preferred_limit = {
							holding_type = nomad
						}
						preferred_limit = {
							holding_type = tribal
							is_capital = yes
						}
						if = {
							limit = { NOT = { holder = FROM } }
							log = "---> usurping holding"
							usurp_title = FROM
						}
						if = {
							limit = { is_capital = no }
							log = "---> making holding county capital"
							make_capital_holding = yes
						}
						save_event_target_as = emf_new_capital_holding
					}
					if = {
						limit = { NOT = { event_target:emf_new_capital_holding = { always = yes } } }
						log = "---> building new tribal holding"
						build_holding = { type = tribal holder = FROM }
						random_province_holding = {
							limit = { holding_type = tribal }
							log = "---> making holding county capital"
							make_capital_holding = yes
							save_event_target_as = emf_new_capital_holding
						}
					}
				}
				event_target:emf_new_capital_holding = {
					if = {
						limit = { holding_type = tribal }
						emf_transfer_nomad_buildings = yes
						log = "---> new capital holding selected: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
						# Actually set new capital holding:
						FROM = { capital = PREV }
						if = {
							limit = { FROM = { capital_holding = { NOT = { title = PREVPREV } } } }
							log = "-----> ERROR: could not set capital to newly-selected holding!"
						}
					}
				}
			}
			FROM = {
				hidden_effect = {
					clr_flag = emf_context_nomadic_to_tribal
					set_flag = emf_context_nomadic_to_tribal
					if = {
						limit = { ai = no }
						chronicle = {
							entry = CHRONICLE_ADOPTED_TRIBALISM
							picture = GFX_evt_tribal_lands
						}
					}
					# Give nomadic vassals the option to settle down as well:
					any_vassal = {
						limit = { is_nomadic = yes }
						character_event = { id = emf_nomad.100 days = 1 }
					}
					# Mark Khaganate title so it can be found in post-settlement code:
					primary_title = { set_flag = emf_settling_khanate }
				}
				# Finally, do the nasty and become a tribe:
				log = "-> setting tribal government type"
				set_government_type = tribal_government
				set_flag = emf_no_law_penalties
				hidden_effect = {
					if = {
						limit = { lower_tier_than = KING }
						event_target:new_base_title = { empire = { save_event_target_as = emf_empire } }
						save_event_target_as = title_name_target
						create_title = {
							tier = KING
							landless = no
							temporary = no
							custom_created = yes
							culture = THIS
							holder = THIS
							name = "TRIBAL_CUSTOM"
							base_title = event_target:new_base_title
							copy_title_laws = yes
						}
						new_title = {
							if = {
								limit = { event_target:emf_empire = { always = yes } }
								de_jure_liege = event_target:emf_empire
							}
							else = {
								de_jure_liege = e_null
							}
							log = "-> created custom kingdom title of [This.EMF_GetDebugTitleNameWithDeJureLieges]"
						}
					}
					if = {
						limit = {
							emf_unreformed_pagan = yes
						}
						primary_title = {
							add_law = tribal_organization_1
							add_law = centralization_0
						}
					}
					else_if = {
						limit = {
							capital_scope = { NOT = { any_province_holding = { holding_type = castle } } }
						}
						primary_title = {
							add_law = tribal_organization_2
							add_law = centralization_1
						}
					}
					else = {
						primary_title = {
							add_law = tribal_organization_3
							add_law = centralization_1
						}
					}
					# Post-settlement effects / adjustments (incl. culture
					# settlement and anti-border-gore measures) ...
					character_event = { id = emf_nomad.1 }
				}
				clr_flag = emf_no_law_penalties
				hidden_effect = {
					# Debugging stuff:
					log = "-> properties immediately after settlement of [From.EMF_GetDebugName]:"
					if = {
						limit = { any_demesne_title = { tier = EMPEROR } }
						log = "---> empire titles:"
						any_demesne_title = {
							limit = { tier = EMPEROR }
							log = "-----> [This.EMF_GetDebugTitleNameWithDeJureLieges]"
						}
					}
					if = {
						limit = { any_demesne_title = { tier = KING } }
						log = "---> kingdom titles:"
						any_demesne_title = {
							limit = { tier = KING }
							log = "-----> [This.EMF_GetDebugTitleNameWithDeJureLieges]"
						}
					}
					capital_holding = {
						log = "---> capital holding: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
						log = "-----> holding type: [This.EMF_GetHoldingType]"
					}
					log = "---> government group: [From.EMF_GetGovernmentGroupName]"
				}
			}
			hidden_effect = {
				any_player = {
					limit = { NOT = { character = FROM } }
					narrative_event = { id = HL.2 }
				}
			}
		}
		ai_will_do = {
			factor = 1

			modifier = {
				factor = 0
				location = {
					NOR = {
						kingdom = { capital_scope = { province = PREVPREV } }
						any_province_holding = { holding_type = nomad }
						any_province_holding = { count = 5 }
					}
				}
			}
			modifier = {
				factor = 0
				location = {
					any_province_holding = { holding_type = nomad }
				}
				# Exclude counties that are not potential de jure kingdom capital counties if those are options
				FROM = {
					any_realm_province = {
						owner = {
							under_PREVPREV = yes
							OR = {
								is_nomadic = no
								character = ROOT_FROM
							}
							OR = {
								is_vassal_or_below_of = ROOT_FROM
								NOT = { any_liege = { is_nomadic = yes } }
							}
						}
						OR = {
							kingdom = { capital_scope = { province = PREVPREV } }
							any_province_holding = { count = 5 }
						}
					}
				}
			}
			modifier = {
				factor = 0
				location = {
					any_province_holding = { count = 5 }
				}
				# Exclude counties that are not potential de jure kingdom capital counties if those are options
				FROM = {
					any_realm_province = {
						owner = {
							under_PREVPREV = yes
							OR = {
								is_nomadic = no
								character = ROOT_FROM
							}
							OR = {
								is_vassal_or_below_of = ROOT_FROM
								NOT = { any_liege = { is_nomadic = yes } }
							}
						}
						kingdom = { capital_scope = { province = PREVPREV } }
						NOT = { county = { title = ROOT } }
					}
				}
			}
			modifier = {
				factor = 0
				FROM = {
					NOT = { num_of_subrealm_castles = 20 }
					population_and_manpower = 5000
				}
			}
			modifier = {
				factor = 0
				FROM = {
					NOT = { num_of_subrealm_castles = 10 }
				}
			}
			modifier = {
				factor = 0
				FROM = {
					OR = {
						ai_ambition = 40
						trait = stubborn
						trait = proud
					}
				}
			}
			modifier = {
				factor = 0
				FROM = {
					NOT = {
						holding_diff = {
							first_type = castle
							first_count_vassals = yes
							second_type = none
							value = 1.5
						}
					}
				}
			}
			modifier = {
				factor = 0
				FROM = {
					OR = {
						has_landed_title = e_mongol_empire
						has_landed_title = e_golden_horde
						has_landed_title = e_chagatai
					}
				}
			}
			modifier = {
				factor = 0
				has_global_flag = emf_magyar_migration_completed
				NOT = { has_global_flag = emf_conquest_hungary_completed }
				FROM = {
					trigger_if = {
						limit = { emf_has_swmh = yes }
						culture = old_hungarian
					}
					trigger_else = {
						culture = hungarian
						religion_group = pagan_group
					}
					capital_scope = { kingdom = { title = k_hungary } }
				}
				emf_alternate_start = no
			}
			modifier = {
				factor = 0
				is_random_world = yes
			}
		}
	}
}
