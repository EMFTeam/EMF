# -*- ck2.decisions -*-

# Targetted decisions are possible vs _all_ other characters and shown are in the Diplomacy View, not the Intrigue View. The taker is in the FROM scope.
#
# filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] ('self' MUST be set for decisions targetting only the taker, the other filter types can be set to lessen CPU load)
# ai_target_filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] (which characters for which the AI evaluates the decision.)
#	court: all characters in the AI's host court, including prisoners, and characters currently away (wards, prisoners, etc)
#	home_court: all characters in the AI's home court, including prisoners, and characters currently away (wards, prisoners, etc)
#	vassals: direct vassal rulers of the AI's employer
#	sub_realm: all characters below the AI's employer
#	realm: all characters in the same top realm as the AI
#	dynasty: all members of the same dynasty
#	rivals: your rivals plus any character you have an opinion modifier with 'crime = yes' set (the same set of characters the 'is_foe' trigger evaluates)
#	all: all living characters (Avoid if possible. VERY CPU-HEAVY!)
#

decisions = {
	emf_debug_show_tags = {
		ai = no
		potential = {
			has_global_flag = emf_debug
			NOT = { has_global_flag = emf_debug_show_tags }
		}
		effect = {
			hidden_effect = {
				generate_tooltip = no
				set_global_flag = emf_debug_show_tags
				any_landed_title = {
					limit = { tier = COUNT }
					set_name = EMF_DEBUG_ID_NAME_COUNTY_TITLE
				}
				any_landed_title = {
					limit = { NOT = { tier = COUNT } }
					set_name = EMF_DEBUG_ID_NAME_OTHER_TITLE
				}
				any_province = {
					limit = { has_owner = yes }
					set_name = EMF_DEBUG_ID_NAME_PROVINCE
				}
				any_province = {
					limit = { has_owner = no }
					set_name = EMF_DEBUG_ID_NAME_PROVINCE_WITHOUT_COUNTY
				}
			}
		}
	}
	emf_debug_hide_tags = {
		is_high_prio = yes
		ai = no
		potential = {
			# if emf_debug_show_tags was invoked, show this decision regardless of whether we're still in dev-mode
			has_global_flag = emf_debug_show_tags
		}
		effect = {
			hidden_effect = {
				generate_tooltip = no
				clr_global_flag = emf_debug_show_tags
				any_province = { set_name = "" }
				any_landed_title = { set_name = "" }
			}
		}
	}
}

targetted_decisions = {
	emf_debug_vassalize = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			is_ruler = yes
			NOT = { vassal_of = FROM }
			lower_tier_than = FROM
		}
		effect = {
			set_defacto_liege = FROM
			emf_liege_change = yes
		}
	}
	emf_debug_make_independent = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			is_ruler = yes
			independent = no
			in_revolt = no
			OR = {
				is_merchant_republic = yes
				is_patrician = no
			}
		}
		effect = {
			set_defacto_liege = THIS
			emf_liege_change = yes
		}
	}
	emf_debug_kill = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
		}
		effect = {
			death = yes
		}
	}
	emf_debug_abdicate = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			is_ruler = yes
		}
		effect = {
			emf_abdicate = yes
		}
	}
	emf_debug_end_wars = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			any_war = {
				OR = {
					any_attacker = { character = ROOT }
					any_defender = { character = ROOT }
				}
			}
		}
		effect = {
			hidden_tooltip = { FROM = { character_event = { id = emf_debug.15 } } }
		}
	}
	emf_debug_lower_vassal_opinion = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			is_playable = yes
			higher_real_tier_than = COUNT
		}
		allow = {
			custom_tooltip = {
				text = emf_debug_ctt_has_playable_vassals
				hidden_tooltip = {
					any_vassal = {
						is_playable = yes
					}
				}
			}
		}
		effect = {
			hidden_tooltip = {
				any_vassal = {
					limit = { is_playable = yes }
					opinion = { who = PREV modifier = opinion_debug_liege_neg25 years = 3 }
				}
			}
		}
	}
	emf_debug_raise_vassal_opinion = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			is_playable = yes
			higher_real_tier_than = COUNT
		}
		allow = {
			custom_tooltip = {
				text = emf_debug_ctt_has_playable_vassals
				hidden_tooltip = {
					any_vassal = {
						is_playable = yes
					}
				}
			}
		}
		effect = {
			hidden_tooltip = {
				any_vassal = {
					limit = { is_playable = yes }
					opinion = { who = PREV modifier = opinion_debug_liege_pos25 years = 3 }
				}
			}
		}
	}
	emf_debug_usurp_all = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			is_ruler = yes
			any_demesne_title = {
				is_landless_type_title = no
			}
		}
		effect = {
			hidden_tooltip = {
				any_demesne_title = {
					limit = {
						higher_tier_than = COUNT
						is_landless_type_title = no
					}
					usurp_title = FROM
				}
				any_demesne_title = {
					limit = { is_landless_type_title = no }
					usurp_title = FROM
				}
			}
		}
	}
	emf_debug_disappear = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			# could allow rulers, but it'd be a whole thing with abdication and the like; might as well use the abdicate
			# debug decision & then this if you want that.
			is_ruler = no
		}
		effect = {
			hidden_effect = {
				# remove family tree / dynasty tree connections
				set_father = 0
				set_mother = 0
				random_character = {
					limit = { dynasty = none }
					ROOT = { dynasty = PREV }
				}
				# make them see God
				death = { death_reason = death_missing }
			}
		}
	}
	emf_debug_divorce = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			is_married = yes
		}
		effect = {
			any_spouse = {
				remove_spouse = ROOT
			}
		}
	}
	emf_debug_spawn_troops = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			is_playable = yes
		}
		effect = {
			hidden_tooltip = {
				FROM = { letter_event = { id = emf_debug.1 } } # Give the decision-taker a few options
			}
		}
	}
	emf_debug_disband_troops = {
		filter = all_including_me
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			has_earmarked_regiments = emf_debug_army
		}
		effect = {
			disband_event_forces = emf_debug_army
		}
	}
}

# Settlement decisions are possible vs _all_ settlements and are shown in the Settlement Diplomacy View, not the Intrigue View. The taker is in the FROM scope.
#
# filter = [capital/owned/vassal_owned/sub_realm_owned/realm_owned/dynasty_owned/all]
# ai_target_filter = [capital/owned/vassal_owned/sub_realm_owned/realm_owned/dynasty_owned/all] (which settlements for which the AI evaluates the decision.)
#	owned: all settlements owned by the AI
#	vassal_owned: all settlements owned by direct vassal rulers of the AI's employer
#	sub_realm_owned: all settlements below the AI's employer
#	realm_owned: all settlements in the same top realm as the AI
#	dynasty_owned: all settlements owned by members of the same dynasty
#	all: all settlements (Avoid if possible. VERY CPU-HEAVY!)
#


settlement_decisions = {
	emf_debug_destroy_settlement = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			has_holder = yes
			NOT = { holding_type = nomad }
			NOT = { holding_type = family_palace }
		}
		allow = {
			OR = {
				NOT = { holder = FROM }
				FROM = {
					any_demesne_title = {
						NOT = { title = ROOT }
						OR = {
							tier = BARON
							is_landless_type_title = yes
						}
					}
				}
			}
		}
		effect = {
			destroy_settlement = ROOT
		}
	}
}


# Title decisions are possible vs _all_ titles and are shown in the Title Diplomacy View, not the Intrigue View. The taker is in the FROM scope.
#
# filter = [capital/primary_title/owned/vassal_owned/sub_realm_owned/realm_owned/dynasty_owned/all]
# ai_target_filter = [capital/primary_title/owned/vassal_owned/sub_realm_owned/realm_owned/dynasty_owned/all] (which titles for which the AI evaluates the decision.)
#	owned: all titles owned by the AI
#	vassal_owned: all titles owned by direct vassal rulers of the AI's employer
#	sub_realm_owned: all titles below the AI's employer
#	realm_owned: all titles in the same top realm as the AI
#	dynasty_owned: all titles owned by members of the same dynasty
#	all: all titles (Avoid if possible. VERY CPU-HEAVY!)
#

title_decisions = {
	emf_debug_gain_under_title = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			higher_tier_than = BARON
			is_titular = no
		}
		effect = {
			if = {
				limit = { tier = COUNT }
				if = {
					limit = { NOT = { holder = FROM } }
					gain_title = FROM
				}
				any_de_jure_vassal_title = {
					limit = { NOT = { holder = FROM } }
					gain_title = FROM
				}
				break = yes
			}
			any_de_jure_vassal_title = {
				limit = { tier = COUNT }
				if = {
					limit = { NOT = { holder = FROM } }
					gain_title = FROM
				}
				any_de_jure_vassal_title = {
					limit = { NOT = { holder = FROM } }
					gain_title = FROM
				}
			}
		}
	}
	emf_debug_usurp_title = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			OR = {
				higher_tier_than = COUNT
				has_holder = yes
			}
			NOT = {
				holder_scope = {
					character = FROM
				}
			}
		}
		effect = {
			usurp_title = FROM
		}
	}
	emf_debug_grant_title = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			holder_scope = {
				NOT = {
					character = FROM
				}
			}
		}
		effect = {
			grant_title = FROM
		}
	}
	emf_debug_destroy_title = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			higher_tier_than = COUNT
			has_holder = yes
		}
		effect = {
			hidden_tooltip = {
				# Try to prevent unnecessary madness
				holder_scope = {
					random_demesne_title = {
						limit = {
							ROOT = { is_primary_holder_title = yes }
							NOT = { title = ROOT }
							tier = ROOT
							temporary = no
						}
						emf_try_to_make_primary_title = yes
					}
					random_demesne_title = {
						limit = {
							ROOT = { is_primary_holder_title = yes }
							NOT = { title = ROOT }
							tier = ROOT
						}
						emf_try_to_make_primary_title = yes
					}
				}
			}
			emf_unsafe_destroy_title = yes
		}
		ai_will_do = {
			factor = 0
		}
	}
	emf_debug_activate_title = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			NOT = { is_title_active = THIS }
		}
		effect = {
			activate_title = { title = THIS status = yes }
		}
	}
	emf_debug_deactivate_title = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			higher_tier_than = COUNT
			has_holder = no
			is_title_active = THIS
		}
		effect = {
			activate_title = { title = THIS status = no }
		}
	}
	## Dynamic De Jure Reassignment ##
	emf_debug_dj_liege_target_title = { # Target this as a de jure liege title
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			higher_tier_than = COUNT
			OR = {
				NOT = { event_target:emf_debug_dj_liege = { tier = THIS } }
				event_target:emf_debug_dj_liege = {
					NOT = { title = ROOT }
				}
			}
		}
		effect = {
			hidden_tooltip = {
				if = {
					limit = { event_target:emf_debug_dj_liege = { always = yes } }
					clear_global_event_target = emf_debug_dj_liege
				}
				ROOT = { save_global_event_target_as = emf_debug_dj_liege }
			}
		}
	}
	emf_debug_dj_liege_untarget_title = { # Stop targeting previously-selected DJLiege title
		is_high_prio = yes
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
			event_target:emf_debug_dj_liege = { tier = THIS }
		}
		potential = {
			event_target:emf_debug_dj_liege = {
				title = ROOT
			}
		}
		effect = {
			hidden_tooltip = { clear_global_event_target = emf_debug_dj_liege }
		}
	}
	emf_debug_dj_liege_vassalize_title = { # Set the de jure liege of this title to the targeted DJLiege title
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
			event_target:emf_debug_dj_liege = { tier = THIS }
		}
		potential = {
			OR = {
				AND = {
					event_target:emf_debug_dj_liege = { tier = EMPEROR }
					tier = KING
				}
				AND = {
					event_target:emf_debug_dj_liege = { tier = KING }
					tier = DUKE
				}
				AND = {
					event_target:emf_debug_dj_liege = { tier = DUKE }
					tier = COUNT
				}
			}
			NOT = { de_jure_liege = event_target:emf_debug_dj_liege }
		}
		effect = {
			hidden_tooltip = { # de_jure_liege auto-tooltips are buggy with event targets
				de_jure_liege = event_target:emf_debug_dj_liege
			}
		}
	}
	emf_debug_claim_title = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			# no "not claimed_by" since event allows changing the type of the claim
		}
		effect = {
			hidden_tooltip = {
				FROM = { letter_event = { id = emf_debug.10 } }
			}
		}
	}
	emf_debug_unclaim_title = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			claimed_by = FROM
		}
		effect = {
			remove_claim = FROM
		}
	}
	emf_debug_claimant_adventure_title = {
		filter = all
		ai = no

		from_potential = {
			has_global_flag = emf_debug
		}
		potential = {
			higher_tier_than = BARON
			has_holder = yes
			is_titular = no
			is_landless_type_title = no
			# Either Duke+ tier or it's their primary title
			OR = {
				higher_tier_than = COUNT
				is_primary_holder_title = yes
			}
			# Title holder must qualify
			holder_scope = {
				independent = yes
				is_landed = yes
				is_theocracy = no
				# Cannot target nomads for their clan title or primary title
				NAND = {
					government = nomadic_government
					OR = {
						clan_title = { title = PREVPREV }
						primary_title = { title = PREVPREV }
					}
				}
				# Cannot target merchant republics unless their capital is not de jure
				OR = {
					is_merchant_republic = no
					NOT = { capital_holding = { de_jure_liege_or_above = PREVPREV } }
				}
			}
		}
		allow = {
			holder_scope = {
				NOR = {
					has_character_modifier = emf_adventurer_target_timer
					has_any_opinion_modifier = opinion_targeted_by_adventurer
				}
			}
		}
		effect = {
			hidden_tooltip = {
				holder_scope = { character_event = { id = emf_debug.5 } }
			}
		}
	}
}
