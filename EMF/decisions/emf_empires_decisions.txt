# -*- ck2.decisions -*-
# Audax Validator EnableCommentMetadata

decisions = {
	emf_create_hre = {
		only_independent = yes
		is_high_prio = yes

		potential = {
			is_playable = yes
			independent = yes
			emf_hiprio_decision_basic_potential = yes
			has_global_flag = charlemagne_hre
			tier = KING
			is_feudal = yes
			OR = {
				religion = catholic
				AND = {
					religion = fraticelli
					is_heretic = no
				}
			}
			e_hre = {
				has_holder = no
			}
			e_hre_french = {
				has_holder = no
			}
			OR = {
				has_landed_title = k_germany
				has_landed_title = k_bavaria
				has_landed_title = k_italy
				has_landed_title = k_lotharingia
			}
		}
		allow = {
			has_landed_title = k_germany
			has_landed_title = k_lotharingia
			has_landed_title = k_italy
			# Peace, adulthood, lack of regency or imprisonment, min. wealth/prestige, etc.
			emf_empires_create_dj_empire_basic_trigger = yes
			OR = {
				realm_size = 320
				AND = {
					realm_size = 220
					emf_not_has_swmh = yes
				}
				AND = {
					realm_size = 120
					primary_title = {
						OR = {
							has_law = crown_authority_3
							has_law = crown_authority_4
						}
					}
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		effect = {
			hidden_tooltip = {
				log = "INFO: emf_create_hre: [Root.GetTitledName] ([Root.GetID]/[Root.PrimaryTitle.GetID]) forming the HRE..."
			}
			clr_global_flag = emf_hre_formed
			set_global_flag = emf_hre_formed
			set_character_flag = emf_context_hre_german_founder
			set_character_flag = emf_context_hre_founder
			
			emf_empires_create_dj_empire_basic_effect = yes

			random_list = {
				40 = {
					modifier = {
						factor = 0
						# TODO: really should put together some comprehensive scripted triggers for
						# whether a character has a "mediocre/crappy," "immoral," "moral,"
						# "special-triggered" or "especially good" nickname so that we can quit w/
						# the brainless WoL way of assigning permanent nicknames essentially every
						# damn time the character does something notable at all -- while being able
						# to preserve particularly important nicknames and replace others coherently
						OR = {
							has_nickname = nick_the_restorer
							has_nickname = nick_the_lawgiver
							has_nickname = nick_the_saint
							has_nickname = nick_the_apostle
							has_nickname = nick_the_magnanimous
						}
					}
					give_nickname = nick_the_great
				}
				30 = { give_nickname = nick_the_restorer }
				30 = { give_nickname = nick_the_lawgiver }
			}

			if = {
				limit = { NOT = { is_title_active = e_hre } }
				activate_title = { title = e_hre status = yes }
			}
			
			set_character_flag = emf_no_law_penalties
			primary_title = {
				e_hre = {
					grant_title = {
						target = ROOT
						type = created
					}
					copy_title_laws = PREV
					if = {
						limit = { ROOT = { ai = yes } }
						add_law = succ_feudal_elective
					}
				}
			}
			clr_character_flag = emf_no_law_penalties

			# Destroy kingdoms that are no longer needed.
			any_demesne_title = {
				limit = {
					tier = KING
					OR = {
						title = k_lotharingia
						title = k_bohemia
						de_jure_liege = e_hre
						AND = {
							ROOT = { ai = yes }
							title = k_italy
						}
						AND = {
							ROOT = { ai = yes }
							title = k_burgundy
						}
					}
				}
				emf_destroy_title_effect = yes
			}

			hidden_tooltip = { recalc_succession = yes }

			# Map-specific de jure adjustments post-formation
			hidden_tooltip = { character_event = { id = emf_core.30 } } # See emf_hre_map.txt & EMF+SWMH version

			hidden_tooltip = { # TODO: Custom tooltip.
				if = {
					limit = { ai = no }
					add_character_modifier = {
						name = emf_cb_mod_dejure_kingdom_claim
						duration = 5475
					}
				}
				if = {
					limit = { ai = yes }
					add_character_modifier = {
						name = emf_cb_mod_dejure_kingdom_claim
						duration = 10950
						inherit = yes
					}
				}
			}
		}
		ai_will_do = {
			factor = 1
		}
	}

	emf_create_french_hre = {
		only_independent = yes
		is_high_prio = yes

		potential = {
			is_playable = yes
			independent = yes
			emf_hiprio_decision_basic_potential = yes
			has_global_flag = charlemagne_hre
			tier = KING
			is_feudal = yes
			OR = {
				religion = catholic
				AND = {
					religion = fraticelli
					is_heretic = no
				}
			}
			e_hre = {
				has_holder = no
			}
			e_hre_french = {
				has_holder = no
			}
			e_france = {
				has_holder = no
			}
			OR = {
				has_landed_title = k_france
				has_landed_title = k_aquitaine
				has_landed_title = k_burgundy
				has_landed_title = k_lotharingia
				has_landed_title = k_italy
			}
		}
		allow = {
			has_landed_title = k_france
			has_landed_title = k_aquitaine
			has_landed_title = k_burgundy
			has_landed_title = k_italy
			# Peace, adulthood, lack of regency or imprisonment, min. wealth/prestige, etc.
			emf_empires_create_dj_empire_basic_trigger = yes
			OR = {
				realm_size = 320
				AND = {
					realm_size = 220
					emf_not_has_swmh = yes
				}
				AND = {
					realm_size = 120
					primary_title = {
						OR = {
							has_law = crown_authority_3
							has_law = crown_authority_4
						}
					}
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		effect = {
			hidden_tooltip = {
				log = "INFO: emf_create_french_hre: [Root.GetTitledName] ([Root.GetID]/[Root.PrimaryTitle.GetID]) forming the HRE..."
			}
			clr_global_flag = emf_hre_formed
			set_global_flag = emf_hre_formed
			set_character_flag = emf_context_hre_french_founder
			set_character_flag = emf_context_hre_founder
			
			emf_empires_create_dj_empire_basic_effect = yes

			random_list = {
				60 = {
					modifier = {
						factor = 0
						# TODO: really should put together some comprehensive scripted triggers for
						# whether a character has a "mediocre/crappy," "immoral," "moral,"
						# "special-triggered" or "especially good" nickname so that we can quit w/
						# the brainless WoL way of assigning permanent nicknames essentially every
						# damn time the character does something notable at all -- while being able
						# to preserve particularly important nicknames and replace others coherently
						OR = {
							has_nickname = nick_the_restorer
							has_nickname = nick_the_lawgiver
							has_nickname = nick_the_saint
							has_nickname = nick_the_apostle
							has_nickname = nick_the_magnanimous
						}
					}
					give_nickname = nick_the_great
				}
				20 = { give_nickname = nick_the_restorer }
				20 = { give_nickname = nick_the_lawgiver }
			}

			if = {
				limit = { NOT = { is_title_active = e_hre_french } }
				activate_title = { title = e_hre_french status = yes }
			}

			set_character_flag = emf_no_law_penalties
			primary_title = {
				e_hre_french = {
					copy_title_history = e_hre
					grant_title = {
						target = ROOT
						type = created
					}
					copy_title_laws = PREV
					if = {
						limit = { ROOT = { ai = yes } }
						add_law = succ_feudal_elective
					}
				}
			}
			clr_character_flag = emf_no_law_penalties

			# Destroy kingdoms that are no longer needed.
			any_demesne_title = {
				limit = {
					tier = KING
					OR = {
						title = k_lotharingia
						title = k_france
						title = k_aquitaine
						title = k_burgundy
						title = k_brittany
						AND = {
							ROOT = { ai = yes }
							title = k_italy
						}
					}
				}
				emf_destroy_title_effect = yes
			}

			hidden_tooltip = { recalc_succession = yes }

			# Map-specific de jure adjustments post-formation
			hidden_tooltip = { character_event = { id = emf_core.31 } }

			hidden_tooltip = { # TODO: Custom tooltip.
				if = {
					limit = { ai = no }
					add_character_modifier = {
						name = emf_cb_mod_dejure_kingdom_claim
						duration = 5475
					}
				}
				if = {
					limit = { ai = yes }
					add_character_modifier = {
						name = emf_cb_mod_dejure_kingdom_claim
						duration = 10950
						inherit = yes
					}
				}
			}
		}
		ai_will_do = {
			factor = 1
		}
	}

	emf_restore_byzantium = {
		only_independent = yes
		is_high_prio = yes

		potential = {
			is_playable = yes
			independent = yes
			c_byzantion = { owner_under_ROOT = yes }
			emf_empires_byz_restorer_potential_trigger = yes
			emf_empires_byz_restoration_potential_trigger = yes
			emf_hiprio_decision_basic_potential = yes
		}
		allow = {
			# Peace, adulthood, lack of regency or imprisonment, min. wealth/prestige, etc.
			emf_empires_create_dj_empire_basic_trigger = yes
			# For Byzantine Empire, require much smaller realm size (120-200 required to form other empires)
			realm_size = 50
			# Must control 100% of the de jure counties of k_byzantium!
			k_byzantium = {
				custom_tooltip = {
					text = emf_empires_ctt_completely_controls_byzantium_counties
					hidden_tooltip = {
						OR = {
							AND = {
								ROOT = { ai = yes }
								d_thrace = {
									emf_ROOT_completely_controls_counties = yes
								}
							}
							AND = {
								ROOT = { ai = no }
								emf_ROOT_completely_controls_counties = yes
							}
						}
					}
				}
			}
			# For Constantinople itself, we require complete holding control, with an exception for Hagia Sophia
			custom_tooltip = {
				text = emf_empires_ctt_completely_controls_constantinople_besides_hagiasophia
				hidden_tooltip = {
					c_byzantion = {
						NOT = {
							any_direct_de_jure_vassal_title = {
								has_holder = yes
								owner_under_ROOT = no
								NOT = { title = b_hagiasophia }
							}
						}
					}
				}
			}
			# For Hagia Sophia, we also require control UNLESS the restorer is Orthodox and Hagia Sophia is
			# controlled by the Ecumenical Patriarchate, whom we'll auto-vassalize upon restoration of the ERE
			# anyway.
			custom_tooltip = {
				text = emf_empires_ctt_hagiasophia_under_ROOT_or_held_by_patriarch_if_orthodox
				hidden_tooltip = {
					b_hagiasophia = {
						OR = {
							owner_under_ROOT = yes
							AND = {
								ROOT = { religion = orthodox }
								owner = { has_landed_title = k_orthodox }
							}
						}
					}
				}
			}
			# Valid culture_group & religion (possibilities for which are expanded if the restorer is a player)
			emf_empires_byz_restorer_culrel_allow_trigger = yes
		}
		revoke_allowed = {
			always = no
		}
		effect = {
			hidden_tooltip = {
				log = "INFO: emf_restore_byzantium: [Root.GetTitledName] ([Root.GetID]/[Root.PrimaryTitle.GetID]) forming the ERE..."
			}
			clr_global_flag = emf_byz_restored
			set_global_flag = emf_byz_restored
			set_character_flag = emf_context_restored_byzantium
			emf_empires_create_dj_empire_basic_effect = yes
			random_list = {
				40 = {
					modifier = {
						factor = 0
						# TODO: really should put together some comprehensive scripted triggers for
						# whether a character has a "mediocre/crappy," "immoral," "moral,"
						# "special-triggered" or "especially good" nickname so that we can quit w/
						# the brainless WoL way of assigning permanent nicknames essentially every
						# damn time the character does something notable at all -- while being able
						# to preserve particularly important nicknames and replace others coherently
						OR = {
							has_nickname = nick_the_restorer
							has_nickname = nick_the_lawgiver
							has_nickname = nick_the_saint
							has_nickname = nick_the_apostle
							has_nickname = nick_the_magnanimous
						}
					}
					give_nickname = nick_the_great
				}
				50 = { give_nickname = nick_the_restorer }
				10 = { give_nickname = nick_the_lawgiver }
			}
			set_character_flag = emf_no_law_penalties
			primary_title = {
				e_byzantium = {
					if = {
						limit = { NOT = { is_title_active = THIS } }
						activate_title = { title = THIS status = yes }
					}
					grant_title = { target = ROOT type = created }
					copy_title_laws = PREV
					if = {
						limit = { PREV = { NOT = { has_law = administration_2 } } }
						add_law = administration_2
					}
					if = {
						limit = {
							PREV = {
								NOR = {
									has_law = crown_authority_2
									has_law = crown_authority_3
									has_law = crown_authority_4
								}
							}
						}
						add_law = crown_authority_2
						if = {
							limit = {
								has_dlc = "Zeus"
								PREV = { NOT = { has_law = ze_revokation_2 } }
							}
							add_law = ze_revokation_2
						}
						if = {
							limit = {
								NOT = { has_dlc = "Zeus" }
								PREV = { NOT = { has_law = revokation_2 } }
							}
							add_law = revokation_2
						}
					}
					# We don't use add_law so that it doesn't consume the lifetime cooldown upon
					# succession law changes, should a player NOT want to be semi-irreversibly forced
					# into primogeniture. Hence, the recalc_succession afterward.
					if = {
						limit = { PREV = { NOT = { has_law = succ_primogeniture } } }
						succession = primogeniture
					}
				}
			}
			clr_character_flag = emf_no_law_penalties
			hidden_tooltip = {
				e_byzantium = { make_primary_title = yes }
			}
			# Destroy any other empires held (only titular are allowed by this decision's `potential`)
			any_demesne_title = {
				limit = {
					tier = EMPEROR
					NOT = { title = e_byzantium }
					is_landless_type_title = no
				}
				emf_destroy_title_effect = yes
			}
			# Destroy any imperial kingdoms which may have formed (or started with, in the case of the "Empires"
			# of Trebizond and Nikaea) in the interim.
			any_demesne_title = {
				limit = {
					tier = KING
					de_jure_liege = e_byzantium
					is_landless_type_title = no
				}
				emf_destroy_title_effect = yes
			}
			# Set AI capital to Constantinople if not already
			if = {
				limit = { ai = yes }
				c_byzantion = {
					if = {
						limit = { NOT = { holder = ROOT } }
						any_direct_de_jure_vassal_title = {
							limit = {
								owner = { is_liege_or_above = ROOT }
								holding_type = castle
							}
							usurp_title = { target = ROOT type = revoke }
						}
						usurp_title = { target = ROOT type = revoke }
					}
					emf_make_location_ROOT_capital_effect = yes
				}
			}
			
			hidden_tooltip = { recalc_succession = yes }
			
			# Should the empire disintegrate again, we want the timer to start over for how long the
			# emf_reclaim_byz_capital CB can be used before expiring.
			clr_global_flag = emf_reclaim_byz_capital_success
			
			# Potentially give Hagia Sophia to our religious head if appropriate and if it's not theirs already,
			# and vassalize the religious head title (if any)
			trigger_switch = {
				on_trigger = religion
				orthodox =    { k_orthodox =    { owner = { save_event_target_as = emf_relhead } } }
				paulician =   { d_paulician =   { owner = { save_event_target_as = emf_relhead } } }
				monothelite = { d_monothelite = { owner = { save_event_target_as = emf_relhead } } }
				iconoclast =  { d_iconoclast =  { owner = { save_event_target_as = emf_relhead } } }
				miaphysite =  { d_miaphysite =  { owner = { save_event_target_as = emf_relhead } } }
				monophysite = { d_monophysite = { owner = { save_event_target_as = emf_relhead } } }
				nestorian =   { d_nestorian =   { owner = { save_event_target_as = emf_relhead } } }
			}
			b_hagiasophia = { owner = { save_event_target_as = emf_temple_owner } }
			if = {
				limit = {
					# The religious head is indeed valid, and no player is liege to them
					event_target:emf_relhead = {
						NOT = { any_liege = { ai = no } }
					}
				}
				if = {
					limit = {
						event_target:emf_temple_owner = {
							OR = {
								under_ROOT = yes
								ai = yes
							}
							NOT = { character = event_target:emf_relhead }
						}
					}
					b_hagiasophia = {
						grant_title_no_opinion = event_target:emf_relhead
						hidden_tooltip = { remove_claim = event_target:emf_temple_owner }
					}
				}
				event_target:emf_relhead = {
					set_defacto_liege = ROOT
					emf_liege_change_effect = yes
				}
			}
			
			# Varangian Guard vassalization, if they have indeed been formed
			d_varangian_guard = {
				if = {
					limit = {
						is_title_active = THIS
						owner = {
							liege = { ai = yes }
						}
					}
					owner = {
						set_defacto_liege = ROOT
						emf_liege_change_effect = yes
					}
				}
			}

			# TODO: Do similar to the de jure kingdom claim as below with temporarily free access to
			# king-tier emf_subjugation.

			hidden_tooltip = { # TODO: Custom tooltip.
				if = {
					limit = { ai = no }
					add_character_modifier = {
						name = emf_cb_mod_dejure_kingdom_claim
						duration = 5475
					}
				}
				if = {
					limit = { ai = yes }
					add_character_modifier = {
						name = emf_cb_mod_dejure_kingdom_claim
						duration = 10950
						inherit = yes
					}
				}
			}
		}
		ai_will_do = {
			factor = 1
		}
	}
	
	emf_create_custom_kingdom = { # form_new_kingdom
		only_independent = yes
		is_high_prio = yes
		potential = {
			ai = no
			is_playable = yes
			independent = yes
			real_tier = DUKE
			is_nomadic = no
			emf_hiprio_decision_basic_potential = yes
			NOT = {
				has_game_rule = {
					name = dynamic_realms
					value = off
				}
			}
		}
		allow = {
			war = no
			is_adult = yes
			prisoner = no
			has_regent = no
			wealth = 800
			prestige = 1000
			realm_size = 35
			num_of_duke_titles = 3
		}
		effect = {
			wealth = -800
			primary_title = {
				save_event_target_as = emf_old_title
				create_title = {
					tier = KING
					landless = no
					temporary = no
					custom_created = yes
					culture = ROOT
					holder = ROOT
					base_title = THIS
					copy_title_laws = yes
				}
				# Validator doesn't yet seem to grok `new_title`, so...
				# Audax Validator "." Ignore_1007
				new_title = { save_event_target_as = emf_new_title }
			}
			chronicle = {
				entry = CHRONICLE_FOUNDED_NEW_KINGDOM_OR_EMPIRE
				portrait = [Root.GetID]
			}
			hidden_tooltip = {
				event_target:emf_old_title = {
					if = {
						limit = { empire = { always = yes } }
						empire = { event_target:emf_new_title = { de_jure_liege = PREV } }
					}
					if = {
						limit = { NOT = { empire = { always = yes } } }
						event_target:emf_new_title = { de_jure_liege = e_null }
					}
				}
				if = {
					limit = { NOT = { has_global_flag = emf_dejure_custom_titles } }
					break = yes
				}
				# TODO: Add de jure vassal duchies recursively to ensure they're all contiguous
				any_title_under = {
					limit = {
						tier = DUKE
						kingdom = { has_holder = no }
						emf_ROOT_completely_controls_counties = yes
					}
					de_jure_liege = event_target:emf_new_title
				}
				any_title_under = {
					limit = {
						tier = COUNT
						location = {
							duchy = {
								kingdom = { has_holder = no }
								NOT = { de_jure_liege = event_target:emf_new_title }
								emf_ROOT_completely_controls_counties = yes
							}
						}
					}
					location = {
						duchy = {
							de_jure_liege = event_target:emf_new_title
						}
					}
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}

	emf_create_custom_empire = {
		only_independent = yes
		is_high_prio = yes
		potential = {
			ai = no
			is_playable = yes
			independent = yes
			real_tier = KING
			is_nomadic = no
			emf_hiprio_decision_basic_potential = yes
			NOT = {
				has_game_rule = {
					name = dynamic_realms
					value = off
				}
			}
		}
		allow = {
			war = no
			is_adult = yes
			prisoner = no
			has_regent = no
			wealth = 1200
			prestige = 4000
			realm_size = 120
			num_of_king_titles = 3
		}
		effect = {
			wealth = -1200
			primary_title = {
				save_event_target_as = emf_old_title
				create_title = {
					tier = EMPEROR
					landless = no
					temporary = no
					custom_created = yes
					culture = ROOT
					holder = ROOT
					base_title = THIS
					copy_title_laws = yes
				}
				# Validator doesn't yet seem to grok `new_title`, so...
				# Audax Validator "." Ignore_1007
				new_title = { save_event_target_as = emf_new_title }
			}
			chronicle = {
				entry = CHRONICLE_FOUNDED_NEW_KINGDOM_OR_EMPIRE
				portrait = [Root.GetID]
			}
			hidden_tooltip = {
				if = {
					limit = { NOT = { has_global_flag = emf_dejure_custom_titles } }
					break = yes
				}
				# TODO: Add de jure vassal kingdoms recursively to ensure they're all contiguous
				any_title_under = {
					limit = {
						tier = KING
						empire = { has_holder = no }
						emf_ROOT_completely_controls_counties = yes
					}
					de_jure_liege = event_target:emf_new_title
				}
				any_title_under = {
					limit = {
						tier = COUNT
						location = {
							kingdom = {
								empire = { has_holder = no }
								NOT = { de_jure_liege = event_target:emf_new_title }
								emf_ROOT_completely_controls_counties = yes
							}
						}
					}
					location = {
						kingdom = {
							de_jure_liege = event_target:emf_new_title
						}
					}
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}
	
	# emf_decline_elective_empire = {
	# 	only_playable = yes
	# 	filter = self
	# 	ai_target_filter = self
		
	# 	from_potential = {
	# 		ai = no
	# 	}
	# 	potential = {
	# 		character = FROM
	# 		is_nomadic = no
	# 		NOR = {
	# 			real_tier = EMPEROR
	# 			has_character_flag = emf_empires_decline_election
	# 		}
	# 		# is a valid candidate for some elective empire
	# 		emf_can_inherit = yes
	# 		OR = {
	# 			# holds a de jure elector title for some empire
	# 			any_demesne_title = {
	# 				higher_tier_than = COUNT
	# 				empire = {
	# 					NOT = { title = e_null }
	# 					has_law = succ_feudal_elective
	# 					succ_law_title = {
	# 						# the gender succession law must match
	# 						OR = {
	# 							has_law = cognatic_succession
	# 							AND = {
	# 								has_law = agnatic_succession
	# 								ROOT = { is_female = no }
	# 							}
	# 							AND = {
	# 								has_law = true_cognatic_succession
	# 								ROOT = { is_female = yes }
	# 							}
	# 						}
	# 					}
	# 				}
	# 			}
	# 			# is vassal to a titular emperor and of sufficient tier (and is thus an elector/candidate)
	# 			AND = {
	# 				higher_real_tier_than = COUNT
	# 				NOR = {
	# 					in_revolt = yes
	# 					top_liege = { in_revolt = yes }
	# 				}
	# 				# NOTE: I'm not sure whether only direct vassals are candidates for titular empires
	# 				# or both duke- and king-tier vassals (potentially indirect, as with the de jure
	# 				# empire case), but I'm going to err on the side of indirect vassal dukes being
	# 				# eligible.
	# 				top_liege = {
	# 					any_demesne_title = {
	# 						tier = EMPEROR
	# 						is_titular = yes
	# 						temporary = no
	# 						has_law = succ_feudal_elective
	# 						succ_law_title = {
	# 							# the gender succession law must match
	# 							OR = {
	# 								has_law = cognatic_succession
	# 								AND = {
	# 									has_law = agnatic_succession
	# 									ROOT = { is_female = no }
	# 								}
	# 								AND = {
	# 									has_law = true_cognatic_succession
	# 									ROOT = { is_female = yes }
	# 								}
	# 							}
	# 						}
	# 					}
	# 				}
	# 			}
	# 			# is, for some reason (IDK), an heir or pretender to an elective empire title (could catch
	# 			# cases potentially not covered)
	# 			any_heir_title = {
	# 				tier = EMPEROR
	# 				has_law = succ_feudal_elective
	# 			}
	# 			any_pretender_title = {
	# 				tier = EMPEROR
	# 				has_law = succ_feudal_elective
	# 			}
	# 		}
	# 	}
	# 	effect = {
	# 		custom_tooltip = { text = WILL_NOT_INHERIT_ANY_ELECTIVE_EMPIRE }
	# 		set_character_flag = emf_empires_decline_election
	# 	}
	# 	ai_will_do = {
	# 		factor = 0
	# 	}
	# }
}

