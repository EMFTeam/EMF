# -*- ck2.council_positions -*-

### This file determines how the ai evaluates the council positions.
# The ai will add all of the ai_selection entries under ai_selection_additive = {} for all of the positions.
# If there's any of the positions with an ai_selection value higher than zero (0) the position with the HIGHEST score will be chosen by that ai.
# If there's no position with an  ai_selection value higher than zero (0) the ai will go through the list of positions in order of the default selection value and pick the first position which fulfill the potential = {} trigger.

### It also determines how a position will vote in the realm interactions the council is allowed to vote in.
# This is determined with a FOR trigger which checks if the voter will vote in favor of a decision.
# If that fails the voter will then go through the AGAINST trigger to see if it will vote against a decision.
# If both those triggers fail the voter will abstain from voting until swayed by the for or against side.

### SCOPES AND SPECIAL TRIGGERS FOR WAR TARGET TRIGGER:
#liege == FROM
#target == FROMFROM

### SCOPES AND SPECIAL TRIGGERS FOR WAR DECLARATION VOTES:
#attacker == FROM
#defender == FROMFROM
#thirdparty == FROMFROMFROM
#thirdparty_title == FROMFROMFROMFROM
#stored_token_trigger = cb_type ### trigger that's available in the FROM or ROOT scope.

malcontent = {
	icon = 2

	potential = { # The player also needs to obey the potential triggers when choosing a position.
		NOT = { trait = horse }
		NOT = { trait = cat }
	}

	default_selection = {
		value = 1

		#additive_modifier = {
		#	value = 1000
		#	trait = envious
		#}
	}

	selection = {
		value = 10
		
		additive_opinion_modifier = { # Adds the opinion from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = -1.2
			
			NOT = { opinion = { who = liege value = -75 } }
		}
		additive_opinion_modifier = { # Adds the opinion from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = -0.9
			
			NOT = { opinion = { who = liege value = -50 } }
		}
		additive_opinion_modifier = { # Adds the opinion from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = -0.6
			
			NOT = { opinion = { who = liege value = -25 } }
		}
		additive_opinion_modifier = { # Adds the opinion from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = -0.3
			
			NOT = { opinion = { who = liege value = 0 } }
		}
		additive_opinion_modifier = { # Adds the opinion from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = -0.1
			
			opinion = { who = liege value = 0 }
		}
		additive_opinion_modifier = { # Adds the opinion from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = -0.2
			
			opinion = { who = liege value = 25 }
		}
		additive_opinion_modifier = { # Adds the opinion from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = -0.3
			
			opinion = { who = liege value = 50 }
		}
		additive_opinion_modifier = { # Adds the opinion from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = -0.4
			
			opinion = { who = liege value = 75 }
		}
		additive_power_diff_modifier = { # Adds the percentage of available troops from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = 0.5
			always = yes
		}
		additive_compared_realm_size_modifier = { # Adds the percentage of realm size from 'ROOT' to 'who' multiplied by factor to the score.
			who = liege
			factor = 0.5
			always = yes
		}
		additive_realm_size_modifier = { 
			factor = 25
			balance = 50
			always = yes
		}
		additive_modifier = {
			value = -5
			ai_ambition <= -30
		}
		additive_modifier = {
			value = -5
			ai_ambition <= -10
		}
		additive_modifier = {
			value = 5
			ai_ambition >= 10
		}
		additive_modifier = {
			value = 5
			ai_ambition >= 30
		}
		additive_modifier = {
			value = 5
			ai_honor <= -10
		}
		additive_modifier = {
			value = -5
			ai_honor >= 10
		}
		additive_modifier = {
			value = 20
			liege = { is_foe = ROOT }
		}
		additive_modifier = {
			value = 10
			liege = {
				NOT = { is_foe = ROOT }
				reverse_has_opinion_modifier = { who = ROOT  modifier = opinion_feuding_family_light }
			}
		}
		additive_modifier = {
			value = 10
			has_focus = focus_intrigue
		}
		additive_modifier = {
			value = 5
			liege = {
				NOT = {
					prestige = 0
				}
			}
		}
		additive_modifier = {
			value = -50
			is_nomadic = yes
			liege = {
				has_character_modifier = greatest_of_khans
			}
		}
	}

	voting_patterns = {
		me_pattern_for
		selfish_pattern_for
		selfish_pattern_against
		lover_pattern_for
		lover_pattern_against
		friend_pattern_for
		friend_pattern_against
		family_pattern_for
		family_pattern_against
		nonloyalist_pattern_for
		nonloyalist_pattern_against
		malcontent_pattern_for
		malcontent_pattern_against
		faction_pattern_for
		faction_pattern_against
		interaction_pattern_for
		interaction_pattern_against
	}
}
