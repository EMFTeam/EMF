## normal scopes(including posttitle scopes) ##
# ROOT = receiver
# FROM = giver
# <no scope change> = attacker or receiver
## title scopes ##
# ROOT = receiver
# FROM = giver
# <no scope change> = thirdparty landed title	
#
# the following effects/triggers exists (example execution order: on_success->on_success_title->on_success_posttitle):
# is_valid, is_valid_title, on_add, on_add_title, on_add_posttitle, on_success, on_success_title, on_success_posttitle, on_fail, on_fail_title, on_fail_posttitle, on_reverse_demand, on_reverse_demand_title, on_reverse_demand_posttitle
#
# Added on_attacker_leader_death, on_defender_leader_death and on_thirdparty_death, which all trigger when corresponding character dies
# These three all have war scopes, which currently has the following scope changes: 
# attacker, defender, thirdparty(only valid if thirdparty character is involved), thirdparty_title(only valid if thirdparty title is involved)
#
# ai_will_do: modifies value AI places on the CB compared to other CBs (default: 1)
# can_use_gui: If otherwise valid, the CB is listed in the Diplo View, but you can't declare war unless 'can_use_gui' is also valid (also shows a trigger tooltip.)


other_claim = {
	name = CB_NAME_CLAIM
	war_name = WAR_NAME_OTHER_CLAIM
	sprite = 2
	truce_days = 1825
	hostile_against_others = yes
	can_ask_to_join_war = yes

	press_claim = yes
	
	can_use_gui = {
		NOT = { has_character_modifier = emf_peace_pledge }
	}
	
	can_use_title = {
		OR = {
			FROM = {
				has_landed_title = PREV
			}
			holder_scope = {
				is_liege_or_above = FROM
			}
		}
		OR = {
			ROOT = { is_female = no }
			AND = {
				NOT = { ROOT = { religion_group = muslim } }
				NOT = { succ_law_title = { has_law = agnatic_succession } }
			}
		}
		
		FROMFROM = {
			religion_group = ROOT
			or = {
				ai = no
				FROM = { ai = no }
				lower_tier_than = emperor
				is_close_relative = ROOT
				is_friend = ROOT
				dynasty = ROOT
				any_spouse = { character = ROOT }
			}
		}
		
		or = { # AI will only press something that will gain it territory, unless target is player
			FROMFROM = { ai = no } # Player pressers can do whatever they want
			and = {
				FROMFROM = {
					primary_title = { higher_tier_than = PREVPREV } # Presser can bind target title
				}
				or = {
					ROOT = { # Claimant is vassal ruler of presser
						is_ruler = yes
						is_liege_or_above = FROMFROM
					}
					FROMFROM = {
						or = {
							any_demesne_title = { # Presser is de jure liege of target title, or...
								de_jure_vassal_or_below = PREVPREV
							}
							dynasty = ROOT # Presser is same dynasty as claimant
						}
					}
				}
			}
			# Don't care if we'll gain territory if the target is a player
			FROM = { ai = no }
			holder_scope = { ai = no }
			any_playable_ruler = { # Player is an ally that can be called into the war
				ai = no
				not = { character = FROM }
				or = {
					and = {
						independent = yes
						FROM = { independent = yes }
					}
					same_liege = FROM
				}
				is_allied_with = FROM
			}
		}

		NOT = {
			any_war = { # when used in title scope, checks all wars for that title
				attacker = {
					character = ROOT
				}
			}
		}
		
		OR = { 
			ROOT = { has_strong_claim = PREV }
			AND = {
				ROOT = { has_weak_claim = PREV }
				OR = {
					is_pretender = yes # Checks vs ROOT character
					holder_scope = { has_regent = yes }
					AND = {
						ROOT = { is_female = no }
						holder_scope = { is_female = yes }
					}
					is_contested = yes # Is already being contested in some form of Claim or Succession War
				}
			}
		}
		
		# Cannot press others' claims for holy orders
		holy_order = no
	}

	is_valid_title = {
		OR = {
			FROM = {
				has_landed_title = PREV
			}
			holder_scope = {
				is_liege_or_above = FROM
			}
		}
		ROOT = { has_claim = PREV }
	}

	on_success = {
		hidden_tooltip = { add_character_modifier = { name = emf_victory_timer duration = 1 hidden = yes } }
		hidden_tooltip = {
			ROOT = {
				opinion = {
					modifier = pressed_my_claim 
					who = PREV
					multiplier = 2
				}
			}
		}
		any_attacker = {
			limit = { character = ROOT }
			participation_scaled_prestige = 100
		}
		any_attacker = {
			limit = { NOT = { character = ROOT } }
			hidden_tooltip = { participation_scaled_prestige = 100 }
		}
		FROM = {
			prestige = -100
		}
	}

	on_success_title = {
	
		hidden_tooltip = {
			ROOT = {
				if = {
					limit = {
						has_nickname = no
						lower_tier_than = PREV
					}
					random = {
						chance = 50
						give_nickname = nick_the_usurper
					}
				}
			}
		}
		
		if = {
			limit = {
				controls_religion = yes
				holder_scope = { 
					OR = {
						religion = catholic
						religion = fraticelli
					}
				}
			}
			holder_scope = {
				abdicate_to = ROOT
			}
			if = {
				limit = {
					FROMFROM = { higher_tier_than = PREV }
				}
				ROOT = { set_defacto_liege = FROMFROM }
			}
		}
		
		if = {
			limit = {
				OR = {
					controls_religion = no
					NOT = { 
						holder_scope = {
							OR = {
								religion = catholic 
								religion = fraticelli 
							}
						}
					}
				}
			}
			
			if = {
				limit = {
					FROMFROM = {
						primary_title = { higher_tier_than = PREVPREV } # Presser can bind target title
					}
					or = {
						ROOT = { # Claimant is vassal ruler of presser
							is_ruler = yes
							is_liege_or_above = FROMFROM
						}
						FROMFROM = {
							or = {
								any_demesne_title = { # Presser is de jure liege of target title, or...
									de_jure_vassal_or_below = PREVPREV
								}
								dynasty = ROOT # Presser is same dynasty as claimant
							}
						}
					}
				}
				# Claimant will stay in presser's realm
				ROOT = { set_character_flag = emf_presser_vassal }
				
				if = {
					limit = {
						ROOT = { # Claimant is vassal ruler of presser
							is_ruler = yes
							is_liege_or_above = FROMFROM
						}
					}
					custom_tooltip = { text = emf_cb_ctt_other_claim_remain_presser_vassal }
				}
				if = {
					limit = {
						not = { # Claimant is not yet a vassal ruler of presser
							ROOT = {
								is_ruler = yes
								is_liege_or_above = FROMFROM
							}
						}
					}
					custom_tooltip = { text = emf_cb_ctt_other_claim_become_presser_vassal }
				}
			}
			
			if = {
				limit = {
					not = {
						and = {
							FROMFROM = {
								primary_title = { higher_tier_than = PREVPREV } # Presser can bind target title
							}
							or = {
								ROOT = { # Claimant is vassal ruler of presser
									is_ruler = yes
									is_liege_or_above = FROMFROM
								}
								FROMFROM = {
									or = {
										any_demesne_title = { # Presser is de jure liege of target title, or...
											de_jure_vassal_or_below = PREVPREV
										}
										dynasty = ROOT # Presser is same dynasty as claimant
									}
								}
							}
						}
					}
				}
				
				custom_tooltip = { text = emf_cb_ctt_other_claim_not_presser_vassal }

				if = {
					limit = {
						holder_scope = {
							liege = {
								not = { character = PREV }
								higher_tier_than = ROOT
							}
						}
					}
					holder_scope = {
						liege = {
							save_event_target_as = emf_cb_new_liege
							custom_tooltip = { text = emf_cb_ctt_other_claim_new_liege }
						}
					}
				}
				
				if = {
					limit = {
						not = {
							holder_scope = {
								liege = {
									not = { character = PREV }
									higher_tier_than = ROOT
								}
							}
						}
						FROM = {
							liege = {
								not = { character = PREV }
							}
						}
					}
					FROM = {
						liege = {
							save_event_target_as = emf_cb_new_liege
							custom_tooltip = { text = emf_cb_ctt_other_claim_new_liege }
						}
					}
				}
			}
			
			usurp_title_plus_barony_if_unlanded = { target = ROOT type = claim }
			
			hidden_tooltip = {
				ROOT = {
					if = {
						limit = {
							has_character_flag = emf_presser_vassal
						}
						if = {
							limit = {
								not = { is_liege_or_above = FROMFROM }
							}
							set_defacto_liege = FROMFROM
						}
					}
					if = {
						limit = {
							not = { has_character_flag = emf_presser_vassal }
						}
						if = {
							limit = { event_target:emf_cb_new_liege = { always = yes } }
							set_defacto_liege = event_target:emf_cb_new_liege
						}
						if = {
							limit = { not = { event_target:emf_cb_new_liege = { always = yes } } }
							set_defacto_liege = ROOT
						}
					}
					clr_character_flag = emf_presser_vassal
					clear_event_target = emf_cb_new_liege
				}
			}
		}
		
		if = {
			limit = {
				higher_tier_than = BARON
				NOT = { culture = ROOT }
			}
			hidden_tooltip = { conquest_culture = ROOT }
		}
	}

	on_fail_title = {
		ROOT = {
			prestige = -100
		}
		FROM = {
			FROM = {
				prestige = -100
			}
		}
		
		any_defender = {
			limit = { character = FROM }
			participation_scaled_prestige = 100
		}
		any_defender = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = { participation_scaled_prestige = 100 }
		}
	}

	on_reverse_demand = {
		hidden_tooltip = { FROM = { add_character_modifier = { name = emf_victory_timer duration = 7 hidden = yes } } }
		prestige = -150
		transfer_scaled_wealth = {
			to = FROM
			value = 4.0
		}
		ROOT = {
			prestige = -150
			imprison = FROM
		}
		any_defender = {
			limit = { character = FROM }
			participation_scaled_prestige = 150
		}
		any_defender = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = { participation_scaled_prestige = 150 }
		}
	}

	on_reverse_demand_title = {
		ROOT = {
			remove_claim = PREV
		}
	}

	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
	
	# ai importance placed on this CB: scope is the targeted title, ROOT is the attacking character, FROM is the defending character
	ai_will_do = { 
		factor = 1
		
		modifier = {
			factor = 10
			FROM = { ai = no }
		}
	}
}
