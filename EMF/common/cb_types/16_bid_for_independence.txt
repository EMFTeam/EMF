## normal scopes(including posttitle scopes) ##
# ROOT = receiver
# FROM = giver
# <no scope change> = attacker or receiver
## title scopes ##
# ROOT = receiver
# FROM = giver
# <no scope change> = thirdparty landed title	
#
# the following effects/triggers exists (example execution order: on_success->on_success_title->on_success_posttitle):
# is_valid, is_valid_title, on_add, on_add_title, on_add_posttitle, on_success, on_success_title, on_success_posttitle, on_fail, on_fail_title, on_fail_posttitle, on_reverse_demand, on_reverse_demand_title, on_reverse_demand_posttitle
#
# Added on_attacker_leader_death, on_defender_leader_death and on_thirdparty_death, which all trigger when corresponding character dies
# These three all have war scopes, which currently has the following scope changes: 
# attacker, defender, thirdparty(only valid if thirdparty character is involved), thirdparty_title(only valid if thirdparty title is involved)
#
# ai_will_do: modifies value AI places on the CB compared to other CBs (default: 1)
# can_use_gui: If otherwise valid, the CB is listed in the Diplo View, but you can't declare war unless 'can_use_gui' is also valid (also shows a trigger tooltip.)


bid_for_independence = {
	name = CB_NAME_INDEPENDENCE
	war_name = WAR_NAME_INDEPENDENCE
	sprite = 12
	truce_days = 3650
	
	is_permanent = yes
	is_independence = yes
	
	can_use_gui = {
		ROOT = { NOT = { has_character_modifier = emf_peace_pledge } }
	}
	
	can_use = {
		ROOT = {
			de_facto_liege = FROM
			higher_tier_than = BARON
			
			OR = {
				is_feudal = yes
				is_tribal = yes
				higher_tier_than = COUNT
			}
			
			mercenary = no
			
			OR = {
				is_nomadic = no
				NOT = {
					clan_opinion = { who = FROM value = 0 }
				}
			}
		}
		
		FROM = {
			NOT = {
				any_war = {
					attacker = {
						character = PREVPREV
					}
					OR = {
						using_cb = bid_for_independence
						using_cb = depose_liege
					}
				}
			}
			
			any_demesne_title = {
				NOT = { lower_tier_than = ROOT }
				temporary = no
			}
			
			in_revolt = no
			liege_before_war = {
				in_revolt = no
				liege_before_war = {
					in_revolt = no
				}
			}
			
			# No independence factions in merchant republics
			NOT = {
				AND = {
					is_merchant_republic = yes
					liege = {
						is_merchant_republic = yes
					}
				}
			}
		}
	}

	is_valid = {
		ROOT = {
			OR = {
				liege = {
					character = PREV # either independent
				}
				liege = { 
					FROM = { 
						is_liege_or_above = PREV # or have shared liege
					}
				}
			}
		}
		FROM = {
			any_demesne_title = {
				NOT = { lower_tier_than = ROOT }
				temporary = no
			}
			in_revolt = no
			liege_before_war = {
				in_revolt = no
				liege_before_war = {
					in_revolt = no
				}
			}
			# No independence factions in merchant republics
			NOT = {
				AND = {
					is_merchant_republic = yes
					liege_before_war = {
						is_merchant_republic = yes
					}
				}
			}
		}
	}

	on_add = {
		log = "CB(bid_for_independence): START: [Root.GetTitledName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
	}

	on_success = {
		log = "CB(bid_for_independence): VICTORY: [Root.GetTitledName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
		emf_cb_victory_effect = yes
	
		if = {
			limit = {
				FROM = {
					independent = no
				}
			}
			FROM = {
				if = {
					limit = {
						in_revolt = yes
					}
					liege_before_war = {
						ROOT = {
							set_defacto_liege = PREV
						}
					}
				}
				if = {
					limit = {
						in_revolt = no
					}
					liege = {
						ROOT = {
							set_defacto_liege = PREV
						}
					}
				}
			}
		}

		if = {
			limit = {
				FROM = {
					independent = yes
				}
			}
			ROOT = {
				set_defacto_liege = ROOT
			}
		}
		
		hidden_tooltip = {
			# EMF: Adjust dynlevy law of prior liege due to lost realm_size
			FROM = { character_event = { id = emf_dynlevy.20 } }
			
			ROOT = {
				prestige = 100
				any_demesne_title = {
					add_pressed_claim = FROM
				}
			}
		}
		
		any_attacker = {
			limit = { character = ROOT }
			participation_scaled_prestige = 100
		}
		any_attacker = {
			limit = { NOT = { character = ROOT } }
			hidden_tooltip = { participation_scaled_prestige = 100 }
		}

		FROM = {
			any_demesne_title = {
				limit = { higher_tier_than = duke }
				if = {
					limit = { has_law = crown_authority_1 }
					add_law = crown_authority_0
				}
				if = {
					limit = { has_law = crown_authority_2 }
					add_law = crown_authority_1
				}
				if = {
					limit = { has_law = crown_authority_3 }
					add_law = crown_authority_2
				}
				if = {
					limit = { has_law = crown_authority_4 }
					add_law = crown_authority_3
				}
			}
		}
	}

	on_fail = {
		log = "CB(bid_for_independence): WHITEPEACE: [Root.GetTitledName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
		ROOT = {
			prestige = -50
		}
		any_attacker = {
			limit = { character = ROOT }
			participation_scaled_prestige = -50
		}
		any_attacker = {
			limit = { NOT = { character = ROOT } }
			hidden_tooltip = { participation_scaled_prestige = -50 }
		}
	}

	on_reverse_demand = {
		log = "CB(bid_for_independence): DEFEAT: [Root.GetTitledName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
		emf_cb_defeat_effect = yes
		ROOT = {
			prestige = -100
			prisoner = FROM
		}
		any_attacker = {
			limit = { character = ROOT }
			participation_scaled_prestige = -100
		}
		any_attacker = {
			limit = { NOT = { character = ROOT } }
			hidden_tooltip = { participation_scaled_prestige = -100 }
		}
		FROM = {
			prestige = 50
		}
	}

	on_attacker_leader_death = {
		hidden_tooltip = {
			any_defender = {
				letter_event = {
					id = 251
				}
			}
		}

		end_war = invalid
	}

	on_invalidation = {
		log = "CB(bid_for_independence): INVALIDATED: [Root.GetTitledName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
	}

	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 150
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
}
