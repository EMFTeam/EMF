## normal scopes(including posttitle scopes) ##
# ROOT = receiver
# FROM = giver
# <no scope change> = attacker or receiver
## title scopes ##
# ROOT = receiver
# FROM = giver
# <no scope change> = thirdparty landed title	
#
# the following effects/triggers exists (example execution order: on_success->on_success_title->on_success_posttitle):
# is_valid, is_valid_title, on_add, on_add_title, on_add_posttitle, on_success, on_success_title, on_success_posttitle, on_fail, on_fail_title, on_fail_posttitle, on_reverse_demand, on_reverse_demand_title, on_reverse_demand_posttitle
#
# Added on_attacker_leader_death, on_defender_leader_death and on_thirdparty_death, which all trigger when corresponding character dies
# These three all have war scopes, which currently has the following scope changes: 
# attacker, defender, thirdparty(only valid if thirdparty character is involved), thirdparty_title(only valid if thirdparty title is involved)
#
# ai_will_do: modifies value AI places on the CB compared to other CBs (default: 1)
# can_use_gui: If otherwise valid, the CB is listed in the Diplo View, but you can't declare war unless 'can_use_gui' is also valid (also shows a trigger tooltip.)


emf_subjugation = {
	name = CB_NAME_EMF_SUBJUGATION
	war_name = WAR_NAME_EMF_SUBJUGATION
	sprite = 16
	truce_days = 1825
	
	is_permanent = yes
	can_ask_to_join_war = yes
	
	# Cannot seem to get even a ROOT = { always = no }
	# can_use_gui to prevent war declaration, even though
	# tooltip shows that the conditions are not met.

	# FIXME: Retry this. Above note was from patch 2.3. Stuff gets fixed.
	
	#can_use_gui = {
	#}
	
	can_use = {
		# BEGIN: what should ideally go in can_use_gui
		ROOT = {
			custom_tooltip = {
				text = emf_cb_ctt_no_peace_pledge_raw
				hidden_tooltip = { not = { has_character_modifier = emf_peace_pledge } }
			}
			religion = FROM
		}
		FROM = {
			or = {
				tier = count
				and = {
					tier = duke
					custom_tooltip = {
						text = emf_cb_ctt_defender_affected_by_your_medium_ca
						hidden_tooltip = {
							crownlaw_title = {
								holder_scope = {
									or = {
										character = ROOT
										is_liege_or_above = ROOT
									}
								}
								or = {
									has_law = crown_authority_2
									has_law = crown_authority_3
									has_law = crown_authority_4
								}
							}
						}
					}
				}
				and = {
					tier = king
					custom_tooltip = {
						text = emf_cb_ctt_defender_affected_by_your_high_ca
						hidden_tooltip = {
							crownlaw_title = {
								holder_scope = {
									or = {
										character = ROOT
										is_liege_or_above = ROOT
									}
								}
								or = {
									has_law = crown_authority_3
									has_law = crown_authority_4
								}
							}
						}
					}
				}
			}
		}  # END: what should ideally go in can_use_gui
		FROM = {
			or = {
				independent = yes
				same_liege = ROOT
			}
			lower_tier_than = ROOT
			primary_title = { is_primary_type_title = no }
			is_landed = yes
			
			# The AI will normally leave merchant republics alone
			or = {
				not = { is_patrician = yes }
				ROOT = { ai = no }
			}
			not = {
				any_demesne_title = {
					temporary = yes
				}
			}
		}
		ROOT = {
			higher_tier_than = count
			or = {
				ai = yes # AI already tends to behave with regard to borders
				any_realm_province = { # Player subrealm must border FROM's subrealm
					any_neighbor_province = {
						owner = {
							or = {
								character = FROM
								is_liege_or_above = FROM
							}
						}
					}
				}
			}
			emf_cb_tribute_block_trigger = no
		}
		FROM = {
			not = { # All of FROM's demesne titles with de jure vassal titles...
				any_demesne_title = {
					higher_tier_than = baron
					is_titular = no
					not = { # ... must ...
						ROOT = {
							any_realm_title = { # ... have at least one title in ROOT's subrealm ...
								de_jure_vassal_or_below = PREVPREV # ... that is its de jure liege (at any tier)
							}
						}
					}
				}
			}
		}
	}
	
	is_valid = {
		FROM = {
			or = {
				independent = yes
				same_liege = ROOT
			}
			lower_tier_than = ROOT
			religion = ROOT
			higher_tier_than = baron
			is_landed = yes
			primary_title = { is_primary_type_title = no }
			not = {
				any_demesne_title = {
					temporary = yes
				}
			}
		}
	}

	on_add = {
		log = "CB(emf_subjugation): START: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
	}

	on_success = {
		log = "CB(emf_subjugation): VICTORY: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"

		emf_cb_victory_effect = yes
		
		if = {
			limit = { FROM = { real_tier = count } }
			any_attacker = {
				limit = { character = ROOT }
				participation_scaled_prestige = 100
			}
			any_attacker = {
				limit = { not = { character = ROOT } }
				hidden_tooltip = { participation_scaled_prestige = 100 }
			}
		}
		if = {
			limit = { FROM = { real_tier = duke } }
			any_attacker = {
				limit = { character = ROOT }
				participation_scaled_prestige = 150
			}
			any_attacker = {
				limit = { not = { character = ROOT } }
				hidden_tooltip = { participation_scaled_prestige = 150 }
			}
		}
		if = {
			limit = { FROM = { real_tier = king } }
			any_attacker = {
				limit = { character = ROOT }
				participation_scaled_prestige = 200
			}
			any_attacker = {
				limit = { not = { character = ROOT } }
				hidden_tooltip = { participation_scaled_prestige = 200 }
			}
		}
		
		FROM = {
			remove_opinion = {
				who = ROOT
				modifier = declared_war
			}
			opinion = {
				who = ROOT
				modifier = opinion_emf_cb_subjugated
				months = 120
			}

			pf_liege_change_begin_effect = yes
			set_defacto_liege = ROOT
			pf_liege_change_end_effect = yes
		}
	}
	
	on_fail = {
		log = "CB(emf_subjugation): WHITEPEACE: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"

		ROOT = {
			if = {
				limit = { FROM = { real_tier = count } }
				prestige = -100
			}
			if = {
				limit = { FROM = { real_tier = duke } }
				prestige = -150
			}
			if = {
				limit = { FROM = { real_tier = king } }
				prestige = -200
			}
		}
	}
	
	on_reverse_demand = {
		log = "CB(emf_subjugation): DEFEAT: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"

		emf_cb_defeat_effect = yes
		
		ROOT = {
			if = {
				limit = { FROM = { real_tier = count } }
				prestige = -200
			}
			if = {
				limit = { FROM = { real_tier = duke } }
				prestige = -300
			}
			if = {
				limit = { FROM = { real_tier = king } }
				prestige = -400
			}
			transfer_scaled_wealth = {
				to = FROM
				value = 4.0
			}
		}
		
		if = {
			limit = { FROM = { real_tier = count } }
			any_defender = {
				limit = { character = FROM }
				participation_scaled_prestige = 100
			}
			any_defender = {
				limit = { not = { character = FROM } }
				hidden_tooltip = { participation_scaled_prestige = 100 }
			}
		}
		if = {
			limit = { FROM = { real_tier = duke } }
			any_defender = {
				limit = { character = FROM }
				participation_scaled_prestige = 150
			}
			any_defender = {
				limit = { not = { character = FROM } }
				hidden_tooltip = { participation_scaled_prestige = 150 }
			}
		}
		if = {
			limit = { FROM = { real_tier = king } }
			any_defender = {
				limit = { character = FROM }
				participation_scaled_prestige = 200
			}
			any_defender = {
				limit = { not = { character = FROM } }
				hidden_tooltip = { participation_scaled_prestige = 200 }
			}
		}
	}

	on_invalidation = {
		log = "CB(emf_subjugation): INVALIDATED: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
	}
	
	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
	
	ai_will_do = {
		factor = 1
		
		 # Prefer to use this CB rather than alternatives
		 # (which likely will usurp titles) when the attacker
		 # and defender have acceptable relations
		modifier = {
			factor = 1.5
			FROM = { opinion = { who = ROOT value = 0 } }
			ROOT = { opinion = { who = FROM value = 0 } }
		}
		modifier = {
			factor = 10
			FROM = { ai = no }
		}
	}
}
