## normal scopes(including posttitle scopes) ##
# ROOT = receiver
# FROM = giver
# <no scope change> = attacker OR receiver
## title scopes ##
# ROOT = receiver
# FROM = giver
# <no scope change> = thirdparty landed title
#
# the following effects/triggers exists (example execution order: on_success->on_success_title->on_success_posttitle):
# is_valid, is_valid_title, on_add, on_add_title, on_add_posttitle, on_success, on_success_title, on_success_posttitle, on_fail, on_fail_title, on_fail_posttitle, on_reverse_demand, on_reverse_demand_title, on_reverse_demand_posttitle
#
# Added on_attacker_leader_death, on_defender_leader_death AND on_thirdparty_death, which all trigger when corresponding character dies
# These three all have war scopes, which currently has the following scope changes:
# attacker, defender, thirdparty(only valid if thirdparty character is involved), thirdparty_title(only valid if thirdparty title is involved)
#
# ai_will_do: modifies value AI places on the CB compared to other CBs (default: 1)
# can_use_gui: If otherwise valid, the CB is listed in the Diplo View, but you can't declare war unless 'can_use_gui' is also valid (also shows a trigger tooltip.)
#

# CB for non-nomads to seize a province from a nomad horde
emf_liberate_nomad_county = {
	name = CB_NAME_LIBERATE_NOMAD
	war_name = WAR_NAME_LIBERATE_NOMAD
	sprite = 8
	truce_days = 1095
	is_permanent = yes
	check_all_titles = yes
	press_claim = yes
	battle_warscore_mult = 1.25
	
	allowed_to_target_tributaries = no
	allowed_to_target_suzerains = no
	
	infamy_modifier = 0.75

	can_use_gui = {
		ROOT = {
			NOT = { has_character_modifier = emf_peace_pledge }
			OR = {
				is_patrician = no
				custom_tooltip = {
					text = emf_mr_ctt_extended_cbs_unlocked
					hidden_tooltip = { has_global_flag = emf_mr_cbs_unlocked }
				}
			}
		}
	}

	can_use = {
		FROM = {
			is_nomadic = yes
		}
		ROOT = {
			is_nomadic = no
			NOT = { pacifist = yes }
			mercenary = no
			NOT = { same_realm = FROM }

			# Prefer pagan_county_conquest
			NAND = {
				religion_group = pagan_group
				NOT = { religion = FROM }
			}
			
			# Prefer emf_pagan_county_conquest_nonholy
			NAND = {
				religion_group = pagan_group
				is_reformed_religion = no
				religion = FROM
			}
			
			# Prefer muslim_county_conquest | emf_muslim_county_conquest_religious
			NOT = { religion_group = muslim }
		}
	}

	can_use_title = {
		tier = count

		OR = {
			FROM = {
				has_landed_title = PREV
			}
			holder_scope = {
				is_liege_or_above = FROM
			}
		}

		location = {
			# No liberation of the Sahara
			NOT = { region = emf_region_sahara }

			# The attacker needs a direct border
			any_neighbor_province = {
				owner = {
					OR = {
						character = ROOT
						is_liege_or_above = ROOT
					}
				}
			}
		}
	}

	is_valid = {
		FROM = {
			is_nomadic = yes
		}
		ROOT = {
			is_nomadic = no
			mercenary = no
			NOT = { same_realm = FROM }
		}
	}

	is_valid_title = {
		OR = {
			FROM = {
				has_landed_title = PREV
			}
			holder_scope = {
				is_liege_or_above = FROM
			}
		}
		location = {
			any_neighbor_province = {
				owner = {
					OR = {
						character = ROOT
						is_liege_or_above = ROOT
					}
				}
			}
		}
	}

	on_add_title = {
		log = "CB(emf_liberate_nomad_county): START: title=[This.GetBaseName]: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
	}

	on_success = {
		emf_cb_victory_effect = yes

		any_attacker = {
			limit = { character = ROOT }
			participation_scaled_prestige = 100
			if = {
				limit = {
					uses_decadence = yes
				}
				participation_scaled_decadence = -5
			}
		}
		any_attacker = {
			limit = { NOT = { character = ROOT } }
			hidden_tooltip = {
				participation_scaled_prestige = 100
				if = {
					limit = {
						uses_decadence = yes
					}
					participation_scaled_decadence = -5
				}
			}
		}

		FROM = { prestige = -200 }
	}

	on_success_title = {
		log = "CB(emf_liberate_nomad_county): VICTORY: title=[This.GetBaseName]: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"

		emf_cb_nomadic_province_effect = yes
		
		pf_liege_change_under_title_begin_effect = yes

		custom_tooltip = {
			text = liberate_nomad_cb_succ_tip
			hidden_tooltip = {
				ROOT = {
					vassalize_or_take_under_title = {
						title = PREV
						enemy = FROM
						anti_nomad = yes # Vassalize non-nomadic rulers
						type = invasion
					}
				}
			}
		}
		
		pf_liege_change_under_title_end_effect = yes

		usurp_title = { target = ROOT type = invasion }
	}

	on_fail = {
		ROOT = {
			prestige = -100
		}
	}

	on_fail_title = {
		log = "CB(emf_liberate_nomad_county): WHITEPEACE: title=[This.GetBaseName]: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
	}

	on_reverse_demand = {
		emf_cb_defeat_effect = yes
		ROOT = {
			transfer_scaled_wealth = {
				to = FROM
				value = 2.0
			}
			prestige = -200
		}
		any_defender = {
			limit = { character = FROM }
			participation_scaled_prestige = 200
			if = {
				limit = {
					uses_decadence = yes
				}
				participation_scaled_decadence = -5
			}
		}
		any_defender = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = {
				participation_scaled_prestige = 200
				if = {
					limit = {
						uses_decadence = yes
					}
					participation_scaled_decadence = -5
				}
			}
		}
	}

	on_reverse_demand_title = {
		log = "CB(emf_liberate_nomad_county): DEFEAT: title=[This.GetBaseName]: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
	}

	on_invalidation = {
		log = "CB(emf_liberate_nomad_county): INVALIDATED: title=[FromFrom.GetID]: [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (ID: [Root.GetID]) vs. [From.GetTitledFirstName] of [From.PrimaryTitle.GetBaseName] (ID: [From.GetID])"
	}

	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}

	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}

	defender_ai_defeat_worth = {
		factor = 100
	}

	ai_will_do = {
		factor = 1

		modifier = {
			factor = 0.1
			ROOT = { is_tribal = no }
			NOT = {
				any_direct_de_jure_vassal_title = {
					has_holder = yes
					OR = {
						holding_type = castle
						holding_type = city
					}
				}
			}
		}
		modifier = {
			factor = 10
			FROM = { ai = no }
		}
	}
}
