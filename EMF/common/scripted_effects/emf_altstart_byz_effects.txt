# -*- ck2.scripted_effects -*-

emf_spawn_byz = {
	random_province = {
		limit = {
			is_capital = yes
			any_province_holding = {
				OR = {
					holding_type = castle
					holding_type = temple
					holding_type = city
					holding_type = tribal
				}
			}
			empire = {
				OR = {
					has_holder = no
					NOR = {
						has_flag = alternate_hre
						has_flag = alternate_byz
					}
				}
			}
			owner = { independent = yes }
		}
		preferred_limit = {
			empire = { has_holder = no }
			owner = {
				is_feudal = yes
				is_adult = yes
			}
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			empire = { has_holder = no }
			owner = { is_feudal = yes }
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			empire = { has_holder = no }
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			empire = { has_holder = no }
			owner = {
				is_feudal = yes
				is_adult = yes
			}
			empire = { emf_title_has_nomadic_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			empire = { has_holder = no }
			owner = { is_feudal = yes }
			empire = { emf_title_has_nomadic_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			empire = { has_holder = no }
			owner = {
				is_feudal = yes
				is_adult = yes
			}
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
		}
		preferred_limit = {
			empire = { has_holder = no }
			owner = { is_feudal = yes }
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
		}
		preferred_limit = {
			empire = { has_holder = no }
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
		}
		preferred_limit = {
			empire = { has_holder = no }
			owner = {
				is_feudal = yes
				is_adult = yes
			}
			empire = { emf_title_has_nomadic_dejure_vassal = no }
		}
		preferred_limit = {
			empire = { has_holder = no }
			owner = { is_feudal = yes }
			empire = { emf_title_has_nomadic_dejure_vassal = no }
		}
		preferred_limit = {
			empire = { has_holder = no }
			empire = { emf_title_has_nomadic_dejure_vassal = no }
		}
		preferred_limit = {
			owner = {
				is_feudal = yes
				is_adult = yes
			}
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			owner = { is_feudal = yes }
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			owner = {
				is_feudal = yes
				is_adult = yes
			}
			empire = { emf_title_has_nomadic_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			owner = { is_feudal = yes }
			empire = { emf_title_has_nomadic_dejure_vassal = no }
			emf_is_far_from_alternate_hre = yes
		}
		preferred_limit = {
			owner = {
				is_feudal = yes
				is_adult = yes
			}
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
		}
		preferred_limit = {
			owner = { is_feudal = yes }
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
		}
		preferred_limit = {
			empire = { emf_title_has_nomadic_or_tribal_dejure_vassal = no }
		}
		preferred_limit = {
			owner = {
				is_feudal = yes
				is_adult = yes
			}
			empire = { emf_title_has_nomadic_dejure_vassal = no }
		}
		preferred_limit = {
			owner = { is_feudal = yes }
			empire = { emf_title_has_nomadic_dejure_vassal = no }
		}
		preferred_limit = {
			empire = { emf_title_has_nomadic_dejure_vassal = no }
		}
		log = "emf_spawn_byz: selected seed county of [This.GetBaseName] ([This.GetID])"
		owner = {
			save_event_target_as = emf_emperor
			log = "emf_spawn_byz: selected emperor candidate of [This.EMF_GetDebugName]"
			log = "--> government type: [This.EMF_GetGovernmentGroupName]"
			emf_altstart_convert_tribal_or_nomadic_to_feudal = yes
			log = "--> government type post-normalization: [This.EMF_GetGovernmentGroupName]"
			capital_holding = {
				log = "--> capital holding: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
				log = "----> holding type: [This.EMF_GetHoldingType]"
			}
		}
		e_byzantium = { save_event_target_as = emf_empire }
		empire = {
			save_event_target_as = emf_replaced_empire
			log = "emf_spawn_byz: replacing the [This.GetFullBaseName] ([This.GetID]) de jure with the [emf_empire.GetFullBaseName] ([emf_empire.GetID])"
			any_direct_de_jure_vassal_title = { de_jure_liege = event_target:emf_empire }
		}
		log = "emf_spawn_byz: marking de jure vassal rulers for de facto vassalization and destroying any obstacles in the way..."
		event_target:emf_empire = {
			any_de_jure_vassal_title = {
				limit = { tier = COUNT }
				owner = {
					top_liege = { # Note that at least one time this will actually be the emperor himself
						# In general, mark rulers with the emf_vassal_tmp flag whom should be vassalized after clearing
						# obstacles to said vassalization:
						set_flag = emf_vassal_tmp
						if = {
							limit = { higher_tier_than = DUKE }
							log = "--> a KING+ ruler is in the way: [This.EMF_GetDebugName]"
							# King-tier vassals that are completely outside the de jure empire should go independent:
							any_vassal = {
								limit = {
									tier = KING
									NOT = { any_realm_province = { de_jure_liege_or_above = event_target:emf_empire } }
								}
								set_defacto_liege = THIS
								log = "----> set fully non-de-jure vassal king independent: [This.EMF_GetDebugName]"
							}
							# Duke-tier vassals that are completely outside the de jure empire should go independent:
							any_vassal = {
								limit = {
									tier = DUKE
									NOT = { any_realm_province = { de_jure_liege_or_above = event_target:emf_empire } }
								}
								set_defacto_liege = THIS
								log = "----> set fully non-de-jure vassal duke independent: [This.EMF_GetDebugName]"
							}
							# Mark intended vassals that will be set independent when we destroy all of this guy's realm's
							# KING and EMPEROR titles:
							any_vassal = {
								limit = { higher_tier_than = BARON }
								set_flag = emf_vassal_tmp
							}
							any_vassal = {
								limit = { tier = KING }
								# Mark intended vassals that would be set independent when we destroy vassal KING titles
								any_vassal = {
									limit = { higher_tier_than = BARON }
									set_flag = emf_vassal_tmp
								}
								log = "----> handling vassal: [This.EMF_GetDebugName]"
								log = "------> government beforehand: [This.EMF_GetGovernmentGroupName]"
								emf_altstart_convert_tribal_or_nomadic_to_feudal = yes # Effect will destroy nomad titles
								any_demesne_title = {
									limit = { tier = KING }
									emf_destroy_title = yes
								}
								log = "------> government afterward: [This.EMF_GetGovernmentGroupName]"
								log = "------> [This.GetSubjectPronoun] is now known as [This.EMF_GetDebugName]"
							}
							# And finish the top liege of this county:
							log = "----> handling the KING+ ruler [This.GetReflexivePronoun]:"
							log = "------> government beforehand: [This.EMF_GetGovernmentGroupName]"
							emf_altstart_convert_tribal_or_nomadic_to_feudal = yes
							any_demesne_title = {
								limit = { higher_tier_than = DUKE }
								emf_destroy_title = yes
							}
							log = "------> government afterward: [This.EMF_GetGovernmentGroupName]"
							log = "------> [This.GetSubjectPronoun] is now known as [This.EMF_GetDebugName]"
						}
					}
				}
			}
			# Create & setup the empire now that it has de jure land & we're ready to vassalize everyone
			copy_title_history = e_null
			grant_title_no_opinion = event_target:emf_emperor
			set_flag = alternate_byz
			set_name = ALT_BYZ
			adjective = ALT_BYZ_ADJ
			set_coa = event_target:emf_replaced_empire
			set_short_name = yes
			emf_make_primary_title = yes
			# Do all of the vassalization in one go:
			log = "emf_spawn_byz: attempting to actually vassalize marked rulers:"
			any_character = {
				limit = { has_flag = emf_vassal_tmp }
				set_defacto_liege = event_target:emf_emperor
				if = {
					limit = { NOT = { vassal_of = event_target:emf_emperor } }
					log = "--> FAILURE: could not vassalize [This.EMF_GetGovernmentGroupName]: [This.EMF_GetDebugName]"
				}
				else = {
					log = "--> [This.EMF_GetDebugName]"
				}
				clr_flag = emf_vassal_tmp
			}
			# Deactivate the empire we replaced if we destroyed it in order to vassalize its holder (or it wasn't held):
			if = {
				limit = { event_target:emf_replaced_empire = { has_holder = no } }
				activate_title = { title = event_target:emf_replaced_empire status = no }
			}
		}
		event_target:emf_emperor = {
			# Eject lords from Alt. Byzantium w/ special titles:
			any_realm_lord = {
				limit = {
					is_patrician = no
					any_demesne_title = {
						OR = {
							is_landless_type_title = yes
							is_primary_type_title = yes
							controls_religion = yes
							mercenary = yes
							holy_order = yes
						}
					}
				}
				any_demesne_title = {
					limit = {
						NOR = {
							is_landless_type_title = yes
							is_primary_type_title = yes
							controls_religion = yes
							mercenary = yes
							holy_order = yes
						}
					}
					grant_title_no_opinion = event_target:emf_emperor
				}
				set_defacto_liege = THIS
			}
			# Alt. Byzantium is maybe-somewhat religiously diverse:
			any_realm_character = {
				limit = { NOT = { religion_group = event_target:emf_emperor } }
				religion = event_target:emf_emperor
			}
			any_realm_province = {
				limit = { NOT = { religion_group = event_target:emf_emperor } }
				religion = event_target:emf_emperor
			}
			# Convert any remaining tribal (or nomadic, but we took care of that prior to vassalization) rulers in realm
			# to the correct variant of feudal for their religion (later we'll move to imperial):
			any_realm_lord = {
				emf_altstart_convert_tribal_or_nomadic_to_feudal = yes
			}
			# Get rid of any extranneous titles that the emperor may have:
			any_demesne_title = {
				limit = {
					higher_tier_than = DUKE
					NOT = { title = event_target:emf_empire }
				}
				emf_destroy_title = yes
			}
			# Add max holdings to capital
			capital_scope = {
				while = {
					limit = { emf_can_add_holding_slot = yes }
					add_holding_slot = 1
				}
				# Ensure we have at least one temple:
				if = {
					limit = {
						has_empty_holding = yes
						NOT = { any_province_holding = { holding_type = temple } }
					}
					build_holding = { type = temple }
					random_province_holding = {
						limit = { holding_type = temple }
						emf_distribute_barony = yes
					}
				}
				# Max out the rest w/ 2:1 random ratio of cities to castles:
				any_province_holding = { set_flag = emf_built_tmp }
				while = {
					limit = { has_empty_holding = yes }
					random_list = {
						2 = { build_holding = { type = city } }
						1 = { build_holding = { type = castle } }
					}
					random_province_holding = {
						limit = { NOT = { has_flag = emf_built_tmp } }
						set_flag = emf_built_tmp
						emf_distribute_barony = yes
					}
				}
				any_province_holding = { clr_flag = emf_built_tmp }
				# Set this province as the empire's de jure capital (FUTURE-TODO: first pick the best province we can
				# from the empire before doing all of this):
				capital_holding = { event_target:emf_empire = { set_preferred_capital = PREV } }
			}
			# If we have an active religious head & he's not landed outside the realm, then try to vassalize him.
			religion_head = {
				if = {
					limit = {
						lower_tier_than = event_target:emf_emperor
						OR = {
							is_landed = no
							same_realm = event_target:emf_emperor
						}
					}
					# If he's unlanded and we have a temple barony in our capital, then give him the temple.
					if = {
						limit = {
							is_landed = no
							event_target:emf_emperor = { capital_scope = { any_province_holding = { holding_type = temple } } }
						}
						event_target:emf_emperor = {
							capital_scope = {
								random_province_holding = {
									limit = { holding_type = temple }
									grant_title_no_opinion = PREVPREVPREV # religion_head
								}
							}
						}
					}
					# Finally, vassalize him:
					set_defacto_liege = event_target:emf_emperor
				}
			}
			# Clear any claims that the emperor may have acquired through granting and such:
			any_claim = { remove_claim = PREV }
			# FUTURE-TODO: Add random strong & weak claims on the empire to cool vassals (favor martial & diplomacy for
			# ERE) and/or relatives of the emperor
		}
		# Setup laws and imperial government:
		event_target:emf_empire = {
			owner = { set_flag = emf_no_law_penalties }
			add_law = crown_authority_2 # Medium CA
			add_law = administration_2 # Imperial Administration (& thus government)
			add_law = centralization_3
			if = {
				limit = {
					has_dlc = Zeus
				}
				add_law = ze_revokation_2 # Free Infidel Revocation
				# Abolished council power:
				add_law = law_voting_power_0
				add_law = war_voting_power_0
				add_law = titles_voting_power_0
				add_law = justice_voting_power_0
			}
			else = {
				add_law = revokation_2 # Free Infidel Revocation (de jure)
			}
			add_law = { law = succ_byzantine_elective opinion_effect = no }
			owner = { clr_flag = emf_no_law_penalties }
		}
		# Finally, the goodies for the emperor himself:
		event_target:emf_emperor = {
			wealth = 1000
			prestige = 1000
			add_trait = born_in_the_purple
			any_child = { add_trait = born_in_the_purple }
			if = {
				limit = { is_female = yes }
				create_bloodline = { type = great_conqueror_female }
				new_bloodline = { set_description = "bloodline_desc_great_conqueror"}
			}
			if = {
				limit = { is_female = no }
				create_bloodline = { type = great_conqueror_male }
				new_bloodline = { set_description = "bloodline_desc_great_conqueror" }
			}
			# Combat & diplomacy traits for an ERE great conqueror
			random_list = {
				2 = { add_trait = trained_warrior }
				3 = { add_trait = skilled_warrior }
				1 = { add_trait = master_warrior }
			}
			random_list = {
				1 = { add_trait = trained_diplomat }
				2 = { add_trait = skilled_diplomat }
				3 = { add_trait = master_diplomat }
			}
		}
	}
	log = "emf_spawn_byz: DONE!"
}
