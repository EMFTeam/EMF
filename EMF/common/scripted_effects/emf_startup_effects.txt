# -*- ck2.scripted_triggers -*-

emf_startup_init_hre = {
	# Mark the HRE exclusive equivalents
	e_hre		 = { set_flag = emf_is_hre }
	e_hre_french = { set_flag = emf_is_hre }
	# Mark the Ottonian HRE precursor kingdoms
	k_france	  = { set_flag = emf_hre_precursor_kingdom }
	k_aquitaine   = { set_flag = emf_hre_precursor_kingdom }
	k_burgundy    = { set_flag = emf_hre_precursor_kingdom }
	k_italy       = { set_flag = emf_hre_precursor_kingdom }
	k_bavaria	  = { set_flag = emf_hre_precursor_kingdom }
	k_germany	  = { set_flag = emf_hre_precursor_kingdom }
	k_lotharingia = { set_flag = emf_hre_precursor_kingdom }
	# Check for an alternate HRE
	random_landed_title = {
		limit = {
			tier = EMPEROR
			has_flag = alternate_hre
		}
		save_global_event_target_as = emf_global_alt_hre
	}
	# Setup the unified global event target for the real HRE
	if = {
		limit = { e_hre = { has_holder = yes } }
		e_hre = { save_global_event_target_as = emf_global_hre }
	}
	else_if = {
		limit = { e_hre_french = { has_holder = yes } }
		e_hre_french = { save_global_event_target_as = emf_global_hre }
	}
}

emf_startup_init_byz = {
	# Check for an alternate Byzantium:
	random_landed_title = {
		limit = {
			tier = EMPEROR
			has_flag = alternate_byz
		}
		save_global_event_target_as = emf_global_alt_byz
	}
	# Setup the unified global event target for the real ERE
	if = {
		limit = { e_byzantium = { has_holder = yes } }
		e_byzantium = { save_global_event_target_as = emf_global_byz }
	}
	else_if = {
		limit = { e_roman_empire = { has_holder = yes } }
		e_roman_empire = { save_global_event_target_as = emf_global_byz }
	}
}

emf_startup_init_marriage = {
	# Set flag on married characters
	any_character = {
		limit = { is_married = yes }
		set_flag = emf_is_married
	}
	# Deal with randomly-applied sterility traits
	any_character = {
		limit = { trait = sterile_secret }
		if = {
			limit = { any_child_even_if_dead = { always = yes } }
			remove_trait = sterile_secret
		}
		else_if = {
			limit = {
				is_married = no
				is_consort = no
				has_lover = no
			}
			set_flag = emf_is_sterile
			remove_trait = sterile_secret
		}
		else = {
			set_flag = emf_was_sterile
		}
	}
}

emf_startup_handle_random_vassal_baron = {
	set_global_flag = emf_exile_to_isis
	if = {
		limit = { has_job_title = job_chancellor }
		PREV = { grant_title = ROOT }
		if = {
			limit = { NOT = { vassal_of = ROOT } }
			move_character = ROOT
		}
		give_job_title = job_chancellor
	}
	else_if = {
		limit = { has_job_title = job_marshal }
		PREV = { grant_title = ROOT }
		if = {
			limit = { NOT = { vassal_of = ROOT } }
			move_character = ROOT
		}
		give_job_title = job_marshal
	}
	else_if = {
		limit = { has_job_title = job_treasurer }
		PREV = { grant_title = ROOT }
		if = {
			limit = { NOT = { vassal_of = ROOT } }
			move_character = ROOT
		}
		give_job_title = job_treasurer
	}
	else_if = {
		limit = { has_job_title = job_spymaster }
		PREV = { grant_title = ROOT }
		if = {
			limit = { NOT = { vassal_of = ROOT } }
			move_character = ROOT
		}
		give_job_title = job_spymaster
	}
	else_if = {
		limit = { has_job_title = job_spiritual }
		PREV = { grant_title = ROOT }
		if = {
			limit = { NOT = { vassal_of = ROOT } }
			move_character = ROOT
		}
		give_job_title = job_spiritual
	}
	else = {
		PREV = { grant_title = ROOT }
		death = { death_reason = death_missing }
	}
	clr_global_flag = emf_exile_to_isis
}

emf_startup_create_daughter = {
	random_list = {
		10 = {
			trigger = {
				age >= 31
			}
			modifier = {
				factor = 0.25
				age >= 60
			}
			modifier = {
				factor = 0.5
				age < 60
				age >= 40
			}
			create_character = {
				random_traits = yes
				age = 16
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			trigger = {
				age >= 32
			}
			modifier = {
				factor = 0.5
				age >= 60
			}
			modifier = {
				factor = 0.75
				age < 60
				age >= 40
			}
			create_character = {
				random_traits = yes
				age = 17
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			trigger = {
				age >= 33
			}
			create_character = {
				random_traits = yes
				age = 18
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			trigger = {
				age >= 34
			}
			create_character = {
				random_traits = yes
				age = 19
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			trigger = {
				age >= 35
			}
			create_character = {
				random_traits = yes
				age = 20
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			trigger = {
				age >= 36
			}
			modifier = {
				factor = 2
				age >= 60
			}
			create_character = {
				random_traits = yes
				age = 21
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			trigger = {
				age >= 37
			}
			modifier = {
				factor = 3
				age >= 60
			}
			create_character = {
				random_traits = yes
				age = 22
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		fallback = {
			log = "ERROR: emf_startup.15: no valid daughter creation option for [Root.GetBestName] (#[Root.GetID]/[Root.PrimaryTitle.GetID])!"
			break = yes
		}
	}
	new_character = {
		log = "INFO: emf_startup.15: [This.GetBestName] (#[This.GetID]) created as extra daughter on startup for [Root.GetBestName] (#[Root.GetID]/[Root.PrimaryTitle.GetID])"
		save_event_target_as = emf_daughter
	}
	event_target:emf_daughter = {
		set_flag = emf_extra_daughter
		if = {
			limit = { ROOT = { is_female = no } }
			set_father = ROOT
		}
		else = {
			set_mother = ROOT
		}
		ROOT = {
			random_spouse = {
				limit = {
					is_older_than = event_target:emf_daughter
					age_diff = { who = event_target:emf_daughter years = 14 }
					is_opposite_sex = PREV # Ya never know.
				}
				save_event_target_as = emf_spouse
			}
		}
		event_target:emf_spouse = {
			if = {
				limit = { is_female = no }
				event_target:emf_daughter = { set_father = PREV }
			}
			else = {
				event_target:emf_daughter = { set_mother = PREV }
			}
		}
	}
	if = { # A twin!
		limit = {
			any_child = {
				NOR = {
					# Not the new daughter:
					character = event_target:emf_daughter
					# Same age exactly:
					is_older_than = event_target:emf_daughter
					event_target:emf_daughter = { is_older_than = PREV }
				}
				# Same parents:
				OR = {
					AND = {
						ROOT = { is_female = no }
						OR = {
							mother = { event_target:emf_daughter = { mother = { character = PREVPREV } } }
							NOR = { # No mom.
								mother = { always = yes }
								event_target:emf_daughter = { mother = { always = yes } }
							}
						}
					}
					AND = {
						ROOT = { is_female = yes }
						OR = {
							father = { event_target:emf_daughter = { father = { character = PREVPREV } } }
							NOR = { # No dad. So sad.
								father = { always = yes }
								event_target:emf_daughter = { father = { always = yes } }
							}
						}
					}
				}
			}
		}
		any_child = {
			limit = {
				# Same age exactly:
				NOR = {
					is_older_than = event_target:emf_daughter
					event_target:emf_daughter = { is_older_than = PREV }
				}
				# Same parents:
				OR = {
					AND = {
						ROOT = { is_female = no }
						OR = {
							mother = { event_target:emf_daughter = { mother = { character = PREVPREV } } }
							NOR = { # No mom.
								mother = { always = yes }
								event_target:emf_daughter = { mother = { always = yes } }
							}
						}
					}
					AND = {
						ROOT = { is_female = yes }
						OR = {
							father = { event_target:emf_daughter = { father = { character = PREVPREV } } }
							NOR = { # No dad. So sad.
								father = { always = yes }
								event_target:emf_daughter = { father = { always = yes } }
							}
						}
					}
				}
			}
			add_trait = twin
			log = "INFO: emf_startup.15: [This.GetBestName] (#[This.GetID]) is a twin as a result of daughter creation!"
		}
	}
	event_target:emf_daughter = {
		if = {
			limit = { emf_religion_has_castes = yes }
			emf_copy_caste_from_ROOT = yes
		}
		emf_new_character = yes
	}
	clear_event_target = emf_spouse
	clear_event_target = emf_daughter
}
