# -*- ck2.scripted_triggers -*-

emf_startup_init_hre = {
	# Mark the HRE exclusive equivalents
	e_hre		 = { set_title_flag = emf_is_hre }
	e_hre_french = { set_title_flag = emf_is_hre }
	# Mark the Ottonian HRE precursor kingdoms
	k_france	  = { set_title_flag = emf_hre_precursor_kingdom }
	k_aquitaine   = { set_title_flag = emf_hre_precursor_kingdom }
	k_burgundy    = { set_title_flag = emf_hre_precursor_kingdom }
	k_italy       = { set_title_flag = emf_hre_precursor_kingdom }
	k_bavaria	  = { set_title_flag = emf_hre_precursor_kingdom }
	k_germany	  = { set_title_flag = emf_hre_precursor_kingdom }
	k_lotharingia = { set_title_flag = emf_hre_precursor_kingdom }
	# Setup the unified global event target for the real HRE
	if = {
		limit = { e_hre = { has_holder = yes } }
		e_hre = { save_global_event_target_as = emf_global_hre }
	}
	else_if = {
		limit = { e_hre_french = { has_holder = yes } }
		e_hre_french = { save_global_event_target_as = emf_global_hre }
	}
}

emf_startup_init_byz = {
	# Setup the unified global event target for the real ERE
	if = {
		limit = { e_byzantium = { has_holder = yes } }
		e_byzantium = { save_global_event_target_as = emf_global_byz }
	}
	else_if = {
		limit = { e_roman_empire = { has_holder = yes } }
		e_roman_empire = { save_global_event_target_as = emf_global_byz }
	}
}

emf_startup_init_marriage = {
	# Set flag on married characters
	any_character = {
		limit = { is_married = yes }
		set_character_flag = emf_is_married
	}
	# Deal with randomly-applied sterility traits
	any_character = {
		limit = { trait = sterile_secret }
		if = {
			limit = { any_child_even_if_dead = { always = yes } }
			remove_trait = sterile_secret
		}
		else_if = {
			limit = {
				is_married = no
				is_consort = no
				has_lover = no
			}
			set_character_flag = emf_is_sterile
			remove_trait = sterile_secret
		}
		else = {
			set_character_flag = emf_was_sterile
		}
	}
}
