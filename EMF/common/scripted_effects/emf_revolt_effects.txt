# -*- ck2.scripted_effects -*-

# what on earth is "emf_revolt_spawn_army_LI6_LC4_A6_P4_scale100" ?
#
# read it as: spawn revolt troop composition of 6:4:6:4 LI:LC:A:P (light_infantry:light_cavalry:archers:pikemen) scaled to
# 125% of biggest garrison size in province ROOT.
#
# all the rebel troop spawn effects follow this convention.
emf_revolt_spawn_army_LI10_LC4_A6_scale100 = {
	emf_revolt_spawn_unit_LI10_LC4_A6_scale100 = yes
	emf_revolt_spawn_peasant_leader_commander = yes
	new_character = {
		emf_new_character_peasant = yes
		emf_revolt_spawn_unit_LI10_LC4_A6_scale100 = yes
	}
	emf_revolt_spawn_peasant_leader_commander = yes
	new_character = {
		emf_new_character_peasant = yes
		emf_revolt_spawn_unit_LI10_LC4_A6_scale100 = yes
	}
}
emf_revolt_spawn_army_LI12_LC2_A6_scale100 = {
	emf_revolt_spawn_unit_LI12_LC2_A6_scale100 = yes
	emf_revolt_spawn_peasant_leader_commander = yes
	new_character = {
		emf_new_character_peasant = yes
		emf_revolt_spawn_unit_LI12_LC2_A6_scale100 = yes
	}
	emf_revolt_spawn_peasant_leader_commander = yes
	new_character = {
		emf_new_character_peasant = yes
		emf_revolt_spawn_unit_LI12_LC2_A6_scale100 = yes
	}
}
emf_revolt_spawn_army_LI14_A6_scale100 = {
	emf_revolt_spawn_unit_LI14_A6_scale100 = yes
	emf_revolt_spawn_peasant_leader_commander = yes
	new_character = {
		emf_new_character_peasant = yes
		emf_revolt_spawn_unit_LI14_A6_scale100 = yes
	}
	emf_revolt_spawn_peasant_leader_commander = yes
	new_character = {
		emf_new_character_peasant = yes
		emf_revolt_spawn_unit_LI14_A6_scale100 = yes
	}
}

emf_revolt_spawn_unit_LI10_LC4_A6_scale100 = {
	save_event_target_as = emf_owner_tmp
	if = {
		limit = { is_ruler = no }
		PREV = { save_event_target_as = emf_owner_tmp }
	}
	spawn_unit = {
		province = ROOT
		home = ROOT
		owner = event_target:emf_owner_tmp
		scaled_by_biggest_garrison = 1.0
		troops = {
			light_infantry = { 10 10 }
			light_cavalry = { 4 4 }
			archers = { 6 6 }
		}
		attrition = 1.0
		disband_on_peace = yes
		cannot_inherit = no
		earmark = emf_revolt
	}
	clear_event_target = emf_owner_tmp
}
emf_revolt_spawn_unit_LI12_LC2_A6_scale100 = {
	save_event_target_as = emf_owner_tmp
	if = {
		limit = { is_ruler = no }
		PREV = { save_event_target_as = emf_owner_tmp }
	}
	spawn_unit = {
		province = ROOT
		home = ROOT
		owner = event_target:emf_owner_tmp
		scaled_by_biggest_garrison = 1.0
		troops = {
			light_infantry = { 12 12 }
			light_cavalry = { 2 2 }
			archers = { 6 6 }
		}
		attrition = 1.0
		disband_on_peace = yes
		cannot_inherit = no
		earmark = emf_revolt
	}
	clear_event_target = emf_owner_tmp
}
emf_revolt_spawn_unit_LI14_A6_scale100 = {
	save_event_target_as = emf_owner_tmp
	if = {
		limit = { is_ruler = no }
		PREV = { save_event_target_as = emf_owner_tmp }
	}
	spawn_unit = {
		province = ROOT
		home = ROOT
		owner = event_target:emf_owner_tmp
		scaled_by_biggest_garrison = 1.0
		troops = {
			light_infantry = { 14 14 }
			archers = { 6 6 }
		}
		attrition = 1.0
		disband_on_peace = yes
		cannot_inherit = no
		earmark = emf_revolt
	}
	clear_event_target = emf_owner_tmp
}

# THIS = province from which to spawn, ROOT = rebel leader
emf_revolt_spawn_post_siege_reinforcements = {
	if = {
		limit = { event_target:emf_revolt_defender = { ai = no } }
		ROOT = {
			spawn_unit = {
				province = PREV
				home = PREV
				owner = THIS
				scaled_by_biggest_garrison = 0.25
				troops = {
					archers = { 5 5 }
					light_infantry = { 7 7 }
					pikemen = { 2 2 }
					light_cavalry = { 1 1 }
				}
				attrition = 1.0
				disband_on_peace = yes
				cannot_inherit = no
				earmark = emf_revolt
			}
		}
	}
}

emf_revolt_spawn_peasant_leader_commander = {
	random_list = {
		20 = { emf_revolt_spawn_peasant_leader_commander_young = yes }
		30 = { emf_revolt_spawn_peasant_leader_commander_mid = yes }
		15 = { emf_revolt_spawn_peasant_leader_commander_old = yes }
	}
}
emf_revolt_spawn_peasant_leader_commander_young = {
	random_list = {
		50 = {
			modifier = {
				factor = 2
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 1.8
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.1
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.01
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = agnatic_succession
								}
							}
						}
					}
				}
			}
			create_character = {
				random_traits = yes
				dynasty = none
				religion = THIS
				culture = THIS
				female = yes
				age = 23
				trait = peasant_leader
				trait = tough_soldier
			}
		}
		50 = {
			modifier = {
				factor = 2
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = agnatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 1.8
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.1
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.01
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_succession
								}
							}
						}
					}
				}
			}
			create_character = {
				random_traits = yes
				dynasty = none
				religion = THIS
				culture = THIS
				female = no
				age = 23
				trait = peasant_leader
				trait = tough_soldier
			}
		}
	}
	new_character = {
		random = { chance = 10 remove_trait = tough_soldier add_trait = skilled_tactician }
		emf_new_character_peasant = yes
	}
}
emf_revolt_spawn_peasant_leader_commander_mid = {
	random_list = {
		50 = {
			modifier = {
				factor = 2
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 1.8
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.1
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.01
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = agnatic_succession
								}
							}
						}
					}
				}
			}
			create_character = {
				random_traits = yes
				dynasty = none
				religion = THIS
				culture = THIS
				female = yes
				age = 32
				trait = peasant_leader
				trait = tough_soldier
			}
		}
		50 = {
			modifier = {
				factor = 2
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = agnatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 1.8
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.1
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.01
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_succession
								}
							}
						}
					}
				}
			}
			create_character = {
				random_traits = yes
				dynasty = none
				religion = THIS
				culture = THIS
				female = no
				age = 32
				trait = peasant_leader
				trait = tough_soldier
			}
		}
	}
	new_character = {
		random = { chance = 15 remove_trait = tough_soldier add_trait = skilled_tactician }
		emf_new_character_peasant = yes
	}
}
emf_revolt_spawn_peasant_leader_commander_old = {
	random_list = {
		50 = {
			modifier = {
				factor = 2
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 1.8
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.1
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.01
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = agnatic_succession
								}
							}
						}
					}
				}
			}
			create_character = {
				random_traits = yes
				dynasty = none
				religion = THIS
				culture = THIS
				female = yes
				age = 50
				trait = peasant_leader
				trait = tough_soldier
			}
		}
		50 = {
			modifier = {
				factor = 2
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = agnatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 1.8
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.1
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_cognatic_succession
								}
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.01
				ROOT = {
					owner = {
						top_liege = {
							primary_title = {
								succ_law_title = {
									has_law = enatic_succession
								}
							}
						}
					}
				}
			}
			create_character = {
				random_traits = yes
				dynasty = none
				religion = THIS
				culture = THIS
				female = no
				age = 50
				trait = peasant_leader
				trait = tough_soldier
			}
		}
	}
	new_character = {
		random = { chance = 20 remove_trait = tough_soldier add_trait = skilled_tactician }
		emf_new_character_peasant = yes
	}
}

# expects intended religion and culture to be stored in event_target:emf_spawn_relcul
emf_spawn_religious_revolt_leader = {
	random_list = {
		20 = {
			modifier = {
				factor = 0
				event_target:emf_spawn_relcul = {
					gender_equality_trigger = no
					NOT = { has_religion_feature = religion_matriarchal }
				}
			}
			create_character = {
				age = 32
				random_traits = yes
				dynasty = none
				religion = event_target:emf_spawn_relcul
				culture = event_target:emf_spawn_relcul
				female = yes
				health = 7
				attributes = {
					martial = 7
					learning = 7
				}
				trait = peasant_leader
			}
			new_character = {
				emf_dna_set_flags_for_high_health = yes
			}
		}
		20 = {
			modifier = {
				factor = 0
				event_target:emf_spawn_relcul = {
					has_religion_feature = religion_matriarchal
				}
			}
			create_character = {
				age = 32
				random_traits = yes
				dynasty = none
				religion = event_target:emf_spawn_relcul
				culture = event_target:emf_spawn_relcul
				female = no
				health = 7
				attributes = {
					martial = 7
					learning = 7
				}
				trait = peasant_leader
			}
			new_character = {
				emf_dna_set_flags_for_high_health = yes
			}
		}
		10 = {
			modifier = {
				factor = 0
				event_target:emf_spawn_relcul = {
					gender_equality_trigger = no
					NOT = { has_religion_feature = religion_matriarchal }
				}
			}
			create_character = {
				age = 42
				random_traits = yes
				dynasty = none
				religion = event_target:emf_spawn_relcul
				culture = event_target:emf_spawn_relcul
				female = yes
				health = 7
				attributes = {
					martial = 7
					learning = 7
				}
				trait = peasant_leader
			}
			new_character = {
				emf_dna_set_flags_for_high_health = yes
			}
		}
		10 = {
			modifier = {
				factor = 0
				event_target:emf_spawn_relcul = {
					has_religion_feature = religion_matriarchal
				}
			}
			create_character = {
				age = 42
				random_traits = yes
				dynasty = none
				religion = event_target:emf_spawn_relcul
				culture = event_target:emf_spawn_relcul
				female = no
				health = 7
				attributes = {
					martial = 7
					learning = 7
				}
				trait = peasant_leader
			}
			new_character = {
				emf_dna_set_flags_for_high_health = yes
			}
		}
		10 = {
			modifier = {
				factor = 0
				event_target:emf_spawn_relcul = {
					gender_equality_trigger = no
					NOT = { has_religion_feature = religion_matriarchal }
				}
			}
			create_character = {
				age = 27
				random_traits = yes
				dynasty = none
				religion = event_target:emf_spawn_relcul
				culture = event_target:emf_spawn_relcul
				female = yes
				health = 7
				attributes = {
					martial = 7
					learning = 7
				}
				trait = peasant_leader
			}
			new_character = {
				emf_dna_set_flags_for_high_health = yes
			}
		}
		10 = {
			modifier = {
				factor = 0
				event_target:emf_spawn_relcul = {
					has_religion_feature = religion_matriarchal
				}
			}
			create_character = {
				age = 27
				random_traits = yes
				dynasty = none
				religion = event_target:emf_spawn_relcul
				culture = event_target:emf_spawn_relcul
				female = no
				health = 7
				attributes = {
					martial = 7
					learning = 7
				}
				trait = peasant_leader
			}
			new_character = {
				emf_dna_set_flags_for_high_health = yes
			}
		}
	}
}

emf_customize_spawned_religious_revolt_leader = {
	emf_remove_education_traits = yes
	random_list = {
		10 = { add_trait = tough_soldier }
		25 = { add_trait = skilled_tactician }
		10 = { add_trait = brilliant_strategist }
		10 = { add_trait = martial_cleric }
		25 = { add_trait = scholarly_theologian }
	}
	emf_remove_leadership_traits = yes
	add_trait = holy_warrior
	if = {
		limit = { NOR = { trait = martial_cleric trait = scholarly_theologian } }
		event_target:emf_revolt_origin = {
			random_list = {
				100 = {
					trigger = { OR = { terrain = plains terrain = farmlands terrain = steppe } }
					ROOT = { add_trait = flat_terrain_leader }
				}
				100 = {
					trigger = { OR = { terrain = forest terrain = hills } }
					ROOT = { add_trait = rough_terrain_leader }
				}
				100 = {
					trigger = { terrain = mountain }
					ROOT = { add_trait = mountain_terrain_leader }
				}
				100 = {
					trigger = { terrain = desert }
					ROOT = { add_trait = desert_terrain_leader }
				}
				100 = {
					trigger = { terrain = jungle }
					ROOT = { add_trait = jungle_terrain_leader }
				}
				1 = { }
			}
		}
	}
	if = {
		limit = {
			OR = {
				trait = brilliant_strategist
				NOT = { event_target:emf_revolt_origin = { always = yes } }
			}
		}
		random_list = {
			10 = { add_trait = inspiring_leader }
			10 = { add_trait = light_foot_leader }
			10 = { add_trait = organizer }
			10 = { add_trait = siege_leader }
			20 = { }
		}
	}
	emf_remove_lifestyle_traits = yes
	random_list = {
		15 = { add_trait = theologian }
		10 = { add_trait = scholar }
		5  = { add_trait = socializer }
		5  = { }
	}
	add_trait = zealous
	remove_trait = craven
	remove_trait = slothful
	random = { chance = 50 add_trait = brave }
	random_list = {
		30 = { }
		10 = { emf_dna_add_trait_quick = yes }
		2 = { emf_dna_add_trait_genius = yes }
	}
	random = {
		chance = 20
		emf_dna_add_trait_strong = yes
		remove_trait = feeble
	}
	emf_new_character_peasant = yes
	# debuff personal combat skill
	if = {
		limit = { trait = poor_warrior }
		remove_trait = poor_warrior
	}
	else_if = {
		limit = { trait = trained_warrior }
		add_trait = poor_warrior
	}
	else_if = {
		limit = { trait = skilled_warrior }
		add_trait = trained_warrior
	}
	else_if = {
		limit = { trait = master_warrior }
		random_list = {
			20 = { add_trait = skilled_warrior }
			10 = { add_trait = trained_warrior }
		}
	}
	add_trait = peasant_leader
	# State for the revolt from here on out:
	set_flag = emf_revolt_religious_leader
	# No marriage until we're done
	set_flag = ai_flag_refuse_marriage
	set_flag = ai_flag_refuse_concubinage
	set_flag = cannot_marry
	will_not_marry_effect = yes
	# No inheritance until we're done
	add_trait = emf_cannot_inherit
	# Don't bug us either
	set_flag = do_not_disturb
}

# THIS = rebel leader, post-victory
emf_revolt_spawn_peasant_ruler_son = {
	random_child = {
		limit = { NOT = { any_sibling = { NOT = { is_older_than = PREV } } } }
		save_event_target_as = emf_revolt_youngest
	}
	if = {
		limit = { is_female = no }
		if = {
			limit = { NOT = { event_target:emf_revolt_youngest = { always = yes } } }
			create_character = {
				random_traits = yes
				age = 6
				female = no
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_father = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 6 } }
			create_character = {
				random_traits = yes
				age = 5
				female = no
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_father = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 5 } }
			create_character = {
				random_traits = yes
				age = 4
				female = no
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_father = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 4 } }
			create_character = {
				random_traits = yes
				age = 3
				female = no
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_father = THIS
			}
		}
		new_character = {
			set_father = PREV
		}
	}
	else = {
		if = {
			limit = { NOT = { event_target:emf_revolt_youngest = { always = yes } } }
			create_character = {
				random_traits = yes
				age = 6
				female = no
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_mother = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 6 } }
			create_character = {
				random_traits = yes
				age = 5
				female = no
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_mother = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 5 } }
			create_character = {
				random_traits = yes
				age = 4
				female = no
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_mother = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 4 } }
			create_character = {
				random_traits = yes
				age = 3
				female = no
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_mother = THIS
			}
		}
		new_character = {
			set_mother = PREV
		}
	}
	new_character = {
		emf_new_character_noble = yes
		log = "----> created [This.GetTitledName] of age [This.GetAgeYears]"
	}
	clear_event_target = emf_revolt_youngest
}

emf_revolt_spawn_peasant_ruler_daughter = {
	random_child = {
		limit = { NOT = { any_sibling = { NOT = { is_older_than = PREV } } } }
		save_event_target_as = emf_revolt_youngest
	}
	if = {
		limit = { is_female = no }
		if = {
			limit = { NOT = { event_target:emf_revolt_youngest = { always = yes } } }
			create_character = {
				random_traits = yes
				age = 6
				female = yes
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_father = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 6 } }
			create_character = {
				random_traits = yes
				age = 5
				female = yes
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_father = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 5 } }
			create_character = {
				random_traits = yes
				age = 4
				female = yes
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_father = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 4 } }
			create_character = {
				random_traits = yes
				age = 3
				female = yes
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_father = THIS
			}
		}
		new_character = {
			set_father = PREV
		}
	}
	else = {
		if = {
			limit = { NOT = { event_target:emf_revolt_youngest = { always = yes } } }
			create_character = {
				random_traits = yes
				age = 6
				female = yes
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_mother = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 6 } }
			create_character = {
				random_traits = yes
				age = 5
				female = yes
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_mother = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 5 } }
			create_character = {
				random_traits = yes
				age = 4
				female = yes
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_mother = THIS
			}
		}
		else_if = {
			limit = { event_target:emf_revolt_youngest = { age == 4 } }
			create_character = {
				random_traits = yes
				age = 3
				female = yes
				religion = THIS
				culture = THIS
				dynasty = THIS
				genetic_mother = THIS
			}
		}
		new_character = {
			set_mother = PREV
		}
	}
	new_character = {
		emf_new_character_noble = yes
		log = "----> created [This.GetTitledName] of age [This.GetAgeYears]"
	}
	clear_event_target = emf_revolt_youngest
}

emf_revolt_religious_cb_cleanup = {
	hidden_tooltip = {
		ROOT = {
			disband_event_forces = emf_revolt
			clr_flag = emf_revolt_religious_leader
			set_flag = emf_revolt_was_religious_leader
			set_variable = { which = "emf_revolt_allowed_allies" value = 0 }
			clr_flag = do_not_disturb
			clr_flag = ai_flag_refuse_marriage
			clr_flag = ai_flag_refuse_concubinage
			clr_flag = cannot_marry
			remove_character_modifier = will_not_marry
			remove_trait = cannot_marry
			remove_trait = emf_cannot_inherit
			if = {
				limit = {
					is_ruler = yes # have a court
					NOT = { any_demesne_title = { NOT = { has_flag = emf_revolt } } } # only have a revolt title, so must not be a CB success case
				}
				any_courtier = {
					limit = { prisoner = yes }
					prisoner = no
				}
				any_courtier = {
					# TODO: since they might have taken on exiles, move people that aren't lowborn to appropriate places instead
					# of "disappearing" them. to review, before we destroy our landless title, we must clear our court.
					if = {
						limit = {
							OR = {
								any_claim = { has_holder = yes }
								any_heir_title = { NOT = { has_flag = emf_revolt } }
								any_pretender_title = { NOT = { has_flag = emf_revolt } }
								any_close_relative = { higher_tier_than = BARON }
								any_spouse = { higher_tier_than = BARON }
							}
						}
						banish = yes
					}
					else = { death = { death_reason = death_missing } }
				}
			}
			any_demesne_title = {
				limit = { has_flag = emf_revolt }
				emf_unsafe_destroy_title = yes
			}
			any_claim = { remove_claim = ROOT }
		}
	}
}

emf_revolt_religious_cb_take_province = {
	hidden_tooltip = {
		log = "----> taking province [This.GetName] (#[This.GetID]/[This.County.GetID])"
		county = {
			ROOT = {
				vassalize_or_take_under_title = {
					title = PREV
					enemy = FROM
					same_religion = yes
					is_religious = yes
					type = revolt
				}
			}
			usurp_title_plus_barony_if_unlanded = { target = ROOT type = revolt }
		}
	}
}

emf_revolt_religious_cb_on_success = {
	ROOT = {
		prestige = 200
		piety = 100
		# TODO: all of this literally shows no tooltip regarding the provinces to be taken; it'd be nice to do
		#	   something about that.
		hidden_tooltip = { occupy_minors_of_occupied_settlements = FROM }
		FROM = {
			# Setup emf_revolt_tmp_claim/capital flags & create a titular duchy
			character_event = { id = emf_revolt.20 }
			log = "--> subjugating or taking claimed provinces:"
			random_realm_province = {
				limit = { has_flag = emf_revolt_tmp_capital }
				emf_revolt_religious_cb_take_province = yes
			}
			while = {
				count = 30 # This has looped infinitely before, and I don't know why.
				limit = {
					any_realm_province = {
						has_flag = emf_revolt_tmp_claim
						owner = {
							under_FROM = yes
							religion = ROOT
							lower_tier_than = ROOT
							in_revolt = no
							OR = {
								is_patrician = no
								is_merchant_republic = yes
							}
							NOT = {
								any_demesne_province = {
									NOT = { has_flag = emf_revolt_tmp_claim }
								}
							}
						}
					}
				}
				random_realm_province = {
					limit = {
						has_flag = emf_revolt_tmp_claim
						owner = {
							under_FROM = yes
							religion = ROOT
							lower_tier_than = ROOT
							in_revolt = no
							OR = {
								is_patrician = no
								is_merchant_republic = yes
							}
							NOT = {
								any_demesne_province = {
									NOT = { has_flag = emf_revolt_tmp_claim }
								}
							}
						}
					}
					owner = {
						log = "----> subjugating [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
						emf_ROOT_subjugate_ruler = yes
						if = {
							limit = { NOT = { vassal_of = ROOT } }
							log = "------> ASSERT: failed to vassalize [This.GetHerHim]: taking all their provinces instead..."
							any_demesne_province = { emf_revolt_religious_cb_take_province = yes }
						}
						else = { any_demesne_province = { clr_flag = emf_revolt_tmp_claim } }
					}
				}
			}
			any_realm_province = {
				limit = { has_flag = emf_revolt_tmp_claim }
				emf_revolt_religious_cb_take_province = yes
			}
		}
		# Setup the newly-acquired titles/vassals and realm
		hidden_tooltip = { character_event = { id = emf_revolt.25 } }
		any_realm_province = { clear_flags_with_prefix = emf_revolt_tmp }
		emf_check_adventurer_government = yes
	}
	FROM = {
		opinion = { who = ROOT modifier = opinion_rightful_subjugation }
		prestige = -500
		piety = -250
		religion_authority = { modifier = lost_religious_revolt }
		any_realm_province = { clear_flags_with_prefix = emf_revolt_tmp }
	}
}

emf_revolt_fill_realm_source_province_targets = {
	random_realm_province = {
		limit = {
			has_flag = emf_revolt_tmp_source
			province = event_target:emf_revolt_origin
		}
		save_event_target_as = emf_revolt_prov1
	}
	if = {
		limit = { NOT = { event_target:emf_revolt_prov1 = { always = yes } } }
		random_realm_province = {
			limit = {
				has_flag = emf_revolt_tmp_source
			}
			save_event_target_as = emf_revolt_prov1
		}
	}
	random_realm_province = {
		limit = {
			has_flag = emf_revolt_tmp_source
			NOT = { province = event_target:emf_revolt_prov1 }
		}
		save_event_target_as = emf_revolt_prov2
	}
	random_realm_province = {
		limit = {
			has_flag = emf_revolt_tmp_source
			NOR = {
				province = event_target:emf_revolt_prov1
				province = event_target:emf_revolt_prov2
			}
		}
		save_event_target_as = emf_revolt_prov3
	}
	random_realm_province = {
		limit = {
			has_flag = emf_revolt_tmp_source
			NOR = {
				province = event_target:emf_revolt_prov1
				province = event_target:emf_revolt_prov2
				province = event_target:emf_revolt_prov3
			}
		}
		save_event_target_as = emf_revolt_prov4
	}
	random_realm_province = {
		limit = {
			has_flag = emf_revolt_tmp_source
			NOR = {
				province = event_target:emf_revolt_prov1
				province = event_target:emf_revolt_prov2
				province = event_target:emf_revolt_prov3
				province = event_target:emf_revolt_prov4
			}
		}
		save_event_target_as = emf_revolt_prov5
	}
	random_realm_province = {
		limit = {
			has_flag = emf_revolt_tmp_source
			NOR = {
				province = event_target:emf_revolt_prov1
				province = event_target:emf_revolt_prov2
				province = event_target:emf_revolt_prov3
				province = event_target:emf_revolt_prov4
				province = event_target:emf_revolt_prov5
			}
		}
		save_event_target_as = emf_revolt_prov6
	}
	random_realm_province = {
		limit = {
			has_flag = emf_revolt_tmp_source
			NOR = {
				province = event_target:emf_revolt_prov1
				province = event_target:emf_revolt_prov2
				province = event_target:emf_revolt_prov3
				province = event_target:emf_revolt_prov4
				province = event_target:emf_revolt_prov5
				province = event_target:emf_revolt_prov6
			}
		}
		save_event_target_as = emf_revolt_prov7
	}
	random_realm_province = {
		limit = {
			has_flag = emf_revolt_tmp_source
			NOR = {
				province = event_target:emf_revolt_prov1
				province = event_target:emf_revolt_prov2
				province = event_target:emf_revolt_prov3
				province = event_target:emf_revolt_prov4
				province = event_target:emf_revolt_prov5
				province = event_target:emf_revolt_prov6
				province = event_target:emf_revolt_prov7
			}
		}
		save_event_target_as = emf_revolt_prov8
	}
	random_realm_province = {
		limit = {
			has_flag = emf_revolt_tmp_source
			NOR = {
				province = event_target:emf_revolt_prov1
				province = event_target:emf_revolt_prov2
				province = event_target:emf_revolt_prov3
				province = event_target:emf_revolt_prov4
				province = event_target:emf_revolt_prov5
				province = event_target:emf_revolt_prov6
				province = event_target:emf_revolt_prov7
				province = event_target:emf_revolt_prov8
			}
		}
		save_event_target_as = emf_revolt_prov9
	}
}

emf_revolt_clear_source_province_targets = {
	clear_event_target = emf_revolt_prov1
	clear_event_target = emf_revolt_prov2
	clear_event_target = emf_revolt_prov3
	clear_event_target = emf_revolt_prov4
	clear_event_target = emf_revolt_prov5
	clear_event_target = emf_revolt_prov6
	clear_event_target = emf_revolt_prov7
	clear_event_target = emf_revolt_prov8
	clear_event_target = emf_revolt_prov9
}
