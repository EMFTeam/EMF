
# Scripted effects for PlusFaction, prefixed by 'pf_'

## FACTION MOOD INCREASE/DECREASE ##
# Handy quick-effects for basic faction mood plus/minus outcomes. These are
# primarily used by CBs, and they only cover convenient increments/decrements
# of faction mood (actual increase/decrease is noted in each effect's name).
# Ideally, all faction mood increase/decrease effects used in Plus and EMF can
# be centralized here eventually (for conformity, convenience, and also ease
# in changing tooltips or other implementation details).

# Court
pf_court_plus2_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_court } }
		custom_tooltip = { text = COURTFACTIONMOODPLUS }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_court }
				change_variable = { which = "faction_mood_increase" value = 2 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}
pf_court_minus2_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_court } }
		custom_tooltip = { text = COURTFACTIONMOODMINUS }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_court }
				change_variable = { which = "faction_mood_decrease" value = 2 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}

# Prosperity
pf_prosperity_plus2_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_prosperity } }
		custom_tooltip = { text = PROSPERITYFACTIONMOODPLUS }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_prosperity }
				change_variable = { which = "faction_mood_increase" value = 2 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}
pf_prosperity_minus2_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_prosperity } }
		custom_tooltip = { text = PROSPERITYFACTIONMOODMINUS }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_prosperity }
				change_variable = { which = "faction_mood_decrease" value = 2 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}
pf_prosperity_plus4_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_prosperity } }
		custom_tooltip = { text = PROSPERITYFACTIONMOODPLUS }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_prosperity }
				change_variable = { which = "faction_mood_increase" value = 4 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}
pf_prosperity_minus4_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_prosperity } }
		custom_tooltip = { text = PROSPERITYFACTIONMOODMINUS }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_prosperity }
				change_variable = { which = "faction_mood_decrease" value = 4 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}

# Glory
pf_glory_plus2_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_glory } }
		custom_tooltip = { text = GLORYFACTIONMOODPLUS_NONAME }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_glory }
				change_variable = { which = "faction_mood_increase" value = 2 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}
pf_glory_minus2_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_glory } }
		custom_tooltip = { text = GLORYFACTIONMOODMINUS }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_glory }
				change_variable = { which = "faction_mood_decrease" value = 2 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}

# Traditon
pf_tradition_plus4_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_tradition } }
		custom_tooltip = { text = TRADITIONFACTIONMOODPLUS }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_tradition }
				change_variable = { which = "faction_mood_increase" value = 4 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}
pf_tradition_minus4_effect = {
	if = {
		limit = { any_vassal = { leads_faction = faction_tradition } }
		custom_tooltip = { text = TRADITIONFACTIONMOODMINUS }
		hidden_tooltip = {
			random_vassal = {
				limit = { leads_faction = faction_tradition }
				change_variable = { which = "faction_mood_decrease" value = 4 }
			}
			character_event = { id = PlusFaction.200 days = 1 }
		}
	}
}


## FACTION INTERNALS ##
# These are mostly used internal to the PlusFaction code to reduce redundancy
# and centralize some logic for easier modification later.

pf_clear_supporter_flags_effect = {
	clr_character_flag = faction_court_supporter
	clr_character_flag = faction_prosperity_supporter
	clr_character_flag = faction_glory_supporter
	clr_character_flag = faction_tradition_supporter
}

pf_clear_succession_flags_effect = {
	if = {
		limit = { has_character_flag = demands_seniority }
		FROM = {
			random_demesne_title = {
				limit = { has_title_flag = change_seniority }
				clr_title_flag = change_seniority
			}
		}
	}
	if = {
		limit = { has_character_flag = demands_primogeniture }
		FROM = {
			random_demesne_title = {
				limit = { has_title_flag = change_primogeniture }
				clr_title_flag = change_primogeniture
			}
		}
	}
	if = {
		limit = { has_character_flag = demands_gavelkind }
		FROM = {
			random_demesne_title = {
				limit = { has_title_flag = change_gavelkind }
				clr_title_flag = change_gavelkind
			}
		}
	}
	if = {
		limit = { has_character_flag = demands_feudal_elective }
		FROM = {
			random_demesne_title = {
				limit = { has_title_flag = change_feudal_elective }
				clr_title_flag = change_feudal_elective
			}
		}
	}
}

pf_clear_war_flags_effect = {
	clr_character_flag = faction_court_war
	clr_character_flag = faction_prosperity_war
	clr_character_flag = faction_glory_war
	clr_character_flag = faction_tradition_war
	clr_character_flag = faction_pretender_war
	clr_character_flag = faction_separatist_war
	clr_character_flag = faction_religious_war
	clr_character_flag = faction_succession_war
	clr_character_flag = faction_authority_war
}

pf_clear_demands_flags_effect = {
	clr_character_flag = demands_lower_CA
	clr_character_flag = demands_lower_TO
	clr_character_flag = demands_surrender_title
	clr_character_flag = demands_share_wealth
	clr_character_flag = demands_revert_succession
	clr_character_flag = demands_council_life_terms
	clr_character_flag = demands_lower_feudal_obligations
	clr_character_flag = demands_lower_tribal_obligations
	clr_character_flag = demands_lower_city_obligations
	clr_character_flag = demands_lower_temple_obligations
	clr_character_flag = demands_seniority
	clr_character_flag = demands_primogeniture
	clr_character_flag = demands_gavelkind
	clr_character_flag = demands_feudal_elective
}

pf_reset_maintenance_vars_effect = {
	set_variable = { which = "faction_votes_court" value = 0 }
	set_variable = { which = "faction_votes_prosperity" value = 0 }
	set_variable = { which = "faction_votes_glory" value = 0 }
	set_variable = { which = "faction_votes_tradition" value = 0 }
	set_variable = { which = "faction_mood_court" value = 0 }
	set_variable = { which = "faction_mood_prosperity" value = 0 }
	set_variable = { which = "faction_mood_glory" value = 0 }
	set_variable = { which = "faction_mood_tradition" value = 0 }
}

# called within faction leader scope, votes *in favor* for the leader himself
pf_leader_vote_effect = {
	hidden_tooltip = {
		if = {
			limit = { real_tier = BARON }
			change_variable = { which = "faction_votes" value = 1 }
		}
		if = {
			limit = { real_tier = COUNT }
			change_variable = { which = "faction_votes" value = 2 }
		}
		if = {
			limit = { real_tier = DUKE }
			change_variable = { which = "faction_votes" value = 4 }
		}
		if = {
			limit = { real_tier = KING }
			change_variable = { which = "faction_votes" value = 8 }
		}
	}
}

# PREV scope is faction leader scope, THIS is a faction backer, THIS votes *in favor*
pf_member_vote_effect = {
	hidden_tooltip = {
		if = {
			limit = { real_tier = BARON }
			PREV = { change_variable = { which = "faction_votes" value = 1 } }
		}
		if = {
			limit = { real_tier = COUNT }
			PREV = { change_variable = { which = "faction_votes" value = 2 } }
		}
		if = {
			limit = { real_tier = DUKE }
			PREV = { change_variable = { which = "faction_votes" value = 4 } }
		}
		if = {
			limit = { real_tier = KING }
			PREV = { change_variable = { which = "faction_votes" value = 8 } }
		}
		reverse_remove_opinion = {
			who = PREV
			modifier = opinion_opposed_in_meeting
		}
		reverse_remove_opinion = {
			who = PREV
			modifier = opinion_supported_in_meeting
		}
	}
}

# PREV scope is faction leader scope, THIS is a faction backer, THIS votes *against*
pf_member_vote_against_effect = {
	hidden_tooltip = {
		if = {
			limit = { real_tier = BARON }
			PREV = { change_variable = { which = "faction_votes" value = -1 } }
		}
		if = {
			limit = { real_tier = COUNT }
			PREV = { change_variable = { which = "faction_votes" value = -2 } }
		}
		if = {
			limit = { real_tier = DUKE }
			PREV = { change_variable = { which = "faction_votes" value = -4 } }
		}
		if = {
			limit = { real_tier = KING }
			PREV = { change_variable = { which = "faction_votes" value = -8 } }
		}
		reverse_remove_opinion = {
			who = PREV
			modifier = opinion_opposed_in_meeting
		}
		reverse_remove_opinion = {
			who = PREV
			modifier = opinion_supported_in_meeting
		}
	}
}

## OTHER EFFECTS ##

pf_save_old_gender_law_effect = {
	if = {
		limit = {
			is_primary_holder_title = yes
			higher_tier_than = count
		}
		clr_title_flag = former_cognatic_succession
		clr_title_flag = former_agnatic_succession
		clr_title_flag = former_true_cognatic_succession
		if = {
			limit = { has_law = cognatic_succession }
			set_title_flag = former_cognatic_succession
		}
		if = {
			limit = { has_law = agnatic_succession }
			set_title_flag = former_agnatic_succession
		}
		if = {
			limit = { has_law = true_cognatic_succession }
			set_title_flag = former_true_cognatic_succession
		}
	}
}

pf_save_old_succ_law_effect = {
	if = {
		limit = {
			is_primary_holder_title = yes
			higher_tier_than = count
		}
		clr_title_flag = former_gavelkind
		clr_title_flag = former_seniority
		clr_title_flag = former_primogeniture
		clr_title_flag = former_feudal_elective
		clr_title_flag = former_tanistry
		clr_title_flag = former_ultimogeniture
		if = {
			limit = { has_law = succ_gavelkind }
			set_title_flag = former_gavelkind
		}
		if = {
			limit = { has_law = succ_seniority }
			set_title_flag = former_seniority
		}
		if = {
			limit = { has_law = succ_primogeniture }
			set_title_flag = former_primogeniture
		}
		if = {
			limit = { has_law = succ_feudal_elective }
			set_title_flag = former_feudal_elective
		}
		if = {
			limit = { has_law = succ_tanistry }
			set_title_flag = former_tanistry
		}
		if = {
			limit = { has_law = succ_ultimogeniture }
			set_title_flag = former_ultimogeniture
		}
	}
}

## FACTION DEMAND EFFECTS ##

# THIS is the title upon which to revert succession (generally a primary_title)
pf_revert_succession_law_effect = {
	if = {
		limit = {
			has_title_flag = former_gavelkind
			NOT = { has_law = succ_gavelkind }
			is_law_potential = succ_gavelkind
		}
		clr_title_flag = former_gavelkind
		add_law = succ_gavelkind
	}
	if = {
		limit = {
			has_title_flag = former_seniority
			NOT = { has_law = succ_seniority }
			is_law_potential = succ_seniority
		}
		clr_title_flag = former_seniority
		add_law = succ_seniority
	}
	if = {
		limit = {
			has_title_flag = former_primogeniture
			NOT = { has_law = succ_primogeniture }
			is_law_potential = succ_primogeniture
		}
		clr_title_flag = former_primogeniture
		add_law = succ_primogeniture
	}
	if = {
		limit = {
			has_title_flag = former_feudal_elective
			NOT = { has_law = succ_feudal_elective }
			is_law_potential = succ_feudal_elective
		}
		clr_title_flag = former_feudal_elective
		add_law = succ_feudal_elective
	}
	if = {
		limit = {
			has_title_flag = former_tanistry
			NOT = { has_law = succ_tanistry }
			is_law_potential = succ_tanistry
		}
		clr_title_flag = former_tanistry
		add_law = succ_tanistry
	}
	if = {
		limit = {
			has_title_flag = former_ultimogeniture
			NOT = { has_law = succ_ultimogeniture }
			is_law_potential = succ_ultimogeniture
		}
		clr_title_flag = former_ultimogeniture
		add_law = succ_ultimogeniture
	}
	if = {
		limit = {
			has_title_flag = former_cognatic_succession
			NOT = { has_law = cognatic_succession }
			emf_laws_cognatic_potential_trigger = yes
		}
		clr_title_flag = former_cognatic_succession
		add_law = cognatic_succession
	}
	if = {
		limit = {
			has_title_flag = former_agnatic_succession
			NOT = { has_law = agnatic_succession }
		}
		clr_title_flag = former_agnatic_succession
		add_law = agnatic_succession
	}
	if = {
		limit = {
			has_title_flag = former_true_cognatic_succession
			NOT = { has_law = true_cognatic_succession }
			emf_laws_cognatic_potential_trigger = yes
		}
		clr_title_flag = former_true_cognatic_succession
		add_law = true_cognatic_succession
	}
}

pf_lower_feudal_obligations_effect = {
	primary_title = {
		if = {
			limit = { has_law = feudal_obligations_1 }
			add_law_w_cooldown = feudal_obligations_0
		}
		if = {
			limit = { has_law = feudal_obligations_2 }
			add_law_w_cooldown = feudal_obligations_1
		}
		if = {
			limit = { has_law = feudal_obligations_3 }
			add_law_w_cooldown = feudal_obligations_2
		}
		if = {
			limit = { has_law = feudal_obligations_4 }
			add_law_w_cooldown = feudal_obligations_3
		}
		if = {
			limit = { has_law = iqta_obligations_1 }
			add_law_w_cooldown = iqta_obligations_0
		}
		if = {
			limit = { has_law = iqta_obligations_2 }
			add_law_w_cooldown = iqta_obligations_1
		}
		if = {
			limit = { has_law = iqta_obligations_3 }
			add_law_w_cooldown = iqta_obligations_2
		}
		if = {
			limit = { has_law = iqta_obligations_4 }
			add_law_w_cooldown = iqta_obligations_3
		}
	}
}

pf_lower_tribal_obligations_effect = {
	primary_title = {
		if = {
			limit = { has_law = tribal_obligations_1 }
			add_law_w_cooldown = tribal_obligations_0
		}
		if = {
			limit = { has_law = tribal_obligations_2 }
			add_law_w_cooldown = tribal_obligations_1
		}
		if = {
			limit = { has_law = tribal_obligations_3 }
			add_law_w_cooldown = tribal_obligations_2
		}
		if = {
			limit = { has_law = tribal_obligations_4 }
			add_law_w_cooldown = tribal_obligations_3
		}
	}
}

pf_lower_city_obligations_effect = {
	primary_title = {
		if = {
			limit = { has_law = city_obligations_1 }
			add_law_w_cooldown = city_obligations_0
		}
		if = {
			limit = { has_law = city_obligations_2 }
			add_law_w_cooldown = city_obligations_1
		}
		if = {
			limit = { has_law = city_obligations_3 }
			add_law_w_cooldown = city_obligations_2
		}
		if = {
			limit = { has_law = city_obligations_4 }
			add_law_w_cooldown = city_obligations_3
		}
	}
}

pf_lower_temple_obligations_effect = {
	primary_title = {
		if = {
			limit = { has_law = temple_obligations_1 }
			add_law_w_cooldown = temple_obligations_0
		}
		if = {
			limit = { has_law = temple_obligations_2 }
			add_law_w_cooldown = temple_obligations_1
		}
		if = {
			limit = { has_law = temple_obligations_3 }
			add_law_w_cooldown = temple_obligations_2
		}
		if = {
			limit = { has_law = temple_obligations_4 }
			add_law_w_cooldown = temple_obligations_3
		}
	}
}

pf_lower_TO_effect = {
	primary_title = {
		if = {
			limit = {
				OR = {
					has_law = tribal_organization_1
					has_law = tribal_organization_2
					has_law = tribal_organization_3
					has_law = tribal_organization_4
				}
			}
			custom_tooltip = {
				text = TO_LOWERED_NO_NAME
				hidden_tooltip = {
					if = {
						limit = { has_law = tribal_organization_1 }
						add_law_w_cooldown = tribal_organization_0
					}
					if = {
						limit = { has_law = tribal_organization_2 }
						add_law_w_cooldown = tribal_organization_1
					}
					if = {
						limit = { has_law = tribal_organization_3 }
						add_law_w_cooldown = tribal_organization_2
					}
					if = {
						limit = { has_law = tribal_organization_4 }
						add_law_w_cooldown = tribal_organization_3
					}
				}
			}
		}
	}
}

pf_lower_CA_effect = {
	any_demesne_title = {
		limit = {
			higher_tier_than = duke
			OR = {
				has_law = crown_authority_1
				has_law = crown_authority_2
				has_law = crown_authority_3
				has_law = crown_authority_4
			}
		}
		custom_tooltip = {
			text = CA_LOWERED_NO_NAME
			hidden_tooltip = {
				if = {
					limit = { has_law = crown_authority_1 }
					add_law = crown_authority_0
				}
				if = {
					limit = { has_law = crown_authority_2 }
					add_law = crown_authority_1
				}
				if = {
					limit = { has_law = crown_authority_3 }
					add_law = crown_authority_2
				}
				if = {
					limit = { has_law = crown_authority_4 }
					add_law = crown_authority_3
				}
			}
		}
	}
}


## CIVIL WAR SUPPORT CODE ##

pf_inherit_war_flags_effect = {
	# War type
	if = {
		limit = { has_character_flag = faction_court_war }
		current_heir = { set_character_flag = faction_court_war }
	}
	if = {
		limit = { has_character_flag = faction_prosperity_war }
		current_heir = { set_character_flag = faction_prosperity_war }
	}
	if = {
		limit = { has_character_flag = faction_glory_war }
		current_heir = { set_character_flag = faction_glory_war }
	}
	if = {
		limit = { has_character_flag = faction_tradition_war }
		current_heir = { set_character_flag = faction_tradition_war }
	}
	if = {
		limit = { has_character_flag = faction_separatist_war }
		current_heir = { set_character_flag = faction_separatist_war }
	}
	if = {
		limit = { has_character_flag = faction_pretender_war }
		current_heir = { set_character_flag = faction_pretender_war }
	}
	if = {
		limit = { has_character_flag = faction_religious_war }
		current_heir = { set_character_flag = faction_religious_war }
	}
	if = {
		limit = { has_character_flag = faction_succession_war }
		current_heir = { set_character_flag = faction_succession_war }
	}
	if = {
		limit = { has_character_flag = faction_authority_war }
		current_heir = { set_character_flag = faction_authority_war }
	}
	# Demands
	if = {
		limit = { has_character_flag = demands_lower_CA }
		current_heir = { set_character_flag = demands_lower_CA }
	}
	if = {
		limit = { has_character_flag = demands_lower_TO }
		current_heir = { set_character_flag = demands_lower_TO }
	}
	if = {
		limit = { has_character_flag = demands_tax_privilege }
		current_heir = { set_character_flag = demands_tax_privilege }
	}
	if = {
		limit = { has_character_flag = demands_levy_privilege }
		current_heir = { set_character_flag = demands_levy_privilege }
	}
	if = {
		limit = { has_character_flag = demands_surrender_title }
		current_heir = { set_character_flag = demands_surrender_title }
	}
	if = {
		limit = { has_character_flag = demands_share_wealth }
		current_heir = { set_character_flag = demands_share_wealth }
	}
	if = {
		limit = { has_character_flag = demands_revert_succession }
		current_heir = { set_character_flag = demands_revert_succession }
	}
	if = {
		limit = { has_character_flag = demands_council_life_terms }
		current_heir = { set_character_flag = demands_council_life_terms }
	}
	if = {
		limit = { has_character_flag = demands_lower_feudal_obligations }
		current_heir = { set_character_flag = demands_lower_feudal_obligations }
	}
	if = {
		limit = { has_character_flag = demands_lower_tribal_obligations }
		current_heir = { set_character_flag = demands_lower_tribal_obligations }
	}
	if = {
		limit = { has_character_flag = demands_lower_city_obligations }
		current_heir = { set_character_flag = demands_lower_city_obligations }
	}
	if = {
		limit = { has_character_flag = demands_lower_temple_obligations }
		current_heir = { set_character_flag = demands_lower_temple_obligations }
	}
	if = {
		limit = { has_character_flag = demands_seniority }
		current_heir = { set_character_flag = demands_seniority }
	}
	if = {
		limit = { has_character_flag = demands_primogeniture }
		current_heir = { set_character_flag = demands_primogeniture }
	}
	if = {
		limit = { has_character_flag = demands_gavelkind }
		current_heir = { set_character_flag = demands_gavelkind }
	}
	if = {
		limit = { has_character_flag = demands_feudal_elective }
		current_heir = { set_character_flag = demands_feudal_elective }
	}
}

pf_setup_rebel_effect = {
	add_trait = rebel
	hidden_tooltip = {
		liege = {
			if = {
				limit = {
					has_opinion_modifier = { who = PREV modifier = neutral_civil_war }
				}
				remove_opinion = { who = PREV modifier = neutral_civil_war }
			}
			if = {
				limit = {
					has_opinion_modifier = { who = PREV modifier = supported_civil_war }
				}
				remove_opinion = { who = PREV modifier = supported_civil_war }
			}
			if = {
				limit = {
					NOT = { has_opinion_modifier = { who = PREV modifier = revolting_against_me } }
				}
				opinion = { who = PREV modifier = revolting_against_me }
			}
			if = {
				limit = {
					NOT = { reverse_has_opinion_modifier = { who = PREV modifier = revolting_against } }
				}
				reverse_opinion = { who = PREV modifier = revolting_against }
			}
		}
		event_target:pf_attacker = {
			if = {
				limit = {
					NOR = {
						character = PREV
						reverse_has_opinion_modifier = { who = PREV modifier = revolting_for }
					}
				}
				reverse_opinion = { who = PREV modifier = revolting_for }
			}
		}
	}
}

pf_teardown_rebel_effect = {
	remove_trait = rebel
	hidden_tooltip = {
		random_opinion_modifier_target = { # Pre-revolt liege
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = revolting_against } }
			reverse_remove_opinion = { who = PREV modifier = revolting_against }
			remove_opinion = { who = PREV modifier = revolting_against_me }
		}
		random_opinion_modifier_target = { # Revolt leader
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = revolting_for } }
			reverse_remove_opinion = { who = PREV modifier = revolting_for }
		}
	}
}


pf_clear_previous_civil_war_opinions_effect = {
	hidden_tooltip = {
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_civil_war_loser } }
			reverse_remove_opinion = { who = PREV modifier = opinion_civil_war_loser }
		}
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = supported_civil_war } }
			reverse_remove_opinion = { who = PREV modifier = supported_civil_war }
		}
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = neutral_civil_war } }
			reverse_remove_opinion = { who = PREV modifier = neutral_civil_war }
		}
	}
}


# ROOT=THIS is the victorious side after a civil war
pf_civil_war_cleanup_effect = {
	hidden_tooltip = {
		FROM = {
			any_opinion_modifier_target = {
				limit = { pf_part_of_this_revolt_trigger = yes }
				remove_trait = rebel

				random_opinion_modifier_target = {
					limit = { reverse_has_opinion_modifier = { who = PREV modifier = revolting_for } }
					reverse_remove_opinion = { who = PREV modifier = revolting_for }
					reverse_remove_opinion = { who = PREV modifier = opinion_rebel_leader } # When it's not already gone
				}

				random_opinion_modifier_target = {
					limit = { reverse_has_opinion_modifier = { who = PREV modifier = revolting_against } }
					
					remove_opinion = { who = PREV modifier = revolting_against_me }
					reverse_remove_opinion = { who = PREV modifier = revolting_against }

					save_event_target_as = pf_was_revolting_against
				}

				if = {
					limit = { has_any_opinion_modifier = revolting_against }

					log = "pf_civil_war_cleanup_effect: SERIOUS: multiple revolting_against TOMs on [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])! Remaining targets after removing TOM against [pf_was_revolting_against.GetTitledFirstName] of the [pf_was_revolting_against.PrimaryTitle.GetFullBaseName] (ID: [pf_was_revolting_against.GetID]):"

					any_opinion_modifier_target = {
						limit = { reverse_has_opinion_modifier = { who = PREV modifier = revolting_against } }
						log = "pf_civil_war_cleanup_effect: --> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] (ID: [This.GetID])"
					}
				}

				clear_event_target = pf_was_revolting_against			
			}
			
			# # Check to see if there are any leftover revolting_against_me TOMs (there shouldn't be)
			# if = {
			# 	limit = { has_any_opinion_modifier = revolting_against_me }
				
			# 	log = "pf_civil_war_cleanup_effect: SERIOUS: [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID]) has revolting_against_me targets remaining after clean-up:"
				
			# 	any_opinion_modifier_target = {
			# 		limit = { reverse_has_opinion_modifier = { who = PREV modifier = revolting_against_me } }
			# 		log = "pf_civil_war_cleanup_effect: --> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] (ID: [This.GetID])"
			# 	}
			# }

			# Clear neutral/loyalist TOM's
			any_opinion_modifier_target = {
				if = {
					limit = { reverse_has_opinion_modifier = { who = PREV modifier = supported_civil_war } }
					remove_trait = loyalist
					reverse_remove_opinion = { who = PREV modifier = supported_civil_war }
				}
				if = {
					limit = { reverse_has_opinion_modifier = { who = PREV modifier = neutral_civil_war } }
					remove_trait = neutral
					reverse_remove_opinion = { who = PREV modifier = neutral_civil_war }
				}
			}
		}
	}
}


# companion effect for set_defacto_liege, should be called before liege change
pf_liege_change_begin_effect = {
	hidden_tooltip = {
		liege = { save_event_target_as = pf_lc_liege }
	}
}

pf_liege_change_end_effect = {
	hidden_tooltip = {
		if = {
			limit = {
				NOT = { liege = { character = event_target:pf_lc_liege } }
			}
			pf_teardown_rebel_effect = yes
			reverse_remove_opinion = { who = event_target:pf_lc_liege modifier = supported_civil_war }
			reverse_remove_opinion = { who = event_target:pf_lc_liege modifier = neutral_civil_war }
			remove_trait = loyalist
			remove_trait = neutral
		}
		clear_event_target = pf_lc_liege
	}
}


# Careful! Don't put this under a nested FROM!
pf_liege_change_under_title_begin_effect = {
	FROM = { save_event_target_as = pf_lc_enemy }
	pf_liege_change_under_title_ext_begin_effect = yes
	clear_event_target = pf_lc_enemy
}


pf_liege_change_under_title_ext_begin_effect = {
	hidden_tooltip = {
		any_de_jure_vassal = { # All rulers with land under this de jure title
			limit = {
				# That have civil war state
				is_playable = yes
				pf_war_trait_trigger = yes

				# That are in pf_lc_enemy's subrealm under the title PREV
				OR = {
					character = event_target:pf_lc_enemy
					is_liege_or_above = event_target:pf_lc_enemy
				}
			}
			# Add temporary TOM from Isis to tracked ruler
			e_hip = {
				holder_scope = {
					if = {
						limit = { NOT = { has_opinion_modifier = { who = PREVPREV modifier = pf_lcut_ruler } } }
						opinion = { who = PREVPREV modifier = pf_lcut_ruler }
					}
				}
			}
			liege = { # Add temporary TOM from tracked ruler to current liege
				if = {
					limit = {
						NOR = { # Neither if the ruler is effectively independent nor if they already have a TOM
							character = PREV
							reverse_has_opinion_modifier = { who = PREV modifier = pf_lcut_liege }
						}
					}
					reverse_opinion = { who = PREV modifier = pf_lcut_liege }
				}
			}
		}
	}
}


pf_liege_change_under_title_end_effect = {
	hidden_tooltip = {
		e_hip = {
			holder_scope = {
				any_opinion_modifier_target = { # Tracked rulers
					limit = {
						reverse_has_opinion_modifier = { who = PREV modifier = pf_lcut_ruler }
						OR = {
							has_opinion_modifier = { who = LIEGE modifier = pf_lcut_liege } # Still the same liege
							AND = { # Or...
								liege = { character = PREV } # Independent now
								NOT = { # And not any prior liege
									any_opinion_modifier_target = {
										reverse_has_opinion_modifier = { who = PREV modifier = pf_lcut_liege }
									}
								}
							}
						}
					}
					# Liege didn't change, so remove them from the tracked set
					reverse_remove_opinion = { who = PREV modifier = pf_lcut_ruler }
					liege = {
						reverse_remove_opinion = { who = PREV modifier = pf_lcut_liege }
					}
				}

				# All that's left now in Isis's tracked LCUT set are characters
				# whose liege changed under the title.

				any_opinion_modifier_target = { # Tracked rulers w/ liege change
					limit = { reverse_has_opinion_modifier = { who = PREV modifier = pf_lcut_ruler } }

					random_opinion_modifier_target = { # Prior liege (if applicable, i.e., weren't independent)
						limit = { reverse_has_opinion_modifier = { who = PREV modifier = pf_lcut_liege } }
						
						remove_opinion = { who = PREV modifier = supported_civil_war }
						remove_opinion = { who = PREV modifier = neutral_civil_war }
						remove_trait = loyalist
						remove_trait = neutral

						reverse_remove_opinion = { who = PREV modifier = pf_lcut_liege }
					}

					pf_teardown_rebel_effect = yes
					reverse_remove_opinion = { who = PREV modifier = pf_lcut_ruler }
				}
			}
		}
	}
}


pf_log_civil_war_state_effect = {
	log = "DEBUG: civil war state for [Root.GetTitledFirstName] of the [Root.PrimaryTitle.GetFullBaseName] ([Root.GetID]):"
	if = {
		limit = {
			pf_war_trait_trigger = no
		}
		log = "DEBUG: no civil war trait"
	}
	if = {
		limit = {
			is_ruler = no
			trait = rebel
		}
		log = "SERIOUS: trait = rebel but not a ruler!"
	}
	if = {
		limit = {
			trait = rebel
			has_any_opinion_modifier = revolting_against
			OR = {
				liege = { character = PREV }
				has_any_opinion_modifier = revolting_for
			}
			pf_in_revolt_trigger = yes
		}
		log = "DEBUG: trait = rebel"
	}
	if = {
		limit = {
			trait = rebel
			NOT = { has_any_opinion_modifier = revolting_against }
			OR = {
				liege = { character = PREV }
				has_any_opinion_modifier = revolting_for
			}
			pf_in_revolt_trigger = yes
		}
		log = "SERIOUS: trait = rebel w/o any revolting_against"
	}
	if = {
		limit = {
			is_ruler = yes
			trait = rebel
			has_any_opinion_modifier = revolting_against
			OR = {
				liege = { character = PREV }
				has_any_opinion_modifier = revolting_for
			}
			pf_in_revolt_trigger = no
		}
		log = "SERIOUS: trait = rebel w/o a revolt"
	}
	if = {
		limit = {
			is_ruler = yes
			trait = rebel
			NOT = { has_any_opinion_modifier = revolting_against }
			NOR = {
				liege = { character = PREV }
				has_any_opinion_modifier = revolting_for
			}
			pf_in_revolt_trigger = yes
		}
		log = "SERIOUS: trait = rebel w/o any revolting_against NOR any revolting_for"
	}
	if = {
		limit = {
			is_ruler = yes
			trait = rebel
			has_any_opinion_modifier = revolting_against
			NOR = {
				liege = { character = PREV }
				has_any_opinion_modifier = revolting_for
			}
			pf_in_revolt_trigger = no
		}
		log = "SERIOUS: trait = rebel w/o a revolt NOR any revolting_for"
	}
	if = {
		limit = {
			is_ruler = yes
			trait = rebel
			NOT = { has_any_opinion_modifier = revolting_against }
			NOR = {
				liege = { character = PREV }
				has_any_opinion_modifier = revolting_for
			}
			pf_in_revolt_trigger = no
		}
		log = "SERIOUS: trait = rebel w/o a revolt NOR any revolting_against NOR any revolting_for"
	}
	if = {
		limit = {
			is_ruler = no
			trait = loyalist
		}
		log = "SERIOUS: trait = loyalist but not a ruler!"
	}
	if = {
		limit = {
			is_ruler = yes
			trait = loyalist
			liege = {
				NOT = { character = PREV }
				any_war = {
					defender = { character = PREVPREV }
					pf_cb_trigger = yes
				}
			}
		}
		log = "DEBUG: trait = loyalist"
	}
	if = {
		limit = {
			is_ruler = yes
			trait = loyalist
			liege = {
				NOT = { character = PREV }
				NOT = {
					any_war = {
						defender = { character = PREVPREV }
						pf_cb_trigger = yes
					}
				}
			}
		}
		log = "SERIOUS: trait = loyalist w/o liege at war"
	}
	if = {
		limit = {
			trait = loyalist
			liege = { character = PREV }
		}
		log = "SERIOUS: trait = loyalist w/o a liege"
	}
	if = {
		limit = {
			is_ruler = no
			trait = neutral
		}
		log = "SERIOUS: trait = neutral but not a ruler!"
	}
	if = {
		limit = {
			is_ruler = yes
			trait = neutral
			liege = {
				NOT = { character = PREV }
				any_war = {
					defender = { character = PREVPREV }
					pf_cb_trigger = yes
				}
			}
		}
		log = "DEBUG: trait = neutral"
	}
	if = {
		limit = {
			is_ruler = yes
			trait = neutral
			liege = {
				NOT = { character = PREV }
				NOT = {
					any_war = {
						defender = { character = PREVPREV }
						pf_cb_trigger = yes
					}
				}
			}
		}
		log = "SERIOUS: trait = neutral w/o liege at war"
	}
	if = {
		limit = {
			is_ruler = yes
			trait = neutral
			liege = { character = PREV }
		}
		log = "SERIOUS: trait = neutral w/o a liege"
	}
	if = {
		limit = {
			any_opinion_modifier_target = {
				count = 2
				reverse_has_opinion_modifier = { who = PREV modifier = revolting_against }
			}
		}
		log = "SERIOUS: revolting_against more than 1 character!"
	}
	if = {
		limit = {
			any_opinion_modifier_target = {
				count = 2
				reverse_has_opinion_modifier = { who = PREV modifier = revolting_for }
			}
		}
		log = "SERIOUS: revolting_for more than 1 character!"
	}
	if = {
		limit = {
			any_opinion_modifier_target = {
				count = 2
				reverse_has_opinion_modifier = { who = PREV modifier = opinion_dyn_rebel_leader }
			}
		}
		log = "SERIOUS: opinion_dyn_rebel_leader for more than 1 character!"
	}
	any_opinion_modifier_target = {
		limit = {
			reverse_has_opinion_modifier = { who = PREV modifier = revolting_against }
			has_opinion_modifier = { who = PREV modifier = revolting_against_me }
		}
		log = "DEBUG: revolting_against -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	any_opinion_modifier_target = {
		limit = {
			reverse_has_opinion_modifier = { who = PREV modifier = revolting_against }
			NOT = { has_opinion_modifier = { who = PREV modifier = revolting_against_me } }
		}
		log = "SERIOUS: revolting_against w/o [reverse] revolting_against_me -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	any_opinion_modifier_target = {
		limit = {
			reverse_has_opinion_modifier = { who = PREV modifier = revolting_against_me }
			has_opinion_modifier = { who = PREV modifier = revolting_against }
		}
		log = "DEBUG: revolting_against_me -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	any_opinion_modifier_target = {
		limit = {
			reverse_has_opinion_modifier = { who = PREV modifier = revolting_against_me }
			NOT = { has_opinion_modifier = { who = PREV modifier = revolting_against } }
		}
		log = "SERIOUS: revolting_against_me w/o [reverse] revolting_against -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	liege = { save_event_target_as = pf_log_liege }
	any_opinion_modifier_target = {
		limit = {
			reverse_has_opinion_modifier = { who = PREV modifier = revolting_for }
			character = event_target:pf_log_liege
		}
		log = "DEBUG: revolting_for -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	any_opinion_modifier_target = {
		limit = {
			reverse_has_opinion_modifier = { who = PREV modifier = revolting_for }
			NOT = { character = event_target:pf_log_liege }
		}
		log = "SERIOUS: not liege: revolting_for -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	any_opinion_modifier_target = {
		limit = {
			reverse_has_opinion_modifier = { who = PREV modifier = opinion_dyn_rebel_leader }
			character = event_target:pf_log_liege
		}
		log = "DEBUG: opinion_dyn_rebel_leader -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	any_opinion_modifier_target = {
		limit = {
			reverse_has_opinion_modifier = { who = PREV modifier = opinion_dyn_rebel_leader }
			NOT = { character = event_target:pf_log_liege }
		}
		log = "SERIOUS: not liege: opinion_dyn_rebel_leader -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	clear_event_target = pf_log_liege
	any_opinion_modifier_target = {
		limit = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_dyn_rebel_leader } }
		log = "DEBUG: opinion_dyn_rebel_leader -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	any_opinion_modifier_target = {
		limit = { reverse_has_opinion_modifier = { who = PREV modifier = supported_civil_war } }
		log = "DEBUG: supported_civil_war -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
	any_opinion_modifier_target = {
		limit = { reverse_has_opinion_modifier = { who = PREV modifier = neutral_civil_war } }
		log = "DEBUG: neutral_civil_war -> [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] ([This.GetID])"
	}
}
