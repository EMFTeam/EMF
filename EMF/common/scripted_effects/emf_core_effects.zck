
emf_willfully_abdicate {
  hidden_effect {
    save_target = emf_abdicator_tmp
    character_event { id = emf_core.110 }
    if { is_null != t:emf_abdicate_real_heir } then {
      t:emf_abdicate_real_heir.save_target = emf_heir_tmp
    }
    else {
      current_heir.save_target = emf_heir_tmp
    }

    # Non-Dynastic Succession
    if {
      ai = no
      has_game_rule { name = non_dynastic_succession value = on }
      is_merchant_republic = no
      is_nomadic = no
      t:emf_heir_tmp {
        ai = yes
        dynasty != PREV
      }
      has_global_flag != emf_nondynastic_succession_disabled
    }
    then {
      set_flag = emf_non_dynastic_succession_tmp
      t:emf_heir_tmp {
        if { is_lowborn = yes } then { dynasty = father_bastard }
        t:emf_abdicator_tmp {
          create_character {
            religion = PREV
            culture = PREV
            dynasty = PREV
          }
          new_character.save_target = emf_sleeve
        }
        dynasty = t:emf_abdicator_tmp
      }
    }
  }

  # Don't allow feudal/tribal/nomadic titles to flip government form to theocracies or republics (unless heir is not lower tier)
  hidden_effect {
    if {
      OR {
        is_feudal = yes
        is_tribal = yes
        is_nomadic = yes
      }
      higher_real_tier_than = t:emf_heir_tmp
      t:emf_heir_tmp {
        is_ruler = yes
        OR {
          is_theocracy = yes
          is_republic = yes
        }
      }
    }
    then {
      t:emf_heir_tmp {
        abdicate = yes
        move_character = PREV
        if { PREV.emf_imperial_government = yes } then { emf_switch_to_imperial = yes }
        elif { PREV.government = order_government } then { set_government_type = order_government }
        elif { PREV.government = tribal_government } then { set_government_type = tribal_government }
        elif { PREV.government = nomadic_government } then { set_government_type = nomadic_government }
        else { emf_switch_to_feudal_gov = yes }
      }
    }
  }

  hidden_effect = {
    emf_transfer_crown_on_abdication = yes
  }

  if { is_null != t:emf_abdicate_real_heir } then {
    abdicate_to = t:emf_heir_tmp
    hidden_effect {
      if {
        has_flag = emf_abdicate_no_move
        liege.character != t:emf_heir_tmp
      }
      then {
        move_character = t:emf_heir_tmp
      }
    }
  }
  elif { has_flag = emf_abdicate_no_move } then {
    abdicate { move = no }
  }
  else {
    abdicate = yes
  }

  # Hint a liege change for both the new guy and the old guy:
  emf_liege_change = yes
  t:emf_heir_tmp.emf_liege_change = yes

  hidden_effect {
    if { has_flag = emf_non_dynastic_succession_tmp } then {
      t:emf_heir_tmp.character_event { id = emf_core.11 } # finish Non-Dynastic Succession
    }
  }

  clr_flag = emf_non_dynastic_succession_tmp
  clr_flag = emf_abdicate_no_move
  clear_target = emf_heir_tmp
  clear_target = emf_abdicator_tmp
  clear_target = emf_abdicate_real_heir
}

emf_abdicate {
  hidden_effect {
    if { is_null = current_heir } then {
      log = "DEBUG: emf_abdicate: [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] (#[This.GetID]/[This.PrimaryTitle.GetID]) has no expected successor."
    }
    else {
      save_target = emf_abdicator_tmp

      while {
        current_heir {
          any_opinion_modifier_target {
            reverse_has_opinion_modifier { who = PREV modifier = overthrew_me }
            is_ruler = yes
            OR {
              vassal_of = t:emf_abdicator_tmp
              liege.emf_revolting_against_abdicator_internal = yes
              emf_revolting_against_abdicator_internal = yes
            }
          }
        }
      }
      do {
        $n_overlooked_heirs += 1
        current_heir {
          save_target = emf_dude
          reverse_opinion { who = t:emf_abdicator_tmp modifier = opinion_overlooked_heir }
          any_landed_title {
            OR {
              current_heir.character = t:emf_dude
              t:emf_dude { any_pretender_title { title = PREVPREV } }
            }
          }
          do {
            owner.reverse_opinion { who = t:emf_dude modifier = opinion_cannot_inherit_tmp }
          }
          add_trait = emf_cannot_inherit
          clear_target = emf_dude
        }
        recalc_succession = yes
      }

      clear_target = emf_abdicator_tmp

      if { $n_overlooked_heirs > 0 is_null = current_heir } then {
        log = "WARNING: emf_abdicate: [This.GetTitledFirstName] of the [This.PrimaryTitle.GetFullBaseName] (#[This.GetID]/[This.PrimaryTitle.GetID]) has no heir at all after disqualifying [This.n_overlooked_heirs.GetValue] potential heirs!"
      }

      $n_overlooked_heirs = 0
      emf_willfully_abdicate = yes

      # Cleanup TOMs, traits, and recalculate succession state for disqualified ruler heirs...
      any_opinion_modifier_target {
        reverse_has_opinion_modifier { who = PREV modifier = opinion_overlooked_heir }
        trait = emf_cannot_inherit
      }
      do {
        reverse_remove_opinion { who = PREV modifier = opinion_overlooked_heir }
        remove_trait = emf_cannot_inherit
        # All the rulers which hold titles to which this no-longer-disqualified heir was either heir or pretender to now
        # recalculate their succession with the inheritance blocking trait removed:
        any_opinion_modifier_target {
          reverse_has_opinion_modifier { who = PREV modifier = opinion_cannot_inherit_tmp }
        }
        do {
          reverse_remove_opinion { who = PREV modifier = opinion_cannot_inherit_tmp }
          recalc_succession = yes
        }
      }
    }
  }
}

# Helper for emf_willfully_abdicate: transfers special crowns to appropriate heirs & other artifacts to 'player' heir
emf_transfer_crown_on_abdication {
  # This check allows this scripted effect to be used outside of emf_willfully_abdicate:
  if { is_null = t:emf_heir_tmp } then {
    current_heir.save_target = emf_heir_tmp
  }

  # Imperial Crowns
  if { has_landed_title = e_hre } then {
    clear_target = emf_crown_heir_tmp
    e_hre.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_hre } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = e_hre_french } then {
    clear_target = emf_crown_heir_tmp
    e_hre_french.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_hre } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = e_byzantium } then {
    clear_target = emf_crown_heir_tmp
    e_byzantium.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_byzantine } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = e_persia } then {
    clear_target = emf_crown_heir_tmp
    e_persia.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_pahlavi } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }

  # Religious head crowns/scepters
  if { has_landed_title = d_norse_pagan_reformed } then {
    clear_target = emf_crown_heir_tmp
    d_norse_pagan_reformed.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = d_tengri_pagan_reformed } then {
    clear_target = emf_crown_heir_tmp
    d_tengri_pagan_reformed.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_tengri_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = d_slavic_pagan_reformed } then {
    clear_target = emf_crown_heir_tmp
    d_slavic_pagan_reformed.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_slavic_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = d_baltic_pagan_reformed } then {
    clear_target = emf_crown_heir_tmp
    d_baltic_pagan_reformed.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_romuva_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = d_finnish_pagan_reformed } then {
    clear_target = emf_crown_heir_tmp
    d_finnish_pagan_reformed.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_finnish_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = d_west_african_pagan_reformed } then {
    clear_target = emf_crown_heir_tmp
    d_west_african_pagan_reformed.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_west_african_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = d_zun_pagan_reformed } then {
    clear_target = emf_crown_heir_tmp
    d_zun_pagan_reformed.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_zun_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = d_bon_reformed } then {
    clear_target = emf_crown_heir_tmp
    d_bon_reformed.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = scepter_bon_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = d_aztec_reformed } then {
    clear_target = emf_crown_heir_tmp
    d_aztec_reformed.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = crown_aztec_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  elif { has_landed_title = k_hellenic_pagan } then {
    clear_target = emf_crown_heir_tmp
    k_hellenic_pagan.current_heir.save_target = emf_crown_heir_tmp
    if { is_null = t:emf_crown_heir_tmp } then { t:emf_heir_tmp.save_target = emf_crown_heir_tmp }
    any_artifact { artifact_type = scepter_hellenic_fylkir } do { transfer_artifact { from = PREV to = t:emf_crown_heir_tmp } }
  }
  
  # Transfer all other remaining artifacts to the player heir (not nec. heir to which we are abdicating)
  if { player_heir.is_alive = yes } then {
    player_heir.save_target = emf_player_heir_tmp # Can't seem to always trust that player_heir scope is set
  }
  else {
    capital_scope.county.current_heir.save_target = emf_player_heir_tmp # So this is our standby fallback really.
  }

  any_artifact {
    NOR {
      artifact_type = crown_hre
      artifact_type = crown_byzantine 
      artifact_type = crown_pahlavi
      artifact_type = crown_fylkir
      artifact_type = crown_tengri_fylkir
      artifact_type = crown_slavic_fylkir
      artifact_type = crown_romuva_fylkir
      artifact_type = crown_finnish_fylkir
      artifact_type = crown_west_african_fylkir
      artifact_type = crown_zun_fylkir
      artifact_type = scepter_bon_fylkir
      artifact_type = crown_aztec_fylkir
      artifact_type = scepter_hellenic_fylkir
    }
  }
  do {
    transfer_artifact { from = PREV to = t:emf_player_heir_tmp }
  }

  clear_target = emf_crown_heir_tmp
  clear_target = emf_player_heir_tmp
}
