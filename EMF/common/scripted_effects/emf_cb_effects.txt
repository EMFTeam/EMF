# -*- ck2.scripted_effects -*-

## STANDARD GLOBAL CB EFFECTS ##

emf_cb_on_success_posttitle = {
	hidden_tooltip = {
		# Double-check Imperial Government status
		FROM = { character_event = { id = emf_imperial.3299 } }
		ROOT = { character_event = { id = emf_imperial.3299 } }
		
		# Top realm capital-contiguous province tracking (a hint for better accuracy post-war only, as this is also
		# done on annual maintenance)
		ROOT = {
			# Only do anything if the CB hasn't told us that top realm province changes for both giver/receiver
			# can't happen (skip_capconnect_chk_tmp set on ROOT by CB)
			if = {
				limit = { NOT = { has_character_flag = skip_capconnect_chk_tmp } }
				# Also skip recalculation if [still] part of a temp-independent revolt realm, but emf_core.65
				# filters that in its trigger already ...
				top_liege = { character_event = { id = emf_core.65 } }
				# Note that if FROM was unlanded, we might be doing an unnecessary calculation on diff realm
				# (and possibly missing the recalculation on the right realm) -- totally acceptable
				FROM = {
					top_liege = {
						# But don't do it twice for ROOT and FROM if in same top realm [currently]
						if = {
							limit = { NOT = { same_realm = ROOT } }
							character_event = { id = emf_core.65 }
						}
					}
				}
			}
			clr_character_flag = skip_capconnect_chk_tmp
		}
	}
}

emf_cb_thirdparty_on_success_posttitle = {
	emf_cb_on_success_posttitle = yes # Currently the same since we only care about giver/receiver
}


## STANDARD CB OUTCOME EFFECTS ##

emf_cb_victory = {
	emf_cb_obj_win_war = yes
	ROOT = { if = { limit = { rebel = no } pf_glory_plus2_effect = yes } }
	FROM = { pf_glory_minus2_effect = yes }
}

emf_cb_defeat = {
	emf_cb_obj_win_war_reverse = yes
	ROOT = { if = { limit = { rebel = no } pf_glory_minus2_effect = yes } }
	FROM = { pf_glory_plus2_effect = yes }
}

emf_cb_victory_other = { # 3rd-party (assumes enclosing scope is attacker)
	emf_cb_obj_win_war = yes
	pf_glory_plus2_effect = yes
	FROM = { pf_glory_minus2_effect = yes }
}

emf_cb_defeat_other = { # 3rd-party (assumes enclosing scope is attacker)
	emf_cb_obj_win_war_reverse = yes
	pf_glory_minus2_effect = yes
	FROM = { pf_glory_plus2_effect = yes }
}

emf_cb_holy_victory = {
	emf_cb_obj_win_war = yes
	emf_cb_obj_win_holy_war = yes
	ROOT = {
		if = {
			limit = { rebel = no }
			pf_glory_plus2_effect = yes
			pf_tradition_plus4_effect = yes
		}
	}
	FROM = { pf_glory_minus2_effect = yes }
	FROM = { pf_tradition_minus4_effect = yes }
}

emf_cb_holy_defeat = {
	emf_cb_obj_win_war_reverse = yes
	emf_cb_obj_win_holy_war_reverse = yes
	ROOT = {
		if = {
			limit = { rebel = no }
			pf_glory_minus2_effect = yes
			pf_tradition_minus4_effect = yes
		}
	}
	FROM = { pf_glory_plus2_effect = yes }
	FROM = { pf_tradition_plus4_effect = yes }
}


## DYNLEVY AUTO-ADJUSTMENT CB EFFECTS FOR MAJOR REVOLTS ##

# regular major_revolt CBs
emf_cb_dynlevy_begin = {
	hidden_tooltip = {
		# ROOT = { primary_title = { emf_dynlevy_remove = yes } }
		FROM = { emf_dynlevy_update = yes }
	}
}

emf_cb_dynlevy_end = {
	hidden_tooltip = {
		ROOT = { emf_dynlevy_update = yes }
		FROM = { emf_dynlevy_update = yes }
	}
}

# 3rd-party CBs: assumes enclosing scope is attacker
emf_cb_dynlevy_other_begin = {
	hidden_tooltip = {
		FROM = { emf_dynlevy_update = yes }
		# primary_title = { emf_dynlevy_remove = yes }
	}
}

# 3rd-party CBs: assumes enclosing scope is attacker
emf_cb_dynlevy_other_end = {
	hidden_tooltip = {
		FROM = { emf_dynlevy_update = yes }
		emf_dynlevy_update = yes
	}
}

#### UTILITY EFFECTS ####

# THIS = title, ROOT = character about to assume THIS
emf_cb_ROOT_ensure_feudal = {
	if = {
		limit = {
			higher_tier_than = ROOT
			holder_scope = { is_feudal = yes }
			ROOT = {
				is_ruler = yes
				OR = {
					is_theocracy = yes
					is_republic = yes
				}
			}
		}
		ROOT = { abdicate = { move = no } }
	}
}

#### LATB™ EFFECTS ####

# Upon conquest, convert any nomadic province(s) to tribal before transferring
# title. Should be used in target title scope of virtually every CB. Only does
# anything if ROOT (receiver of title) is nomadic, as the rest are currently
# handled by HL.4999.
emf_cb_latb = {
	hidden_tooltip = {
		if = {
			limit = {
				NOT = { has_global_flag = emf_config_latb_disabled }
				ROOT = { is_nomadic = yes }
				tier = COUNT
				location = {
					NOT = { culture = ROOT }
					NOR = {
						any_province_holding = { NOT = { holding_type = nomad } }
						has_settlement_construction = yes
					}
					has_empty_holding = yes
				}
			}
			emf_cb_latb_build = yes
		}
		if = {
			limit = {
				NOT = { has_global_flag = emf_config_latb_disabled }
				ROOT = { is_nomadic = yes }
				higher_tier_than = COUNT
			}
			any_de_jure_vassal_title = {
				limit = {
					tier = COUNT
					holder_scope = {
						OR = {
							character = ROOT_FROM
							is_liege_or_above = ROOT_FROM
						}
					}
					location = {
						NOT = { culture = ROOT }
						NOR = {
							any_province_holding = { NOT = { holding_type = nomad } }
							has_settlement_construction = yes
						}
						has_empty_holding = yes
					}
				}
				emf_cb_latb_build = yes
			}
		}
	}
}

emf_cb_latb_build = {
	location = {
		build_holding = { type = tribal }
		random_province_holding = {
			limit = {
				holding_type = tribal
				ROOT = { is_nomadic = yes }
				is_capital = yes
			}
			revoke_capital_holding = yes
		}
		random_province_holding = {
			limit = {
				holding_type = tribal
				ROOT = { is_nomadic = no }
				is_capital = no
			}
			make_capital_holding = yes
		}
		random_province_holding = {
			limit = { holding_type = tribal }
			log = "DEBUG: LATB: built tribal holding [This.GetID] ([This.GetBaseName]) in [Prev.GetName] ([PrevPrev.GetID])"
		}
	}
}


## WAR AMBITION EFFECT HELPERS (not used directly in CBs) ##
emf_cb_obj_win_war = {
	hidden_tooltip = {
		any_attacker = {
			add_character_modifier = { name = emf_victory_timer duration = 1 hidden = yes }
		}
		any_attacker = {
			limit = { has_ambition = obj_win_war }
			ambition_succeeds = yes
		}
	}
}
emf_cb_obj_win_war_reverse = {
	hidden_tooltip = {
		any_defender = {
			add_character_modifier = { name = emf_victory_timer duration = 1 hidden = yes }
		}
		any_defender = {
			limit = { has_ambition = obj_win_war }
			ambition_succeeds = yes
		}
	}
}
emf_cb_obj_win_holy_war = {
	hidden_tooltip = {
		any_attacker = {
			add_character_modifier = { name = emf_holy_victory_timer duration = 1 hidden = yes }
		}
		any_attacker = {
			limit = { has_ambition = obj_win_holy_war }
			ambition_succeeds = yes
		}
	}
}
emf_cb_obj_win_holy_war_reverse = {
	hidden_tooltip = {
		any_defender = {
			add_character_modifier = { name = emf_holy_victory_timer duration = 1 hidden = yes }
		}
		any_defender = {
			limit = { has_ambition = obj_win_holy_war }
			ambition_succeeds = yes
		}
	}
}


## IMPERIAL DECAY ##
emf_cb_imperial_decay_overthrow = {
	if = {
		limit = { FROM = { emf_uses_imperial_decay = yes } }
		FROM = {
			custom_tooltip = { text = IMPERIAL_DECAY_MINUS_10 }
			hidden_tooltip = {
				primary_title = {
					set_title_flag = emf_decay_overthrow
				}
			}
		}
	}
}


## RELIGIOUS SUBJUGATION / HOLY WAR ##

emf_cb_religious_on_success_title = {
	emf_cb_latb = yes
	if = {
		limit = { NOT = { has_global_flag = emf_config_relsub_disabled } }		
		save_event_target_as = emf_cb_title
		FROM = { save_event_target_as = emf_cb_loser }
		ROOT = { save_event_target_as = emf_cb_winner }
		custom_tooltip = {
			text = RELSUB_WILL_RECEIVE_ULTIMATUM
			hidden_tooltip = { FROM = { character_event = { id = emf_cb.65 } } }
		}
	}
	if = {
		limit = { has_global_flag = emf_config_relsub_disabled }
		pf_liege_change_under_title_begin_effect = yes
		custom_tooltip = {
			text = emf_cb_ctt_vassalize_or_take_under_title_same_religion
			hidden_tooltip = {
				ROOT = {
					vassalize_or_take_under_title = {
						title = PREV
						enemy = FROM
						same_religion = yes # Only vassalize rulers of my religion
						is_religious = yes
						type = holy_war
					}
				}
			}
		}
		pf_liege_change_under_title_end_effect = yes
	}
}

emf_cb_relsub_ask_vassals_to_convert = {
	# Since we chose to convert, pass the choice to our direct vassals (sort tooltip / exec order by tier, desc.)
	any_vassal = {
		limit = { tier = KING }
		custom_tooltip = {
			text = RELSUB_ASK_VASSAL_TO_CONVERT
			hidden_tooltip = { character_event = { id = emf_cb.62 } }
		}
	}
	any_vassal = {
		limit = { tier = DUKE }
		custom_tooltip = {
			text = RELSUB_ASK_VASSAL_TO_CONVERT
			hidden_tooltip = { character_event = { id = emf_cb.62 } }
		}
	}
	any_vassal = {
		limit = { tier = COUNT }
		custom_tooltip = {
			text = RELSUB_ASK_VASSAL_TO_CONVERT
			hidden_tooltip = { character_event = { id = emf_cb.62 } }
		}
	}
	any_vassal = {
		limit = { tier = BARON }
		custom_tooltip = {
			text = RELSUB_ASK_VASSAL_TO_CONVERT
			hidden_tooltip = { character_event = { id = emf_cb.62 } }
		}
	}
}

emf_cb_relsub_basic_submission_decision = {	
	hidden_tooltip = {
		# Ensure that we can be reached later
		reverse_opinion = { who = event_target:emf_cb_winner modifier = submits_to_my_relsub }
		# Mark titles to be destroyed (in same-tier case)
		any_demesne_title = {
			limit = { tier = event_target:emf_cb_winner }
			set_title_flag = emf_relsub_tmp_destroy_title
			log = "-----> same-tier title [This.GetBaseName] ([This.GetID]) will be destroyed"
		}
		event_target:emf_cb_winner = {
			if = {
				limit = { religion = PREV }
				change_variable = { which = "emf_relsub_lords_liberated" value = 1 }
			}
			if = {
				limit = { NOT = { religion = PREV } }
				change_variable = { which = "emf_relsub_lords_converted" value = 1 }
			}
		}
	}
	if = {
		limit = { tier = event_target:emf_cb_winner }
		custom_tooltip = { text = RELSUB_SAME_TIER_TITLES_WILL_BE_DESTROYED }
	}
	tooltip = { set_defacto_liege = event_target:emf_cb_winner }
}

emf_cb_relsub_reset_statistics = {
	hidden_tooltip = {
		set_variable = { which = "emf_relsub_lords_liberated"  value = 0 }
		set_variable = { which = "emf_relsub_lords_converted"  value = 0 }
		set_variable = { which = "emf_relsub_nobles_converted" value = 0 }
		set_variable = { which = "emf_relsub_baronies_taken"   value = 0 }
		set_variable = { which = "emf_relsub_counties_taken"   value = 0 }
	}
}


emf_cb_relsub_convert_court = {
	if = {
		limit = { NOT = { religion = event_target:emf_old_religion } }
		custom_tooltip = { text = RELSUB_FAMILY_IN_COURT_CONVERTS }
		hidden_tooltip = {
			any_courtier = {
				limit = {
					OR = {
						is_married = ROOT
						is_close_relative = ROOT
						dynasty = ROOT
					}
					NOT = { religion = event_target:emf_cb_winner }
					liege = { character = ROOT }
					is_ruler = no
					prisoner = no # Who is going to agree to convert while staying imprisoned despite it?
				}
				religion = event_target:emf_cb_winner
				event_target:emf_cb_winner = {
					change_variable = { which = "emf_relsub_nobles_converted" value = 1 }
				}
			}
		}
	}
}

# ROOT = event_target:emf_cb_winner
emf_cb_relsub_subjugate = {
	if = {
		limit = { tier = ROOT }
		hidden_tooltip = {
			# Track our current vassals...
			any_vassal = { reverse_opinion = { who = PREV modifier = my_prior_vassal } }
			# ... because destroying our primary-tier titles will break their vassalage
			any_demesne_title = {
				limit = { has_title_flag = emf_relsub_tmp_destroy_title }
				emf_destroy_title = yes
			}
			# Now, for vassals whose subrealms contain land inside the CB target title, either revassalize them
			# (if our new tier permits) or, failing that, have the CB winner subjugate them directly.
			any_opinion_modifier_target = {
				limit = {
					reverse_has_opinion_modifier = { who = PREV modifier = my_prior_vassal }
					NOT = { vassal_of = PREV }
					lower_tier_than = PREV
					any_realm_title = { de_jure_liege_or_above = event_target:emf_cb_title }
				}
				set_defacto_liege = PREV # simply reconnect vassalage
				if = {
					limit = { NOT = { vassal_of = PREV } }
					emf_ROOT_subjugate_ruler = yes
				}
			}
			any_opinion_modifier_target = {
				limit = {
					reverse_has_opinion_modifier = { who = PREV modifier = my_prior_vassal }
					NOT = { vassal_of = PREV }
					NOT = { lower_tier_than = PREV }
					any_realm_title = { de_jure_liege_or_above = event_target:emf_cb_title }
				}
				emf_ROOT_subjugate_ruler = yes
			}
			# Process liege changes for those left independent
			any_opinion_modifier_target = {
				limit = {
					reverse_has_opinion_modifier = { who = PREV modifier = my_prior_vassal }
					NOT = { vassal_of = PREV }
					NOT = { any_realm_title = { de_jure_liege_or_above = event_target:emf_cb_title } }
				}
				set_defacto_liege = THIS # make it official; destroying titles is currently buggy this way
				emf_liege_change = yes
			}
			# Cleanup TOMs
			any_opinion_modifier_target = { reverse_remove_opinion = { who = PREV modifier = my_prior_vassal } }
			# Keep sane
			if = {
				limit = { NOT = { lower_tier_than = ROOT } }
				log = "ERROR: emf_cb_relsub_subjugate: even after destroying relevant titles, [This.GetTitledFirstName] (#[This.GetID]/[This.PrimaryTitle.GetID]) is same- or higher-tier than CB winner"
			}
		}
	}
	custom_tooltip = { text = RELSUB_WILL_BECOME_VASSAL_TO_WINNER }
	hidden_tooltip = { emf_ROOT_subjugate_ruler = yes }
}

emf_cb_relsub_complete = {
	if = {
		limit = { has_any_opinion_modifier = submits_to_my_relsub }
		custom_tooltip = { text = RELSUB_LORDS_WHO_BENT_THE_KNEE }
		any_opinion_modifier_target = {
			limit = {
				tier = KING
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_cb_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = DUKE
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_cb_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = COUNT
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_cb_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = BARON
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_cb_relsub_subjugate = yes
		}
	}
	if = {
		limit = {
			any_opinion_modifier_target = {
				reverse_has_opinion_modifier = { who = ROOT modifier = refused_my_relsub }
				any_demesne_title = { has_title_flag = emf_relsub_tmp_take_title }
			}
		}
		custom_tooltip = { text = RELSUB_TITLES_SEIZED }
		# Instead of choosing the considerably more efficient way to access the titles marked for taking (i.e., scope
		# to rulers via refused_my_relsub TOM and then scope to their flagged demesne titles), we use
		# any_landed_title so that we can ensure the tier-based sort/priority order is upheld in the tooltip:
		any_landed_title = {
			limit = {
				tier = COUNT
				has_title_flag = emf_relsub_tmp_take_title
				owner = { reverse_has_opinion_modifier = { who = ROOT modifier = refused_my_relsub } }
			}
			usurp_title_plus_barony_if_unlanded = { target = event_target:emf_cb_winner type = holy_war }
		}
		any_landed_title = {
			limit = {
				tier = BARON
				has_title_flag = emf_relsub_tmp_take_title
				owner = { reverse_has_opinion_modifier = { who = ROOT modifier = refused_my_relsub } }
				NOT = { holder = ROOT }
			}
			# Hide usurpation tooltip for province capital baronies, as they're covered by the count-tier case
			if = {
				limit = { is_capital = yes }
				hidden_tooltip = {
					usurp_title_plus_barony_if_unlanded = {
						target = event_target:emf_cb_winner
						type = holy_war
					}
				}
			}
			if = {
				limit = { is_capital = no }
				usurp_title_plus_barony_if_unlanded = { target = event_target:emf_cb_winner type = holy_war }
			}
		}
	}
}
