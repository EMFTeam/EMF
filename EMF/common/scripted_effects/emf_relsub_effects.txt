# -*- ck2.scripted_effects -*-


emf_relsub_ask_vassals_to_convert = {
	hidden_effect = {
		# Since we chose to convert, pass the choice to our direct vassals (sort tooltip / exec order by tier, desc.)
		any_vassal = {
			limit = { tier = KING }
			custom_tooltip = {
				text = RELSUB_ASK_VASSAL_TO_CONVERT
				hidden_tooltip = { character_event = { id = emf_relsub.2 } }
			}
		}
		any_vassal = {
			limit = { tier = DUKE }
			custom_tooltip = {
				text = RELSUB_ASK_VASSAL_TO_CONVERT
				hidden_tooltip = { character_event = { id = emf_relsub.2 } }
			}
		}
		any_vassal = {
			limit = { tier = COUNT }
			custom_tooltip = {
				text = RELSUB_ASK_VASSAL_TO_CONVERT
				hidden_tooltip = { character_event = { id = emf_relsub.2 } }
			}
		}
		any_vassal = {
			limit = { tier = BARON }
			custom_tooltip = {
				text = RELSUB_ASK_VASSAL_TO_CONVERT
				hidden_tooltip = { character_event = { id = emf_relsub.2 } }
			}
		}
	}
}

emf_relsub_basic_submission_decision = {
	hidden_effect = {
		# Ensure that we can be reached later
		reverse_opinion = { who = event_target:emf_cb_winner modifier = submits_to_my_relsub }
		# Mark titles to be destroyed (in same-tier case)
		any_demesne_title = {
			limit = { tier = event_target:emf_cb_winner }
			log = "---> same-tier title will be destroyed: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
		}
		event_target:emf_cb_winner = {
			if = {
				limit = { religion = PREV }
				change_variable = { which = "emf_relsub_lords_liberated" value = 1 }
			}
			if = {
				limit = { NOT = { religion = PREV } }
				change_variable = { which = "emf_relsub_lords_converted" value = 1 }
			}
		}
	}
	if = {
		limit = { tier = event_target:emf_cb_winner }
		custom_tooltip = { text = RELSUB_SAME_TIER_TITLES_WILL_BE_USURPED }
	}
	tooltip = { set_defacto_liege = event_target:emf_cb_winner }
}

emf_relsub_reset_statistics = {
	hidden_tooltip = {
		set_variable = { which = "emf_relsub_lords_liberated"  value = 0 }
		set_variable = { which = "emf_relsub_lords_converted"  value = 0 }
		set_variable = { which = "emf_relsub_nobles_converted" value = 0 }
		set_variable = { which = "emf_relsub_baronies_taken"   value = 0 }
		set_variable = { which = "emf_relsub_counties_taken"   value = 0 }
	}
}


emf_relsub_convert_court = {
	if = {
		limit = { NOT = { religion = event_target:emf_old_religion } }
		custom_tooltip = {
			text = RELSUB_FAMILY_IN_COURT_CONVERTS
			any_courtier = {
				limit = {
					OR = {
						is_married = ROOT
						is_close_relative = ROOT
						dynasty = ROOT
					}
					NOT = { religion = event_target:emf_cb_winner }
					liege = { character = ROOT }
					is_ruler = no
					prisoner = no # Who is going to agree to convert while staying imprisoned despite it?
				}
				random_list = {
					20 = {
						trigger = { has_secret_religion = no }
						modifier = { factor = 2.0 trait = zealous }
						modifier = { factor = 1.5 trait = deceitful }
						modifier = { factor = 1.5 trait = stubborn }
						set_secret_religion = event_target:emf_old_religion
					}
					80 = {
						modifier = { factor = 2.0 is_marriage_adult = no }
						modifier = { factor = 2.0 NOT = { age = 10 } }
					}
				}
				religion = event_target:emf_cb_winner
				event_target:emf_cb_winner = {
					change_variable = { which = "emf_relsub_nobles_converted" value = 1 }
				}
			}
		}
	}
}

# boy, a little macro support in here...
emf_relsub_pretend_to_convert_court = {
	if = {
		limit = { NOT = { religion = event_target:emf_old_religion } }
		custom_tooltip = {
			text = RELSUB_FAMILY_IN_COURT_SECRETLY_CONVERTS
			any_courtier = {
				limit = {
					OR = {
						is_married = ROOT
						is_close_relative = ROOT
						dynasty = ROOT
					}
					NOT = { religion = event_target:emf_cb_winner }
					liege = { character = ROOT }
					is_ruler = no
					prisoner = no # Who is going to agree to convert while staying imprisoned despite it?
				}
				religion = event_target:emf_cb_winner
				if = {
					limit = { has_secret_religion = no }
					set_secret_religion = event_target:emf_old_religion
				}
				event_target:emf_cb_winner = {
					change_variable = { which = "emf_relsub_nobles_converted" value = 1 }
				}
			}
		}
	}
}

# ROOT = event_target:emf_cb_winner
emf_relsub_subjugate = {
	if = {
		limit = { tier = ROOT }
		hidden_tooltip = {
			any_demesne_title = {
				limit = { tier = ROOT }
				usurp_title = { target = ROOT type = holy_war }
				emf_destroy_title = yes
			}
			if = {
				limit = { tier = ROOT }
				log = "---> ERROR: emf_relsub_subjugate: after trying to usurp same-tier titles of war loser, they're still same-tier: [This.EMF_GetDebugName]"
			}
		}
	}
	custom_tooltip = { text = RELSUB_WILL_BECOME_VASSAL_TO_WINNER }
	hidden_tooltip = {
		emf_ROOT_subjugate_ruler = yes
		event_target:emf_cb_winner = { save_event_target_as = target_ruler }
		any_realm_province = {
			limit = {
				de_jure_liege_or_above = event_target:emf_cb_title
				emf_hostile_religion_to_target_ruler = yes
			}
			emf_relsub_set_base_unrest = yes
		}
		clear_event_target = target_ruler
		any_realm_province = {
			limit = { religion = event_target:emf_cb_winner }
			remove_province_modifier = emf_relsub_liberation_modifier
			add_province_modifier = { name = emf_relsub_liberation_modifier years = 20 }
		}
	}
}

emf_relsub_complete = {
	custom_tooltip = { text = RELSUB_STATISTICS }
	if = {
		limit = { has_any_opinion_modifier = submits_to_my_relsub }
		custom_tooltip = { text = RELSUB_LORDS_WHO_BENT_THE_KNEE }
		any_opinion_modifier_target = {
			limit = {
				tier = EMPEROR
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = KING
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = DUKE
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = COUNT
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = BARON
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_relsub_subjugate = yes
		}
	}
	if = {
		limit = {
			any_opinion_modifier_target = {
				reverse_has_opinion_modifier = { who = ROOT modifier = refused_my_relsub }
				any_demesne_title = { has_flag = emf_relsub_tmp_take_title }
			}
		}
		custom_tooltip = { text = RELSUB_TITLES_SEIZED }
		# Instead of choosing the considerably more efficient way to access the titles marked for taking (i.e., scope
		# to rulers via refused_my_relsub TOM and then scope to their flagged demesne titles), we use
		# any_landed_title so that we can ensure the tier-based sort/priority order is upheld in the tooltip:
		event_target:emf_cb_winner = { save_event_target_as = target_ruler }
		any_landed_title = {
			limit = {
				tier = COUNT
				has_flag = emf_relsub_tmp_take_title
				owner = { reverse_has_opinion_modifier = { who = ROOT modifier = refused_my_relsub } }
			}
			if = {
				limit = { always = yes } # auto-tooltip black magic
				usurp_title_plus_barony_if_unlanded = { target = event_target:emf_cb_winner type = holy_war }
				location = {
					hidden_tooltip = {
						capital_holding = {
							remove_holding_modifier = new_administration
							add_holding_modifier = { name = new_administration duration = 10950 }
						}
						if = {
							limit = { emf_hostile_religion_to_target_ruler = yes }
							emf_relsub_set_base_unrest = yes
						}
						if = {
							limit = { religion = event_target:emf_cb_winner }
							add_province_modifier = { name = emf_relsub_liberation_modifier years = 20 }
						}
					}
				}
			}
		}
		any_landed_title = {
			limit = {
				tier = BARON
				has_flag = emf_relsub_tmp_take_title
				owner = { reverse_has_opinion_modifier = { who = ROOT modifier = refused_my_relsub } }
			}
			# Hide usurpation tooltip for province capital baronies, as they're covered by the count-tier case
			if = {
				limit = {
					is_capital = yes
					NOT = { holder = ROOT }
				}
				hidden_tooltip = {
					usurp_title_plus_barony_if_unlanded = { target = ROOT type = holy_war }
					remove_holding_modifier = new_administration
					add_holding_modifier = { name = new_administration duration = 10950 }
				}
			}
			if = {
				limit = {
					is_capital = no
					NOT = { holder = ROOT }
				}
				usurp_title_plus_barony_if_unlanded = { target = ROOT type = holy_war }
				hidden_tooltip = {
					remove_holding_modifier = new_administration
					add_holding_modifier = { name = new_administration duration = 10950 }
				}
				location = {
					if = {
						limit = { emf_hostile_religion_to_target_ruler = yes }
						emf_relsub_add_unrest = yes
					}
				}
			}
		}
		clear_event_target = target_ruler
	}
}

emf_relsub_reset_unrest = {
	hidden_tooltip = {
		remove_province_modifier = emf_relsub_light_unrest_base_modifier
		remove_province_modifier = emf_relsub_normal_unrest_base_modifier
		remove_province_modifier = emf_relsub_heavy_unrest_base_modifier
		while = {
			limit = { has_province_modifier = emf_relsub_light_unrest_modifier }
			remove_province_modifier = emf_relsub_light_unrest_modifier
		}
		while = {
			limit = { has_province_modifier = emf_relsub_normal_unrest_modifier }
			remove_province_modifier = emf_relsub_normal_unrest_modifier
		}
		while = {
			limit = { has_province_modifier = emf_relsub_heavy_unrest_modifier }
			remove_province_modifier = emf_relsub_heavy_unrest_modifier
		}
	}
}

emf_relsub_set_base_unrest = {
	hidden_tooltip = {
		save_event_target_as = emf_relsub_unrest_province
		# reset first
		emf_relsub_reset_unrest = yes
		# baseline is determined by aggressiveness of subjugation
		event_target:emf_cb_winner = {
			trigger_switch = {
				on_trigger = has_flag
				emf_relsub_tmp_light_approach = {
					event_target:emf_relsub_unrest_province = {
						add_province_modifier = {
							modifier = emf_relsub_light_unrest_base_modifier
							years = 30
						}
					}
				}
				emf_relsub_tmp_normal_approach = {
					event_target:emf_relsub_unrest_province = {
						add_province_modifier = {
							modifier = emf_relsub_normal_unrest_base_modifier
							years = 30
						}
					}
				}
				emf_relsub_tmp_heavy_approach = {
					event_target:emf_relsub_unrest_province = {
						add_province_modifier = {
							modifier = emf_relsub_heavy_unrest_base_modifier
							years = 30
						}
					}
				}
			}
		}
		clear_event_target = emf_relsub_unrest_province
	}
}

# THIS = province, should be called once per taken settlement in THIS
emf_relsub_add_unrest = {
	hidden_tooltip = {
		if = {
			limit = { emf_relsub_has_light_unrest = yes }
			add_province_modifier = { name = emf_relsub_light_unrest_modifier years = 20 stacking = yes }
		}
		if = {
			limit = { emf_relsub_has_normal_unrest = yes }
			add_province_modifier = { name = emf_relsub_normal_unrest_modifier years = 20 stacking = yes }
		}
		if = {
			limit = { emf_relsub_has_heavy_unrest = yes }
			add_province_modifier = { name = emf_relsub_heavy_unrest_modifier years = 20 stacking = yes }
		}
	}
}

emf_relsub_disinherit_from_religion_group = {
	if = {
		limit = {
			ai = yes # Don't disinherit player rulers
			NOT = { religion = event_target:emf_cb_winner } # Skip disinheritance if they're actually true, public believers
		}
		set_flag = emf_relsub_disinherit
		any_courtier = {
			limit = {
				is_ruler = no
				OR = {
					dynasty = ROOT
					is_close_relative = ROOT
					father_even_if_dead = { is_close_relative = ROOT }
					mother_even_if_dead = { is_close_relative = ROOT }
				}
			}
			set_flag = emf_relsub_disinherit
		}
		trigger_switch = {
			on_trigger = religion_group
			christian = {
				set_flag = emf_relsub_disinherit_christian
				any_courtier = {
					limit = {
						is_ruler = no
						OR = {
							dynasty = ROOT
							is_close_relative = ROOT
							father_even_if_dead = { is_close_relative = ROOT }
							mother_even_if_dead = { is_close_relative = ROOT }
						}
					}
					set_flag = emf_relsub_disinherit_christian
				}
			}
			muslim = {
				set_flag = emf_relsub_disinherit_muslim
				any_courtier = {
					limit = {
						is_ruler = no
						OR = {
							dynasty = ROOT
							is_close_relative = ROOT
							father_even_if_dead = { is_close_relative = ROOT }
							mother_even_if_dead = { is_close_relative = ROOT }
						}
					}
					set_flag = emf_relsub_disinherit_muslim
				}
			}
			pagan_group = {
				set_flag = emf_relsub_disinherit_pagan_group
				any_courtier = {
					limit = {
						is_ruler = no
						OR = {
							dynasty = ROOT
							is_close_relative = ROOT
							father_even_if_dead = { is_close_relative = ROOT }
							mother_even_if_dead = { is_close_relative = ROOT }
						}
					}
					set_flag = emf_relsub_disinherit_pagan_group
				}
			}
			zoroastrian_group = {
				set_flag = emf_relsub_disinherit_zoroastrian_group
				any_courtier = {
					limit = {
						is_ruler = no
						OR = {
							dynasty = ROOT
							is_close_relative = ROOT
							father_even_if_dead = { is_close_relative = ROOT }
							mother_even_if_dead = { is_close_relative = ROOT }
						}
					}
					set_flag = emf_relsub_disinherit_zoroastrian_group
				}
			}
			jewish_group = {
				set_flag = emf_relsub_disinherit_jewish_group
				any_courtier = {
					limit = {
						is_ruler = no
						OR = {
							dynasty = ROOT
							is_close_relative = ROOT
							father_even_if_dead = { is_close_relative = ROOT }
							mother_even_if_dead = { is_close_relative = ROOT }
						}
					}
					set_flag = emf_relsub_disinherit_jewish_group
				}
			}
			indian_group = {
				set_flag = emf_relsub_disinherit_indian_group
				any_courtier = {
					limit = {
						is_ruler = no
						OR = {
							dynasty = ROOT
							is_close_relative = ROOT
							father_even_if_dead = { is_close_relative = ROOT }
							mother_even_if_dead = { is_close_relative = ROOT }
						}
					}
					set_flag = emf_relsub_disinherit_indian_group
				}
			}
		}
	}
}
