# -*- ck2.scripted_effects -*-

# Scripted effects for adventurer events

# ROOT = adventurer
emf_find_adventurer_target_effect = {
	if = {
		limit = { NOT = { event_target:adventurer_target = { always = yes } } }
		random_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_claimant_adventure_target } }
			save_event_target_as = adventurer_target
		}
	}
}

# ROOT = adventurer
emf_find_adventurer_location_effect = {
	random_province = {
		limit = { ROOT = { has_character_flag = adventurer_location_@PREV } }
		save_event_target_as = adventurer_location
	}
}

# ROOT = adventurer
emf_clear_adventurer_location_effect = {
	any_province = {
		ROOT = { clr_character_flag = adventurer_location_@PREV }
	}
}

# ROOT = adventurer
emf_find_adventurer_origin_effect = {
	if = {
		limit = { NOT = { event_target:adventurer_origin = { always = yes } } }
		random_province = {
			limit = { ROOT = { has_character_flag = adventurer_origin_@PREV } }
			save_event_target_as = adventurer_origin
		}
	}
}

# ROOT = adventurer
emf_find_adventurer_target_title_effect = {
	if = {
		limit = { NOT = { event_target:adventurer_target_title = { always = yes } } }
		random_landed_title = {
			limit = { ROOT = { has_character_flag = adventurer_target_title_@PREV } }
			save_event_target_as = adventurer_target_title
		}
	}
}

# ROOT = adventurer, THIS = ruler
emf_travel_to_ruler_effect = {
	emf_find_adventurer_target_title_effect = yes
	emf_clear_adventurer_location_effect = yes
	capital_scope = { ROOT = { set_character_flag = adventurer_location_@PREV } }
	if = {
		limit = { emf_closest_to_adventurer_trigger = yes }
		ROOT = { add_character_modifier = { name = do_not_disturb duration = 30 hidden = yes } }
		log = "emf_adventurer.110: [Root.GetBestName] traveling to [This.GetBestName]: travel time 10 days"
		character_event = { id = emf_adventurer.115 days = 10 }
		break = yes
	}
	if = {
		limit = { emf_close_to_adventurer_trigger = yes }
		ROOT = { add_character_modifier = { name = do_not_disturb duration = 30 hidden = yes } }
		log = "emf_adventurer.110: [Root.GetBestName] traveling to [This.GetBestName]: travel time 15 days"
		character_event = { id = emf_adventurer.115 days = 15 }
		break = yes
	}
	if = {
		limit = { emf_not_close_to_adventurer_trigger = yes }
		ROOT = { add_character_modifier = { name = do_not_disturb duration = 40 hidden = yes } }
		log = "emf_adventurer.110: [Root.GetBestName] traveling to [This.GetBestName]: travel time 20 days"
		character_event = { id = emf_adventurer.115 days = 20 }
		break = yes
	}
	if = {
		limit = { emf_far_from_adventurer_trigger = yes }
		ROOT = { add_character_modifier = { name = do_not_disturb duration = 50 hidden = yes } }
		log = "emf_adventurer.110: [Root.GetBestName] traveling to [This.GetBestName]: travel time 30 days"
		character_event = { id = emf_adventurer.115 days = 30 }
		break = yes
	}
	if = {
		limit = { emf_furthest_from_adventurer_trigger = yes }
		ROOT = { add_character_modifier = { name = do_not_disturb duration = 80 hidden = yes } }
		log = "emf_adventurer.110: [Root.GetBestName] traveling to [This.GetBestName]: travel time 60 days"
		character_event = { id = emf_adventurer.115 days = 60 }
		break = yes
	}
	ROOT = { add_character_modifier = { name = do_not_disturb duration = 120 hidden = yes } }
	log = "emf_adventurer.110: [Root.GetBestName] traveling to [This.GetBestName]: travel time 90 days"
	character_event = { id = emf_adventurer.115 days = 90 }
	break = yes
}

# ROOT = approached character, FROM = adventurer
emf_donate_to_adventurer_effect = {
	if = {
		limit = {
			wealth = 10
			NOT = { wealth = 40 }
		}
		wealth = -10
		FROM = { wealth = 10 }
	}
	if = {
		limit = {
			wealth = 40
			NOT = { wealth = 80 }
		}
		wealth = -20
		FROM = { wealth = 20 }
	}
	if = {
		limit = {
			wealth = 80
			NOT = { wealth = 120 }
		}
		wealth = -40
		FROM = { wealth = 40 }
	}
	if = {
		limit = {
			wealth = 120
			NOT = { wealth = 160 }
		}
		wealth = -60
		FROM = { wealth = 60 }
	}
	if = {
		limit = {
			wealth = 160
			NOT = { wealth = 200 }
		}
		wealth = -80
		FROM = { wealth = 80 }
	}
	if = {
		limit = {
			wealth = 200
			NOT = { wealth = 300 }
		}
		wealth = -100
		FROM = { wealth = 100 }
	}
	if = {
		limit = {
			wealth = 300
		}
		wealth = -150
		FROM = { wealth = 150 }
	}
}

# ROOT = ruler, FROM = adventurer
emf_adventurer_recruits_demesne = {
	# Approach the ruler's non-landed courtiers/vassals
	any_courtier = {
		limit = {
			is_ruler = no
			emf_adventurer_can_approach_vassal_trigger = yes
		}
		letter_event = { id = emf_adventurer.118 days = 1 }
	}
	any_vassal = {
		limit = {
			is_playable = no
			emf_adventurer_can_approach_vassal_trigger = yes
		}
		letter_event = { id = emf_adventurer.118 days = 1 }
	}
	# Recruit from the ruler's demesne
	any_demesne_title = {
		limit = {
			tier = COUNT
			location = {
				NOT = { has_province_modifier = emf_adventurer_recruited }
				NOT = { capital_holding = { is_occupied = yes } }
			}
		}
		location = { province_event = { id = emf_adventurer.119 days = 1 } }
	}
	# Adventurer moves on after a time
	if = {
		limit = {
			NOT = { num_of_count_titles = 2 }
		}
		log = "emf_adventurer.115: [From.GetBestName] recruiting in [Root.PrimaryTitle.GetName]: 10 days"
		FROM = {
			add_character_modifier = { name = do_not_disturb duration = 30 hidden = yes }
			character_event = { id = emf_adventurer.110 days = 10 }
		}
	}
	if = {
		limit = {
			num_of_count_titles = 2
			NOT = { num_of_count_titles = 3 }
		}
		log = "emf_adventurer.115: [From.GetBestName] recruiting in [Root.PrimaryTitle.GetName]: 15 days"
		FROM = {
			add_character_modifier = { name = do_not_disturb duration = 30 hidden = yes }
			character_event = { id = emf_adventurer.110 days = 15 }
		}
	}
	if = {
		limit = {
			num_of_count_titles = 3
			NOT = { num_of_count_titles = 4 }
		}
		log = "emf_adventurer.115: [From.GetBestName] recruiting in [Root.PrimaryTitle.GetName]: 20 days"
		FROM = {
			add_character_modifier = { name = do_not_disturb duration = 40 hidden = yes }
			character_event = { id = emf_adventurer.110 days = 20 }
		}
	}
	if = {
		limit = {
			num_of_count_titles = 4
			NOT = { num_of_count_titles = 5 }
		}
		log = "emf_adventurer.115: [From.GetBestName] recruiting in [Root.PrimaryTitle.GetName]: 25 days"
		FROM = {
			add_character_modifier = { name = do_not_disturb duration = 40 hidden = yes }
			character_event = { id = emf_adventurer.110 days = 25 }
		}
	}
	if = {
		limit = {
			num_of_count_titles = 5
		}
		log = "emf_adventurer.115: [From.GetBestName] recruiting in [Root.PrimaryTitle.GetName]: 30 days"
		FROM = {
			add_character_modifier = { name = do_not_disturb duration = 50 hidden = yes }
			character_event = { id = emf_adventurer.110 days = 30 }
		}
	}
}

# THIS = adventurer, must be used inside the adventurer's scope
emf_abandon_adventure_effect = {
	# Free all prisoners
	any_courtier = {
		limit = { prisoner = yes }
		prisoner = no
	}
	
	# Move all courtiers to the new court
	any_courtier = { move_character = event_target:new_court_home }
	
	# Remove all adventurer statuses and flags
	remove_character_modifier = planning_claimant_adventure
	remove_character_modifier = do_not_disturb
	clr_character_flag = planning_claimant_adventure
	clr_character_flag = warned_adventurer_target
	clr_character_flag = not_interested_in_movements
	clr_character_flag = found_home
	emf_can_disturb_effect = yes
	
	any_province = {
		PREV = {
			clr_character_flag = adventurer_location_@PREV
			clr_character_flag = adventurer_origin_@PREV
		}
	}
	any_landed_title = {
		PREV = {
			clr_character_flag = adventurer_target_title_@PREV
		}
	}
	any_opinion_modifier_target = {
		limit = { has_opinion_modifier = { who = PREV modifier = opinion_targeted_by_adventurer } }
		remove_opinion = { who = PREV modifier = opinion_targeted_by_adventurer }
		reverse_remove_opinion = { who = PREV modifier = opinion_claimant_adventure_target }
	}
	any_demesne_title = {
		limit = { adventurer = yes }
		unsafe_destroy_landed_title = THIS
	}
	move_character = event_target:new_court_home
	clear_event_target = new_court_home
}

# ROOT = adventurer
emf_find_friendly_court_effect = {
	# If I have a non-adventurer title, my most friendly court is my own court
	if = {
		limit = { any_demesne_title = { adventurer = no } }
		save_event_target_as = new_court_home
	}
	
	# Otherwise...
	# Find a court in my home realm that supported me first
	random_opinion_modifier_target = {
		limit = {
			NOT = { event_target:new_court_home = { always = yes } }
			reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
			same_realm = event_target:adventurer_target
			is_playable = yes
			is_landed = yes
		}
		save_event_target_as = new_court_home
	}
	# Failing that, find a court elsewhere that supported me
	random_opinion_modifier_target = {
		limit = {
			NOT = { event_target:new_court_home = { always = yes } }
			reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
			is_playable = yes
			is_landed = yes
		}
		save_event_target_as = new_court_home
	}
	# Failing that, find a court that let me stay
	random_opinion_modifier_target = {
		limit = {
			NOT = { event_target:new_court_home = { always = yes } }
			reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
			is_playable = yes
			is_landed = yes
		}
		save_event_target_as = new_court_home
	}
	# Failing all that, my current location will have to do
	if = {
		limit = { NOT = { event_target:new_court_home = { always = yes } } }
		event_target:adventurer_location = {
			owner = { save_event_target_as = new_court_home }
		}
	}
}

# THIS = adventurer, PREV = chosen province location
emf_adventurer_buy_troops_effect = {
	if = {
		limit = { wealth = 50 }
		wealth = -50
		spawn_unit = {
			province = PREV
			home = PREV
			owner = THIS
			match_character = event_target:adventurer_target
			match_mult = 0.04
			match_min = 50
			match_max = 2000
			attrition = 0.50
			earmark = claimant_adventure
			cannot_inherit = yes
			reinforces = yes
		}
		spawn_fleet = {
			province = closest # closest sea zone
			owner = THIS
			disband_on_peace = yes
			merge = yes
			troops = {
				galleys = { 20 20 }
			}
			earmark = claimant_adventure
		}
	}
}

# ROOT = adventurer, THIS = spawned soldier
emf_adventurer_scale_commander_effect = {
	# personal combat traits aren't randomized, so give them one
	random_list = {
		20 = { add_trait = poor_warrior }
		30 = { add_trait = trained_warrior }
		20 = { add_trait = skilled_warrior }
		10 = { add_trait = master_warrior }
	}
	# depending upon the adventurer's fitness and tier of their target, potentially give the soldier an upgrade
	random_list = {
		50 = { # upgrade? yes, please.
			modifier = {
				factor = 1.5
				event_target:adventurer_target = { higher_tier_than = DUKE }
			}
			modifier = {
				factor = 1.5
				event_target:adventurer_target = { tier = EMPEROR }
			}
			modifier = {
				factor = 1.3
				ROOT = { prestige = 500 }
			}
			modifier = {
				factor = 1.2
				ROOT = {
					calc_true_if = {
						amount = 2
						martial = 10
						martial = 16
						diplomacy = 10
						stewardship = 10
						intrigue = 10
						learning = 10
					}
				}
			}
			modifier = {
				factor = 1.2
				ROOT = {
					calc_true_if = {
						amount = 2
						martial = 12
						martial = 16
						diplomacy = 12
						stewardship = 12
						intrigue = 12
						learning = 12
					}
				}
			}
			modifier = {
				factor = 1.2
				ROOT = {
					calc_true_if = {
						amount = 2
						martial = 14
						martial = 16
						diplomacy = 14
						stewardship = 14
						intrigue = 14
						learning = 14
					}
				}
			}
			modifier = {
				factor = 1.4
				ROOT = {
					calc_true_if = {
						amount = 2
						martial = 16
						diplomacy = 16
						stewardship = 16
						intrigue = 16
						learning = 16
					}
				}
			}
			# upgrade martial education, if possible
			if = {
				limit = { trait = skilled_tactician }
				remove_trait = skilled_tactician
				add_trait = brilliant_strategist
				random_list = { # comes with a free leadership trait, so here's a few generally useful ones:
					10 = { add_trait = organizer }
					10 = { add_trait = aggressive_leader }
					10 = { add_trait = defensive_leader }
					10 = { add_trait = unyielding_leader }
					10 = { add_trait = inspiring_leader }
					10 = { add_trait = flanker }
				}
			}
			if = {
				limit = { trait = tough_soldier }
				remove_trait = tough_soldier
				add_trait = skilled_tactician
			}
			if = {
				limit = { trait = misguided_warrior }
				remove_trait = misguided_warrior
				add_trait = tough_soldier
			}
			# upgrade fighter education, if possible
			if = {
				limit = { trait = skilled_warrior }
				add_trait = master_warrior
			}
			if = {
				limit = { trait = trained_warrior }
				add_trait = skilled_warrior
			}
			if = {
				limit = { trait = poor_warrior }
				add_trait = trained_warrior
			}
			# add a bit of martial
			random_list = {
				10 = { change_martial = 2 }
				10 = { change_martial = 4 }
				10 = { change_martial = 6 }
			}
		}
		50 = { # no upgrades
			modifier = {
				factor = 2
				event_target:adventurer_target = { lower_tier_than = DUKE }
			}
		}
	}
}

# THIS = adventurer, used in cb effect
emf_check_adventurer_government_effect = {
	hidden_tooltip = {
		# Destroy their temporary titles
		any_demesne_title = {
			limit = { temporary = yes }
			unsafe_destroy_landed_title = THIS
		}
		# Make sure revolter doesn't have an unacceptable government type
		if = {
			limit = {
				OR = {
					# No theocracy or republic adventurers, period
					is_theocracy = yes
					is_republic = yes
					# Are they feudal but have no castles?
					AND = {
						is_feudal = yes
						NOT = {
							any_demesne_title = {
								tier = BARON
								holding_type = castle
							}
						}
					}
					# Are they tribal but have no tribal holdings?
					AND = {
						is_tribal = yes
						NOT = {
							any_demesne_title = {
								tier = BARON
								holding_type = tribal
							}
						}
					}
					# Or are they nomadic with no nomad holdings?
					AND = {
						is_nomadic = yes
						NOT = {
							any_demesne_title = {
								tier = BARON
								holding_type = nomad
							}
						}
					}
				}
			}
			# If so, then change government to either feudal, nomadic, or tribal
			# First priority: feudal holdings in a province of my culture
			if = {
				limit = {
					any_demesne_title = {
						tier = BARON
						holding_type = castle
						location = { culture = ROOT }
					}
				}
				emf_switch_to_feudal_gov_effect = yes
				break = yes
			}
			# Second priority: nomadic
			if = {
				limit = {
					OR = {
						any_demesne_title = {
							tier = BARON
							holding_type = nomad
							location = { culture = ROOT }
						}
						any_demesne_province = {
							culture = ROOT
							NOT = { num_of_settlements = 1 }
						}
					}
				}
				set_government_type = nomadic_government
				break = yes
			}
			# Third priority: tribal holdings in a province of my culture
			if = {
				limit = {
					any_demesne_title = {
						tier = BARON
						holding_type = tribal
						location = { culture = ROOT }
					}
				}
				set_government_type = tribal_government
				break = yes
			}
			# Fourth priority: feudal holdings
			if = {
				limit = {
					any_demesne_title = {
						tier = BARON
						holding_type = castle
					}
				}
				emf_switch_to_feudal_gov_effect = yes
				break = yes
			}
			# Fifth priority: tribal holdings
			if = {
				limit = {
					any_demesne_title = {
						tier = BARON
						holding_type = tribal
					}
				}
				set_government_type = tribal_government
				break = yes
			}
		}
	}
}

