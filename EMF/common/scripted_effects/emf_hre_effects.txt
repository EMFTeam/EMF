# -*- ck2.scripted_effects -*-

# new elector title to save is THIS; can (but might not) produce a saved target to the replaced title in
# event_target:emf_former_elector_title.
emf_replace_invalid_hre_elector_title = {
	e_hre = {
		if = {
			limit = {
				NOT = {
					persistent_event_target:hre_title_1_per = {
						emf_is_valid_hre_elector_title = yes
					}
				}
			}
			persistent_event_target:hre_title_1_per = {
				save_event_target_as = emf_former_elector_title
			}
			save_persistent_event_target = { name = hre_title_1_per scope = PREV }
		}
		else_if = {
			limit = {
				NOT = {
					persistent_event_target:hre_title_2_per = {
						emf_is_valid_hre_elector_title = yes
					}
				}
			}
			persistent_event_target:hre_title_2_per = {
				save_event_target_as = emf_former_elector_title
			}
			save_persistent_event_target = { name = hre_title_2_per scope = PREV }
		}
		else_if = {
			limit = {
				NOT = {
					persistent_event_target:hre_title_3_per = {
						emf_is_valid_hre_elector_title = yes
					}
				}
			}
			persistent_event_target:hre_title_3_per = {
				save_event_target_as = emf_former_elector_title
			}
			save_persistent_event_target = { name = hre_title_3_per scope = PREV }
		}
		else_if = {
			limit = {
				NOT = {
					persistent_event_target:hre_title_4_per = {
						emf_is_valid_hre_elector_title = yes
					}
				}
			}
			persistent_event_target:hre_title_4_per = {
				save_event_target_as = emf_former_elector_title
			}
			save_persistent_event_target = { name = hre_title_4_per scope = PREV }
		}
		else_if = {
			limit = {
				NOT = {
					persistent_event_target:hre_title_5_per = {
						emf_is_valid_hre_elector_title = yes
					}
				}
			}
			persistent_event_target:hre_title_5_per = {
				save_event_target_as = emf_former_elector_title
			}
			save_persistent_event_target = { name = hre_title_5_per scope = PREV }
		}
		else_if = {
			limit = {
				NOT = {
					persistent_event_target:hre_title_6_per = {
						emf_is_valid_hre_elector_title = yes
					}
				}
			}
			persistent_event_target:hre_title_6_per = {
				save_event_target_as = emf_former_elector_title
			}
			save_persistent_event_target = { name = hre_title_6_per scope = PREV }
		}
		else = {
			persistent_event_target:hre_title_7_per = {
				save_event_target_as = emf_former_elector_title
			}
			save_persistent_event_target = { name = hre_title_7_per scope = PREV }
		}
	}
}

emf_teardown_karling_usurper = {
	remove_trait = karling_usurper
	clr_flag = karling_usurper
	remove_character_modifier = karling_usurper_modifier
	set_variable = { which = "karling_usurper_years_left" value = 0 }
	set_variable = { which = "karling_usurper_years_elapsed" value = 0 }
	reverse_remove_opinion = { who = event_target:isis modifier = karling_usurper_tom }
	log = "---> removed karling-usurper status"
}

emf_invalidate_karling_usurper = {
	log = "---> invalidating karling-usurper [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID]). reason(s):"
	if = {
		limit = { independent = no }
		log = "----> not independent"
	}
	if = {
		limit = { NOT = { higher_tier_than = DUKE } }
		log = "----> tier < KING"
	}
	if = {
		limit = { is_feudal = no }
		log = "----> not feudal"
	}
	if = {
		limit = { emf_has_hre_religion = no }
		log = "----> not an acceptable religion"
	}
	if = {
		limit = { emf_has_hre_culture = no }
		log = "----> not an acceptable culture"
	}
	if = {
		limit = { ai = no }
		log = "----> not AI"
	}
	if = {
		limit = { emf_has_karling_title = no }
		log = "----> doesn't own a karling title"
	}
	if = {
		limit = { NOT = { check_variable = { which = "karling_usurper_years_left" value = 0.001 } } }
		log = "----> status expired (normal)"
	}
	if = {
		limit = { check_variable = { which = "karling_usurper_years_elapsed" which = event_target:duat } }
		log = "----> status expired (reached absolute max years allowed)"
	}
	emf_teardown_karling_usurper = yes
}

emf_cb_restore_hre_apply_cooldown = {
	# Cooldowns decrease in length steadily from 12yr during [867,900) -> 4yr during [940,950). After year 950, no more
	# cooldowns will be applied. Note that the cooldowns only apply to the AI attacker version of the CB (since it is so
	# liberal) and to Carolingien dynasty attackers unless EMF has been configured to apply the cooldowns to all AI
	# attacker dynasties (see events/emf_config.txt). Also, the cooldown will start counting from both the _beginning_ of
	# the invasion (to prevent multiple simultaneous invasions) and then the cooldown timer is reset again at the _end_
	# of the war, if successful. If the war ends with invalidation, fail (white peace), or reverse_demand, the cooldown
	# applied at war outset will be cleared.

	# Why single out the Karlings? These cooldowns are being added specifically to promote the possibility of an
	# "Ottonian" HRE. Applying cooldowns only to AI Karlings allows more time for non-Karlings to ascend traditionally
	# Karling thrones & if they manage to do so before the cooldowns expire, they'll be more likely to have more
	# opportunities to use the HRE unification CB than entrenched Karlings, ceteris paribus. Generally speaking, this is
	# also intended to slow down HRE unification so that it doesn't happen far too quickly in some [too many] campaigns
	# (and -- quite possibly literally -- always by a Karling emperor if it does).

	# First, clear any existing cooldown to ensure that ours is applied with the intended duration.
	emf_cb_restore_hre_clear_cooldown = yes
	ROOT = {
		if = {
			limit = {
				NOR = {
					# no cooldowns at year >= 950
					year = 950
					# cooldowns aren't disabled
					has_global_flag = emf_config_no_cooldowns_for_ai_hre_restoration_wars
				}
				OR = {
					# by default only the karling dynasty is slowed by cooldowns in its use of this CB
					emf_is_karling_dynasty = yes
					# or, cooldowns on emf_restore_hre CB apply to all dynasties
					has_global_flag = emf_config_cooldowns_for_ai_hre_restoration_wars_apply_to_all
				}
			}
			if = {
				limit = { NOT = { year = 900 } } # year in [867,900): duration = 12yr
				add_character_modifier = {
					name = emf_cb_restore_hre_cooldown
					duration = 4380
					hidden = yes
				}
			}
			if = {
				limit = { year = 900 }
				if = {
					limit = { NOT = { year = 930 } }
					if = {
						limit = { NOT = { year = 915 } } # year in [900,915): duration = 10yr
						add_character_modifier = {
							name = emf_cb_restore_hre_cooldown
							duration = 3650
							hidden = yes
						}
					}
					if = {
						limit = { year = 915 } # year in [915,930): duration = 8yr
						add_character_modifier = {
							name = emf_cb_restore_hre_cooldown
							duration = 2920
							hidden = yes
						}
					}
				}
				if = {
					limit = { year = 930 }
					if = {
						limit = { NOT = { year = 940 } } # year in [930,940): duration = 6yr
						add_character_modifier = {
							name = emf_cb_restore_hre_cooldown
							duration = 2190
							hidden = yes
						}
					}
					if = {
						limit = { year = 940 } # year in [940,950): duration = 4yr
						add_character_modifier = {
							name = emf_cb_restore_hre_cooldown
							duration = 1460
							hidden = yes
						}
					}
				}
			}
		}
	}
}

emf_cb_restore_hre_clear_cooldown = {
	hidden_effect = {
		ROOT = { remove_character_modifier = emf_cb_restore_hre_cooldown }
	}
}

emf_cb_restore_hre_on_success_title = {
	save_event_target_as = emf_cb_title

	# Try to take the kingdom's capital county, but only do so against AI holders under FROM. This avoids
	# unnecessary AI revocations & promotes ruler capitals being in plausible places (e.g., Paris, Aachen, Pavia,
	# etc.). Note that we only do this for the major kingdoms, as we don't want to promote capitals in, e.g.,
	# Aquitaine or Bavaria (and would rather avoid taking landed titles when possible).

	capital_scope = { # Kingdom capital province
		county = {
			if = {
				limit = {
					owner = {
						under_FROM = yes
						ai = yes
						NOT = { any_liege = { ai = no } }
					}
					# JIC human error or de jure drift has made the capital invalid
					de_jure_liege_or_above = event_target:emf_cb_title
					# Must not be one of the originally pseudo-viceroyal Karling kingdoms
					event_target:emf_cb_title = {
						NOR = {
							title = k_bavaria
							title = k_aquitaine
						}
					}
				}
				hidden_tooltip = {
					log = "---> usurping kingdom capital, [This.EMF_GetDebugTitleNameWithDeJureLieges]"
				}
				emf_cb_latb = yes
				hidden_tooltip = {
					any_de_jure_vassal_title = {
						limit = { owner_under_FROM = yes }
						gain_title = { target = ROOT type = invasion }
					}
				}
				gain_title = { target = ROOT type = invasion }
			}
		}
	}

	# ROOT's "de jure zone" -- definition:
	#
	# ROOT's "de jure zone" here is comprised of all counties that are de jure vassal to the target kingdom OR
	# over which ROOT's realm already has most immediate de jure pretension (i.e., ROOT's vassal d_franconia
	# happens to also own d_verona, and since there is no tier between duchy and county, ROOT's realm has most
	# immediate de jure pretension over the counties under Verona-- if ROOT held the de jure liege kingdom of
	# k_italy but somebody not under him owned d_verona, ROOT's realm would NOT have most immediate de jure
	# pretension over those counties).

	# OK, we're going to try and make this as clean cut as possible before we actually usurp the title by retracting
	# count-tier vassals of duke-tier vassals of FROM in two cases:

	# 1) count-tier vassal is 100% within ROOT's de jure zone, but duke-tier liege's subrealm is (and will be) partially
	# outside of ROOT's de jure zone. [matters because count-tier vassal is definitely going to get subjugated while duke
	# will not]

	# 2) count-tier vassal is entirely NOT within ROOT's de jure zone, but duke-tier liege's subrealm is partially inside
	# of ROOT's de jure zone. [matters because duke is definitely going to get subjugated but not the count]

	# Afterward, we'll subjugate those direct vassals of FROM within ROOT's de jure zone (hence the retractions
	# first making those misplaced vassals ready to either be subjugated or skipped intelligently).

	hidden_tooltip = {
		FROM = {
			any_vassal = {
				limit = {
					tier = DUKE
					in_revolt = no
					# Subrealm is partially outside of ROOT's de jure zone.
					any_realm_title = {
						tier = COUNT
						NOR = {
							best_de_jure_liege_title_under_ROOT = yes
							de_jure_liege_or_above = event_target:emf_cb_title
						}
					}
					# Count-tier indirect vassals with ALL provinces inside the "de jure zone."
					any_vassal = {
						tier = COUNT
						in_revolt = no
						NOT = {
							any_demesne_title = {
								tier = COUNT
								NOR = {
									best_de_jure_liege_title_under_ROOT = yes
									de_jure_liege_or_above = event_target:emf_cb_title
								}
							}
						}
					}
				}
				log = "---> loser will retract count-tier vassal(s) from [This.EMF_GetDebugName] (phase 1):"
				any_vassal = {
					limit = {
						tier = COUNT
						in_revolt = no
						NOT = {
							any_demesne_title = {
								tier = COUNT
								NOR = {
									best_de_jure_liege_title_under_ROOT = yes
									de_jure_liege_or_above = event_target:emf_cb_title
								}
							}
						}
					}
					log = "----> retracting: [This.EMF_GetDebugName]"
					set_defacto_liege = ROOT_FROM
					if = {
						limit = { vassal_of = ROOT_FROM }
						# Mark duke as their former liege temporarily
						reverse_opinion = { who = PREV modifier = my_prior_vassal }
					}
					else = {
						log = "------> ERROR: loser could not vassalize [This.GetObjectPronoun]"
					}
				}
			}
			any_vassal = {
				limit = {
					tier = DUKE
					in_revolt = no
					# Only consider dukes that are actually at least partially de jure vassals of ROOT's
					# "de jure zone."
					any_realm_title = {
						tier = COUNT
						OR = {
							best_de_jure_liege_title_under_ROOT = yes
							de_jure_liege_or_above = event_target:emf_cb_title
						}
					}
					# Count-tier vassals with no counties de jure under ROOT or the target kingdom.
					any_vassal = {
						tier = COUNT
						in_revolt = no
						NOT = {
							any_demesne_title = {
								tier = COUNT
								OR = {
									best_de_jure_liege_title_under_ROOT = yes
									de_jure_liege_or_above = event_target:emf_cb_title
								}
							}
						}
					}
				}
				log = "---> loser will retract count-tier vassal(s) from [This.EMF_GetDebugName] (phase 2):"
				any_vassal = {
					limit = {
						tier = COUNT
						in_revolt = no
						NOT = {
							any_demesne_title = {
								tier = COUNT
								OR = {
									best_de_jure_liege_title_under_ROOT = yes
									de_jure_liege_or_above = event_target:emf_cb_title
								}
							}
						}
					}
					log = "----> retracting: [This.EMF_GetDebugName]"
					set_defacto_liege = ROOT_FROM
					if = {
						limit = { vassal_of = ROOT_FROM }
						# Mark duke as their former liege temporarily
						reverse_opinion = { who = PREV modifier = my_prior_vassal }
					}
					else = {
						log = "------> ERROR: loser could not vassalize [This.GetObjectPronoun]"
					}
				}
			}
		}
		# Track FROM's direct vassals before the subjugation; this will include previously retracted vassals.
		FROM = { any_vassal = { reverse_opinion = { who = PREV modifier = my_prior_vassal } } }
		# Vassalize rulers under FROM whom have any realm counties that are de jure vassals of ROOT's de jure zone.
		FROM = {
			any_vassal = {
				limit = {
					higher_tier_than = BARON
					in_revolt = no
					# To vassalize a religious head or holy order, we must match their religion:
					OR = {
						religion = ROOT
						AND = {
							controls_religion = no
							holy_order = no
						}
					}
					# Has provinces inside ROOT's de jure zone:
					any_realm_title = {
						tier = COUNT
						OR = {
							best_de_jure_liege_title_under_ROOT = yes
							de_jure_liege_or_above = event_target:emf_cb_title
						}
					}
				}
				log = "---> invader vassalizing: [This.EMF_GetDebugName]"
				ROOT = { save_event_target_as = emf_cb_new_imperial_liege }
				emf_set_viceroy_exemption = yes
				set_defacto_liege = ROOT
				if = {
					limit = { NOT = { vassal_of = ROOT } }
					log = "------> ERROR: invader could not vassalize [This.GetObjectPronoun]"
				}
			}
		}
	}
	# Now, we finally usurp the CB target kingdom title; it may bring more vassals with it (but they are still marked with
	# my_prior_vassal TOMs from FROM, so no biggie).
	usurp_title = { target = ROOT type = invasion }
	# And hit the de jure kingdom with a proper VoTuT, as the hard-code can handle some cases we cannot handle very well
	# ourselves:
	pf_liege_change_under_title_begin_effect = yes
	ROOT = {
		vassalize_or_take_under_title = {
			title = PREV
			enemy = FROM
		}
	}
	pf_liege_change_under_title_end_effect = yes
	hidden_tooltip = {
		# Stitch vassalage back together to achieve minimum number of vassal-liege relationships broken. This is to
		# fix any unnecessary vassal retractions that we did in the first stage. It works no matter who these
		# possibly-former vassals call their liege now.
		FROM = {
			any_opinion_modifier_target = { # FROM's possibly-former vassals who were victim of a retraction
				limit = {
					reverse_has_opinion_modifier = { who = PREV modifier = my_prior_vassal }
					# Whom also has at least one my_prior_vassal directed at *their* former vassal(s)
					has_any_opinion_modifier = my_prior_vassal
				}
				log = "---> checking necessity of vassal retractions for [This.EMF_GetDebugName]:"
				any_opinion_modifier_target = { # Their former vassals; PREV is their liege before retraction
					limit = {
						reverse_has_opinion_modifier = { who = PREV modifier = my_prior_vassal }
					}
					if = {
						limit = {
							OR = {
								same_realm = PREV
								AND = {
									independent = yes
									PREV = { independent = yes }
								}
							}
							lower_tier_than = PREV
						}
						# Woot. We can stitch this back together no problem.
						log = "----> retraction unnecessary -- fixing: [This.EMF_GetDebugName]"
						set_defacto_liege = PREV
						if = {
							limit = { vassal_of = PREV }
							reverse_remove_opinion = { who = ROOT_FROM modifier = my_prior_vassal }
						}
						else = {
							log = "------> ERROR: former liege could not vassalize unnecessarily retracted vassal"
						}
					}
					else = {
						# We shouldn't undo this retraction. However, we'll give the former liege a
						# rightful subjugation TOM which may (actually is fairly likely for this CB)
						# allow them to use the emf_revassalize CB to get their vassal back in the
						# future.
						reverse_opinion = { who = PREV modifier = opinion_rightful_subjugation }
						log = "----> retraction OK: [This.EMF_GetDebugName]"
					}
					# Cleanup all my_prior_vassal temporary TOMs for vassals (i.e., not FROM's) here:
					reverse_remove_opinion = { who = PREV modifier = my_prior_vassal }
				}
			}
		}
		# Properly subjugate (add opinions & process liege change) all those whom have been vassalized by ROOT but
		# were formerly vassals of FROM. Note that any successful undo of vassal retractions will properly skip the
		# now [again] indirect vassals.
		log = "---> invader finalizing subjugation of:"
		ROOT = {
			any_vassal = {
				limit = { reverse_has_opinion_modifier = { who = FROM modifier = my_prior_vassal } }
				log = "----> [This.EMF_GetDebugName]"
				if = {
					limit = { religion = ROOT }
					opinion = { who = ROOT modifier = opinion_subjugated }
				}
				if = {
					limit = { NOT = { religion = ROOT } }
					opinion = { who = ROOT modifier = opinion_subjugated_other_rel }
				}
				emf_liege_change = yes
			}
		}
		# Clear all of FROM's my_prior_vassal temporary TOMs
		FROM = {
			any_opinion_modifier_target = {
				reverse_remove_opinion = { who = PREV modifier = my_prior_vassal }
			}
		}
	}
}
