# -*- ck2.scripted_effects -*-


emf_stop_hiding = {
	if = {
		limit = { trait = in_hiding }
		remove_trait = in_hiding
		add_character_modifier = { name = went_out_of_hiding_timer duration = 180 hidden = yes }
		hidden_tooltip = { character_event = { id = CM.6400 } } # Notify plotters and family
	}
}

# These do_not_disturb related effects are here for convenience as well as primarily a means of centralizing code which deals
# with this status, should we ever switch to an alterate design based-upon automatically-expiring, timed, and hidden
# character modifiers.

emf_do_not_disturb = {
	set_character_flag = do_not_disturb
}

emf_see_god = {
	isis = { reverse_banish = PREV }
	death = { death_reason = death_missing }
}

emf_vanish_character = {
	dynasty = none
	set_father = 0
	set_mother = 0
	if = {
		limit = { is_alive = yes }
		death = { death_reason = death_missing }
	}
}

emf_make_location_ROOT_capital = {
	if = {
		limit = {
			ROOT = { is_nomadic = no } # Can't seem to set nomad capitals by event (tested last in 2.4)
			location = {
				owner = { character = ROOT } # Must own the province in order to make it capital, of course
				NOT = { # Location not already our capital
					ROOT = {
						capital_scope = { province = PREVPREV }
					}
				}
			}
		}
		custom_tooltip = {
			text = emf_ctt_make_location_ROOT_capital
			hidden_tooltip = {
				location = { ROOT = { capital = PREV } }
			}
		}
		# MAYBE-SOMEDAY-TODO: this'd be a place to call a hook which does some stuff whenever a ruler capital changes
	}
}

# THIS = ruler to subjugate, ROOT = new liege
emf_ROOT_subjugate_ruler = {
	if = {
		limit = { NOT = { vassal_of = ROOT } }
		ROOT = { save_event_target_as = emf_cb_new_imperial_liege }
		emf_set_viceroy_exemption = yes
		set_defacto_liege = ROOT
		hidden_tooltip = {
			if = {
				limit = { vassal_of = ROOT }
				emf_liege_change = yes
				if = {
					limit = { religion = ROOT }
					opinion = { who = ROOT modifier = opinion_subjugated }
				}
				if = {
					limit = { NOT = { religion = ROOT } }
					opinion = { who = ROOT modifier = opinion_subjugated_other_rel }
				}
			}
		}
	}
}

# THIS = ruler to subjugate, FROM = new liege
emf_FROM_subjugate_ruler = {
	if = {
		limit = { NOT = { vassal_of = FROM } }
		FROM = { save_event_target_as = emf_cb_new_imperial_liege }
		emf_set_viceroy_exemption = yes
		set_defacto_liege = FROM
		hidden_tooltip = {
			if = {
				limit = { vassal_of = FROM }
				emf_liege_change = yes
				if = {
					limit = { religion = FROM }
					opinion = { who = FROM modifier = opinion_subjugated }
				}
				if = {
					limit = { NOT = { religion = FROM } }
					opinion = { who = FROM modifier = opinion_subjugated_other_rel }
				}
			}
		}
	}
}

# THIS = tributary, ROOT = potential suzerain which has THIS as a tribute; that tributary relation will be removed.
emf_remove_suzerain_under_ROOT = {
	if = {
		limit = {
			is_tributary = yes
			suzerain = { under_ROOT = yes }
		}
		suzerain = { remove_tributary = PREV }
	}
}

# THIS = tributary, FROM = potential suzerain (merely scope variant)
emf_remove_suzerain_under_FROM = {
	if = {
		limit = {
			is_tributary = yes
			suzerain = { under_FROM = yes }
		}
		suzerain = { remove_tributary = PREV }
	}
}

emf_liege_change = {
	hidden_tooltip = {
		pf_liege_change_effect = yes
		if = {
			limit = {
				independent = no
				is_tributary = yes
			}
			any_suzerain = { remove_tributary = PREV }
		}
		# Remove any invalidated protected_appointment opinions due to liege change
		any_opinion_modifier_target = {
			limit = {
				reverse_has_opinion_modifier = { who = PREV modifier = opinion_protected_appointment_always }
				NOT = { is_liege_of = PREV }
			}
			reverse_remove_opinion = { who = PREV modifier = opinion_protected_appointment_always }
		}
	}
}

emf_abdicate = {
	hidden_effect = {
		save_event_target_as = emf_abdicator_tmp
		character_event = { id = emf_core.110 }
		if = {
			limit = { event_target:emf_abdicate_real_heir = { is_alive = yes } }
			event_target:emf_abdicate_real_heir = { save_event_target_as = emf_heir_tmp }
		}
		else = {
			current_heir = { save_event_target_as = emf_heir_tmp }
		}
		# Non-Dynastic Succession
		if = {
			limit = {
				ai = no
				has_game_rule = { name = non_dynastic_succession value = on }
				is_merchant_republic = no
				is_nomadic = no
				event_target:emf_heir_tmp = {
					ai = yes
					NOT = { dynasty = PREV }
				}
			}
			set_character_flag = emf_non_dynastic_succession_tmp
			event_target:emf_heir_tmp = {
				if = {
					limit = { is_lowborn = yes }
					dynasty = father_bastard
				}
				event_target:emf_abdicator_tmp = {
					create_character = {
						religion = PREV
						culture = PREV
						dynasty = PREV
					}
					new_character = { save_event_target_as = emf_sleeve }
				}
				dynasty = event_target:emf_abdicator_tmp
			}
		}
	}
	if = {
		limit = { event_target:emf_abdicate_real_heir = { is_alive = yes } }
		abdicate_to = event_target:emf_heir_tmp
	}
	else = {
		abdicate = yes
	}
	hidden_effect = {
		if = {
			limit = { has_character_flag = emf_non_dynastic_succession_tmp }
			event_target:emf_heir_tmp = { character_event = { id = emf_core.11 } } # finish Non-Dynastic Succession
		}
	}
	clr_character_flag = emf_non_dynastic_succession_tmp
	clear_event_target = emf_heir_tmp
	clear_event_target = emf_abdicator_tmp
	clear_event_target = emf_abdicate_real_heir
}

emf_remove_plot_assisted_spying = {
	if = {
		limit = {
			OR = {
				has_character_modifier = plot_assisted_spying
				has_character_modifier = plot_assisted_spying2
				has_character_modifier = plot_assisted_spying3
				has_character_modifier = plot_assisted_spying4
				has_character_modifier = plot_assisted_spying5
			}
		}
		remove_character_modifier = plot_assisted_spying
		remove_character_modifier = plot_assisted_spying2
		remove_character_modifier = plot_assisted_spying3
		remove_character_modifier = plot_assisted_spying4
		remove_character_modifier = plot_assisted_spying5
	}
}
