# -*- ck2.scripted_effects -*-


emf_stop_hiding_effect = {
	if = {
		limit = { trait = in_hiding }
		remove_trait = in_hiding
		add_character_modifier = { name = went_out_of_hiding_timer duration = 180 hidden = yes }
		hidden_tooltip = { character_event = { id = CM.6400 } } # Notify plotters and family
	}
}

# These do_not_disturb related effects are here for convenience as well as primarily a means of centralizing code which deals
# with this status, should we ever switch to an alterate design based-upon automatically-expiring, timed, and hidden
# character modifiers.

emf_do_not_disturb_effect = {
	set_character_flag = do_not_disturb
}

emf_can_disturb_effect = {
	clr_character_flag = do_not_disturb
}

emf_see_god_effect = {
	isis = { reverse_banish = PREV }
	death = { death_reason = death_missing }
}

emf_make_location_ROOT_capital_effect = {
	if = {
		limit = {
			ROOT = { is_nomadic = no } # Can't seem to set nomad capitals by event (tested last in 2.4)
			location = {
				owner = { character = ROOT } # Must own the province in order to make it capital, of course
				NOT = { # Location not already our capital
					ROOT = {
						capital_scope = { province = PREVPREV }
					}
				}
			}
		}
		custom_tooltip = {
			text = emf_ctt_make_location_ROOT_capital_effect
			hidden_tooltip = {
				location = { ROOT = { capital = PREV } }
			}
		}
		# MAYBE-SOMEDAY-TODO: this'd be a place to call a hook which does some stuff whenever a ruler capital changes
	}
}

emf_destroy_title_effect = {
	if = {
		limit = { has_holder = yes }
		hidden_tooltip = { # Hopefully this stops the `log` commands from executing when just generating a tooltip
			holder_scope = {
				log = "DEBUG: emf_destroy_title_effect: [Prev.GetID] ([Prev.GetFullName]), held by [This.GetTitledName] ([This.GetID]/[This.PrimaryTitle.GetID])"
			}
			clr_title_flag = has_imperial_administration
			if = {
				limit = { tier = EMPEROR }
				set_variable = { which = "imperial_decay" value = 0 }
				set_variable = { which = "imperial_dynasty_count" value = 0 }
			}
		}
	}
	destroy_landed_title = THIS
}

emf_destroy_title_unsafe_effect = {
	if = {
		limit = { has_holder = yes }
		hidden_tooltip = { # Hopefully this stops the `log` commands from executing when just generating a tooltip
			holder_scope = {
				log = "DEBUG: emf_destroy_title_unsafe_effect: [Prev.GetID] ([Prev.GetFullName]), held by [This.GetTitledName] ([This.GetID]/[This.PrimaryTitle.GetID])"
			}
			clr_title_flag = has_imperial_administration
			if = {
				limit = { tier = EMPEROR }
				set_variable = { which = "imperial_decay" value = 0 }
				set_variable = { which = "imperial_dynasty_count" value = 0 }
			}
		}
	}
	unsafe_destroy_landed_title = THIS
}

# THIS = ruler to subjugate, ROOT = new liege
emf_ROOT_subjugate_ruler_effect = {
	if = {
		limit = { NOT = { vassal_of = ROOT } }
		ROOT = { save_event_target_as = emf_cb_new_imperial_liege }
		emf_set_viceroy_exemption_effect = yes
		set_defacto_liege = ROOT
		hidden_tooltip = {
			if = {
				limit = { vassal_of = ROOT }
				emf_liege_change_effect = yes
				if = {
					limit = { religion = ROOT }
					opinion = { who = ROOT modifier = opinion_subjugated }
				}
				if = {
					limit = { NOT = { religion = ROOT } }
					opinion = { who = ROOT modifier = opinion_subjugated_other_rel }
				}
			}
		}
	}
}

# THIS = tributary, ROOT = potential suzerain which has THIS as a tribute; that tributary relation will be removed.
emf_remove_suzerain_under_ROOT = {
	if = {
		limit = {
			is_tributary = yes
			suzerain = { under_ROOT = yes }
		}
		suzerain = { remove_tributary = PREV }
	}
}

# THIS = tributary, FROM = potential suzerain (merely scope variant)
emf_remove_suzerain_under_FROM = {
	if = {
		limit = {
			is_tributary = yes
			suzerain = { under_FROM = yes }
		}
		suzerain = { remove_tributary = PREV }
	}
}

emf_liege_change_effect = {
	hidden_tooltip = {
		pf_liege_change_effect = yes
		
		if = {
			limit = {
				independent = no
				is_tributary = yes
			}
			any_suzerain = { remove_tributary = PREV }
		}
		
		# Remove any invalidated protected_appointment opinions due to liege change
		any_opinion_modifier_target = {
			limit = {
				reverse_has_opinion_modifier = { who = PREV modifier = opinion_protected_appointment_always }
				NOT = { is_liege_of = PREV }
			}
			reverse_remove_opinion = { who = PREV modifier = opinion_protected_appointment_always }
		}
	}
}

emf_remove_plot_assisted_spying_effect = {
	if = {
		limit = {
			OR = {
				has_character_modifier = plot_assisted_spying
				has_character_modifier = plot_assisted_spying2
				has_character_modifier = plot_assisted_spying3
				has_character_modifier = plot_assisted_spying4
				has_character_modifier = plot_assisted_spying5
			}
		}
		remove_character_modifier = plot_assisted_spying
		remove_character_modifier = plot_assisted_spying2
		remove_character_modifier = plot_assisted_spying3
		remove_character_modifier = plot_assisted_spying4
		remove_character_modifier = plot_assisted_spying5
	}
}

emf_new_character_effect = {
	hidden_tooltip = {
		# SOMEDAY: if brilliant_strategist and no leadership traits, assign random leader trait
		character_event = { id = emf_startup.5 }
		character_event = { id = emf_startup.6 }
	}
}

# Just shorthand for the default Indian character caste for spawned characters
# Pretty much always want to use this, unless spawning priests (or any other
# time when caste needs to be specified)
emf_new_character_noble_effect = {
	hidden_tooltip = {
		if = {
			limit = { religion_group = indian_group }
			add_trait = kshatriya
			character_event = { id = RoI.30121 }
		}
	}
	emf_new_character_effect = yes
}

emf_remove_lifestyle_traits = {
	hidden_tooltip = {
		remove_trait = mystic
		remove_trait = socializer
		remove_trait = gamer
		remove_trait = hedonist
		remove_trait = duelist
		remove_trait = hunter
		remove_trait = strategist
		remove_trait = administrator
		remove_trait = architect
		remove_trait = gardener
		remove_trait = schemer
		remove_trait = impaler
		remove_trait = seducer
		remove_trait = seductress
		remove_trait = theologian
		remove_trait = scholar
	}
}

emf_create_daughter_effect = {
	random_list = {
		10 = {
			modifier = {
				factor = 0
				age = 60
			}
			modifier = {
				factor = 0.5
				age = 40
			}
			create_character = {
				random_traits = yes
				age = 15
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			modifier = {
				factor = 0.25
				age = 60
			}
			modifier = {
				factor = 0.5
				NOT = { age = 60 }
				age = 40
			}
			modifier = {
				factor = 0
				NOT = { age = 31 }
			}
			create_character = {
				random_traits = yes
				age = 16
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			modifier = {
				factor = 0.5
				age = 60
			}
			modifier = {
				factor = 0.75
				NOT = { age = 60 }
				age = 40
			}
			modifier = {
				factor = 0
				NOT = { age = 32 }
			}
			create_character = {
				random_traits = yes
				age = 17
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			modifier = {
				factor = 0
				NOT = { age = 33 }
			}
			create_character = {
				random_traits = yes
				age = 18
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			modifier = {
				factor = 0
				NOT = { age = 34 }
			}
			create_character = {
				random_traits = yes
				age = 19
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			modifier = {
				factor = 0
				NOT = { age = 35 }
			}
			create_character = {
				random_traits = yes
				age = 20
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			modifier = {
				factor = 0
				NOT = { age = 36 }
			}
			modifier = {
				factor = 2
				age = 60
			}
			create_character = {
				random_traits = yes
				age = 21
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
		10 = {
			modifier = {
				factor = 0
				NOT = { age = 37 }
			}
			modifier = {
				factor = 3
				age = 60
			}
			create_character = {
				random_traits = yes
				age = 22
				female = yes
				culture = ROOT
				religion = ROOT
				dynasty = ROOT
			}
		}
	}
	new_character = {
		log = "emf_startup.14: [This.GetBestName] (#[This.GetID]) created as extra daughter on startup for [Root.GetBestName] (#[Root.GetID])"
		if = {
			limit = { ROOT = { is_female = no } }
			set_father = ROOT
		}
		if = {
			limit = { ROOT = { is_female = yes } }
			set_mother = ROOT
		}
		ROOT = {
			random_spouse = {
				limit = {
					is_older_than = PREVPREV
					age_diff = { who = PREVPREV years = 16 }
				}
				if = {
					limit = { is_female = no }
					new_character = { set_father = PREV }
				}
				if = {
					limit = { is_female = yes }
					new_character = { set_mother = PREV }
				}
			}
		}
		if = {
			limit = { religion_group = indian_group }
			add_trait = kshatriya
			character_event = { id = RoI.30121 }
		}
	}
}

