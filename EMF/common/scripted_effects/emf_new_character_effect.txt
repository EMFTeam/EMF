# -*- ck2.scripted_effects -*-

# NOTE: When generating new characters for which you want to assign your own congenital traits and/or disable any further
# random congenital trait assignment, set_flag = emf_dna_check before calling emf_new_character = yes (or any of its
# wrappers such as emf_new_character_noble = yes).
#
# NOTE: If you want the spawned character to inherit from the traits of their assigned mother and father as if they'd been
# born the normal way unto them, ensure that the mother and father are alive and assigned as mother and father (set_mother,
# set_father/set_real_father) for the character before calling emf_new_character.
emf_new_character = {
	hidden_effect = {
		if = {
			limit = {
				mother_even_if_dead = { always = yes }
			}
			mother_even_if_dead = {
				emf_PREV_inherit_genetics_from_THIS = yes
			}
		}
		if = {
			limit = {
				is_father_real_father = yes
				father_even_if_dead = { always = yes }
			}
			father_even_if_dead = {
				emf_PREV_inherit_genetics_from_THIS = yes
			}
		}
		else_if = {
			limit = {
				real_father_even_if_dead = { always = yes }
			}
			real_father_even_if_dead = {
				emf_PREV_inherit_genetics_from_THIS = yes
			}
		}
		character_event = { id = emf_dna.10 } # Genetics
		character_event = { id = emf_cadet.0 } # If assigned to a cadet dynasty & family, propagate cadet state
		character_event = { id = HF.23019 } # Zodiac effect
		character_event = { id = TOG.6001 } # Saoshyant Descendant event
		if = {
			limit = {
				father_even_if_dead = {
					trait = sayyid
				}
			}
			add_trait = sayyid
		}
		else_if = {
			limit = {
				mother_even_if_dead = {
					trait = sayyid
				}
			}
			add_trait = mirza
		}
		character_event = { id = HF.23016 } # Pagan religious branch
		if = {
			limit = {
				trait = brilliant_strategist
				leader_traits < 1
			}
			emf_add_random_generic_leader_trait = yes
		}
		character_event = { id = emf_startup.10 } # Combat trait
		character_event = { id = emf_startup.11 } # Diplomat trait
		character_event = { id = HFP.30038 } # Freckles
	}
}

# Wrapper that adds the correct Indian character caste & religious branch for spawned characters, if applicable.
# Version: Nobility
emf_new_character_noble = {
	hidden_effect = {
		if = {
			limit = { has_dharmic_religion_trigger = yes }
			if = {
				limit = { religion = hindu }
				add_trait = kshatriya
			}
			character_event = { id = RoI.30121 }
		}
	}
	emf_new_character = yes
}

# Wrapper that adds the correct Indian character caste & religious branch for spawned characters, if applicable.
# Version: Mayors / Merchants
emf_new_character_steward = {
	hidden_effect = {
		if = {
			limit = { has_dharmic_religion_trigger = yes }
			if = {
				limit = { religion = hindu }
				add_trait = vaishya
			}
			character_event = { id = RoI.30121 }
		}
	}
	emf_new_character = yes
}

# Wrapper that adds the correct Indian character caste & religious branch for spawned characters, if applicable.
# Version: Priests
emf_new_character_priest = {
	hidden_effect = {
		if = {
			limit = { has_dharmic_religion_trigger = yes }
			if = {
				limit = { religion = hindu }
				add_trait = brahmin
			}
			character_event = { id = RoI.30121 }
		}
	}
	emf_new_character = yes
}

# Wrapper that adds the correct Indian character caste & religious branch for spawned characters, if applicable.
# Version: Peasants
emf_new_character_peasant = {
	hidden_effect = {
		if = {
			limit = { has_dharmic_religion_trigger = yes }
			#if = {
			#	limit = { religion = hindu }
			#	add_trait = shudra
			#}
			character_event = { id = RoI.30121 }
		}
	}
	emf_new_character = yes
}

# Version of emf_new_character meant to be used for babies spawned from events, since they miss on_birth events.
emf_new_character_baby = {
	hidden_effect = {
		if = {
			limit = {
				mother_even_if_dead = { always = yes }
			}
			mother_even_if_dead = {
				emf_PREV_inherit_genetics_from_THIS = yes
			}
		}
		if = {
			limit = {
				is_father_real_father = yes
				father_even_if_dead = { always = yes }
			}
			father_even_if_dead = {
				emf_PREV_inherit_genetics_from_THIS = yes
			}
		}
		else_if = {
			limit = {
				real_father_even_if_dead = { always = yes }
			}
			real_father_even_if_dead = {
				emf_PREV_inherit_genetics_from_THIS = yes
			}
		}
		character_event = { id = emf_dna.10 } # Genetics
		character_event = { id = emf_cadet.0 } # If assigned to a cadet dynasty & family, propagate cadet state
		if = {
			limit = {
				father_even_if_dead = {
					trait = sayyid
				}
			}
			add_trait = sayyid
		}
		else_if = {
			limit = {
				mother_even_if_dead = {
					trait = sayyid
				}
			}
			add_trait = mirza
		}
		
		character_event = { id = 335 } # Hidden utility event for all children born
		character_event = { id = TOG.3206 } # Child Perceived to be Demon Born
		character_event = { id = CM.10011 } # Chronicle entry
		character_event = { id = HL.1000 } # Child born with Wolf's Blood
		character_event = { id = HL.1700 } # Wolf's Blood inheritance
		character_event = { id = TOG.6001 } # Children gains Saoshyant Descendant trait from Saoshyant
		character_event = { id = RIP.11064 } # Babies born in seclusion get seclusion modifier
		character_event = { id = MNM.7508 } # DW Demon child
		character_event = { id = HFP.20403 } # Remove pregnancy_finishing trait, check all special circumstances for child's birth.
		character_event = { id = HFP.20555 } # Clear all hard_pregnancy traits and flags.
		character_event = { id = HFP.30030 } # Apply freckles trait properly.
		character_event = { id = HF.23019 } # Zodiac signs assigned on Hellenic babies.
		character_event = { id = HFP.20068 } # Cleanup for children born after father's death.
		character_event = { id = HF.23750 } # Stable Doctrine gives chance to shield newborn heir from harm.
	}
}
