
### SUCCESSION LAW CHANGES ###

emf_laws_change_succ_prestige_cost_effect = {
	if = {
		limit = { tier = BARON }
		holder_scope = { prestige = -125 }
	}
	if = {
		limit = { tier = COUNT }
		holder_scope = { prestige = -250 }
	}
	if = {
		limit = { tier = DUKE }
		holder_scope = { prestige = -500 }
	}
	if = {
		limit = { tier = KING }
		holder_scope = { prestige = -750 }
	}
	if = {
		limit = { tier = EMPEROR }
		holder_scope = { prestige = -1000 }
	}
}

# Convenience effect used in all succ_adopt_* laws to save the current heir and pretenders before actually changing law
emf_laws_change_succ_save_contenders_effect = {
	holder_scope = {
		event_target:emf_succ_title = {
			current_heir = {
				reverse_opinion = { who = PREVPREV modifier = opinion_succ_former_heir }
				save_event_target_as = emf_former_heir
			}
		}
		any_character = {
			limit = {
				NOT = { character = event_target:emf_former_heir }
				any_pretender_title = { title = event_target:emf_succ_title }
			}
			reverse_opinion = { who = PREV modifier = opinion_succ_former_pretender }
		}
	}
}

# Convenience effect used in all succ_adopt_* laws to perform cleanup of all state at the end of the law effect
emf_laws_change_succ_cleanup_effect = {
	# Cleanup former heir & former pretender temporary TOMs...
	holder_scope = {
		remove_opinion = { who = event_target:emf_former_heir modifier = opinion_succ_former_heir }
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_succ_former_pretender } }
			reverse_remove_opinion = { who = PREV modifier = opinion_succ_former_pretender }
		}
	}

	# Cleanup reaction flags for this law change...
	#
	# Could optimize this in the future by changing these scripted triggers/effects for reactions to use temporary TOMs
	# and thus any_opinion_modifier_target instead of literally sweeping all characters in the game. If we need to use
	# delayed events for succession law reactions (for some reason), then we'll need to convert these to temporary TOMSs
	# anyway.
	any_character = {
		limit = { emf_laws_change_succ_reaction_trigger = yes }
		clr_character_flag = emf_good_reaction
		clr_character_flag = emf_mild_reaction
		clr_character_flag = emf_bad_reaction
		clr_character_flag = emf_bad2_reaction
	}
}

# Convenience effects for adopting a new succession law change reaction stance

emf_laws_change_succ_terrible_reaction_effect = {
	if = {
		limit = { has_character_flag = emf_bad2_reaction }
		tooltip = { 
			opinion = {
				who = event_target:emf_succ_changer
				modifier = opinion_bad_succ_law_change
				multiplier = 2
			}
		}
	}
	if = {
		limit = { NOT = { has_character_flag = emf_bad2_reaction } }
		emf_laws_change_succ_reset_reaction_effect = yes
		set_character_flag = emf_bad2_reaction
		opinion = { who = event_target:emf_succ_changer modifier = opinion_bad_succ_law_change multiplier = 2 }
	}
}

emf_laws_change_succ_bad_reaction_effect = {
	if = {
		limit = { has_character_flag = emf_bad_reaction }
		tooltip = { 
			opinion = { who = event_target:emf_succ_changer modifier = opinion_bad_succ_law_change }
		}
	}
	if = {
		limit = { NOT = { has_character_flag = emf_bad_reaction } }
		emf_laws_change_succ_reset_reaction_effect = yes
		set_character_flag = emf_bad_reaction
		opinion = { who = event_target:emf_succ_changer modifier = opinion_bad_succ_law_change }
	}
}

emf_laws_change_succ_mild_reaction_effect = {
	if = {
		limit = { has_character_flag = emf_mild_reaction }
		tooltip = { 
			opinion = { who = event_target:emf_succ_changer modifier = opinion_succ_law_change }
		}
	}
	if = {
		limit = { NOT = { has_character_flag = emf_mild_reaction } }
		emf_laws_change_succ_reset_reaction_effect = yes
		set_character_flag = emf_mild_reaction
		opinion = { who = event_target:emf_succ_changer modifier = opinion_succ_law_change }
	}
}

emf_laws_change_succ_good_reaction_effect = {
	if = {
		limit = { has_character_flag = emf_good_reaction }
		tooltip = { 
			opinion = { who = event_target:emf_succ_changer modifier = opinion_good_succ_law_change }
		}
	}
	if = {
		limit = { NOT = { has_character_flag = emf_good_reaction } }
		emf_laws_change_succ_reset_reaction_effect = yes
		set_character_flag = emf_good_reaction
		opinion = { who = event_target:emf_succ_changer modifier = opinion_good_succ_law_change }
	}
}

# Remove any succ_change opinions that we've added as part of this particular law change reaction (used in this file only)
emf_laws_change_succ_reset_reaction_effect = {
	hidden_tooltip = {
		if = {
			limit = { has_character_flag = emf_mild_reaction }
			remove_opinion = { who = event_target:emf_succ_changer modifier = opinion_succ_law_change }
			clr_character_flag = emf_mild_reaction
		}
		if = {
			limit = { has_character_flag = emf_good_reaction }
			remove_opinion = { who = event_target:emf_succ_changer modifier = opinion_good_succ_law_change }
			clr_character_flag = emf_good_reaction
		}
		if = {
			limit = { has_character_flag = emf_bad_reaction }
			remove_opinion = { who = event_target:emf_succ_changer modifier = opinion_bad_succ_law_change }
			clr_character_flag = emf_bad_reaction
		}
		if = {
			limit = { has_character_flag = emf_bad2_reaction }
			remove_opinion = { who = event_target:emf_succ_changer modifier = opinion_bad_succ_law_change }
			remove_opinion = { who = event_target:emf_succ_changer modifier = opinion_bad_succ_law_change }
			clr_character_flag = emf_bad2_reaction
		}
	}
}


#### SUCCESSION LAW ADOPTION EFFECTS ####

# Common to all succ_adopt* law effects; first thing we do (after deducting prestige), user-facing
emf_laws_change_succ_basic_effect = {
	holder_scope = {
		pf_tradition_minus2_effect = yes
	}
	pf_save_old_succ_law_effect = yes
}

emf_laws_succ_gavelkind_reactions_effect = {
	current_heir = { save_event_target_as = emf_heir }

	holder_scope = {
		# Vassals are slightly upset
		any_vassal = {
			limit = {
				emf_laws_change_succ_affected_vassal_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Legitimate children are happy
		any_child = {
			limit = {
				emf_can_inherit_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		# Current heir is slightly upset if they were the previous heir (they have to share)
		event_target:emf_heir = {
			if = {
				limit = { character = event_target:emf_former_heir }
				emf_laws_change_succ_mild_reaction_effect = yes
			}
		}
	}
	
	# Specfic, event-driven succession law change reactions for the new heir, the former heir,
	# the former pretenders, and the new pretenders.
	set_title_flag = emf_succ_title
	holder_scope = { character_event = { id = emf_laws.10 } }
	
	emf_laws_change_succ_cleanup_effect = yes
}

emf_laws_succ_elective_gavelkind_reactions_effect = {
	current_heir = { save_event_target_as = emf_heir }

	holder_scope = {
		# Vassals are slightly upset
		any_vassal = {
			limit = {
				emf_laws_change_succ_affected_vassal_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Dynasty members are happy
		any_dynasty_member = {
			limit = {
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		# The former pretenders are upset if not of the ruler's dynasty
		any_opinion_modifier_target = {
			limit = {
				reverse_has_opinion_modifier = {
					who = PREV
					modifier = opinion_succ_former_pretender
				}
				NOT = { dynasty = event_target:emf_succ_changer }
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			event_target:emf_succ_title = {
				if = {
					limit = { NOT = { claimed_by = PREV } }
					add_weak_claim = PREV
				}
			}
			any_spouse = {
				limit = {
					emf_laws_change_succ_vip_trigger = no
					NOT = { dynasty = event_target:emf_succ_changer }
				}
				emf_laws_change_succ_bad_reaction_effect = yes
			}
			any_child = {
				limit = {
					emf_can_inherit_trigger = yes
					emf_laws_change_succ_vip_trigger = no
					NOT = { dynasty = event_target:emf_succ_changer }
				}
				emf_laws_change_succ_bad_reaction_effect = yes
			}
		}
		# The former heir is upset if not of the ruler's dynasty
		event_target:emf_former_heir = {
			if = {
				limit = { NOT = { dynasty = event_target:emf_succ_changer } }
				event_target:emf_succ_title = { add_claim = PREV }
				emf_laws_change_succ_terrible_reaction_effect = yes
				any_spouse = {
					limit = {
						emf_laws_change_succ_vip_trigger = no
						NOT = { dynasty = event_target:emf_succ_changer }
					}
					emf_laws_change_succ_terrible_reaction_effect = yes
				}
				any_child = {
					limit = {
						emf_can_inherit_trigger = yes
						emf_laws_change_succ_vip_trigger = no
						NOT = { dynasty = event_target:emf_succ_changer }
					}
					emf_laws_change_succ_terrible_reaction_effect = yes
				}
			}
		}
	}
	
	emf_laws_change_succ_cleanup_effect = yes
}

emf_laws_succ_seniority_reactions_effect = {
	current_heir = { save_event_target_as = emf_heir }

	holder_scope = {
		# Vassals are slightly upset
		any_vassal = {
			limit = {
				emf_laws_change_succ_affected_vassal_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Dynasty members are happy
		any_dynasty_member = {
			limit = {
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		# Children that can inherit are angry
		any_child = {
			limit = {
				emf_can_inherit_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_bad_reaction_effect = yes
		}
	}
	
	# Specfic, event-driven succession law change reactions for the new heir, the former heir,
	# the former pretenders, and the new pretenders.
	set_title_flag = emf_succ_title
	holder_scope = { character_event = { id = emf_laws.10 } }
	
	emf_laws_change_succ_cleanup_effect = yes
}

emf_laws_succ_primogeniture_reactions_effect = {
	current_heir = { save_event_target_as = emf_heir }

	holder_scope = {
		# Vassals are slightly upset
		any_vassal = {
			limit = {
				emf_laws_change_succ_affected_vassal_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Dynasty members are slightly upset
		any_dynasty_member = {
			limit = {
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Legitimate children are angry
		any_child = {
			limit = {
				emf_can_inherit_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_bad_reaction_effect = yes
		}
		# Heir is happy
		event_target:emf_heir = { emf_laws_change_succ_good_reaction_effect = yes }
	}
	
	set_title_flag = emf_succ_title
	holder_scope = { character_event = { id = emf_laws.10 } }
	emf_laws_change_succ_cleanup_effect = yes
}

emf_laws_succ_feudal_elective_reactions_effect = {
	current_heir = { save_event_target_as = emf_heir }

	holder_scope = {
		# Vassals are slightly upset
		any_vassal = {
			limit = {
				emf_laws_change_succ_affected_vassal_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Electors are happy
		any_vassal = {
			limit = {
				emf_laws_change_succ_vip_trigger = no
				OR = {
					AND = {
						event_target:emf_succ_title = { tier = EMPEROR }
						higher_real_tier_than = COUNT
						OR = {
							event_target:emf_succ_title = { is_titular = yes }
							any_demesne_title = {
								higher_tier_than = COUNT
								de_jure_liege_or_above = event_target:emf_succ_title
							}
						}
					}
					AND = {
						event_target:emf_succ_title = { tier = KING }
						real_tier = DUKE
						OR = {
							event_target:emf_succ_title = { is_titular = yes }
							any_demesne_title = {
								tier = DUKE
								de_jure_liege = event_target:emf_succ_title
							}
						}
					}
					AND = {
						event_target:emf_succ_title = { tier = DUKE }
						real_tier = COUNT
						OR = {
							event_target:emf_succ_title = { is_titular = yes }
							any_demesne_title = {
								tier = COUNT
								de_jure_liege = event_target:emf_succ_title
							}
						}
					}
					AND = {
						event_target:emf_succ_title = { tier = COUNT }
						real_tier = BARON
						any_demesne_title = {
							de_jure_liege = event_target:emf_succ_title
						}
					}
				}
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		# Dynasty members are slightly upset
		any_dynasty_member = {
			limit = {
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Legitimate children are angry
		any_child = {
			limit = {
				emf_can_inherit_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_bad_reaction_effect = yes
		}
		# The former pretenders are upset
		any_opinion_modifier_target = {
			limit = {
				reverse_has_opinion_modifier = {
					who = PREV
					modifier = opinion_succ_former_pretender
				}
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			event_target:emf_succ_title = {
				if = {
					limit = { NOT = { claimed_by = PREV } }
					add_weak_claim = PREV
				}
			}
			any_spouse = {
				limit = { emf_laws_change_succ_vip_trigger = no }
				emf_laws_change_succ_bad_reaction_effect = yes
			}
			any_child = {
				limit = {
					emf_can_inherit_trigger = yes
					emf_laws_change_succ_vip_trigger = no
				}
				emf_laws_change_succ_bad_reaction_effect = yes
			}
		}
		# The former heir is upset
		event_target:emf_former_heir = {
			emf_laws_change_succ_bad_reaction_effect = yes
			event_target:emf_succ_title = { add_claim = PREV }
			any_spouse = {
				limit = { emf_laws_change_succ_vip_trigger = no }
				emf_laws_change_succ_bad_reaction_effect = yes
			}
			any_child = {
				limit = {
					emf_can_inherit_trigger = yes
					emf_laws_change_succ_vip_trigger = no
				}
				emf_laws_change_succ_bad_reaction_effect = yes
			}
		}
	}
	
	emf_laws_change_succ_cleanup_effect = yes
}

emf_laws_succ_tanistry_reactions_effect = {
	current_heir = { save_event_target_as = emf_heir }

	# FIXME: I'm just guessing about Tanistry's behavior from the little, imprecise, and likely
	# inaccurate info on the CKII Wiki.

	holder_scope = {
		# Vassals are slightly upset
		any_vassal = {
			limit = {
				emf_laws_change_succ_affected_vassal_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Elector vassals are happy.
		# Regarding Tanistry, my assumptions are that empire-tier titles have king- and
		# duke-tier electors, king-tier titles have duke- and count-tier electors, duke-tier
		# titles have count- and baron-tier electors, and count-tier titles have baron-tier
		# electors.
		any_vassal = {
			limit = {
				emf_laws_change_succ_vip_trigger = no
				OR = {
					AND = {
						event_target:emf_succ_title = { tier = EMPEROR }
						higher_real_tier_than = COUNT
						OR = {
							event_target:emf_succ_title = { is_titular = yes }
							any_demesne_title = {
								higher_tier_than = COUNT
								de_jure_liege_or_above = event_target:emf_succ_title
							}
						}
					}
					AND = {
						event_target:emf_succ_title = { tier = KING }
						higher_real_tier_than = BARON
						OR = {
							event_target:emf_succ_title = { is_titular = yes }
							any_demesne_title = {
								higher_tier_than = BARON
								de_jure_liege_or_above = event_target:emf_succ_title
							}
						}
					}
					AND = {
						event_target:emf_succ_title = { tier = DUKE }
						OR = {
							event_target:emf_succ_title = { is_titular = yes }
							any_demesne_title = {
								de_jure_liege_or_above = event_target:emf_succ_title
							}
						}
					}
					AND = {
						event_target:emf_succ_title = { tier = COUNT }
						any_demesne_title = {
							de_jure_liege = event_target:emf_succ_title
						}
					}
				}
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		# Dynasty members are happy
		any_dynasty_member = {
			limit = { 
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		# Legitimate children are angry
		any_child = {
			limit = {
				emf_can_inherit_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_bad_reaction_effect = yes
		}
		# The former pretenders are upset if not of the ruler's dynasty
		any_opinion_modifier_target = {
			limit = {
				reverse_has_opinion_modifier = {
					who = PREV
					modifier = opinion_succ_former_pretender
				}
				NOT = { dynasty = event_target:emf_succ_changer }
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			event_target:emf_succ_title = {
				if = {
					limit = { NOT = { claimed_by = PREV } }
					add_weak_claim = PREV
				}
			}
			any_spouse = {
				limit = {
					emf_laws_change_succ_vip_trigger = no
					NOT = { dynasty = event_target:emf_succ_changer }
				}
				emf_laws_change_succ_bad_reaction_effect = yes
			}
			any_child = {
				limit = {
					emf_can_inherit_trigger = yes
					emf_laws_change_succ_vip_trigger = no
					NOT = { dynasty = event_target:emf_succ_changer }
				}
				emf_laws_change_succ_bad_reaction_effect = yes
			}
		}
		# The former heir is upset if not of the ruler's dynasty
		event_target:emf_former_heir = {
			if = {
				limit = { NOT = { dynasty = event_target:emf_succ_changer } }
				event_target:emf_succ_title = { add_claim = PREV }
				emf_laws_change_succ_terrible_reaction_effect = yes
				any_spouse = {
					limit = {
						emf_laws_change_succ_vip_trigger = no
						NOT = { dynasty = event_target:emf_succ_changer }
					}
					emf_laws_change_succ_terrible_reaction_effect = yes
				}
				any_child = {
					limit = {
						emf_can_inherit_trigger = yes
						emf_laws_change_succ_vip_trigger = no
						NOT = { dynasty = event_target:emf_succ_changer }
					}
					emf_laws_change_succ_terrible_reaction_effect = yes
				}
			}
		}
	}
	
	emf_laws_change_succ_cleanup_effect = yes
}

emf_laws_succ_ultimogeniture_reactions_effect = {
	current_heir = { save_event_target_as = emf_heir }

	holder_scope = {
		# Vassals are slightly upset
		any_vassal = {
			limit = {
				emf_laws_change_succ_affected_vassal_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Dynasty members are slightly upset
		any_dynasty_member = {
			limit = {
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Legitimate children are angry
		any_child = {
			limit = {
				emf_can_inherit_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_bad_reaction_effect = yes
		}
		# Heir is happy
		event_target:emf_heir = { emf_laws_change_succ_good_reaction_effect = yes }
	}
	
	set_title_flag = emf_succ_title
	holder_scope = { character_event = { id = emf_laws.10 } }
	emf_laws_change_succ_cleanup_effect = yes
}

emf_laws_succ_turkish_succession_reactions_effect = {
	current_heir = { save_event_target_as = emf_heir }

	holder_scope = {
		# Vassals are slightly upset
		any_vassal = {
			limit = {
				emf_laws_change_succ_affected_vassal_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_mild_reaction_effect = yes
		}
		# Dynasty members are happy
		any_dynasty_member = {
			limit = {
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		# Legitimate children are happy
		any_child = {
			limit = {
				emf_can_inherit_trigger = yes
				emf_laws_change_succ_vip_trigger = no
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		# Heir is happy
		event_target:emf_heir = { emf_laws_change_succ_good_reaction_effect = yes }
	}
	
	set_title_flag = emf_succ_title
	holder_scope = { character_event = { id = emf_laws.10 } }
	emf_laws_change_succ_cleanup_effect = yes
}

#### CROWN LAWS ####

emf_laws_increase_authority_opinion_effect = {
	custom_tooltip = {
		text = emf_laws_ctt_opinion_increase_authority
		hidden_tooltip = {
			holder_scope = {
				any_vassal = {
					limit = {
						tier = BARON
						crownlaw_title = { title = PREVPREVPREV }
					}
					opinion = { who = PREV modifier = opinion_increased_authority months = 120 }
				}
				any_playable_ruler = {
					limit = {
						OR = {
							is_liege_or_above = ROOT
							religion = ROOT
						}
						crownlaw_title = { title = PREVPREVPREV }
						higher_tier_than = BARON
					}
					opinion = { who = PREV modifier = opinion_increased_authority months = 120 }
				}
			}
		}
	}
}


#### DEBUG ####

emf_laws_log_succession_effect = {
	if = {
		limit = { NOT = { succ_law_title = { always = yes } } }
		log = "[This.GetID].succ_law_title = <null>"
	}
	if = {
		limit = { succ_law_title = { always = yes } }
		succ_law_title = {
			# Smart output of succ_law_title resolution...
			if = {
				limit = { title = PREV }
				log = "[Prev.GetID].succ_law_title = <self>"
			}
			if = {
				limit = { NOT = { title = PREV } }
				log = "[Prev.GetID].succ_law_title = [This.GetID]"
			}
			# Actual law checks...
			if = {
				limit = { has_law = succ_gavelkind }
				log = "law: succ_gavelkind"
			}
			if = {
				limit = { has_law = succ_elective_gavelkind }
				log = "law: succ_elective_gavelkind"
			}
			if = {
				limit = { has_law = succ_seniority }
				log = "law: succ_seniority"
			}
			if = {
				limit = { has_law = succ_primogeniture }
				log = "law: succ_primogeniture"
			}
			if = {
				limit = { has_law = succ_feudal_elective }
				log = "law: succ_feudal_elective"
			}
			if = {
				limit = { has_law = succ_tanistry }
				log = "law: succ_tanistry"
			}
			if = {
				limit = { has_law = succ_ultimogeniture }
				log = "law: succ_ultimogeniture"
			}
			if = {
				limit = { has_law = succ_turkish_succession }
				log = "law: succ_turkish_succession"
			}
			if = {
				limit = { has_law = succ_papal_succession }
				log = "law: succ_papal_succession"
			}
			if = {
				limit = { has_law = succ_appointment }
				log = "law: succ_appointment"
			}
			if = {
				limit = { has_law = succ_open_elective }
				log = "law: succ_open_elective"
			}
			if = {
				limit = { has_law = succ_catholic_bishopric }
				log = "law: succ_catholic_bishopric"
			}
			if = {
				limit = { has_law = succ_patrician_elective }
				log = "law: succ_patrician_elective"
			}
			if = {
				limit = { has_law = succ_nomad_succession }
				log = "law: succ_nomad_succession"
			}
		}
	}
	if = {
		limit = { NOT = { succ_law_title = { emf_laws_has_succession_law_trigger = yes } } }
		log = "ASSERT: [This.GetID] ([This.GetFullBaseName]) has no regular succession law set upon its succ_law_title!"
	}
}
