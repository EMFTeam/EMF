# -*- ck2.scripted_effects -*-

emf_find_title_for_cadet_dynasty_name = {
	log = " --> searching for demesne title with which to pair senior name component of '[emf_dummy1.GetFirstName]':"
	clear_event_target = emf_selected_title
	while = {
		limit = {
			NOT = { event_target:emf_selected_title = { always = yes } }
			any_demesne_title = {
				NOT = { has_flag = emf_tmp_checked }
				lower_tier_than = KING # We don't want KING+ title name components in our dynasty name
				OR = {
					is_primary_holder_title = yes # Primary titles may still be used if titular
					is_de_jure_title = yes # Otherwise, stick to de jure, as titular titles can be named oddly
				}
				emf_is_title_type_special = no
			}
		}
		random_demesne_title = {
			limit = {
				NOT = { has_flag = emf_tmp_checked }
				lower_tier_than = KING # We don't want KING+ title name components in our dynasty name
				OR = {
					is_primary_holder_title = yes # Primary titles may still be used if titular
					is_de_jure_title = yes # Otherwise, stick to de jure, as titular titles can be named oddly
				}
				emf_is_title_type_special = no
			}
			preferred_limit = {
				is_primary_holder_title = yes
			}
			preferred_limit = { # Capital duchy, never used
				tier = DUKE
				ROOT = {
					capital_scope = {
						duchy = {
							title = PREVPREVPREV
						}
					}
				}
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # Capital county, never used
				tier = COUNT
				location = { is_capital = yes }
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # Capital duchy, used
				tier = DUKE
				ROOT = {
					capital_scope = {
						duchy = {
							title = PREVPREVPREV
						}
					}
				}
			}
			preferred_limit = { # Capital county, used
				tier = COUNT
				location = { is_capital = yes }
			}
			preferred_limit = { # De jure duchy bordering a de jure primary title of DUKE tier, never used
				tier = DUKE
				any_direct_de_jure_vassal_title = {
					location = {
						any_neighbor_province = {
							county = {
								ROOT = {
									primary_title = {
										de_jure_vassal_or_below = PREVPREV # county
									}
								}
							}
						}
					}
				}
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # De jure duchy bordering a de jure primary title of DUKE tier, used
				tier = DUKE
				any_direct_de_jure_vassal_title = {
					location = {
						any_neighbor_province = {
							county = {
								ROOT = {
									primary_title = {
										de_jure_vassal_or_below = PREVPREV # county
									}
								}
							}
						}
					}
				}
			}
			preferred_limit = { # Capital holding, never used
				tier = BARON
				ROOT = {
					capital_holding = {
						title = PREVPREV
					}
				}
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # Any de jure duchy, never used
				tier = DUKE
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # Capital holding
				tier = BARON
				ROOT = {
					capital_holding = {
						title = PREVPREV
					}
				}
			}
			preferred_limit = { # Any de jure duchy, used
				tier = DUKE
				check_variable = { which = emf_dynasty_name_seeds value < 2 }
			}
			preferred_limit = { # Any de jure duchy, used
				tier = DUKE
				check_variable = { which = emf_dynasty_name_seeds value < 3 }
			}
			preferred_limit = { # Any de jure duchy, used
				tier = DUKE
				check_variable = { which = emf_dynasty_name_seeds value < 4 }
			}
			preferred_limit = { # Any de jure duchy, used
				tier = DUKE
				check_variable = { which = emf_dynasty_name_seeds value < 5 }
			}
			preferred_limit = { # Any de jure duchy, used
				tier = DUKE
				check_variable = { which = emf_dynasty_name_seeds value < 6 }
			}
			preferred_limit = { # Any de jure duchy, used
				tier = DUKE
			}
			preferred_limit = { # County bordering capital county, never used
				tier = COUNT
				location = {
					any_neighbor_province = {
						ROOT = {
							capital_scope = {
								province = PREVPREV # any_neighbor_province
							}
						}
					}
				}
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # County bordering capital county, used
				tier = COUNT
				location = {
					any_neighbor_province = {
						ROOT = {
							capital_scope = {
								province = PREVPREV # any_neighbor_province
							}
						}
					}
				}
			}
			preferred_limit = { # Any [owned] non-capital barony in capital county, never used
				tier = BARON
				location = {
					ROOT = {
						capital_scope = {
							province = PREVPREV
						}
					}
				}
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # Any [owned] non-capital barony in capital county, used
				tier = BARON
				location = {
					ROOT = {
						capital_scope = {
							province = PREVPREV
						}
					}
				}
			}
			preferred_limit = { # Any county w/i 50 distance of capital county, never used
				tier = COUNT
				location = {
					NOT = { distance = { who = ROOT value = 50 } }
				}
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # Any county w/i 75 distance of capital county, never used
				tier = COUNT
				location = {
					NOT = { distance = { who = ROOT value = 75 } }
				}
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # Any county w/i 100 distance of capital county, never used
				tier = COUNT
				location = {
					NOT = { distance = { who = ROOT value = 100 } }
				}
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # Any county w/i 50 distance of capital county, used
				tier = COUNT
				location = {
					NOT = { distance = { who = ROOT value = 50 } }
				}
			}
			preferred_limit = { # Any county w/i 75 distance of capital county, used
				tier = COUNT
				location = {
					NOT = { distance = { who = ROOT value = 75 } }
				}
			}
			preferred_limit = { # Any county w/i 150 distance of capital county, never used
				tier = COUNT
				location = {
					NOT = { distance = { who = ROOT value = 150 } }
				}
				check_variable = { which = emf_dynasty_name_seeds value < 1 }
			}
			preferred_limit = { # Any county w/i 100 distance of capital county, used
				tier = COUNT
				location = {
					NOT = { distance = { who = ROOT value = 100 } }
				}
			}
			preferred_limit = { # Any county w/i 150 distance of capital county, used
				tier = COUNT
				location = {
					NOT = { distance = { who = ROOT value = 150 } }
				}
			}
			preferred_limit = { # Any county w/i 200 distance of capital county
				tier = COUNT
				location = {
					NOT = { distance = { who = ROOT value = 200 } }
				}
			}
			preferred_limit = {
				tier = COUNT
			}
			set_flag = emf_tmp_checked
			save_event_target_as = emf_potential_title
			# As always, log like a maniac until the new feature is stable and well-calibrated, and then charge on ahead and
			# log some more, since something is bound to go haywire eventually:
			log = " ----> potential title: [This.EMF_GetDebugTitleNameWithDeJureLieges]:"
			if = {
				limit = { is_primary_holder_title = yes }
				log = " ------> is primary title"
			}
			else_if = {
				limit = {
					tier = DUKE
					any_direct_de_jure_vassal_title = {
						location = {
							any_neighbor_province = {
								county = {
									ROOT = {
										primary_title = {
											de_jure_vassal_or_below = PREVPREV # county
										}
									}
								}
							}
						}
					}
				}
				log = " ------> is duchy bordering primary title"
			}
			if = {
				limit = {
					tier = DUKE
					ROOT = {
						capital_scope = {
							duchy = {
								title = PREVPREVPREV
							}
						}
					}
				}
				log = " ------> is capital duchy"
			}
			if = {
				limit = {
					tier = COUNT
					location = { is_capital = yes }
				}
				log = " ------> is capital county"
			}
			else_if = {
				limit = {
					tier = COUNT
					location = {
						any_neighbor_province = {
							ROOT = {
								capital_scope = {
									province = PREVPREV # any_neighbor_province
								}
							}
						}
					}
				}
				log = " ------> is county bordering capital county"
			}
			if = {
				limit = {
					tier = BARON
					ROOT = {
						capital_holding = {
							title = PREVPREV
						}
					}
				}
				log = " ------> is capital barony"
			}
			else_if = {
				limit = {
					tier = BARON
					location = {
						ROOT = {
							capital_scope = {
								province = PREVPREV
							}
						}
					}
				}
				log = " ------> is secondary barony in capital county"
			}
			if = {
				limit = { check_variable = { which = emf_dynasty_name_seeds value > 0 } }
				log = " ------> prior uses game-wide for contributing to a cadet dynasty name: [This.emf_dynasty_name_seeds.GetValue]"
			}
			else = {
				log = " ------> prior uses game-wide for contributing to a cadet dynasty name: 0"
			}
		}
		# Now load up emf_dummy2 with the last word in the base name of this title and check for mismatch.
		# Mismatch is what we want, remember?
		event_target:emf_dummy2 = {
			set_dynasty_name = "[emf_potential_title.GetBaseName]"
			set_name = "[This.GetLastWordInDynastyName]"
			if = {
				limit = { NOT = { same_regnal_name = event_target:emf_dummy1 } }
				# Mismatch! Woot!
				event_target:emf_potential_title = {
					log = " ----> selected title!"
					# Increment the title usage counter for future title selection prioritization:
					change_variable = { which = emf_dynasty_name_seeds value = 1 }
					save_event_target_as = emf_selected_title
				}
			}
		}
		clear_event_target = emf_potential_title
	}
	any_demesne_title = { clr_flag = emf_tmp_checked }
}

emf_log_cadet_info_title = {
	log = " ----> [This.EMF_GetDebugTitleNameWithDeJureLieges]"
	if = {
		limit = { is_de_jure_title = no }
		log = " ------> is titular"
	}
	if = {
		limit = { emf_is_title_type_special = yes }
		log = " ------> is special type of title"
	}
}

emf_log_cadet_info = {
	log = " --> government group: [This.EMF_GetGovernmentGroupName]"
	log = " --> real tier:        [This.EMF_GetDebugTier]"
	log = " --> primary title:    [This.PrimaryTitle.EMF_GetDebugTitleNameWithDeJureLieges]"
	log = " ----> succession law: [This.PrimaryTitle.EMF_GetFullSuccLaw]"
	capital_holding = {
		log = " --> capital holding:  [This.EMF_GetDebugTitleNameWithDeJureLieges]"
	}
	log = " --> demesne titles:"
	any_demesne_title = {
		limit = { tier = EMPEROR }
		emf_debug_log_title_info = yes
	}
	any_demesne_title = {
		limit = { tier = KING }
		emf_debug_log_title_info = yes
	}
	any_demesne_title = {
		limit = { tier = DUKE }
		emf_debug_log_title_info = yes
	}
	any_demesne_title = {
		limit = { tier = COUNT }
		emf_debug_log_title_info = yes
	}
	any_demesne_title = {
		limit = { tier = BARON }
		emf_debug_log_title_info = yes
	}
}

emf_boost_cadet_wellness = {
	if = {
		limit = { ai = yes }
		cure_illness = yes
		remove_symptoms_effect = yes
		clear_disease_level_effect = yes
		remove_disease_flags_effect = yes
		remove_treatment_modifiers_effect = yes
		remove_trait = has_tuberculosis
		remove_trait = has_aztec_disease
		remove_trait = has_small_pox
		remove_trait = has_bubonic_plague
		remove_trait = has_typhus
		remove_trait = has_typhoid_fever
		remove_trait = has_measles
		remove_trait = flu
		remove_trait = food_poisoning
		remove_trait = gout
		remove_trait = scurvy
		remove_trait = lovers_pox
		remove_trait = cancer
		remove_trait = pneumonic
		remove_trait = syphilitic
		remove_trait = leper
		while = {
			limit = { base_health < 6 }
			health = 1
		}
		remove_trait = celibate
		remove_trait = sterile_secret
		remove_trait = sterile_known
		remove_trait = infertile
		while = {
			count = 10
			limit = { fertility < 1 }
			fertility = 0.15
		}
	}
}
