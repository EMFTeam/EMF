# -*- ck2.scripted_triggers -*-

# Required for what we usually mean when we say `is_titular = no` -- that the title has no de jure land, whereas
# `is_titular = no` will return false if it has but one unlanded de jure vassal title (e.g., a titular de jure duchy/kingdom,
# such as for many de jure vassal merchant republics and plenty else)
is_de_jure_title = {
	custom_tooltip = {
		text = IS_DE_JURE_TITLE_TT
		trigger_if = {
			limit = { higher_tier_than = DUKE }
			any_de_jure_vassal_title = { tier = COUNT }
		}
		trigger_else_if = {
			limit = { tier = DUKE }
			is_titular = no
		}
		trigger_else_if = {
			limit = { is_landless_type_title = yes }
			always = no
		}
		# if none of the above -- a landed county or barony, trigger will correctly return true so as to be considered a
		# de jure title.
	}
}

is_titular_title = {
	custom_tooltip = {
		text = IS_TITULAR_TITLE_TT
		hidden_tooltip = {
			is_de_jure_title = no
		}
	}
}

is_primary_war_participant = {
	custom_tooltip = {
		text = IS_PRIMARY_WAR_PARTICIPANT_TT
		hidden_tooltip = {
			OR = {
				is_primary_war_attacker = yes
				is_primary_war_defender = yes
			}
		}
	}
}

# under_X triggers: is the character X or is X liege or above to the character? [character version of 'subrealm']
under_ROOT = {
	custom_tooltip = {
		text = UNDER_ROOT_TT
		hidden_tooltip = {
			OR = {
				character = ROOT
				is_liege_or_above = ROOT
			}
		}
	}
}
under_FROM = {
	custom_tooltip = {
		text = UNDER_FROM_TT
		hidden_tooltip = {
			OR = {
				character = FROM
				is_liege_or_above = FROM
			}
		}
	}
}
under_FROMFROM = {
	custom_tooltip = {
		text = UNDER_FROMFROM_TT
		hidden_tooltip = {
			OR = {
				character = FROMFROM
				is_liege_or_above = FROMFROM
			}
		}
	}
}
under_FROMFROMFROM = {
	custom_tooltip = {
		text = UNDER_FROMFROMFROM_TT
		hidden_tooltip = {
			OR = {
				character = FROMFROMFROM
				is_liege_or_above = FROMFROMFROM
			}
		}
	}
}
under_FROMFROMFROMFROM = {
	custom_tooltip = {
		text = UNDER_FROMFROMFROMFROM_TT
		hidden_tooltip = {
			OR = {
				character = FROMFROMFROMFROM
				is_liege_or_above = FROMFROMFROMFROM
			}
		}
	}
}
under_PREV = {
	custom_tooltip = {
		text = UNDER_PREV_TT
		hidden_tooltip = {
			OR = {
				character = PREV
				is_liege_or_above = PREV
			}
		}
	}
}
under_PREVPREV = {
	custom_tooltip = {
		text = UNDER_PREVPREV_TT
		hidden_tooltip = {
			OR = {
				character = PREVPREV
				is_liege_or_above = PREVPREV
			}
		}
	}
}
under_PREVPREVPREV = {
	custom_tooltip = {
		text = UNDER_PREVPREVPREV_TT
		hidden_tooltip = {
			OR = {
				character = PREVPREVPREV
				is_liege_or_above = PREVPREVPREV
			}
		}
	}
}
under_target_ruler = {
	custom_tooltip = {
		text = UNDER_TARGET_RULER_TT
		hidden_tooltip = {
			OR = {
				character = event_target:target_ruler
				is_liege_or_above = event_target:target_ruler
			}
		}
	}
}

# owner_under_X triggers: like under_X triggers but for titles and provinces, as semantically it's: owner = { under_X = yes }
owner_under_ROOT = {
	custom_tooltip = {
		text = OWNER_UNDER_ROOT_TT
		hidden_tooltip = {
			owner = {
				OR = {
					character = ROOT
					is_liege_or_above = ROOT
				}
			}
		}
	}
}
owner_under_FROM = {
	custom_tooltip = {
		text = OWNER_UNDER_FROM_TT
		hidden_tooltip = {
			owner = {
				OR = {
					character = FROM
					is_liege_or_above = FROM
				}
			}
		}
	}
}
owner_under_FROMFROM = {
	custom_tooltip = {
		text = OWNER_UNDER_FROMFROM_TT
		hidden_tooltip = {
			owner = {
				OR = {
					character = FROMFROM
					is_liege_or_above = FROMFROM
				}
			}
		}
	}
}
owner_under_FROMFROMFROM = {
	custom_tooltip = {
		text = OWNER_UNDER_FROMFROMFROM_TT
		hidden_tooltip = {
			owner = {
				OR = {
					character = FROMFROMFROM
					is_liege_or_above = FROMFROMFROM
				}
			}
		}
	}
}
owner_under_FROMFROMFROMFROM = {
	custom_tooltip = {
		text = OWNER_UNDER_FROMFROMFROMFROM_TT
		hidden_tooltip = {
			owner = {
				OR = {
					character = FROMFROMFROMFROM
					is_liege_or_above = FROMFROMFROMFROM
				}
			}
		}
	}
}
owner_under_PREV = {
	custom_tooltip = {
		text = OWNER_UNDER_PREV_TT
		hidden_tooltip = {
			owner = {
				OR = {
					character = PREVPREV
					is_liege_or_above = PREVPREV
				}
			}
		}
	}
}
owner_under_PREVPREV = {
	custom_tooltip = {
		text = OWNER_UNDER_PREVPREV_TT
		hidden_tooltip = {
			owner = {
				OR = {
					character = PREVPREVPREV
					is_liege_or_above = PREVPREVPREV
				}
			}
		}
	}
}
owner_under_PREVPREVPREV = {
	custom_tooltip = {
		text = OWNER_UNDER_PREVPREVPREV_TT
		hidden_tooltip = {
			owner = {
				OR = {
					character = PREVPREVPREVPREV
					is_liege_or_above = PREVPREVPREVPREV
				}
			}
		}
	}
}
owner_under_target_ruler = {
	custom_tooltip = {
		text = OWNER_UNDER_TARGET_RULER_TT
		hidden_tooltip = {
			owner = {
				OR = {
					character = event_target:target_ruler
					is_liege_or_above = event_target:target_ruler
				}
			}
		}
	}
}

# Alternate Start helper triggers to reduce boilerplate & continual lookup of setting, parameter, and value names:
has_random_religion_names = {
	has_alternate_start_parameter = { key = religion_names value = random }
}

has_random_culture_names = {
	has_alternate_start_parameter = { key = culture_names value = random }
}

has_random_religion_or_culture_names = {
	OR = {
		has_alternate_start_parameter = { key = religion_names value = random }
		has_alternate_start_parameter = { key = culture_names value = random }
	}
}

has_random_religions = {
	OR = {
		has_alternate_start_parameter = { key = religion value = random }
		has_alternate_start_parameter = { key = religion value = full_random }
	}
}

has_random_cultures = {
	OR = {
		has_alternate_start_parameter = { key = culture value = random }
		has_alternate_start_parameter = { key = culture value = full_random }
	}
}

has_random_religions_or_cultures = {
	OR = {
		has_alternate_start_parameter = { key = religion value = random }
		has_alternate_start_parameter = { key = culture value = random }
		has_alternate_start_parameter = { key = religion value = full_random }
		has_alternate_start_parameter = { key = culture value = full_random }
	}
}

has_random_religion_features = {
	has_alternate_start_parameter = { key = religion_features value = random }
}

has_random_title_names = {
	OR = {
		has_alternate_start_setting = { setting = title_names option = random }
		has_alternate_start_setting = { setting = title_names option = random_including_duchies }
	}
}

has_random_dejure_or_title_names = {
	OR = {
		has_alternate_start_parameter = { key = dejure_kingdoms value = random }
		has_alternate_start_parameter = { key = dejure_empires value = random }
		has_alternate_start_setting = { setting = title_names option = random }
		has_alternate_start_setting = { setting = title_names option = random_including_duchies }
	}
}

has_random_dejure = {
	OR = {
		has_alternate_start_parameter = { key = dejure_kingdoms value = random }
		has_alternate_start_parameter = { key = dejure_empires value = random }
	}
}

has_dejure_empires = {
	NOT = { has_alternate_start_parameter = { key = dejure_empires value = none } }
}

# PREV is the character that's suppose to own THIS, the title about which we're inquiring. [Wish there was a better way.]
# ROOT is the liege of the (sub)realm against which we're testing for most immediate de jure pretension over the title THIS.
#
# define: best de jure liege title: the lowest-tier, held title which is a de jure liege of the given title.
#		 if you add "under ROOT," then our test is whether ROOT's realm contains that best de jure liege title.
#
# for any given non-independent ruler (whom has a realm of titles under them), it's not uncommon to have multiple "best de
# jure lieges," because they have multiple landed titles (i.e., tier <= COUNT) in their realm, and naturally, it's possible
# for those titles to have different best de jure liege titles, which can be under multiple lieges de facto. determination of
# a "best de jure liege" (character->character) definition is an exercise left to the reader, but I'll note that a really
# simple approach would be to simply find the lowest-tier ruler that has the best de jure liege title under him for either
# the character's primary_title (bad idea -- it might be a lot higher-ranked than is helpful or titular) or their
# capital_scope (pretty reasonable).
#
# reminder: if realm A holds the de jure duchy of a county while realm B holds the de jure kingdom (and the empire is
# unheld), realm A has the most immediate de jure pretension over the county.  that is, the county has a best de jure liege
# title under A but not B.

best_de_jure_liege_title_under_ROOT = {
	custom_tooltip = {
		text = BEST_DE_JURE_LIEGE_TITLE_UNDER_ROOT_TT
		hidden_tooltip = {
			OR = {
				impl__title_t1__best_de_jure_liege_title_under_ROOT = yes # counties: very common use case
				impl__title_t0__best_de_jure_liege_title_under_ROOT = yes # baronies
				impl__title_t2__best_de_jure_liege_title_under_ROOT = yes # duchies
				impl__title_t3__best_de_jure_liege_title_under_ROOT = yes # kingdoms
				AND = { tier = EMPEROR PREV = { character = ROOT } }
			}
		}
	}
}

# This variant checks under FROM instead of ROOT
best_de_jure_liege_title_under_FROM = {
	custom_tooltip = {
		text = BEST_DE_JURE_LIEGE_TITLE_UNDER_FROM_TT
		hidden_tooltip = {
			OR = {
				impl__title_t1__best_de_jure_liege_title_under_FROM = yes # counties: very common use case
				impl__title_t0__best_de_jure_liege_title_under_FROM = yes # baronies
				impl__title_t2__best_de_jure_liege_title_under_FROM = yes # duchies
				impl__title_t3__best_de_jure_liege_title_under_FROM = yes # kingdoms
				AND = { tier = EMPEROR PREV = { character = FROM } }
			}
		}
	}
}

# This variant checks under event_target:target_ruler instead of ROOT
best_de_jure_liege_title_under_target_ruler = {
	custom_tooltip = {
		text = BEST_DE_JURE_LIEGE_TITLE_UNDER_TARGET_RULER_TT
		hidden_tooltip = {
			OR = {
				impl__title_t1__best_de_jure_liege_title_under_target_ruler = yes # counties
				impl__title_t0__best_de_jure_liege_title_under_target_ruler = yes # baronies
				impl__title_t2__best_de_jure_liege_title_under_target_ruler = yes # duchies
				impl__title_t3__best_de_jure_liege_title_under_target_ruler = yes # kingdoms
				AND = { tier = EMPEROR PREV = { character = event_target:target_ruler } }
			}
		}
	}
}

# These variants upon the above logic require ROOT or event_target:target_ruler, respectively, to directly hold the best de
# jure liege title rather than alternatively allow them to be vassal-held as well:

best_de_jure_liege_title_holder_ROOT = {
	custom_tooltip = {
		text = BEST_DE_JURE_LIEGE_TITLE_HOLDER_ROOT_TT
		hidden_tooltip = {
			OR = {
				impl__title_t1__best_de_jure_liege_title_holder_ROOT = yes # counties: very common use case
				impl__title_t0__best_de_jure_liege_title_holder_ROOT = yes # baronies
				impl__title_t2__best_de_jure_liege_title_holder_ROOT = yes # duchies
				impl__title_t3__best_de_jure_liege_title_holder_ROOT = yes # kingdoms
				AND = { tier = EMPEROR PREV = { character = ROOT } }
			}
		}
	}
}

best_de_jure_liege_title_holder_FROM = {
	custom_tooltip = {
		text = BEST_DE_JURE_LIEGE_TITLE_HOLDER_FROM_TT
		hidden_tooltip = {
			OR = {
				impl__title_t1__best_de_jure_liege_title_holder_FROM = yes # counties: very common use case
				impl__title_t0__best_de_jure_liege_title_holder_FROM = yes # baronies
				impl__title_t2__best_de_jure_liege_title_holder_FROM = yes # duchies
				impl__title_t3__best_de_jure_liege_title_holder_FROM = yes # kingdoms
				AND = { tier = EMPEROR PREV = { character = FROM } }
			}
		}
	}
}

best_de_jure_liege_title_holder_target_ruler = {
	custom_tooltip = {
		text = BEST_DE_JURE_LIEGE_TITLE_HOLDER_TARGET_RULER_TT
		hidden_tooltip = {
			OR = {
				impl__title_t1__best_de_jure_liege_title_holder_target_ruler = yes # counties
				impl__title_t0__best_de_jure_liege_title_holder_target_ruler = yes # baronies
				impl__title_t2__best_de_jure_liege_title_holder_target_ruler = yes # duchies
				impl__title_t3__best_de_jure_liege_title_holder_target_ruler = yes # kingdoms
				AND = { tier = EMPEROR PREV = { character = event_target:target_ruler } }
			}
		}
	}
}
