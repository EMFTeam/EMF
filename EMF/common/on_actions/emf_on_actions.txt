# -*- ck2.on_actions -*-

#character
on_startup = {
	events = {
		emf_startup.0 # General campaign startup (runs only upon new campaign)
		emf_coa.1 # Dynamic CoA adjustments
		emf_startup.40 # Ensure [almost] every king-tier title has a de jure empire or e_null
		emf_religion.2 # Add syncretic traits
		emf_core.65 # Independent realm capital-connected territory tracking
		emf_decadence.2503 # Cleanup realm decadence state if invalidated
		emf_config.2 # Upgrade/reset config settings with existing savegames
		emf_religion.6 # Fix god names for reformed pagan religions
		emf_heresy.1962 # Fix god names for Druze if they have added the name of their incarnation of God
		emf_startup.2000 # Runs on every load of a savegame
	}
}

#character
on_yearly_pulse = {
	random_events = {
		500 = emf_marriage.25 # Revelation that someone is actually sterile
		250 = emf_intrigue.1370 # Unknown bastard decides whether to approach their true father
	}
	events = {
		emf_marriage.1 # Add secret sterility trait once relevant
		emf_marriage.2 # Remove secret sterility trait once no longer relevant
		pb_various.15 # Interest on loans
		emf_dynlevy.23 # Dynlevy maintenance
		emf_empires.1 # Conqueror maintenance (add trait)
		emf_core.65 # Independent realm capital-connected territory tracking
		emf_decadence.0 # Recalculate realm decadence
		emf_decadence.2503 # Cleanup realm decadence state if invalidated
		emf_hre.13 # Maintain karling_usurper rulers
		emf_revolt.42 # Synchronize religious rebel victory titles' holder religions with the titles' names
		emf_seljuk.6 # Help the early Seljuk dynasty survive, in terms of heirs
		emf_seljuk.50 # Invalidate current Seljuk Invader if necessary and find a new one if possible
		emf_seljuk.51 # Check for mission completion [Seljuk Invader]
		emf_borders.1 # Handle baron-tier border gore
		emf_borders.5 # KING+ independent AI capital relocation
		emf_holy_order.110 # Check for Livonian Brothers of the Sword activation
		emf_cadet.10 # Flag potential cadets
		emf_cadet.11 # Disqualify flagged potential cadets
		emf_cadet.12 # Evaluate ruler cadets for qualification to actually form a cadet dynasty
		emf_hre.60 # Dynamically reassign HRE elector titles if they become invalid or vacant
		emf_debug.30 # Log average number of living children per playable ruler that's been married
	}
}

#character
on_bi_yearly_pulse = {
	events = {
		emf_empires.2 # Conqueror maintenance (remove trait)
		emf_coa.1 # Dynamic CoA maintenance
		emf_seljuk.55 # Check e_persia creation requirements progress & create empire if possible [Seljuk Invader]
		emf_core.56 # Give AIs a break on heavily negative raised vassal levy opinion maluses
	}
}

#on combat pulse
on_combat_pulse = {
	random_events = {
		#25 = DuelEngine.500 # Battlefield Duel
		100 = emf_cta.0 # Earn CTA (combat trait advancement) experience
	}
}

# any leader in battle on winning side (except the leader) is ROOT - opponent army leader is FROM
on_major_battle_won = {
	events = {
		emf_commander.0 # Command veteran: Major victory
	}
}

# Winning army leader is ROOT - opponent army leader is FROM
on_major_battle_won_leader = {
	events = {
		emf_commander.0 # Command veteran: Major victory
	}
}

# Fires for the owner of the winning unit (ROOT). The taken Holding title is in FROM.
on_siege_over_winner = {
	events = {
		emf_decadence.2517 # Decadence rebels take county capital
		emf_revolt.7 # Religious rebels sack any settlement
	}
}

# character
on_birth = {
	events = {
		emf_religion.2 # Add syncretic traits
		emf_intrigue.1502 # Mark newborn with unknown real_father
		emf_bastard_dynasties.0 # Fix bastard dynasty of Welf Welf
		emf_bastard_dynasties.5 # Fix bastard dynasty of Enrique Trastamara
		emf_relsub.52 # Inherit disinherited-from-old-religion-group status for a generation
		emf_culture.15 # Inherit emf_ai_never_convert_culture flag for one generation
		emf_cadet.0 # Inherit cadet dynasty founder PET
		emf_cadet.1 # Clear cadet dynasty founder PET upon a bastard siring/birthing a child (dynasty auto-changes)
		emf_cadet.2 # Clear posthumous father-of-unborn cadet PETs now that we've finished pregnancy
		emf_religion.17 # Overwrite vanilla behavior for children of mixed-caste relationships
	}
}

# character
on_adulthood = {
	events = {
		emf_claims.10 # Adult males pre-inherit some of mother's strong claims as weak claims [Male succession types]
		emf_claims.11 # Adult females pre-inherit some of father's strong claims as weak claims [Female succession types]
	}
}

on_adolescence = { # Checked on 12th birthday.
	events = {
		emf_marriage.3 # Exchange sterility trait if children are born with it
	}
}

on_post_birth_stillbirth = {
	events = {
		emf_birth.1 # Clear pregnancy state of mother after stillbirth
		emf_culture.17 # Clear emf_ai_never_convert_culture_unborn flag
		emf_cadet.3 # Clear posthumous father-of-unborn cadet PETs now that we've finished pregnancy
	}
}

#character
on_crusade_creation = {
	events = {
		emf_crusades.6 # Prevent Pope from snatching up all the holy orders in Christian Crusades
	}
}

# NOTE: We have an on_marriage, but it needs to be directly in 00_on_actions.txt to ensure that it is executed before
# any other on_marriage on_action events (reassigns dynasty of newly-wed lowborn rulers -- emf_core.26).

on_marriage = {
	events = {
		emf_marriage.30 # Apply flags to the newly-married
		emf_ai.0 # Agnatic-Cognatic Retreat
	}
}

on_death = {
	events = {
		emf_religion.2599 # Christian has a chance of being declared a martyr upon death
		emf_religion.2601 # Christian has a chance of becoming a saint upon death
		emf_debug.25 # Log and flag external inheritances
		emf_lucky.2 # Selectively inherit Lucky Ruler status
		emf_core.0 # Player-only EMF death handler
		emf_crier.0 # Death listener
		emf_magyar.3010 # Unlanded Magyar noble passes on vassal_khan flag
		emf_holdings.1405 # Character building the temple dies during construction
		emf_mongol.101 # Maintaining the lines of Genghis's sons
		emf_mongol.200 # Mongol Khan dies with a large enough empire to split up among sons/brothers
		emf_hre.12 # Potentially inherit Karling-usurper status
		emf_revolt.8 # Handle death of religious rebel
		emf_seljuk.11 # Death of a Seljuk Invader
		emf_claims.0 # Ruler w/ feudal elective title(s) dies -- award claims to pretenders & setup justified claimants
		emf_gavelkind.0 # Prevent split-inheritance of baronies in the capital county of a DUKE+ ruler
		emf_core.10 # Non-Dynastic Succession game rule
		emf_empires.70 # Adjust the HRE title's preferred capital
		emf_core.5 # Split wealth inheritance [standard]
		emf_core.6 # Split wealth inheritance [Mirath Succession]
		emf_relsub.50 # Prevent external, cross-religion inheritances to any lineage recently conquered by RelSub
		emf_core.102 # Inherit titular title auto-destruction exemption status for player-created titles
		emf_culture.16 # Dying father w/ emf_ai_never_convert_culture flag has pregnant wife/consort/lover
		emf_cadet.5 # Save posthumous cadet PETs on pregnant wives/consorts
		emf_cadet.6 # Handle [uncanny] death of 'cadet immortal' dummy characters
		emf_core.28 # Protect feudal, tribal, and nomadic government titles from theocratic/republican inheritance
		emf_ai.2 # Agnatic-Cognatic Retreat: Potentially renew an AI's ban on passing Agnatic-Cognatic
		emf_dna.3 # Handle the [uncanny] death of 'DNA placeholder parent' dummy characters
		emf_religion_codegen.1 # Handle the [uncanny] death of religion dummy characters
		emf_religion.12 # Deduct from HF crusade pot if a pledged participant dies
	}
}

on_loot_settlement = {
	random_events = {
		35 = emf_religion.0 # Pagan raider trait
	}
}

#character. Triggers when someone gets imprisoned for any reason. - ROOT is prisoner, FROM is imprisoner
on_become_imprisoned_any_reason = {
	events = {
		emf_magyar.3011 # Unlanded Magyar noble is imprisoned by liege
	}
}

#character. Triggers if someone tries to imprison someone unlanded and fails. Character is exiled to another country
on_avoided_imprison_fled_country = {
	events = {
		 emf_decadence.2530 # Add claims for decadent exiles
	 }
}

# From = Attacker, Root = Defender
on_war_started = {
	events = {
		emf_tournament.102 # Cancel tournament if war begins
	}
}

# ROOT = Builder, FROM = The Holding Title
on_holding_building_start = {
	events = {
		emf_building.0 # Fix disabled cultural castle buildings with special troops overriding the current culture's
		emf_building.1 # Fix disabled cultural castle buildings with special troops overriding the current culture's
		emf_building.2 # Fix disabled cultural castle buildings with special troops overriding the current culture's
		emf_building.3 # Fix disabled cultural tribal buildings with special troops overriding the current culture's
		emf_building.4 # Fix disabled cultural tribal buildings with special troops overriding the current culture's
		emf_building.5 # Fix disabled cultural tribal buildings with special troops overriding the current culture's
	}
}

#character. Triggers if someone is exiled
on_exiled = {
	events = {
		 emf_decadence.2530 # Add claims for decadent exiles
	}
}

# ROOT is the character, FROM is the title, FROMFROM is the old holder
on_new_holder = {
	events = {
		emf_hre.70 # Destroy HRE forbidden titles upon AI emperor gaining them
		emf_hre.71 # Destroy HRE forbidden titles upon AI becoming HREmperor
		emf_laws.41 # Clear stale succ. law tracking flags upon created titles
		emf_core.80 # Handle mercenary companies gaining non-mercenary titles
		emf_empires.5 # Generic empire creation handler
		emf_dynlevy.1 # realm_size update trigger (player-only)
		emf_dynlevy.3 # realm_size update trigger (player-only)
		emf_autolander.0 # Add recently-acquired modifier to counties (player-only)
		emf_coa.0 # Evaluate dynamic CoA rules (specific titles only)
		emf_laws.3 # Handle crown title creation (copy crown law cooldowns, if nec.)
		emf_laws.6 # Handle secondary king title creation when primary kingdom's crown laws are dependent upon empire
		emf_crier.250 # New title announcement
		emf_nomad.21 # Protect the culture of conquered empty/nomadic provinces (LATB) -- title gain version
		emf_core.27 # Remove monk/nun/etc. upon title assumption
		emf_religion.1 # Ensure newly-created holy orders are setup correctly
		emf_magyar.3021 # Hungary title name change
		emf_hre.0 # A non-Karling gains a traditionally Karling title from a Karling
		emf_core.101 # Exempt player-created titular titles from autodestroy (for the lifetime of their character)
		emf_debug.20 # Log DUKE+ tier title creation
		emf_seljuk.56 # Handle Seljuk Invader gaining Persia
		emf_core.20 # Upgrade peasant_leader to peasant_ruler upon title gain
		emf_core.21 # Creation of an HRE / French HRE title -- maintenance for multiplexing the titles
		emf_core.22 # Creation of a Byzantium / Roman Empire title -- maintenance for multiplexing the titles
		emf_core.23 # Nobody shall ever hold e_null, evar!
		emf_nomad.120 # Destroy titular empires auto-generated by nomad conversion to different government
		emf_laws.31 # Don't allow unreformed pagans to have more than Limited CA
		emf_decay.0 # Handle imperial decay for empire title being gained
		emf_mr.12 # Generate bonuses for newly generated patricians
		emf_mr.13 # Give out Great Chancellor titles
		emf_hre.61 # Handle a prince-elector for the HRE gaining a secondary elector title
		emf_religion.13 # Handle a pledged crusader becoming unlanded after they have pledged
	}
}

# ROOT is the character, FROM is the title, FROMFROM is the old holder
on_new_holder_inheritance = {
	events = {
		emf_hre.70 # Destroy HRE forbidden titles upon AI emperor gaining them
		emf_hre.71 # Destroy HRE forbidden titles upon AI becoming HREmperor
		emf_dynlevy.2 # realm_size update trigger (player-only)
		emf_autolander.0 # Add recently-acquired modifier to counties (player-only)
		emf_coa.0 # Evaluate dynamic CoA rules (specific titles only)
		emf_core.1 # Recent succession malus
		emf_core.27 # Remove monk/nun/etc. upon title assumption
		emf_startup.20 # Handle ruler-designed character startup
		emf_intrigue.1360 # Ruler inherits who has an older bastard sibling
		emf_magyar.3021 # Hungary title name change
		emf_hre.0 # A non-Karling inherits a traditionally Karling title from a Karling
		emf_core.20 # Upgrade peasant_leader to peasant_ruler upon title gain
		emf_laws.31 # Don't allow unreformed pagans to have more than Limited CA
		emf_decay.1 # Handle imperial decay for empire title being inherited
		emf_mr.13 # Give out Great Chancellor titles
		emf_hre.61 # Handle a prince-elector for the HRE gaining a secondary elector title
	}
}

# ROOT is the character, FROM is the title, FROMFROM is the old holder
on_new_holder_usurpation = {
	events = {
		emf_hre.70 # Destroy HRE forbidden titles upon AI emperor gaining them
		emf_hre.71 # Destroy HRE forbidden titles upon AI becoming HREmperor
		emf_core.80 # Handle mercenary companies gaining non-mercenary titles
		emf_dynlevy.1 # realm_size update trigger (player-only)
		emf_autolander.0 # Add recently-acquired modifier to counties (player-only)
		emf_coa.0 # Evaluate dynamic CoA rules (specific titles only)
		emf_laws.4 # Handle crown title usurpation (drop CA)
		emf_nomad.20 # Protect the culture of conquered empty/nomadic provinces (LATB)
		emf_core.27 # Remove monk/nun/etc. upon title assumption
		emf_magyar.3021 # Hungary title name change
		emf_hre.0 # A non-Karling usurps a traditionally Karling title from a Karling
		emf_seljuk.56 # Handle Seljuk Invader gaining Persia
		emf_core.20 # Upgrade peasant_leader to peasant_ruler upon title gain
		emf_core.23 # Nobody shall ever hold e_null, evar!
		emf_laws.31 # Don't allow unreformed pagans to have more than Limited CA
		emf_decay.2 # Handle imperial decay for empire title being usurped
		emf_mr.13 # Give out Great Chancellor titles
		emf_hre.61 # Handle a prince-elector for the HRE gaining a secondary elector title
		emf_relsub.53 # Apply RelSub penalties when appropriate with new holder having Free Infidel Revocation
	}
}

on_unlanded = {
	events = {
		emf_magyar.2003 # Magyar tribal ruler unlanded prior to the migration
	}
}

# Character converts religion, for whatever reason. ROOT is the character after conversion and the FROM scope has
# the old religion.
on_character_convert_religion = {
	events = {
		emf_religion.2 # Add syncretic traits
		emf_laws.30 # Potentially downgrade CA laws when crown law title holder converts to unreformed pagan
		emf_heresy.225 # Remove Shekhinah modifiers
		emf_heresy.254 # Remove Mazdaki Power modifiers
		emf_heresy.2066 # Remove Messalian patron saint modifiers
	}
}

# ROOT = AI character
on_ai_end_raid = {
	events = {
		202250 #Raid ends with tribal event troops
	}
}

# When the religion changes in a county, ROOT is province
on_county_religion_change = {
	events = {
		emf_relsub.30 # Clear all religious unrest modifiers
	}
}

# Triggers for all characters in a unit (leading a flank or subunit) when it enters a province
# Root = the affected character
on_unit_entering_province = {
	events = {
		# Maintenance events for artifacts that add naval movement speed
		emf_artifacts.0
		emf_artifacts.1
	}
}

# Triggers for character when they are put in command of a flank
# Root = the affected character
on_command_unit = {
	events = {
		# Maintenance events for artifacts that add naval movement speed
		emf_artifacts.0
		emf_artifacts.1
	}
}

# Triggers if the game is started with Random/Shattered World. Fires at the very end of game setup (just before the Welcome screen is shown)
# Root = The very first character generated (events need a character to work)
on_alternate_start = {
	events = {
		emf_startup.100 # General alt. start handler (note that these fire before on_startup)
	}
}

# Triggers when a change of employer has been detected. Note that the from scope is empty for newly created characters.
# Root = character that got a new employer
# From = previous employer
# FromFrom = new employer
on_employer_change = {
	events = {
		hip.2 # Keep immortal courtiers of All-Seeing Isis in her court (emf_isis_courtier)
	}
}

# Triggers when a change of host has been detected. Note that the from scope is empty for newly created characters. "on_employer_change" is triggered first if a character has had both their employer and host changed since the last check was made.
# Root = the character that got a new host
# From = the previous host
# FromFrom = new employer
on_host_change = {
	events = {
		hip.2 # Keep immortal courtiers of All-Seeing Isis in her court (emf_isis_courtier)
	}
}
