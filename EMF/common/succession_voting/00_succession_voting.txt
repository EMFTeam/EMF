# -*- ck2.succession_voting -*-

# The entry should be named in the same way that the elective succession law is named to define it's voter's logic.
# Root scope - Voter, the character voting in the election
# From scope - Candidate, Character considered for the title
# FromFrom scope - The title the nomination is for
# FromFromFrom scope - The title owner's candidate
# The voter will vote for the top score candidate calculated from this script.

### Condensed syntax layout:
#<elective_law_type> = {
#	candidate_vote_score = {
#		<MTTH>
#	}
#	elector_selection = {
#		max_amount = <int>
#		<MTTH> - if max_amount is set it will pick the X amount of top scorers.
#				 Negative scores are considered invalid electors - Ruler is always an elector
#	}
#	elector_vote_strength = {
#		<MTTH>
#	}
#	elector_stances = { - Intended for the elder council positions
#		<stance_name> = {
#			icon = <int>
#			<MTTH>
#		}
#	}
#	candidate_trigger = { 
#		<trigger>
#	}
#}

### Example elective succession setup
#my_test_law = {
	#elector_stances = { #Electoral stances visible on the Electors' tab. Do not directly affect voting pattern unless used as triggers in the modifiers of candidate_voter_score.
#		my_stance = {
#			icon = 5
#			days = 1
#			additive_modifier = {
#				trait = humble
#				value = 6
#			}
#		}
#		other_stance = {
#			icon = 3
#			days = 1
#		}
#		third_stance = {
#			icon = 1
#			days = 5
#			additive_modifier = {
#				trait = wroth
#				value = 10
#			}
#		}
#	}
#	elector_selection = {
#		days = -5 		# If below 0, ROOT is not valid to be an Elector. Any character above 0 will be an elector.
#		max_amount = 7 # Determines max amount of electors, with the lower scoring ones being excluded (limit is optional)
#		additive_modifier = { #
#			value = 10
#			OR = { #
#				AND = {
#					higher_real_tier_than = BARON
#					FROMFROM = { real_tier = DUKE } #If the Elector Title is a Duchy, any vassal is an elector, otherwise only Dukes and above.
#				}
#				higher_real_tier_than = COUNT
#			}
#			OR = { #Either defacto direct vassal, or independent ruler who is dejure vassal.
#				vassal_of = FROMFROM 
#				independent = yes
#			}
#			OR = { #dejure vassal, or any vassal if title titular.
#				AND = {
#					FROMFROM = { is_de_jure_title = no }
#					vassal_of = FROMFROM 
#				}
#				any_dejure_liege = { title = FROMFROM }
#			}
#		}
#		additive_modifier = {
#			value = 10
#			character = FROMFROM
#		}
#	}
#	elector_vote_strength = { #Affects the voting strength of each elector.
#		days = 1 # 1 elector = 1 vote.
#		additive_modifier = {
#			trait = humble
#			value = 3 # Ex: An Elector with the humble trait is worth an addtional 3 votes.
#		}
#	}
#	candidate_vote_score = { #Chance of an Elector voting for a candidate over the other. The candidate with the highest value will be picked.
#		days = 1
#		##########################   Elector voting himself   ##########################
#		additive_modifier = {
#			value = 15
#			localisation_key = tooltip_feudal_elector_vote_myself
#			character = FROM
#			NOR = {
#				trait = humble
#				trait = content
#				trait = craven
#				trait = slothful
#				trait = stressed
#				trait = depressed
#				trait = ambitious
#			}
#			NOT = { 
#				FROMFROM = { 
#					holder_scope = { 
#						is_parent_of = ROOT
#					} 
#				}
#			}
#		}
#	}
#	candidate_trigger = { #Trigger to determine what characters are valid candidates that can be voted by electors.
#		always = yes
#	}
#}

# Actual voting rules from this file have been given their own files for easier maintenance.
