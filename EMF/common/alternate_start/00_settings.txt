tier = {
	type = custom
	separator = yes
	potential = {
		is_shattered_world = yes
	}
	dukes = {
		generate_dukes = yes
	}
	dukes_consolidated = {
		generate_dukes = yes
		consolidate_dukes = yes
	}
	counts = {
	}
}

num_counties = {
	type = slider
	sort_priority = 1000
	
	potential = {
		is_random_world = yes
	}
	
	min = 1
	max = 8
	default = 5
	
	apply_before_generation = yes
}

num_dukes = {
	type = selection
	random_default = normal
	sort_priority = 999
	
	potential = {
		is_random_world = yes
	}
	
	none = {
		generate_random_dukes = no
	}
	few = {
		duke_threshold = 51
		duke_ignore_rate = 50
		duke_vassalization_rate = 50
		generate_random_dukes = yes
	}
	normal = {
		duke_threshold = 30
		duke_ignore_rate = 5
		duke_vassalization_rate = 90
		generate_random_dukes = yes
	}
	many = {
		duke_threshold = 20
		duke_ignore_rate = 0
		duke_vassalization_rate = 99
		generate_random_dukes = yes
	}
}

num_kings = {
	type = selection
	random_default = normal
	sort_priority = 998
	
	potential = {
		is_random_world = yes
	}
	
	none = {
		generate_random_kings = no
	}
	few = {
		king_threshold = 30
		king_ignore_rate = 50
		king_vassalization_rate = 50
		generate_random_kings = yes
	}
	normal = {
		king_threshold = 18
		king_ignore_rate = 14
		king_vassalization_rate = 85
		generate_random_kings = yes
	}
	many = {
		king_threshold = 10
		king_ignore_rate = 0
		king_vassalization_rate = 95
		generate_random_kings = yes
	}
}

num_emperors = {
	type = selection
	random_default = few
	sort_priority = 997
	separator = yes
	
	potential = {
		is_random_world = yes
	}
	
	none = {
		generate_random_emperors = no
	}
	few = {
		emperor_threshold = 30
		emperor_ignore_rate = 95
		emperor_vassalization_rate = 95
		generate_random_emperors = yes
	}
	normal = {
		emperor_threshold = 20
		emperor_ignore_rate = 80
		emperor_vassalization_rate = 95
		generate_random_emperors = yes
	}
	many = {
		emperor_threshold = 15
		emperor_ignore_rate = 40
		emperor_vassalization_rate = 100
		generate_random_emperors = yes
	}
}


shattered_cbs = {
	type = selection
	potential = {
		is_shattered_world = yes
	}
	on_limited = {
	}
	on_long = {
	}
	on_permanent = {
	}
	off = {
	}
}

shattered_conquerors = {
	type = selection
	potential = {
		is_shattered_world = yes
	}
	on_few = {
	}
	on_normal = {
	}
	on_many = {
	}
	off = {
	}
}

shattered_succession = {
	type = selection
	separator = yes
	potential = {
		is_shattered_world = yes
	}
	default_laws = {
	}
	all_primogeniture = {
	}
	all_gavelkind = {
	}
	all_elective_gavelkind = {
	}
	all_elective = {
	}
	all_seniority = {
	}
	all_ultimogeniture = {
	}
	all_tanistry = {
	}
}

female_ruler_percentage = {
	type = slider
	
	min = 0
	max = 100
	default = 10
	
	apply_before_generation = yes
}

marriage_percentage = {
	type = slider
	
	min = 0
	max = 100
	default = 90
	
	apply_before_generation = yes
}

age_span = {
	type = double_slider
	
	min = 0
	min_default = 12
	max = 100
	max_default = 64
	
	apply_before_generation = yes
}

num_of_children = {
	type = double_slider
	separator = yes
	
	min = 0
	min_default = 1
	max = 10
	max_default = 3
	
	apply_before_generation = yes
}

culture = {
	type = selection
	apply_before_generation = yes
	priority = 1000
	
	random_default = random
	
	historical = {
		culture = historical
	}
	random = {
		culture = random
	}
	full_random = {
		culture = full_random
	}
	historical_2 = {
		culture = historical
	}
	random_2 = {
		culture = random
	}
	full_random_2 = {
		culture = full_random
	}
	historical_3 = {
		culture = historical
	}
	random_3 = {
		culture = random
	}
	full_random_3 = {
		culture = full_random
	}
	animal_kingdoms = {
		culture = full_random
		special_culture = animal_kingdoms
	}
	animal_world = {
		culture = full_random
		special_culture = animal_world
	}
	historical_4 = {
		culture = historical
	}
	random_4 = {
		culture = random
	}
	full_random_4 = {
		culture = full_random
	}
	historical_5 = {
		culture = historical
	}
	random_5 = {
		culture = random
	}
	full_random_5 = {
		culture = full_random
	}
	historical_6 = {
		culture = historical
	}
	random_6 = {
		culture = random
	}
	full_random_6 = {
		culture = full_random
	}
}

religion = {
	type = selection
	apply_before_generation = yes
	priority = 1000
	
	random_default = random
	
	historical = {
		religion = historical
		holy_sites = historical
	}
	random = {
		religion = random
		holy_sites = random
	}
	full_random = {
		religion = full_random
		holy_sites = random
	}
}

religion_features = {
	type = selection
	apply_before_generation = yes
	priority = 998 # Just after religion generation
	
	random_default = random
	
	historical = {
		religion_features = historical
	}
	random = {
		religion_features = random
	}
}

names = {
	type = selection
	separator = yes
	apply_before_generation = yes
	priority = 998 # Just after religion and culture generation
	
	random_default = random
	
	historical = {
		culture_names = historical
		religion_names = historical
	}
	random_religion = {
		culture_names = historical
		religion_names = random
	}
	random_culture = {
		culture_names = random
		religion_names = historical
	}
	random = {
		culture_names = random
		religion_names = random
	}
}

holding_slots = {
	type = selection
	apply_before_generation = yes
	priority = 1001 # We need this before we generate holy sites
	
	random_default = random
	
	historical = {
		holding_slots = historical # No code effect, but accessible in script
	}
	random = {
		holding_slots = random
	}
	one = {
		holding_slots = one
	}
	two = {
		holding_slots = two
	}
	three = {
		holding_slots = three
	}
	four = {
		holding_slots = four
	}
	five = {
		holding_slots = five
	}
	six = {
		holding_slots = six
	}
	seven = {
		holding_slots = seven
	}
}

holding_types = {
	type = selection
	apply_before_generation = yes
	
	potential = {
		is_shattered_world = yes
	}
	historical = {
		holding_type = historical
	}
	feudal = {
		holding_type = feudal
	}
	tribal = {
		holding_type = tribal
	}
	nomadic = {
		holding_type = nomadic
	}
	tribal_nomadic = {
		holding_type = tribal_nomadic
	}
}

random_holdings = {
	type = selection
	apply_before_generation = yes
	random_default = balanced
	potential = {
		is_random_world = yes
	}
	feudal_heavy = {
		feudal_seeds = 4
		tribal_seeds = 1
		nomadic_seeds = 1
		generate_random_holdings = yes
	}
	balanced = {
		feudal_seeds = 5
		tribal_seeds = 3
		nomadic_seeds = 2
		generate_random_holdings = yes
	}
	tribal_heavy = {
		feudal_seeds = 1
		tribal_seeds = 4
		nomadic_seeds = 3
		generate_random_holdings = yes
	}
}

technology = {
	type = selection
	separator = yes
	apply_before_generation = yes
	
	priority = 900 # Needs to happen after culture and religion, but before holdings
	
	random_default = random
	
	historical = {
		technology = historical
	}
	random = {
		technology = random
	}
	flat = {
		technology = flat
	}
}

title_names = {
	type = selection
	random_default = random
	
	historical = {
	}
	random = {
		effect = {
			rename_titles_altstart = yes
		}
	}
	random_including_duchies = {
		effect = {
			rename_titles_altstart = yes
			rename_titles_altstart_duchies = yes
		}
	}
}

dejure = {
	type = selection
	apply_before_generation = yes
	
	random_default = random
	
	historical = {
		dejure_kingdoms = historical
		dejure_empires = historical
	}
	random = {
		dejure_kingdoms = random
		dejure_empires = random
	}
	no_empires = {
		dejure_kingdoms = historical
		dejure_empires = none
	}
	no_kingdoms = {
		dejure_kingdoms = none
		dejure_empires = none
	}
}

dejure_kingdom_size = {
	type = double_slider
	trigger = {
		has_alternate_start_parameter = { key = dejure_kingdoms value = random }
	}
	apply_before_generation = yes
	priority = 100 # Needs to be applied before kingdom generation
	
	min = 2
	min_default = 3
	max = 12
	max_default = 10
}

dejure_empire_size = {
	type = double_slider
	trigger = {
		has_alternate_start_parameter = { key = dejure_kingdoms value = random }
	}
	apply_before_generation = yes
	priority = 100 # Needs to be applied before kingdom generation
	
	min = 2
	min_default = 3
	max = 6
	max_default = 5
}
