
namespace = emf_startup

# basic startup [Isis]
# invoked through character history effect
character_event = {
	id = emf_startup.0
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				not = {
					k_sicily = {
						de_jure_liege = e_byzantium # Only true for vanilla
					}
				}
			}
			set_global_flag = SWMH
		}

		# Map-specific dynamic de jure changes (see emf_startup_map.txt)
		character_event = { id = emf_startup.30 }
	}

	option = {
		name = OK
	}
}


# emf_startup.1
# Initial welcome event
narrative_event = {
	id    = emf_startup.1
	desc  = emf_startup.1.desc
	title = emf_startup.1.title

	picture = GFX_evt_rainy_lanterns
	border  = GFX_event_narrative_frame_diplomacy

	major = yes
	is_triggered_only = yes

	option = {
		name = emf_startup.1.opt.a
	}
}


# on_startup [Isis]
#
# We don't trust startup via character history effect (emf_startup.0)
# as much as we do on_startup to give us valid game state with which
# to work, post-2.4/HL, so now we do most of our campaign setup here.
character_event = {
	id = emf_startup.2
	hide_window = yes
	is_triggered_only = yes

	only_independent = yes
	culture = hip_culture

	trigger = {
		has_landed_title = e_hip
		not = { has_global_flag = EMF }
	}

	immediate = {
		set_global_flag = EMF

		# Prevent early mending of the Catholic Schism
		if = {
			limit = {
				b_hagiasophia = {
					owner = {
						religion = catholic
					}
				}
			}
			k_orthodox = {
				owner = {
					b_hagiasophia = {
						grant_title_no_opinion = PREV
					}
				}
			}
		}

		# Enable Crusades at the historical bookmark
		if = {
			limit = {
				year = 1099
				month = 7
#				day = 15
			}
			set_global_flag = christian_crusades_unlocked
			set_global_flag = muslim_jihads_unlocked
		}

		# PB compatibility tweaks and setup
		character_event = { id = emf_startup.4 }
		narrative_event = { id = meneth.600 } # CoTs (hidden)

		# Initialize crown laws
		character_event = { id = emf_laws.0 }

		# Initialize playable ruler demesne (limit random vassal barons)
		any_playable_ruler = {
			character_event = { id = emf_startup.10 }
		}

		# Antinomad setup (preserve province history culture & religion)
		character_event = { id = emf_nomad.1000 }

		# Combat trait distribution
		any_playable_ruler = {
			character_event = { id = emf_startup.5 }
		}

		# Apply Islamic handicap to religious authority
		character_event = { id = emf_startup.41 }

		# Initialize dynlevy
		character_event = { id = emf_dynlevy.0 }

		narrative_event = { id = emf_startup.1 } # Welcome
	}
}


# emf_startup.3 FREE


# emf_startup.4
#
# PB compatibility tweaks & setup
character_event = {
	id = emf_startup.4
	desc = AI_EVENT
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_global_flag = theme_system_reformed
		if = {
			limit = {
				year = 1066
			}
			clr_global_flag = theme_system_reformed
		}
		if = {
			limit = {
				year = 1077
			}
			set_global_flag = rum_formed
			k_anatolia = {
				any_direct_de_jure_vassal_title = {
					de_jure_liege = k_rum
				}
			}
		}

		# No direct vassals of the Byzantine Empire are content after 1066
		if = {
			limit = {
				year = 1066
			}
			e_byzantium = {
				owner = {
					any_vassal = {
						limit = { trait = content }
						remove_trait = content
					}
				}
			}
		}

		# Ensure the Persian Emperor doesn't hold the kingdom title too
		if = {
			limit = {
				e_persia = {
					owner = {
						has_landed_title = k_persia
					}
				}
			}
			k_persia = {
				destroy_landed_title = THIS
			}
		}

		# Ensure Egypt has no holder from 1066 until 1171
		if = {
			limit = {
				k_egypt = { has_holder = yes }
				year = 1066
				not = { year = 1171 }
			}
			k_egypt = {
				destroy_landed_title = THIS
			}
		}
	}

	option = { name = OK }
}


# emf_startup.5 [Playable ruler, FROM=Isis]
#
# Combat trait distribution
character_event = {
	id = emf_startup.5
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		nor = {
			trait = poor_warrior
			trait = trained_warrior
			trait = skilled_warrior
			trait = master_warrior
		}
	}

	immediate = {
		if = {
			limit = { trait = misguided_warrior }
			FROM = { change_variable = { which = combat_skill value = 2 } }
		}
		if = {
			limit = { trait = tough_soldier }
			FROM = { change_variable = { which = combat_skill value = 4 } }
		}
		if = {
			limit = { trait = skilled_tactician }
			FROM = { change_variable = { which = combat_skill value = 6 } }
		}
		if = {
			limit = { trait = brilliant_strategist }
			FROM = { change_variable = { which = combat_skill value = 8 } }
		}
		if = {
			limit = { trait = diligent }
			FROM = { change_variable = { which = combat_skill value = 1 } }
		}
		if = {
			limit = { trait = brave }
			FROM = { change_variable = { which = combat_skill value = 2 } }
		}
		if = {
			limit = { trait = quick }
			FROM = { change_variable = { which = combat_skill value = 1 } }
		}
		if = {
			limit = { trait = genius }
			FROM = { change_variable = { which = combat_skill value = 2 } }
		}
		if = {
			limit = { trait = strong }
			FROM = { change_variable = { which = combat_skill value = 2 } }
		}
		if = {
			limit = { trait = agile }
			FROM = { change_variable = { which = combat_skill value = 1 } }
		}
		if = {
			limit = { trait = weak }
			FROM = { change_variable = { which = combat_skill value = -2 } }
		}
		if = {
			limit = { trait = slow }
			FROM = { change_variable = { which = combat_skill value = -1 } }
		}
		if = {
			limit = { trait = imbecile }
			FROM = { change_variable = { which = combat_skill value = -3 } }
		}
		if = {
			limit = { trait = inbred }
			FROM = { change_variable = { which = combat_skill value = -2 } }
		}
		if = {
			limit = { trait = clubfooted }
			FROM = { change_variable = { which = combat_skill value = -1 } }
		}
		if = {
			limit = { trait = slothful }
			FROM = { change_variable = { which = combat_skill value = -1 } }
		}
		if = {
			limit = { trait = craven }
			FROM = { change_variable = { which = combat_skill value = -2 } }
		}
		if = {
			limit = {
				FROM = { check_variable = { which = combat_skill value = 8 } }
			}
			add_trait = master_warrior
			break = yes
		}
		if = {
			limit = {
				FROM = { check_variable = { which = combat_skill value = 6 } }
			}
			add_trait = skilled_warrior
			break = yes
		}
		if = {
			limit = {
				FROM = { check_variable = { which = combat_skill value = 4 } }
			}
			add_trait = trained_warrior
			break = yes
		}
		if = {
			limit = {
				FROM = { check_variable = { which = combat_skill value = 1 } }
			}
			add_trait = poor_warrior
		}
	}

	option = {
		name = OK
		FROM = { set_variable = { which = combat_skill value = 0 } }
	}
}


# emf_startup.10 [Playable Ruler]
#
# If the ruler has vassal feudal baronies in their capital county or in their
# capital duchy or in their general demesne (in that order of preference), seize
# them from ahistorical (randomly-generated) feudal barons until the ruler no
# longer has free demesne capacity (or runs out of such potential baronies to seize).
character_event = {
	id = emf_startup.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_feudal = yes
		is_landed = yes
		not = { over_max_demesne_size = 0 } # has free capacity
	}

	immediate = {
		# Recursively attempt to seize capital county baronies
		character_event = { id = emf_startup.11 }

		# Recursively attempt to seize capital duchy baronies
		character_event = { id = emf_startup.12 }

		# Recursively attempt to seize demesne baronies
		character_event = { id = emf_startup.13 }
	}
}


# emf_startup.11 [Playable Ruler]
#
# Recursively seize baronies in capital county.
character_event = {
	id = emf_startup.11
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		not = { over_max_demesne_size = 0 } # still has free capacity
		capital_scope = {
			any_province_holding = {
				or = {
					holding_type = castle
					and = {
						ROOT = { religion_group = muslim }
						holding_type = temple
					}
				}
				holder_scope = {
					tier = baron
					vassal_of = ROOT
					not = { historical = yes }
				}
			}
		}
	}

	option = {
		name = OK

		capital_scope = {
			random_province_holding = {
				limit = {
					or = {
						holding_type = castle
						and = {
							ROOT = { religion_group = muslim }
							holding_type = temple
						}
					}
					holder_scope = {
						tier = baron
						vassal_of = ROOT
						not = { historical = yes }
					}
				}
				holder_scope = {
					PREV = { grant_title_no_opinion = ROOT }
					if = {
						limit = {
							nor = {
								num_of_titles = 1
								is_councillor = yes
							}
						}
						death = yes
					}
				}
			}
		}

		# Tail-recurse
		repeat_event = { id = emf_startup.11 }
	}
}


# emf_startup.12 [Playable Ruler]
#
# Recursively seize baronies in capital duchy.
character_event = {
	id = emf_startup.12
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		not = { over_max_demesne_size = 0 } # still has free capacity
		capital_scope = {
			duchy = {
				ROOT = {
					any_demesne_province = { # only owned, capital duchy provinces
						duchy = {
							title = PREVPREVPREV
						}
						any_province_holding = {
							or = {
								holding_type = castle
								and = {
									ROOT = { religion_group = muslim }
									holding_type = temple
								}
							}
							holder_scope = {
								tier = baron
								vassal_of = ROOT
								not = { historical = yes }
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = OK

		capital_scope = {
			duchy = {
				ROOT = {
					random_demesne_province = {
						limit = {
							duchy = {
								title = PREVPREVPREV
							}
							any_province_holding = {
								or = {
									holding_type = castle
									and = {
										ROOT = { religion_group = muslim }
										holding_type = temple
									}
								}
								holder_scope = {
									tier = baron
									vassal_of = ROOT
									not = { historical = yes }
								}
							}
						}
						random_province_holding = {
							limit = {
								or = {
									holding_type = castle
									and = {
										ROOT = { religion_group = muslim }
										holding_type = temple
									}
								}
								holder_scope = {
									tier = baron
									vassal_of = ROOT
									not = { historical = yes }
								}
							}
							holder_scope = {
								PREV = { grant_title_no_opinion = ROOT }
								if = {
									limit = {
										nor = {
											num_of_titles = 1
											is_councillor = yes
										}
									}
									death = yes
								}
							}
						}
					}
				}
			}
		}

		# Tail-recurse
		repeat_event = { id = emf_startup.12 }
	}
}


# emf_startup.13 [Playable Ruler]
#
# Recursively seize baronies in demesne.
character_event = {
	id = emf_startup.13
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		not = { over_max_demesne_size = 0 } # still has free capacity
		any_demesne_province = {
			any_province_holding = {
				or = {
					holding_type = castle
					and = {
						ROOT = { religion_group = muslim }
						holding_type = temple
					}
				}
				holder_scope = {
					tier = baron
					vassal_of = ROOT
					not = { historical = yes }
				}
			}
		}
	}

	option = {
		name = OK

		random_demesne_province = {
			limit = {
				any_province_holding = {
					or = {
						holding_type = castle
						and = {
							ROOT = { religion_group = muslim }
							holding_type = temple
						}
					}
					holder_scope = {
						tier = baron
						vassal_of = ROOT
						not = { historical = yes }
					}
				}
			}
			random_province_holding = {
				limit = {
					or = {
						holding_type = castle
						and = {
							ROOT = { religion_group = muslim }
							holding_type = temple
						}
					}
					holder_scope = {
						tier = baron
						vassal_of = ROOT
						not = { historical = yes }
					}
				}
				holder_scope = {
					PREV = { grant_title_no_opinion = ROOT }
					if = {
						limit = {
							not = {
								num_of_titles = 1
								is_councillor = yes
							}
						}
						death = yes
					}
				}
			}
		}

		# Tail-recurse
		repeat_event = { id = emf_startup.13 }
	}
}


# emf_startup.20
#
# Remove age customizer traits within EVENT_PROCESS_OFFSET days of startup
#
# Due to weirdness with the way ruler designer characters are placed into
# the game in place of a historical character, it actually appears to be
# impossible to remove these traits immediately upon startup (either via
# the welcome event or the on_startup on_action).
character_event = {
	id = emf_startup.20
	hide_window = yes

	ai = no

	mean_time_to_happen = {
		days = 1
	}

	option = {
		name = OK

		# Remove any temp. age customization traits from Ruler Designer
		remove_trait = age_1
		remove_trait = age_2
		remove_trait = age_4
		remove_trait = age_8
		remove_trait = age_16
		remove_trait = age_32
	}
}


# emf_startup.30-39 reserved for map-specific de jure adjustments and such


# emf_startup.40
#
# Place all kingdoms with no de jure empire nominally under e_null. This is due
# to various bugs with lack of de jure empires (memory leaks, issues with titles,
# crashing, etc.), as identified by the CK2Plus team (notably Rylock, in the
# "Captain Gars to the Rescue" thread in CK2/Modding forum) in at least patch 2.4.
#
# We also bother with active, titular kingdoms that lack an empire, because it's
# possible that they will either drift into the game or be swapped with other de
# jure title(s) by event.
#
# Called on_startup (titular titles don't persist the change across save/reload,
# so it must be re-done each time).
character_event = {
	id = emf_startup.40
	hide_window = yes
	is_triggered_only = yes

	only_independent = yes

	trigger = {
		has_landed_title = e_hip
	}

	immediate = {
		any_title = {
			limit = {
				tier = king
				temporary = no
				not = { # No de jure empire ...
					empire = {
						always = yes
					}
				}
				or = { # Not a clan/nomad title (unless somehow de jure) ...
					is_titular = no
					nor = {
						clan = yes
						is_nomadic = yes
					}
				}
				nor = {
					# Not these, because they are CoA-only titles ...
					# (exclusion not strictly necessary)
					title = k_emf_saxon_england
					title = k_emf_norman_england
					title = k_emf_english_england
					title = k_emf_barcelona_aragon
					title = k_avaria
					title = k_lombardy
				}
			}

			de_jure_liege = e_null
		}
	}
}


# emf_startup.41 [Isis]
#
# For dealing with the apparent imbalance in Islamic vs. Christian RA
# Apply RA modifier islamic_handicap to Ibadi|Sunni|Shia, assuming a
# character or province of each religion exists in the game.
character_event = {
	id = emf_startup.41
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		character_event = { id = emf_startup.42 } # Sunni
		character_event = { id = emf_startup.43 } # Shia
		character_event = { id = emf_startup.44 } # Ibadi
	}
}


# emf_startup.42 [Isis]
#
# Helper for emf_startup.41 [Sunni]
character_event = {
	id = emf_startup.42
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		any_title = {
			limit = {
				tier = count
				location = { religion = sunni }
			}
			location = {
				religion_authority = {
					modifier = ra_islamic_handicap
				}
			}
			break = yes
		}

		any_independent_ruler = {
			random_realm_character = {
				limit = { religion = sunni }
				religion_authority = {
					modifier = ra_islamic_handicap
				}
				break = yes
			}
		}
	}
}


# emf_startup.43 [Isis]
#
# Helper for emf_startup.41 [Shia]
character_event = {
	id = emf_startup.43
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		any_title = {
			limit = {
				tier = count
				location = { religion = shiite }
			}
			location = {
				religion_authority = {
					modifier = ra_islamic_handicap
				}
			}
			break = yes
		}

		any_independent_ruler = {
			random_realm_character = {
				limit = { religion = shiite }
				religion_authority = {
					modifier = ra_islamic_handicap
				}
				break = yes
			}
		}
	}
}


# emf_startup.44 [Isis]
#
# Helper for emf_startup.41 [Ibadi]
character_event = {
	id = emf_startup.44
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		any_title = {
			limit = {
				tier = count
				location = { religion = ibadi }
			}
			location = {
				religion_authority = {
					modifier = ra_islamic_handicap
				}
			}
			break = yes
		}

		any_independent_ruler = {
			random_realm_character = {
				limit = { religion = ibadi }
				religion_authority = {
					modifier = ra_islamic_handicap
				}
				break = yes
			}
		}
	}
}
