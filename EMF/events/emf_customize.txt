# -*- ck2.events -*-


namespace = emf_startup

### CUSTOMIZE RULER DESIGNED CHARACTERS

# Verify relation to target
character_event = {
	id = emf_startup.1000
	desc = EVTDESC_emf_startup_1000
	picture = GFX_evt_book_carolingian_script
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_emf_startup_1000 # Parent
		trigger = {
			FROM = {
				# Only if 16+ years older
				is_older_than = ROOT
				age_diff = { who = ROOT years = 16 }
				# If female, must be married matrilineally or ROOT is a bastard
				OR = {
					is_female = no
					is_married_matrilineally = yes
					ROOT = { trait = bastard }
					ROOT = { trait = legit_bastard }
				}
				# If male, must not be married matrilineally or unmarried
				OR = {
					is_female = yes
					is_married_matrilineally = no
					is_married = no
				}
			}
		}
		if = {
			limit = { NOT = { trait = bastard } }
			tooltip = { dynasty = FROM }
		}
		FROM = {
			save_event_target_as = new_parent
			if = {
				limit = { is_female = no }
				custom_tooltip = { text = WILL_BECOME_FATHER }
			}
			if = {
				limit = { is_female = yes }
				custom_tooltip = { text = WILL_BECOME_MOTHER }
			}
			if = {
				limit = {
					ROOT = {
						NOT = { trait = bastard }
						NOT = { trait = legit_bastard }
					}
					any_spouse_even_if_dead = {
						OR = {
							is_alive = no
							AND = {
								is_older_than = ROOT
								age_diff = { who = ROOT years = 16 }
							}
						}
					}
				}
				random_spouse_even_if_dead = {
					limit = {
						OR = {
							is_alive = no
							AND = {
								is_older_than = ROOT
								age_diff = { who = ROOT years = 16 }
							}
						}
					}
					save_event_target_as = new_parent_spouse
					if = {
						limit = { is_female = no }
						custom_tooltip = { text = WILL_BECOME_FATHER }
					}
					if = {
						limit = { is_female = yes }
						custom_tooltip = { text = WILL_BECOME_MOTHER }
					}
				}
			}
		}
		hidden_tooltip = {
			character_event = { id = emf_startup.1001 }
		}
	}
	option = {
		name = {
			text = EVTOPTB_emf_startup_1000_brother # Brother
			trigger = { FROM = { is_female = no } }
		}
		name = {
			text = EVTOPTB_emf_startup_1000_sister # Sister
			trigger = { FROM = { is_female = yes } }
		}
		trigger = {
			# NOT an age difference of 16+ years
			NOT = { age_diff = { who = FROM years = 16 } }
			FROM = {
				NOT = { age_diff = { who = ROOT years = 16 } }
				# Either mother or father is of their dynasty and can be ROOT's parent
				OR = {
					father_even_if_dead = {
						dynasty = PREV
						OR = {
							is_alive = no
							AND = {
								is_older_than = ROOT
								age_diff = { who = ROOT years = 16 }
							}
						}	
					}
					mother_even_if_dead = {
						dynasty = PREV
						OR = {
							is_alive = no
							AND = {
								is_older_than = ROOT
								age_diff = { who = ROOT years = 16 }
							}
						}	
					}
				}
			}
		}
		if = {
			limit = { NOT = { trait = bastard } }
			tooltip = { dynasty = FROM }
		}
		if = {
			limit = {
				FROM = {
					father_even_if_dead = {
						dynasty = PREV
						OR = {
							is_alive = no
							AND = {
								is_older_than = ROOT
								age_diff = { who = ROOT years = 16 }
							}
						}	
					}
				}
			}
			FROM = {
				father_even_if_dead = {
					save_event_target_as = new_parent
					custom_tooltip = { text = WILL_BECOME_FATHER }
					if = {
						limit = {
							ROOT = {
								NOT = { trait = bastard }
								NOT = { trait = legit_bastard }
							}
							any_spouse_even_if_dead = {
								OR = {
									is_alive = no
									AND = {
										is_older_than = ROOT
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
						}
						random_spouse_even_if_dead = {
							limit = {
								OR = {
									is_alive = no
									AND = {
										is_older_than = ROOT
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
							save_event_target_as = new_parent_spouse
							custom_tooltip = { text = WILL_BECOME_MOTHER }
						}
					}
				}
			}
			hidden_tooltip = {
				ROOT = { character_event = { id = emf_startup.1001 } }
			}
			break = yes
		}
		if = {
			limit = {
				FROM = {
					mother_even_if_dead = {
						dynasty = PREV
						OR = {
							is_alive = no
							AND = {
								is_older_than = ROOT
								age_diff = { who = ROOT years = 16 }
							}
						}	
					}
				}
			}
			FROM = {
				mother_even_if_dead = {
					save_event_target_as = new_parent
					custom_tooltip = { text = WILL_BECOME_MOTHER }
					if = {
						limit = {
							ROOT = {
								NOT = { trait = bastard }
								NOT = { trait = legit_bastard }
							}
							any_spouse_even_if_dead = {
								OR = {
									is_alive = no
									AND = {
										is_older_than = ROOT
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
						}
						random_spouse_even_if_dead = {
							limit = {
								OR = {
									is_alive = no
									AND = {
										is_older_than = ROOT
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
							save_event_target_as = new_parent_spouse
							custom_tooltip = { text = WILL_BECOME_FATHER }
						}
					}
				}
			}
			hidden_tooltip = {
				ROOT = { character_event = { id = emf_startup.1001 } }
			}
		}		
	}
	option = {
		name = {
			text = EVTOPTC_emf_startup_1000_nephew # Nephew
			trigger = { FROM = { is_female = no } }
		}
		name = {
			text = EVTOPTC_emf_startup_1000_niece # Niece
			trigger = { FROM = { is_female = yes } }
		}
		trigger = {
			# Only if 16+ years older
			is_older_than = FROM
			age_diff = { who = FROM years = 16 }
			FROM = {
				# Either grandmother or grandfather is of their dynasty and can be ROOT's parent
				OR = {
					father_even_if_dead = {
						dynasty = PREV
						OR = {
							father_even_if_dead = {
								dynasty = PREV
								OR = {
									is_alive = no
									AND = {
										is_older_than = ROOT
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
							mother_even_if_dead = {
								dynasty = PREV
								OR = {
									is_alive = no
									AND = {
										is_older_than = ROOT
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
						}
					}
					mother_even_if_dead = {
						dynasty = PREV
						OR = {
							father_even_if_dead = {
								dynasty = PREV
								OR = {
									is_alive = no
									AND = {
										is_older_than = ROOT
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
							mother_even_if_dead = {
								dynasty = PREV
								OR = {
									is_alive = no
									AND = {
										is_older_than = ROOT
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
						}
					}
				}
			}
		}
		if = {
			limit = { NOT = { trait = bastard } }
			tooltip = { dynasty = FROM }
		}
		if = {
			limit = {
				FROM = {
					father_even_if_dead = {
						dynasty = PREV
						father_even_if_dead = {
							dynasty = PREV
							OR = {
								is_alive = no
								AND = {
									is_older_than = ROOT
									age_diff = { who = ROOT years = 16 }
								}
							}
						}
					}
				}
			}
			FROM = {
				father_even_if_dead = {
					father_even_if_dead = {
						save_event_target_as = new_parent
						custom_tooltip = { text = WILL_BECOME_FATHER }
						if = {
							limit = {
								ROOT = {
									NOT = { trait = bastard }
									NOT = { trait = legit_bastard }
								}
								any_spouse_even_if_dead = {
									OR = {
										is_alive = no
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
							random_spouse_even_if_dead = {
								limit = {
									OR = {
										is_alive = no
										AND = {
											is_older_than = ROOT
											age_diff = { who = ROOT years = 16 }
										}
									}
								}
								save_event_target_as = new_parent_spouse
								custom_tooltip = { text = WILL_BECOME_MOTHER }
							}
						}
					}
				}
			}
			hidden_tooltip = {
				ROOT = { character_event = { id = emf_startup.1001 } }
			}
			break = yes
		}
		if = {
			limit = {
				FROM = {
					father_even_if_dead = {
						dynasty = PREV
						mother_even_if_dead = {
							dynasty = PREV
							OR = {
								is_alive = no
								AND = {
									is_older_than = ROOT
									age_diff = { who = ROOT years = 16 }
								}
							}
						}
					}
				}
			}
			FROM = {
				father_even_if_dead = {
					mother_even_if_dead = {
						save_event_target_as = new_parent
						custom_tooltip = { text = WILL_BECOME_MOTHER }
						if = {
							limit = {
								ROOT = {
									NOT = { trait = bastard }
									NOT = { trait = legit_bastard }
								}
								any_spouse_even_if_dead = {
									OR = {
										is_alive = no
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
							random_spouse_even_if_dead = {
								limit = {
									OR = {
										is_alive = no
										AND = {
											is_older_than = ROOT
											age_diff = { who = ROOT years = 16 }
										}
									}
								}
								save_event_target_as = new_parent_spouse
								custom_tooltip = { text = WILL_BECOME_FATHER }
							}
						}
					}
				}
			}
			hidden_tooltip = {
				ROOT = { character_event = { id = emf_startup.1001 } }
			}
			break = yes
		}
		if = {
			limit = {
				FROM = {
					mother_even_if_dead = {
						dynasty = PREV
						father_even_if_dead = {
							dynasty = PREV
							OR = {
								is_alive = no
								AND = {
									is_older_than = ROOT
									age_diff = { who = ROOT years = 16 }
								}
							}
						}
					}
				}
			}
			FROM = {
				mother_even_if_dead = {
					father_even_if_dead = {
						save_event_target_as = new_parent
						custom_tooltip = { text = WILL_BECOME_FATHER }
						if = {
							limit = {
								ROOT = {
									NOT = { trait = bastard }
									NOT = { trait = legit_bastard }
								}
								any_spouse_even_if_dead = {
									OR = {
										is_alive = no
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
							random_spouse_even_if_dead = {
								limit = {
									OR = {
										is_alive = no
										AND = {
											is_older_than = ROOT
											age_diff = { who = ROOT years = 16 }
										}
									}
								}
								save_event_target_as = new_parent_spouse
								custom_tooltip = { text = WILL_BECOME_MOTHER }
							}
						}
					}
				}
			}
			hidden_tooltip = {
				ROOT = { character_event = { id = emf_startup.1001 } }
			}
			break = yes
		}
		if = {
			limit = {
				FROM = {
					mother_even_if_dead = {
						dynasty = PREV
						mother_even_if_dead = {
							dynasty = PREV
							OR = {
								is_alive = no
								AND = {
									is_older_than = ROOT
									age_diff = { who = ROOT years = 16 }
								}
							}
						}
					}
				}
			}
			FROM = {
				mother_even_if_dead = {
					mother_even_if_dead = {
						save_event_target_as = new_parent
						custom_tooltip = { text = WILL_BECOME_MOTHER }
						if = {
							limit = {
								ROOT = {
									NOT = { trait = bastard }
									NOT = { trait = legit_bastard }
								}
								any_spouse_even_if_dead = {
									OR = {
										is_alive = no
										age_diff = { who = ROOT years = 16 }
									}
								}
							}
							random_spouse_even_if_dead = {
								limit = {
									OR = {
										is_alive = no
										AND = {
											is_older_than = ROOT
											age_diff = { who = ROOT years = 16 }
										}
									}
								}
								save_event_target_as = new_parent_spouse
								custom_tooltip = { text = WILL_BECOME_FATHER }
							}
						}
					}
				}
			}
			hidden_tooltip = {
				ROOT = { character_event = { id = emf_startup.1001 } }
			}
		}
	}
	option = {
		name = {
			text = EVTOPTD_emf_startup_1000_uncle # Uncle
			trigger = { FROM = { is_female = no } }
		}
		name = {
			text = EVTOPTD_emf_startup_1000_aunt # Aunt
			trigger = { FROM = { is_female = yes } }
		}
		trigger = {
			FROM = {
				# Only if 16+ years older
				is_older_than = ROOT
				age_diff = { who = ROOT years = 16 }
				any_sibling_even_if_dead = {
					dynasty = PREV
					is_adult = yes
					# If female, must be married matrilineally or ROOT is a bastard
					OR = {
						is_female = no
						is_married_matrilineally = yes
						ROOT = { trait = bastard }
						ROOT = { trait = legit_bastard }
					}
					# If male, must not be married matrilineally or unmarried
					OR = {
						is_female = yes
						is_married_matrilineally = no
						is_married = no
					}
					OR = {
						is_alive = no
						AND = {
							is_older_than = ROOT
							age_diff = { who = ROOT years = 16 }
						}
					}
				}
			}
		}
		if = {
			limit = { NOT = { trait = bastard } }
			tooltip = { dynasty = FROM }
		}
		FROM = {
			random_sibling_even_if_dead = {
				limit = {
					dynasty = PREV
					is_adult = yes
					# If female, must be married matrilineally or ROOT is a bastard
					OR = {
						is_female = no
						is_married_matrilineally = yes
						ROOT = { trait = bastard }
						ROOT = { trait = legit_bastard }
					}
					# If male, must not be married matrilineally or unmarried
					OR = {
						is_female = yes
						is_married_matrilineally = no
						is_married = no
					}
					OR = {
						is_alive = no
						AND = {
							is_older_than = ROOT
							age_diff = { who = ROOT years = 16 }
						}
					}
				}
				save_event_target_as = new_parent
				if = {
					limit = { is_female = no }
					custom_tooltip = { text = WILL_BECOME_FATHER }
				}
				if = {
					limit = { is_female = yes }
					custom_tooltip = { text = WILL_BECOME_MOTHER }
				}
				if = {
					limit = {
						ROOT = {
							NOT = { trait = bastard }
							NOT = { trait = legit_bastard }
						}
						any_spouse_even_if_dead = {
							OR = {
								is_alive = no
								AND = {
									is_older_than = ROOT
									age_diff = { who = ROOT years = 16 }
								}
							}
						}
					}
					random_spouse_even_if_dead = {
						limit = {
							OR = {
								is_alive = no
								AND = {
									is_older_than = ROOT
									age_diff = { who = ROOT years = 16 }
								}
							}
						}
						save_event_target_as = new_parent_spouse
						if = {
							limit = { is_female = no }
							custom_tooltip = { text = WILL_BECOME_FATHER }
						}
						if = {
							limit = { is_female = yes }
							custom_tooltip = { text = WILL_BECOME_MOTHER }
						}
					}
				}
			}
		}
		hidden_tooltip = {
			character_event = { id = emf_startup.1001 }
		}
	}
	option = {
		name = EVTOPTE_emf_startup_1000 # Distant relation
		trigger = { NOT = { trait = bastard } }
		clr_character_flag = customizing_ruler
		hidden_tooltip = { remove_trait = emf_customize_ruler }
		dynasty = FROM
		any_child = { dynasty = FROM }
	}
	option = {
		name = EVTOPTF_emf_startup_1000 # Never mind
		clr_character_flag = customizing_ruler
	}
}

# Set the appropriate character as the parent
character_event = {
	id = emf_startup.1001
	
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		clr_character_flag = customizing_ruler
		remove_trait = emf_customize_ruler
		event_target:new_parent = {
			if = {
				limit = { ROOT = { NOT = { trait = bastard } } }
				ROOT = {
					dynasty = PREV
					any_child = { dynasty = PREVPREV }
				}
			}
			if = {
				limit = { is_female = no }
				ROOT = { set_father = PREV }
			}
			if = {
				limit = { is_female = yes }
				ROOT = { set_mother = PREV }
			}
			recalc_succession = yes
		}
		event_target:new_parent_spouse = {
			if = {
				limit = { is_female = no }
				ROOT = { set_father = PREV }
			}
			if = {
				limit = { is_female = yes }
				ROOT = { set_mother = PREV }
			}
			recalc_succession = yes
		}
		recalc_succession = yes
	}
}

# Remove the trait
character_event = {
	id = emf_startup.1002
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		trait = emf_customize_ruler
	}
	
	immediate = {
		if = {
			limit = { has_character_flag = customizing_ruler }
			repeat_event = { id = emf_startup.1002 days = 10 }
			break = yes
		}
		remove_trait = emf_customize_ruler
	}
}
