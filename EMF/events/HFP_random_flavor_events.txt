# -*- ck2.events -*-

namespace=HFP

character_event = { # Giant trait flavor - gain brawny or frail depending on lifestyle
	id = HFP.1
	hide_window = yes

	is_triggered_only = yes
	
	min_age = 16
	capable_only = yes
	prisoner = no
	
	trigger = {
		NOT = { practical_age = 50 }
		trait = giant
		NOR = {
			trait = feeble
			trait = robust
			has_character_flag = giant_condition
		}
	}
	
	weight_multiplier = {
		days = 1
		modifier = {
			factor = 1.5
			OR = {
				trait = weak
				trait = strong
			}
		}
		modifier = {
			factor = 1.5
			age = 20
		}
		modifier = {
			factor = 1.5
			age = 30
		}
		modifier = {
			factor = 1.5
			age = 40
		}
	}
	
	immediate = {
		set_character_flag = giant_condition
		random_list = {
			75 = { # Gain Frail
				character_event = { id = HFP.2 }
				modifier = {
					factor = 0
					trait = strong
				}
				modifier = {
					factor = 1.5
					is_maimed_trigger = yes
				}
				modifier = {
					factor = 1.5
					trait = clubfooted
				}
				modifier = {
					factor = 1.5
					OR = {
						trait = scholar
						trait = theologian
					}
				}
				modifier = {
					factor = 1.5
					trait = poet
				}
				modifier = {
					factor = 1.5
					trait = slothful
				}
				modifier = {
					factor = 1.5
					trait = shy
				}
				modifier = {
					factor = 1.5
					trait = erudite
				}
				modifier = {
					factor = 2
					has_education_learning_trigger = yes
				}
			}
			25 = { # Gain Robust
				character_event = { id = HFP.3 }
				modifier = {
					factor = 0
					trait = weak
				}
				modifier = {
					factor = 2
					OR = {
						is_nomadic = yes
						is_tribal = yes
					}
				}
				modifier = {
					factor = 1.5
					trait = brave
				}
				modifier = {
					factor = 1.5
					trait = diligent
				}
				modifier = {
					factor = 1.5
					OR = {
						trait = duelist
						trait = strategist
					}
				}
				modifier = {
					factor = 1.5
					trait = falconer
				}
				modifier = {
					factor = 1.5
					trait = wroth
				}
				modifier = {
					factor = 1.5
					trait = ambitious
				}
				modifier = {
					factor = 1.5
					trait = adventurer
				}
				modifier = {
					factor = 2
					has_education_martial_trigger = yes
				}
			}
		}
	}
}

character_event = { # Gain frail
	id = HFP.2
	desc = EVTDESC_HF_2
	picture = GFX_evt_bad_news

	is_triggered_only = yes
	
	min_age = 16
	capable_only = yes
	prisoner = no
	
	trigger = {
		trait = giant
		NOR = {
			trait = feeble
			trait = robust
		}
	}

	option = {
		name = EVTOPTA_HF_2
		trigger = {
			trait = stubborn
			NOT = {
				trait = slothful
			}
		}
		tooltip_info = stubborn
		random = {
			chance = 50
			add_trait = feeble
		}
		if = {
			limit = {
				NOT = {
					trait = diligent
				}
			}
			random = {
				chance = 30
				add_trait = diligent
				hidden_tooltip = {
					character_event = {
						id = 38256 #Notify Diligent
					}
				}
			}
		}
	}
	
	option = {
		name = EVTOPTB_HF_2
		add_trait = feeble
		prestige = -50
	}
}

character_event = { # Gain brawny
	id = HFP.3
	desc = EVTDESC_HF_3
	picture = GFX_evt_powerful_ruler

	is_triggered_only = yes
	
	min_age = 16
	capable_only = yes
	prisoner = no
	
	trigger = {
		trait = giant
		NOR = {
			trait = feeble
			trait = robust
		}
	}

	option = {
		name = EVTOPTA_HF_3
		add_trait = robust
		prestige = 50
	}
	
}

character_event = { # Failing health for older giants
	id = HFP.4
	desc = EVTDESC_HF_4
	picture = GFX_evt_drunk

	is_triggered_only = yes
	
	capable_only = yes
	prisoner = no
	
	trigger = {
		practical_age = 30
		trait = giant
		NOT = {
			has_character_flag = worsening_health_giant
		}
	}
	
	weight_multiplier = {
		days = 1
		modifier = {
			factor = 0.25
			trait = strong
		}
		modifier = {
			factor = 1.5
			trait = weak
		}
		modifier = {
			factor = 1.5
			trait = feeble
		}
		modifier = {
			factor = 1.5
			practical_age = 35
		}
		modifier = {
			factor = 1.5
			practical_age = 40
		}
		modifier = {
			factor = 1.5
			practical_age = 45
		}
		modifier = {
			factor = 1.5
			practical_age = 50
		}
	}
	
	immediate = {
		set_character_flag = worsening_health_giant
	}

	option = {
		name = EVTOPTA_HF_4
		add_character_modifier = {
			modifier = giant_health_problems
			duration = -1
		}
	}
	
}

character_event = { #Relative expresses concern about your drinking
	id = HFP.30000
	desc = EVTDESC_HFP_30000
	picture = GFX_evt_drunk
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	only_capable = yes
	prisoner = no
	
	trigger = {
		trait = drunkard
		is_adult = yes
		any_close_relative = {
			prisoner = no
			is_adult = yes
			is_incapable = no
			NOT = { trait = drunkard }
		}
		NOT = {
			has_character_flag = relative_concerned_about_drinking
		}
	}
	
	immediate = {
		random_close_relative = {
			limit = {
				prisoner = no
				is_adult = yes
				is_incapable = no
				NOT = { trait = drunkard }
			}
			save_event_target_as = concerned_relative
		}
		
		set_character_flag = relative_concerned_about_drinking
	}
	
	option = { #Try to change
		name = EVTOPTA_HFP_30000
		custom_tooltip = { text = EVTOPTA_HFP_30000_TT}
		
		character_event = { id = HFP.30001 days = 30 random = 30}
					
	}

	option = { #Lash out
		name = EVTOPTB_HFP_30000
		custom_tooltip = { text = EVTOPTB_HFP_30000_TT}
		
		event_target:concerned_relative = {
			show_scope_change = no
			opinion = {
				who = ROOT
				modifier = opinion_disappointed
				years = 5
			}
		}
	}
}

character_event = { #Event to check character is still alive
	id = HFP.30001
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				event_target:concerned_relative = {
					is_alive = yes
				}
			}
			random_list = {
				33 = {
					modifier = {
						factor = 1.5
						trait = stubborn
					}
					modifier = {
						factor = 1.5
						trait = temperate
					}
					character_event = { id = HFP.30003 days = 1}
				}
				33 = {
					character_event = { id = HFP.30004 days = 1}
				}
				33 = {
					character_event = { id = HFP.30005 days = 1}
				}
			}
		}
		if = { 
			limit = {
				event_target:concerned_relative = {
					is_alive = no
				}
			}
			character_event = { id = HFP.30002 days = 1}
		}
	}
}

character_event = { #Relative who asks you to stop drinking dies
	id = HFP.30002
	desc = EVTDESC_HFP_30002
	picture = GFX_evt_drunk
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	only_capable = yes
	prisoner = no
	
	option = {
		name = EVTOPTA_HFP_30002
		remove_trait = drunkard
		if = {
			limit = {
				trait = gluttonous
			}
			remove_trait = gluttonous
		}
		else_if = {
			limit = {
				NOT = {
					trait = temperate
				}
			}
			add_trait = temperate
		}
	}
	option = {
		name = EVTOPTB_HFP_30002
	}
}

character_event = { #Relative says how happy they are that you stopped drinking
	id = HFP.30003
	desc = EVTDESC_HFP_30003
	picture = GFX_evt_courtiers_talking
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	only_capable = yes
	prisoner = no
	
	option = {
		name = EVTOPTA_HFP_30003
		remove_trait = drunkard
		if = {
			limit = {
				trait = gluttonous
			}
			remove_trait = gluttonous
		}
		else_if = {
			limit = {
				NOT = {
					trait = temperate
				}
			}
			add_trait = temperate
		}
		event_target:concerned_relative = {
			show_scope_change = no
			opinion = {
				who = ROOT
				modifier = opinion_happy
				years = 5
			}
		}
	}
}

character_event = { #You become unwell from alcohol withdrawal
	id = HFP.30004
	desc = EVTDESC_HFP_30004
	picture = GFX_evt_illness
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	only_capable = yes
	
	option = {
		name = EVTOPTA_HFP_30004
		if = { 
			limit = {
				NOT = {
					has_dlc = "Reapers"
				}
			}
			add_trait = ill
			remove_trait = drunkard
			if = {
				limit = {
					trait = gluttonous
				}
				remove_trait = gluttonous
			}
			else_if = {
				limit = {
					NOT = {
						trait = temperate
					}
				}
				add_trait = temperate
			}
		}
		
		if = { 
			limit = {
				has_dlc = "Reapers"
			}
			add_symptom_effect = yes
			remove_trait = drunkard
			if = {
				limit = {
					trait = gluttonous
				}
				remove_trait = gluttonous
			}
			else_if = {
				limit = {
					NOT = {
						trait = temperate
					}
				}
				add_trait = temperate
			}
		}
	}
}

character_event = { #You fail to stop drinking
	id = HFP.30005
	desc = EVTDESC_HFP_30005
	picture = GFX_evt_drunk
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	only_capable = yes
	prisoner = no
	
	option = {
		name = EVTOPTA_HFP_30005
		event_target:concerned_relative = {
			show_scope_change = no
			opinion = {
				who = ROOT
				modifier = opinion_disappointed
				years = 5
			}
		}	
	}
}

character_event = { #Event where you keep hitting your head on doors as a giant.
	id = HFP.30010
	desc = EVTDESC_HFP_30010
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	only_capable = yes
	prisoner = no
	
	trigger = {
		is_adult = yes
		trait = giant
		NOT = {
			trait = hunchback
		}
		NOT = {
			has_character_flag = giant_hitting_head
		}
	}
	
	immediate = {
		set_character_flag = giant_hitting_head
	}
	
	option = {
		name = EVTOPTA_HFP_30010
		add_trait = shy
	}
	
	option = {
		name = EVTOPTB_HFP_30010
		
		if = {
			limit = {
				NOT = {
					has_dlc = "Reapers"
				}
			}
			add_trait = wounded
		}
		if = { 
			limit = {
				has_dlc = "Reapers"
			}
		}
		add_trait = headache
	}
}

character_event = { #Event where your court physician offers you a potion to make you not depressed
	id = HFP.30020
	desc = EVTDESC_HFP_30020
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	only_capable = yes
	prisoner = no
	only_playable = yes
	has_dlc = "Reapers"
	
	trigger = {
		is_adult = yes
		trait = depressed
		any_courtier_or_vassal = { has_minor_title = title_court_physician }
		NOT = {
			has_character_flag = depression_potion_offer
		}	
	}
	
	immediate = {
		random_courtier_or_vassal = {
			limit = { has_minor_title = title_court_physician }
			save_event_target_as = physician
			set_character_flag = depression_potion_offer
		}
	}
	
	option = {
		name = EVTOPTA_HFP_30020
		custom_tooltip = { text = EVTOPTA_HFP_30020_TT}
		hidden_effect = {
			random_list = {
				60 = {
					if = {
						limit = {
							NOT = {
								has_dlc = "Reapers"
							}
						}
						add_trait = ill
					}
					if = { 
						limit = {
							has_dlc = "Reapers"
						}
						add_symptom_effect = yes
					}
				}
				40 = {
					modifier = {
						event_target:physician = {
							learning = 15
						}
						factor = 1.2
					}
					modifier = {
						event_target:physician = {
							learning = 15
						}
						factor = 1.5
					}
					modifier = {
						event_target:physician = {
							learning = 20
						}
						factor = 2
					}
					modifier = {
						event_target:physician = {
							trait = physician
						}
						factor = 2
					}
					remove_trait = depressed
					hidden_tooltip = {
						character_event = { id = 38314 days = 1 } # Notify lost Depressed
					}
				}
			}
		}
	}
	
	option = {
		name = EVTOPTB_HFP_30020
	
		event_target:physician = {
			opinion = {
				who = ROOT
				modifier = opinion_disappointed
				years = 5
			}
		}
	}
}

#On_birth event to better tie freckles trait inheritance to graphical culture and avoid weird spawns.

#Freckles traits from thinnest to thickest:
#freckles_3
#freckles_2
#freckles
#freckles_4
#freckles_5

character_event = { 
	id = HFP.30030
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOR = {
			trait = freckles
			trait = freckles_2
			trait = freckles_3
			trait = freckles_4
			trait = freckles_5
		} 
		OR = { 
			emf_is_freckles_graphical_culture = yes
			mother_even_if_dead = {
				OR = { 
					trait = freckles_3
					trait = freckles_2
					trait = freckles 
					trait = freckles_4
					trait = freckles_5
					emf_is_freckles_graphical_culture = yes
					mother_even_if_dead = { 
						OR = {
							trait = freckles_3
							trait = freckles_2
							trait = freckles 
							trait = freckles_4
							trait = freckles_5
							emf_is_freckles_graphical_culture = yes
						}
					}
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { 
							OR = { 
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
								emf_is_freckles_graphical_culture = yes
							}
						}
					}
					trigger_else = {
						father_even_if_dead = { 
							OR = { 
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
								emf_is_freckles_graphical_culture = yes
							}
						}
					}
				} 
			}
			trigger_if = {
				limit = { is_father_real_father = no }
				real_father_even_if_dead = { 
					OR = { 
						trait = freckles_3
						trait = freckles_2
						trait = freckles 
						trait = freckles_4
						trait = freckles_5
						emf_is_freckles_graphical_culture = yes
						mother_even_if_dead = {
							OR = {
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
								emf_is_freckles_graphical_culture = yes
							}
						}
						trigger_if = {
							limit = { is_father_real_father = no }
							real_father_even_if_dead = { 
								OR = { 
									trait = freckles_3
									trait = freckles_2
									trait = freckles 
									trait = freckles_4
									trait = freckles_5
									emf_is_freckles_graphical_culture = yes
								}
							}
						}
						trigger_else = {
							father_even_if_dead = { 
								OR = { 
									trait = freckles_3
									trait = freckles_2
									trait = freckles 
									trait = freckles_4
									trait = freckles_5
									emf_is_freckles_graphical_culture = yes
								}
							}
						}
					}
				}
			}
			trigger_else = {
				father_even_if_dead = { 
					OR = { 
						trait = freckles_3
						trait = freckles_2
						trait = freckles 
						trait = freckles_4
						trait = freckles_5
						emf_is_freckles_graphical_culture = yes
						mother_even_if_dead = {
							OR = {
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
								emf_is_freckles_graphical_culture = yes
							}
						}
						trigger_if = {
							limit = { is_father_real_father = no }
							real_father_even_if_dead = { 
								OR = { 
									trait = freckles_3
									trait = freckles_2
									trait = freckles 
									trait = freckles_4
									trait = freckles_5
									emf_is_freckles_graphical_culture = yes
								}
							}
						}
						trigger_else = {
							father_even_if_dead = { 
								OR = { 
									trait = freckles_3
									trait = freckles_2
									trait = freckles 
									trait = freckles_4
									trait = freckles_5
									emf_is_freckles_graphical_culture = yes
								}
							}
						}
					}
				}
			}
		}
	}
	immediate = { 
		random_list = { 
			2 = { 
				add_trait = freckles_5 
				modifier = { 
					factor = 5
					mother_even_if_dead = { trait = freckles_5 }
				}
				modifier = { 
					factor = 5
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_5 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_5 }
					}
				}
				#Grandparents
				modifier = { 
					factor = 4
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_5 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_5 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_5 }
								}
							}
						}
					}
					trigger_else = {
						father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_5 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_5 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_5 }
								}
							}
						}
					}
				}
				modifier = { 
					factor = 4
					mother_even_if_dead = {
						OR = {
							mother_even_if_dead = { trait = freckles_5 }
							trigger_if = {
								limit = { is_father_real_father = no }
								real_father_even_if_dead = { trait = freckles_5 }
							}
							trigger_else = {
								father_even_if_dead = { trait = freckles_5 }
							}
						}
					}
				}

				modifier = { 
					factor = 3
					mother_even_if_dead = { trait = freckles_4 }
				}
				modifier = { 
					factor = 3
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_4 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_4 }
					}
				}
				#Grandparents
				modifier = { 
					factor = 2
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_4 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_4 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_4 }
								}
							}
						}
					}
					trigger_else = {
						father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_4 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_4 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_4 }
								}
							}
						}
					}
				}
				modifier = { 
					factor = 2
					mother_even_if_dead = {
						OR = {
							mother_even_if_dead = { trait = freckles_4 }
							trigger_if = {
								limit = { is_father_real_father = no }
								real_father_even_if_dead = { trait = freckles_4 }
							}
							trigger_else = {
								father_even_if_dead = { trait = freckles_4 }
							}
						}
					}
				}
				#Multiplier bonus	
				modifier = { 
					factor = 2
					mother_even_if_dead = { trait = freckles_4 }
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_4 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_4 }
					}
				}
				#The thickest versions should only appear if a parent already has the freckles gene, not appear out of nowhere.
				trigger = { 
					mother_even_if_dead = { 
						OR = { 
							trait = freckles_3
							trait = freckles_2
							trait = freckles 
							trait = freckles_4
							trait = freckles_5
						} 	
					}
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { 
							OR = { 
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
							} 
						}
					}
					trigger_else = {
						father_even_if_dead = { 
							OR = { 
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
							} 
						}
					}
				}
			}
			6 = { 
				add_trait = freckles_4 
				modifier = { 
					factor = 4
					mother_even_if_dead = { trait = freckles_4 }
				}
				modifier = { 
					factor = 4
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_4 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_4 }
					}
				}
				#Grandparents
				modifier = { 
					factor = 3
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_4 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_4 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_4 }
								}
							}
						}
					}
					trigger_else = {
						father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_4 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_4 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_4 }
								}
							}
						}
					}
				}
				modifier = { 
					factor = 3
					mother_even_if_dead = {
						OR = {
							mother_even_if_dead = { trait = freckles_4 }
							trigger_if = {
								limit = { is_father_real_father = no }
								real_father_even_if_dead = { trait = freckles_4 }
							}
							trigger_else = {
								father_even_if_dead = { trait = freckles_4 }
							}
						}
					}
				}
				
				modifier = { 
					factor = 2
					mother_even_if_dead = { trait = freckles }
				}
				modifier = { 
					factor = 2
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles }
					}
				}
				#Grandparents
				modifier = { 
					factor = 1.5
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles }
								}
							}
						}
					}
					trigger_else = {
						father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles }
								}
							}
						}
					}
				}
				modifier = { 
					factor = 1.5
					mother_even_if_dead = {
						OR = {
							mother_even_if_dead = { trait = freckles }
							trigger_if = {
								limit = { is_father_real_father = no }
								real_father_even_if_dead = { trait = freckles }
							}
							trigger_else = {
								father_even_if_dead = { trait = freckles }
							}
						}
					}
				}
				#Multiplier bonus	
				modifier = { 
					factor = 2
					mother_even_if_dead = { trait = freckles }
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles }
					}
				}
				#The thickest versions should only appear if a parent already has the freckles gene, not appear out of nowhere.
				trigger = { 
					mother_even_if_dead = { 
						OR = { 
							trait = freckles_3
							trait = freckles_2
							trait = freckles 
							trait = freckles_4
							trait = freckles_5
						} 	
					}
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { 
							OR = { 
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
							} 
						}
					}
					trigger_else = {
						father_even_if_dead = { 
							OR = { 
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
							} 
						}
					}
				}
			}
			7 = { 
				add_trait = freckles 
				modifier = { 
					factor = 4
					mother_even_if_dead = { trait = freckles }
				}
				modifier = { 
					factor = 4
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles }
					}
				}
				#Grandparents
				modifier = { 
					factor = 3
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles }
								}
							}
						}
					}
					trigger_else = {
						father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles }
								}
							}
						}
					}
				}
				modifier = { 
					factor = 3
					mother_even_if_dead = {
						OR = {
							mother_even_if_dead = { trait = freckles }
							trigger_if = {
								limit = { is_father_real_father = no }
								real_father_even_if_dead = { trait = freckles }
							}
							trigger_else = {
								father_even_if_dead = { trait = freckles }
							}
						}
					}
				}
				
				modifier = { 
					factor = 2
					mother_even_if_dead = { trait = freckles_2 }
				}
				modifier = { 
					factor = 2
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_2 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_2 }
					}
				}
				#Grandparents
				modifier = { 
					factor = 1.5
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_2 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_2 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_2 }
								}
							}
						}
					}
					trigger_else = {
						father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_2 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_2 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_2 }
								}
							}
						}
					}
				}
				modifier = { 
					factor = 1.5
					mother_even_if_dead = {
						OR = {
							mother_even_if_dead = { trait = freckles_2 }
							trigger_if = {
								limit = { is_father_real_father = no }
								real_father_even_if_dead = { trait = freckles_2 }
							}
							trigger_else = {
								father_even_if_dead = { trait = freckles_2 }
							}
						}
					}
				}
				#Multiplier bonus	
				modifier = { 
					factor = 2
					mother_even_if_dead = { trait = freckles_2 }
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_2 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_2 }
					}
				}
				#The thickest versions should only appear if a parent already has the freckles gene, not appear out of nowhere.
				trigger = { 
					mother_even_if_dead = { 
						OR = { 
							trait = freckles_3
							trait = freckles_2
							trait = freckles 
							trait = freckles_4
							trait = freckles_5
						} 	
					}
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { 
							OR = { 
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
							} 
						}
					}
					trigger_else = {
						father_even_if_dead = { 
							OR = { 
								trait = freckles_3
								trait = freckles_2
								trait = freckles 
								trait = freckles_4
								trait = freckles_5
							} 
						}
					}
				}
			}
			7 = { 
				add_trait = freckles_2 
				modifier = { 
					factor = 4
					mother_even_if_dead = { trait = freckles_2 }
				}
				modifier = { 
					factor = 4
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_2 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_2 }
					}
				}
				#Grandparents
				modifier = { 
					factor = 3
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_2 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_2 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_2 }
								}
							}
						}
					}
					trigger_else = {
						father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_2 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_2 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_2 }
								}
							}
						}
					}
				}
				modifier = { 
					factor = 3
					mother_even_if_dead = {
						OR = {
							mother_even_if_dead = { trait = freckles_2 }
							trigger_if = {
								limit = { is_father_real_father = no }
								real_father_even_if_dead = { trait = freckles_2 }
							}
							trigger_else = {
								father_even_if_dead = { trait = freckles_2 }
							}
						}
					}
				}
				
				modifier = { 
					factor = 2
					mother_even_if_dead = { trait = freckles_3 }
				}
				modifier = { 
					factor = 2
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_3 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_3 }
					}
				}
				#Grandparents
				modifier = { 
					factor = 1.5
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_3 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_3 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_3 }
								}
							}
						}
					}
					trigger_else = {
						father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_3 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_3 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_3 }
								}
							}
						}
					}
				}
				modifier = { 
					factor = 1.5
					mother_even_if_dead = {
						OR = {
							mother_even_if_dead = { trait = freckles_3 }
							trigger_if = {
								limit = { is_father_real_father = no }
								real_father_even_if_dead = { trait = freckles_3 }
							}
							trigger_else = {
								father_even_if_dead = { trait = freckles_3 }
							}
						}
					}
				}
				#Multiplier bonus	
				modifier = { 
					factor = 2
					mother_even_if_dead = { trait = freckles_3 }
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_3 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_3 }
					}
				}
			}
			10 = { 
				add_trait = freckles_3 
				modifier = { 
					factor = 2
					mother_even_if_dead = { trait = freckles_3 }
				}
				modifier = { 
					factor = 2
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = { trait = freckles_3 }
					}
					trigger_else = {
						father_even_if_dead = { trait = freckles_3 }
					}
				}
				#Grandparents
				modifier = { 
					factor = 1.5
					trigger_if = {
						limit = { is_father_real_father = no }
						real_father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_3 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_3 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_3 }
								}
							}
						}
					}
					trigger_else = {
						father_even_if_dead = {
							OR = {
								mother_even_if_dead = { trait = freckles_3 }
								trigger_if = {
									limit = { is_father_real_father = no }
									real_father_even_if_dead = { trait = freckles_3 }
								}
								trigger_else = {
									father_even_if_dead = { trait = freckles_3 }
								}
							}
						}
					}
				}
				modifier = { 
					factor = 1.5
					mother_even_if_dead = {
						OR = {
							mother_even_if_dead = { trait = freckles_3 }
							trigger_if = {
								limit = { is_father_real_father = no }
								real_father_even_if_dead = { trait = freckles_3 }
							}
							trigger_else = {
								father_even_if_dead = { trait = freckles_3 }
							}
						}
					}
				}
			}
			80 = { } #Nothing
		}
	}
}
	
# On_startup event to scatter freckles through the pre-existing rulers (only AI though so human players won't be confused by freckles that spontaneously turn up on their characters)
character_event = {
	id = HFP.30031
	hide_window = yes
	is_triggered_only = yes
	
	ai = yes
	
	trigger = {
		is_save_game = no
	}
	
	immediate = {
		character_event = { id = HFP.30038 }
	}
}

# Actual event that gives freckles, also called by emf_new_character
character_event = { 
	id = HFP.30038
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		emf_is_freckles_graphical_culture = yes
	}
	
	immediate = {
		random_list = { 
			2 = { add_trait = freckles_5 }
			6 = { add_trait = freckles_4 }
			7 = { add_trait = freckles }
			7 = { add_trait = freckles_2 }
			10 = { add_trait = freckles_3 }
			70 = { }
		}
	}
}

#Educator receives event.
character_event = {
	id = HFP.30032
	desc = {
		text = EVTDESCHFPA30032
		trigger = {
			NOT = { trait = lefthanded }
			NOR = { 
				religion_group = christian
				religion_group = muslim 
			}
		}
	}
	desc = {
		text = EVTDESCHFPB30032
		trigger = {
			NOT = { trait = lefthanded }
			OR = { 
				religion_group = christian
				religion_group = muslim 
			}
		}
	}
	desc = {
		text = EVTDESCHFPC30032
		trigger = {
			trait = lefthanded
		}
	}
	picture = GFX_evt_child_sword

	is_triggered_only = yes

	trigger = { 
		prisoner = no
		is_incapable = no
		FROM = {
			educator = { character = ROOT }
			is_alive = yes
			prisoner = no
			trait = lefthanded
			is_incapable = no
		}
	}
	
	option = { #Teach of how ungodly it is.
		name = EVTOPTAHFP30032
		trigger = { 
			OR = { 
				religion_group = christian
				religion_group = muslim 
			}
		}
		custom_tooltip = { text = tooltip_HFP30032_A }
		FROM = { set_character_flag = flag_lefthanded_learning }
		hidden_tooltip = { FROM = { character_event = { id = HFP.30033 } } }
		ai_chance = { 
			factor = 50 
			modifier = { 
				factor = 0.2
				trait = lefthanded
			} 
			modifier = { 
				factor = 1.5
				trait = zealous
			}
			modifier = { 
				factor = 1.5
				trait = theologian
			}
			modifier = { 
				factor = 0
				trait = cynical
			}
		}
	}
	option = { #Teach of impractical it is.
		name = EVTOPTBHFP30032
		custom_tooltip = { text = tooltip_HFP30032_B }
		hidden_tooltip = { FROM = { character_event = { id = HFP.30033 } } }
		ai_chance = { 
			factor = 50
			modifier = { 
				factor = 0.2
				trait = lefthanded
			} 
			modifier = { 
				factor = 1.5
				trait = skilled_tactician
			}
			modifier = { 
				factor = 1.5
				trait = brilliant_strategist
			}
		}
	}
	option = { #Do nothing.
		name = EVTOPTCHFP30032
		ai_chance = { 
			factor = 20 
			modifier = { 
				factor = 4
				trait = lefthanded
			}
		}
	}
}

#Child receives event.
character_event = {
	id = HFP.30033
	desc = {
		text = EVTDESCHFPA30033
		trigger = {
			NOT = { has_character_flag = flag_lefthanded_learning }
		}
	}
	desc = {
		text = EVTDESCHFPB30033
		trigger = {
			has_character_flag = flag_lefthanded_learning
		}
	}
	picture = GFX_evt_guardian

	is_triggered_only = yes

	option = { #Pretend to stop using it.
		name = EVTOPTAHFP30033
		trigger = { 
			OR = { 
				trait = deceitful
				trait = willful
				trait = playful
			}
		}
		if = {
			limit = { has_character_flag = flag_lefthanded_learning }
			change_learning = 1
		}
		if = {
			limit = { NOT = { has_character_flag = flag_lefthanded_learning } }
			change_martial = 1
		}
		FROM = { 
			show_scope_change = no
			opinion = { 
				who = ROOT
				years = 2
				modifier = opinion_disappointed
			} 
		}
		hidden_tooltip = { FROM = { character_event = { id = HFP.30034 days = 40 } } }
		ai_chance = { 
			factor = 50 
			modifier = { 
				factor = 0.5
				trait = dull
			} 
			modifier = { 
				factor = 0.5
				trait = slow
			} 
			modifier = { 
				factor = 0.25
				trait = imbecile
			} 
			modifier = { 
				factor = 1.5
				trait = shrewd
			}
			modifier = { 
				factor = 1.5
				trait = genius
			}
			modifier = { 
				factor = 1.25
				trait = quick
			}
			modifier = { 
				factor = 0.25
				trait = idolizer
			}
			modifier = { 
				factor = 0.25
				trait = timid
			}
			modifier = { 
				factor = 0.25
				trait = trusting
			}
			modifier = { 
				factor = 0.5
				trait = shy
			}
		}
	}
	option = { #Obey
		name = EVTOPTBHFP30033
		if = {
			limit = { has_character_flag = flag_lefthanded_learning }
			change_learning = 2
		}
		if = {
			limit = { NOT = { has_character_flag = flag_lefthanded_learning } }
			change_martial = 2
		}
		remove_trait = lefthanded
		FROM = { 
			show_scope_change = no
			opinion = { 
				who = ROOT
				years = 2
				modifier = opinion_happy
			} 
		}
		hidden_tooltip = { FROM = { character_event = { id = HFP.30035 days = 40 } } }
		ai_chance = { 
			factor = 60
		}
	}
	option = { #Stand up
		name = EVTOPTCHFP30033
		FROM = { 
			show_scope_change = no
			opinion = { 
				who = ROOT
				years = 2
				modifier = opinion_disappointed
			} 
		}
		hidden_tooltip = { FROM = { character_event = { id = HFP.30036 days = 10 } } }
		ai_chance = { 
			factor = 20 
			modifier = { 
				factor = 4
				trait = stubborn
			}
			modifier = { 
				factor = 0.5
				trait = dull
			}
		}
	}
	after = { clr_character_flag = flag_lefthanded_learning }
}
#Guardian was tricked.
character_event = {
	id = HFP.30034
	desc = EVTDESCHFPA30034
	picture = GFX_evt_guardian

	is_triggered_only = yes

	option = { 
		name = EVTOPTAHFP30034
		tooltip = { 
			opinion = { 
				who = FROM
				years = 2
				modifier = opinion_disappointed
			} 
		}
	}
}
#Guardian was listened to.
character_event = {
	id = HFP.30035
	desc = EVTDESCHFPA30035
	picture = GFX_evt_guardian

	is_triggered_only = yes

	option = { 
		name = EVTOPTAHFP30035
		tooltip = { 
			opinion = { 
				who = FROM
				years = 2
				modifier = opinion_happy
			} 
		}
	}
}
#Guardian was denied.
character_event = {
	id = HFP.30036
	desc = EVTDESCHFPA30036
	picture = GFX_evt_guardian

	is_triggered_only = yes

	option = { 
		name = EVTOPTAHFP30036
		tooltip = { 
			opinion = { 
				who = FROM
				years = 2
				modifier = opinion_disappointed
			} 
		}
	}
}
#On adolescence: event for left-handed kids.
character_event = {
	id = HFP.30037
	hide_window = yes

	is_triggered_only = yes

	prisoner = no
	capable_only = yes

	trigger = { 
		trait = lefthanded
		is_alive = yes
		NOR = { 
			trait = incapable
			trait = maimed
			trait = mangled
		}
	}
	
	immediate = {
		educator = {
			character_event = { id = HFP.30032 days = 400 random = 200 }
		}
	}
}

character_event = { #Meteorite falls
	id = HFP.30100
	desc = EVTDESC_HFP_30100
	picture = GFX_evt_comet
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	only_playable = yes
	only_capable = yes
	prisoner = no
	
	trigger = {
		is_adult = yes
		is_tribal = no
		is_nomadic = no
	}
	
	option = {
		name = EVTOPTA_HFP_30100
		custom_tooltip = { text = EVTOPTA_HFP_30100_TOOLTIP }
		character_event = { id = HFP.30101 days = 30 }
	}
	
	option = {
		name = EVTOPTB_HFP_30100
		piety = 100
	}
	
	option = {
		name = EVTOPTC_HFP_30100
		wealth = 125
	}
	
}

character_event = { #Meteorite sword ping event
	id = HFP.30101
	is_triggered_only = yes
	hide_window = yes
	
	prisoner = no
	
	immediate = {
		character_event = { id = HFP.30102 }
	}
}

character_event = { #Meteorite falls
	id = HFP.30102
	desc = EVTDESC_HFP_30102
	picture = GFX_evt_comet
	border = GFX_event_normal_frame_diplomacy
	is_triggered_only = yes
	
	only_capable = yes
	prisoner = no
	
	trigger = {
		is_adult = yes
	}
	
	option = {
		name = EVTOPTA_HFP_30102
		add_artifact = sword_from_heaven
	}	
}


#Groomed/Uncouth events.

#Children:
#Haughty or Indolent can get Groomed. - Handled directly in ze_adolescence_events.
#Rowdy or Brooding can get Uncouth.

#Adults:
#Focus_Family/Seduction: Losing Uncouth/Gaining Groomed.
#Focus_Hunting/War: Gaining Uncouth.


#HFP.20800 - Loc keys taken for the adolescence events.


#Adult ruler losing Uncouth/becoming groomed due to Focus.
character_event = {
	id = HFP.20801
	desc = {
		text = EVTDESCAHFP20801
		trigger = {
			has_focus = focus_family
			is_married = no
			is_female = yes
		}
	}
	desc = {
		text = EVTDESCBHFP20801
		trigger = {
			has_focus = focus_family
			is_married = no
			is_female = no
		}
	}
	desc = {
		text = EVTDESCCHFP20801
		trigger = {
			has_focus = focus_family
			is_married = yes
		}
	}
	desc = {
		text = EVTDESCDHFP20801
		trigger = {
			has_focus = focus_seduction
		}
	}
	picture = GFX_evt_dancing
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes
	
	only_capable = yes
	prisoner = no
	
	trigger = {
		is_adult = yes
		OR = {
			has_focus = focus_family
			has_focus = focus_seduction
		}
		NOR = {
			trait = groomed
			trait = fair
			trait = disfigured
			trait = celibate
			trait = eunuch
		}
	}
	
	weight_multiplier = {
		days = 1
		modifier = {
			factor = 0.5
			trait = humble
		}
		modifier = {
			factor = 0.25
			trait = is_malnourished
		}
		modifier = {
			factor = 0.25
			trait = is_fat
		}
		modifier = {
			factor = 0.15
			in_command = yes
			war = yes
		}
		modifier = {
			factor = 0.5 #Too Busy.
			is_landed = yes
		}
		modifier = {
			factor = 1.5
			trait = proud
		}
		modifier = {
			factor = 1.25
			age = 20
		}
		modifier = {
			factor = 1.25
			age = 30
		}
		modifier = {
			factor = 1.25
			age = 40
		}
		modifier = { #Trophy Spouse.
			factor = 1.5
			emf_is_trophy_spouse = yes
		}
		modifier = { #Trophy Spouse of Emperor.
			factor = 1.15
			any_spouse = { real_tier = EMPEROR }
			emf_is_trophy_spouse = yes
		}
	}
	
	option = {
		name = EVTOPTAHFP20801
		if = { 
			limit = { NOT = { trait = uncouth } }
			add_trait = groomed
		}
		else_if = { 
			limit = { trait = uncouth }
			remove_trait = uncouth
		}
		ai_chance = { factor = 100 }
	}
}


#Adult ruler losing Groomed/becoming uncouth due to Focus.
character_event = {
	id = HFP.20802
	desc = {
		text = EVTDESCAHFP20802
		picture = GFX_evt_mysterious_forest
		trigger = {
			has_focus = focus_hunting
		}
	}
	desc = {
		text = EVTDESCCHFP20802
		picture = GFX_evt_battle
		trigger = {
			has_focus = focus_war
		}
	}
	picture = GFX_evt_battle
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes
	
	only_capable = yes
	prisoner = no
	
	trigger = {
		is_adult = yes
		OR = {
			has_focus = focus_war
			has_focus = focus_hunting
		}
		NOT = {
			trait = uncouth
		}
	}
	
	weight_multiplier = {
		days = 1
		modifier = {
			factor = 1.25
			trait = humble
		}
		modifier = {
			factor = 1.75
			in_command = yes
			war = yes
		}
		modifier = {
			factor = 1.5
			trait = slothful
		}
		modifier = {
			factor = 1.25
			is_landed = yes
		}
		modifier = {
			factor = 0.5
			trait = proud
		}
		modifier = {
			factor = 1.25
			age = 20
		}
		modifier = {
			factor = 1.25
			age = 30
		}
		modifier = {
			factor = 1.25
			age = 40
		}
		modifier = { #Trophy Spouse.
			factor = 0.5
			emf_is_trophy_spouse = yes
		}
		modifier = { #Trophy Spouse of Emperor.
			factor = 0.5
			any_spouse = { real_tier = EMPEROR }
			emf_is_trophy_spouse = yes
		}
	}
	
	option = {
		name = EVTOPTAHFP20802
		trigger = { trait = proud }
		tooltip_info = proud
		add_trait = stressed
		ai_chance = { factor = 10 }
	}
	option = {
		name = EVTOPTBHFP20802
		if = { 
			limit = { NOT = { trait = groomed } }
			add_trait = uncouth
		}
		else_if = { 
			limit = { trait = groomed }
			remove_trait = groomed
		}
		ai_chance = { factor = 100 }

	}
}

#Good Byzantine commander was discharged. (must be delayed to avoid scoping issues)
character_event = {
	id = HFP.20803
	hide_window = yes 
	is_triggered_only = yes
	

	trigger = {
		liege = { 
			character = FROMFROM
		}
		NOR = { #Has not been given another title within the court.
			has_job_title = job_marshal
			has_job_title = job_chancellor
			has_job_title = job_treasurer
			has_job_title = job_spymaster
			has_job_title = job_spiritual
			has_minor_title = title_commander
			has_minor_title = title_councilmember_king
			has_minor_title = title_councilmember_emperor
		}
	}

	immediate = {
		if = {
			limit = { can_still_be_commander_byzantine_trigger = yes }
			if = {
				limit = {
					martial = 28
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -10 } }
			}
			else_if = {
				limit = {
					martial = 24
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -5 } }
			}
			else_if = {
				limit = {
					martial = 20
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -4 } }
			}
			else_if = {
				limit = {
					martial = 18
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -3 } }
			}
			else_if = {
				limit = {
					martial = 14
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -2 } }
			}
			else_if = {
				limit = {
					martial = 12
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -1 } }
			}
		}
	}
}

#Clear variables on first start for the Emperor.
character_event = {
	id = HFP.20804
	hide_window = yes 
	is_triggered_only = yes
	

	trigger = {
		is_save_game = no
		has_law = succ_byzantine_elective 
	}

	immediate = {
		set_variable = { which = byzantine_credibility_discharged_hero value = 0 }
		set_variable = { which = byzantine_credibility_appointed_sycophant value = 0 }
	}
}

#Poor Byzantine commander was employed. (must be delayed to avoid scoping issues)
character_event = {
	id = HFP.20805
	hide_window = yes 
	is_triggered_only = yes
	

	trigger = {
		liege = { 
			character = FROMFROM
		}
	}

	immediate = {
		if = {
			limit = {
				liege = { 
					has_law = succ_byzantine_elective 
					any_vassal = { 
						attribute_diff = { character = ROOT attribute = martial value = 5 } #Check if any other vassal or courtier has higher martial than current character. And check that said vassal or courtier would be a viable commander.
						NOR = { 
							has_job_title = job_marshal
							has_job_title = job_chancellor
							has_job_title = job_treasurer
							has_job_title = job_spymaster
							has_job_title = job_spiritual
							has_minor_title = title_commander
							character = PREVPREV
							primary_title = { temporary = yes } 
						}
						emf_minor_title_basic_allowed_to_hold = yes
						can_be_marshal_trigger = yes
						NOT = { has_character_modifier = refusing_to_lead }
						higher_real_tier_than = BARON #...Or potential commander is vassal...
					}
				}
			}
			if = {
				limit = {
					NOT = { martial = 2 }
				}
				liege = { change_variable = { which = byzantine_credibility_appointed_sycophant value = -10 } }
			}
			else_if = {
				limit = {
					NOT = { martial = 4 }
				}
				liege = { change_variable = { which = byzantine_credibility_appointed_sycophant value = -5 } }
			}
			else_if = {
				limit = {
					NOT = { martial = 6 }
				}
				liege = { change_variable = { which = byzantine_credibility_appointed_sycophant value = -4 } }
			}
			else_if = {
				limit = {
					NOT = { martial = 8 }
				}
				liege = { change_variable = { which = byzantine_credibility_appointed_sycophant value = -3 } }
			}
			else_if = {
				limit = {
					NOT = { martial = 10 }
				}
				liege = { change_variable = { which = byzantine_credibility_appointed_sycophant value = -2 } }
			}
		}
	}
}

#Good Byzantine Marshal was discharged. (must be delayed to avoid scoping issues)
character_event = {
	id = HFP.20806
	hide_window = yes 
	is_triggered_only = yes
	
	trigger = {
		liege = { 
			character = FROMFROM
		}
		NOR = { #Has not been given another title within the court.
			has_job_title = job_marshal
			has_job_title = job_chancellor
			has_job_title = job_treasurer
			has_job_title = job_spymaster
			has_job_title = job_spiritual
			has_minor_title = title_commander
			has_minor_title = title_councilmember_king
			has_minor_title = title_councilmember_emperor
		}
	}

	immediate = {
		if = {
			limit = { can_still_be_marshal_byzantine_trigger = yes }
			if = {
				limit = {
					martial = 28
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -10 } }
			}
			else_if = {
				limit = {
					martial = 24
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -5 } }
			}
			else_if = {
				limit = {
					martial = 20
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -4 } }
			}
			else_if = {
				limit = {
					martial = 18
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -3 } }
			}
			else_if = {
				limit = {
					martial = 14
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -2 } }
			}
			else_if = {
				limit = {
					martial = 12
				}
				liege = { change_variable = { which = byzantine_credibility_discharged_hero value = -1 } }
			}
		}
	}
}


# Creation of the Russian Empire
character_event = {
    id = HFP.16001
    title = EVT_TITLE_HFP_16001
    desc = EVTDESC_HFP_16001
    picture = GFX_evt_council
    border = GFX_event_normal_frame_war
    is_triggered_only = yes

    option = {      
        name = EVTOPTA_HFP_16001
    }
}

# News to other players of the creation of the Russian Empire
character_event = {
    id = HFP.16002
    title = EVT_TITLE_HFP_16002
    desc = EVTDESC_HFP_16002
    picture = GFX_evt_council
    border = GFX_event_normal_frame_war
    is_triggered_only = yes

    option = {      
        name = EVTOPTA_HFP_16002
    }
}


###########################################################
###########    Deal with Inherited artifacts    ###########
###########################################################
character_event = {
    id = HFP.16005
    hide_window = yes
    is_triggered_only = yes

    trigger = {
    	FROM = {
			NOT = { has_artifact_flag = ingredient } #the artifact inherited is NOT an ingredient (those have their own event)...
			is_indestructible = no # indestructible artifacts don't need to be maintained because they cannot be destroyed anyway
		}
    	NOR = { #not already dealing with other inheritances... 
    		#has_character_flag = dealing_with_inherited_ingredients
    		has_character_flag = dealing_with_inherited_artifacts
    	}
    }
    fail_trigger_effect = {
    	if = { # if you are already dealing with another artifact, queue this one up...
    		limit = {
    			has_character_flag = dealing_with_inherited_artifacts
    			ai = no
    		}
    		repeat_event = { id = HFP.16005 days = 12 }
    	}
    }

    immediate = {
    	if = { #AIs get the short stick...
    		limit = { ai = yes }
    		FROM = { destroy_artifact = yes }
    		break = yes
    	}

    	# Players get a choice...
    	set_character_flag = dealing_with_inherited_artifacts
    	FROM = { save_event_target_as = inherited_artifact }
    	FROMFROM = { save_event_target_as = previous_owner }

		character_event = { id = HFP.16006 days = 5 } #actual event
    }
}

#Inherited artifact - keep or no?
character_event = {
    id = HFP.16006
    picture = GFX_evt_experiment
    title = title_HFP_16006
    border = GFX_event_normal_frame_diplomacy
    is_triggered_only = yes

    portrait = event_target:previous_owner

    trigger = {
    	event_target:inherited_artifact = {
    		owner = { character = ROOT }
    	}
    }
    
    desc = {
    	text = EVTDESC_HFP_16006_book
    	picture = GFX_evt_library
    	trigger = {
    		event_target:inherited_artifact = {
    			has_artifact_flag = book
    		}
    	}
    }
    desc = {
    	text = EVTDESC_HFP_16006_combat_weapon
    	picture = GFX_evt_armory
    	trigger = {
    		event_target:inherited_artifact = {
    			has_artifact_flag = combat_weapon
    		}
    	}
    }
    desc = {
    	text = EVTDESC_HFP_16006_armor
    	picture = GFX_evt_armory
    	trigger = {
    		event_target:inherited_artifact = {
    			has_artifact_flag = armor
    		}
    	}
    }
    desc = {
    	text = EVTDESC_HFP_16006_quality_1
    	picture = GFX_evt_relic_box
    	trigger = {
    		event_target:inherited_artifact = {
				quality == 1
    		}
    	}
    }
    desc = {
    	text = EVTDESC_HFP_16006_quality_2
    	picture = GFX_evt_relic_box
    	trigger = {
    		event_target:inherited_artifact = {
				quality == 2
    		}
    	}
    }
    desc = {
    	text = EVTDESC_HFP_16006_quality_3 #or better
    	picture = GFX_evt_relic_box
    	trigger = {
    		event_target:inherited_artifact = {
				quality = 3
    			NOR = {
    				has_artifact_flag = book
    				has_artifact_flag = armor
    				has_artifact_flag = combat_weapon
    			}
    		}
    	}
    }
    desc = {
    	text = EVTDESC_HFP_16006_child
    	trigger = {
    		is_adult = no
    	}
    }
    desc = {
    	text = EVTDESC_HFP_16006_child
    	trigger = {
    		event_target:my_steward = { NOT = { always = yes } }
    	}
    }


    immediate = {
    	if = {
			limit = {
				job_treasurer = { always = yes }
			}
			job_treasurer = {
				save_event_target_as = my_steward
			}
		}
    }

    option = { # Spend money on maintenance
        name = {
        	text = EVTOPTA_HFP_16006_1_A
        	trigger = {
        		event_target:inherited_artifact = {
        			quality = 1
        			NOT = { quality = 2 }
        		}
        	}
        }
        name = {
        	text = EVTOPTA_HFP_16006_1_B
        	trigger = {
        		event_target:inherited_artifact = {
        			quality = 1
        			NOT = { quality = 2 }
        		}
        	}
        }
        name = {
        	text = EVTOPTA_HFP_16006_2_A
        	trigger = {
        		event_target:inherited_artifact = {
        			quality = 2
        			NOT = { quality = 3 }
        		}
        	}
        }
        name = {
        	text = EVTOPTA_HFP_16006_2_B
        	trigger = {
        		event_target:inherited_artifact = {
        			quality = 2
        			NOT = { quality = 3 }
        		}
        	}
        }
        name = {
        	text = EVTOPTA_HFP_16006_3
        	trigger = {
        		event_target:inherited_artifact = {
        			quality = 3
        			NOT = { quality = 4 }
        		}
        	}
        }
        name = {
        	text = EVTOPTA_HFP_16006_4
        	trigger = {
        		event_target:inherited_artifact = { quality = 4 }
        	}
        }

        if = {
        	limit = {
        		event_target:inherited_artifact = { quality == 1 }
        	}
        	scaled_wealth = -0.3
        }
        if = {
        	limit = {
        		event_target:inherited_artifact = { quality == 2 }
        	}
        	scaled_wealth = -0.5
        }
        if = {
        	limit = {
        		event_target:inherited_artifact = { quality == 3 }
        	}
        	scaled_wealth = -0.8
        }
        if = {
        	limit = {
        		event_target:inherited_artifact = { quality = 4 }
        	}
        	scaled_wealth = -1
        } 
        prestige = 25
    }

    option = { # Destroy it

        name = {
        	text = EVTOPTB_HFP_16006_1
        	trigger = {
        		event_target:inherited_artifact = { quality = 1 }
        		event_target:inherited_artifact = { NOT = { quality = 3 } }
        	}
        }
        name = {
        	text = EVTOPTB_HFP_16006_2
        	trigger = {
        		event_target:inherited_artifact = { quality = 3 }
        	}
        }
        
        event_target:inherited_artifact = {
        	show_scope_change = no
        	destroy_artifact = yes
        }
    }

#    option = { # Do something else
#        name = EVTOPTC_HFP_16006
#    }

    after = {
    	clr_character_flag = dealing_with_inherited_artifacts
    }
}
