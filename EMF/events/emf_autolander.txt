# -*- ck2.events -*-

namespace = emf_autolander


# emf_autolander.0
# Title transfer listener for applying Recently Acquired
#
# Taps: on_new_holder (grants + territory gained through gain_all_occupied_titles, gain_title, etc.)
#       on_new_holder_usurpation (general usurpation)
#       on_new_holder_inheritance (inheritance)
#
character_event = {
	id = emf_autolander.0
	desc = HIDE_EVENT
	hide_window = yes
	is_triggered_only = yes
	
	only_playable = yes
	ai = no
	
	trigger = {
		FROM = {
			tier = COUNT
			location = {
				any_province_holding = {
					NOT = { holding_type = nomad }
				}
			}
		}
	}
	
	immediate = {
		FROM = {
			location = {
				remove_province_modifier = emf_mod_recently_acquired
				add_province_modifier = { name = emf_mod_recently_acquired duration = 120 }
			}
		}
	}
	
	option = { name = OK }
}

# emf_autolander.1 [Player]
#
# Recursive event for non-interactive land distribution (multiplayer)
# This version halts when no longer over demesne limit.
character_event = {
	id = emf_autolander.1
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		over_max_demesne_size = 1
		any_demesne_title = {
			tier = COUNT
			location = {
				has_province_modifier = emf_mod_recently_acquired
			}
			NOT = {
				ROOT = {
					capital_scope = {
						duchy = {
							de_jure_vassal_or_below = PREVPREVPREV
						}
					}
				}
			}
			can_be_given_away = yes
		}
	}
	
	option = {
		name = OK
		
		random_demesne_title = {
			limit = {
				tier = COUNT
				location = {
					has_province_modifier = emf_mod_recently_acquired
				}
				NOT = {
					ROOT = {
						capital_scope = {
							duchy = {
								de_jure_vassal_or_below = PREVPREVPREV
							}
						}
					}
				}
				can_be_given_away = yes
			}

			save_event_target_as = target_county
		}
		
		character_event = { id = emf_autolander.11 } # Create random character & grant
		repeat_event = { id = emf_autolander.1 } # Tail-recurse
	}
}


# emf_autolander.2 [Player]
#
# Recursive event for non-interactive land distribution (multiplayer)
# This version doesn't care about preserving excess demesne capacity.
character_event = {
	id = emf_autolander.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_demesne_title = {
			tier = COUNT
			location = {
				has_province_modifier = emf_mod_recently_acquired
			}
			NOT = {
				ROOT = {
					capital_scope = {
						duchy = {
							de_jure_vassal_or_below = PREVPREVPREV
						}
					}
				}
			}
			can_be_given_away = yes
		}
	}
	
	option = {
		name = OK
		
		random_demesne_title = {
			limit = {
				tier = COUNT
				location = {
					has_province_modifier = emf_mod_recently_acquired
				}
				NOT = {
					ROOT = {
						capital_scope = {
							duchy = {
								de_jure_vassal_or_below = PREVPREVPREV
							}
						}
					}
				}
				can_be_given_away = yes
			}

			save_event_target_as = target_county
		}
		
		character_event = { id = emf_autolander.11 } # Create random character & grant
		repeat_event = { id = emf_autolander.2 } # Tail-recurse
	}
}

# emf_autolander.3 [Player]
#
# County selection (only for interactive/singleplayer mode)
# Reentrant
character_event = {
	id = emf_autolander.3
	hide_window = yes
	is_triggered_only = yes
	
	option = {
		name = OK
		
		#log = "emf_autolander.3: ROOT='[Root.GetTitledName]', FROM='[From.GetTitledName]', FROMFROM='[FromFrom.GetTitledName]'"
		
		if = {
			limit = {
				NOT = {
					any_demesne_title = {
						tier = COUNT
						NOT = { has_title_flag = emf_autolander_spare }
						location = {
							has_province_modifier = emf_mod_recently_acquired
						}
						NOT = {
							ROOT = {
								capital_scope = {
									duchy = {
										de_jure_vassal_or_below = PREVPREVPREV
									}
								}
							}
						}
						can_be_given_away = yes
					}
				}
			}
			
			#log = "emf_autolander.3: Iteration DONE"
			
			# Cleanup. We're done prompting for this round.
			any_demesne_title = {
				limit = { tier = COUNT }
				clr_title_flag = emf_autolander_spare
			}
			
			break = yes
		}
		
		random_demesne_title = {
			limit = {
				tier = COUNT
				NOT = { has_title_flag = emf_autolander_spare }
				location = {
					has_province_modifier = emf_mod_recently_acquired
				}
				NOT = {
					ROOT = {
						capital_scope = {
							duchy = {
								de_jure_vassal_or_below = PREVPREVPREV
							}
						}
					}
				}
				can_be_given_away = yes
			}
			
			save_event_target_as = target_county
		}
		
		#log = "emf_autolander.3: target_county='[target_county.GetFullName]'"
		
		# Potentially flip the province capital (will change best_fit_character_for_title).
		# NOTE: Engine should already do it automatically for players.
		# character_event = { id = emf_autolander.9 }
		
		event_target:target_county = {
			if = {
				limit = {
					num_fitting_characters_for_title = 1
					NOT = { num_fitting_characters_for_title = 2 }
				}
				
				#log = "emf_autolander.3: num_fitting_characters_for_title == 1"
			
				best_fit_character_for_title = {
					title = PREV 			# The Title we are looking at
					perspective = ROOT		# From whose perspective we are viewing the title
					index = 1 				# The index of the character in the list
					
					if = {
						limit = { emf_autolander_is_fit_for_grant = yes }
						save_event_target_as = char_one
					}
				}
			}
			if = {
				limit = {
					num_fitting_characters_for_title = 2
				}
				
				#log = "emf_autolander.3: num_fitting_characters_for_title >= 2"
				
				best_fit_character_for_title = {
					title = PREV 			# The Title we are looking at
					perspective = ROOT		# From whose perspective we are viewing the title
					index = 1 				# The index of the character in the list

					if = {
						limit = { emf_autolander_is_fit_for_grant = yes }
						save_event_target_as = char_one
					}
				}
				best_fit_character_for_title = {
					title = PREV 			# The Title we are looking at
					perspective = ROOT		# From whose perspective we are viewing the title
					index = 2 				# The index of the character in the list

					if = {
						limit = { emf_autolander_is_fit_for_grant = yes }
						save_event_target_as = char_two
					}
				}
				
				if = {
					limit = { event_target:char_one = { character = event_target:char_two } }
					#log = "emf_autolander.3: Deduplicating char_one and char_two (!)"
					clear_event_target = char_two
				}
				
				if = {
					limit = {
						NOT = { event_target:char_one = { always = yes } }
						event_target:char_two = { always = yes }
					}
					#log = "emf_autolander.3: Renaming char_two to char_one (!)"
					event_target:char_two = { save_event_target_as = char_one }
					clear_event_target = char_two
				}
			}
		}
		
		#log = "emf_autolander.3: char_one='[char_one.GetTitledName]'"
		#log = "emf_autolander.3: char_two='[char_two.GetTitledName]'"
		
		if = {
			limit = { event_target:char_one = { always = yes } }

			#log = "emf_autolander.3: Directing to char_one"
			
			event_target:char_one = {
				character_event = { id = emf_autolander.4 }
			}
			break = yes
		}
		
		#log = "emf_autolander.3: Directing to player"
		character_event = { id = emf_autolander.4 } # The show must go on
	}
}


character_event = {
	id = emf_autolander.4
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		clear_event_target = char_one
		
		#log = "emf_autolander.4: ROOT='[Root.GetTitledName]', FROM='[From.GetTitledName]', FROMFROM='[FromFrom.GetTitledName]'"
		
		if = {
			limit = {
				NOT = { event_target:char_two = { always = yes } }
			}
			#log = "emf_autolander.4: Directing to player"
			FROM = { character_event = { id = emf_autolander.5 } } # The show must go on
			break = yes
		}
		
		event_target:char_two = {
			#log = "emf_autolander.4: Directing to char_two"
			character_event = { id = emf_autolander.5 }
		}
	}
}


character_event = {
	id = emf_autolander.5
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		clear_event_target = char_two
		#log = "emf_autolander.5: ROOT='[Root.GetTitledName]', FROM='[From.GetTitledName]', FROMFROM='[FromFrom.GetTitledName]'"
		FROMFROM = { character_event = { id = emf_autolander.7 } }
	}
}


character_event = {
	id = emf_autolander.7
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		character_event = { id = emf_autolander.6 }
	}
}


# emf_autolander.6 [Player]
#
# Main province prompt event
character_event = {
	id = emf_autolander.6
	desc = emf_autolander.6.desc
	picture = GFX_evt_small_town
	is_triggered_only = yes

	hide_from = yes
	hide_new = yes
	
	option = {
		name = emf_autolander.6.opt.a
		
		hidden_tooltip = {
			character_event = { id = emf_autolander.11 } # Create random character & grant
			character_event = { id = emf_autolander.3 } # Repeat
		}
	}
	
	option = {
		name = emf_autolander.6.opt.b
		trigger = {
			FROMFROMFROM = {
				NOT = { character = ROOT }
			}
		}
		
		FROMFROMFROM = {
			if = {
				limit = {
					OR = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family
				}
			}
			if = {
				limit = {
					NOT = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_councillor
				}
			}
			if = {
				limit = {
					OR = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family_councillor
				}
			}
			if = {
				limit = {
					NOT = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_other
				}
			}
			hidden_tooltip = {
				character_event = { id = emf_autolander.10 } # Grant target_county
			}
		}		
		hidden_tooltip = {
			character_event = { id = emf_autolander.3 } # Repeat
		}
	}
	
	option = {
		name = emf_autolander.6.opt.c
		trigger = {
			FROMFROM = {
				NOT = { character = ROOT }
			}
		}
		
		FROMFROM = {
			if = {
				limit = {
					OR = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family
				}
			}
			if = {
				limit = {
					NOT = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_councillor
				}
			}
			if = {
				limit = {
					OR = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = yes
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_family_councillor
				}
			}
			if = {
				limit = {
					NOT = {
						is_close_relative = ROOT
						dynasty = ROOT
					}
					is_councillor = no
				}
				custom_tooltip = {
					text = emf_autolander_ctt_grant_other
				}
			}
			
			hidden_tooltip = {
				character_event = { id = emf_autolander.10 } # Grant target_county
			}
		}
		
		hidden_tooltip = {
			character_event = { id = emf_autolander.3 } # Repeat
		}
	}
	
	option = {
		name = emf_autolander.6.opt.d
		
		hidden_tooltip = {
			# NOTE: Not removing the emf_mod_recently_acquired in this case to enable multiple runs,
			# but to avoid an infinite loop of prompts (continually asking about the same provinces
			# rather than exiting), we flag the county title. A second run will clear all such flags
			# first, although with the current design, we will leave some flags lingering if there
			# is no second run (no big deal).
			
			event_target:target_county = {
				set_title_flag = emf_autolander_spare
			}

			clear_event_target = target_county
			character_event = { id = emf_autolander.3 } # Repeat
		}
	}
}

# emf_autolander.10 [Grantee]
#
# FROM grants event_target:target_county and any minor holdings in it to ROOT
character_event = {
	id = emf_autolander.10
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		event_target:target_county = {

			# Grant the capital barony
			location = {
				random_province_holding = {
					limit = {
						owner = { character = FROM }
						is_capital = yes
					}
					grant_title = ROOT
				}
			}

			# Grant the county
			grant_title = ROOT
			
			# Grant any remaining minor holdings
			FROM = {
				any_demesne_title = {
					limit = {
						tier = BARON
						de_jure_liege = event_target:target_county
					}
					grant_title = ROOT
				}
			}

			location = {
				remove_province_modifier = emf_mod_recently_acquired
			}
		}
		
		set_defacto_liege = FROM
		emf_liege_change_effect = yes
		
		clear_event_target = target_county
	}
}


# emf_autolander.11 [Player]
#
# Create a random new character and grant them event_target:target_county
character_event = {
	id = emf_autolander.11
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		if = {
			limit = { has_character_flag = emf_match_province }
			event_target:target_county = {
				location = { save_event_target_as = emf_match_culrel }
			}
			break = yes
		}
		save_event_target_as = emf_match_culrel
	}
	
	option = {
		name = OK

		if = {
			limit = { has_character_flag = emf_military_governor }
			create_random_soldier = {
				random_traits = yes
				religion = event_target:emf_match_culrel
				culture = event_target:emf_match_culrel
				dynasty = random
				female = no
				fertility = 0.5
				health = 5
				attributes = {
					martial = 5
				}
			}
			new_character = {
				remove_trait = imbecile
				random = {
					chance = 80
					remove_trait = weak
					remove_trait = feeble
				}
				random_list = {
					40 = { change_martial = 1 }
					20 = { change_martial = 2 }
					10 = { change_martial = 3 }
					5  = { change_martial = 4 }
				}
				random = {
					chance = 50
					if = {
						limit = { trait = skilled_tactician }
						random = {
							chance = 40 # 1 out of 5 skilled_tacticians
							remove_trait = skilled_tactician
							add_trait = brilliant_strategist
						}
					}
					if = {
						limit = { trait = tough_soldier }
						remove_trait = tough_soldier
						add_trait = skilled_tactician
					}
					if = {
						limit = { trait = misguided_warrior }
						remove_trait = misguided_warrior
						add_trait = tough_soldier
					}
				}
				save_event_target_as = emf_governor
			}
		}
		if = {
			limit = { NOT = { has_character_flag = emf_military_governor } }
			create_random_steward = {
				random_traits = yes
				religion = event_target:emf_match_culrel
				culture = event_target:emf_match_culrel
				dynasty = random
				female = no
				fertility = 0.5
				health = 5
				attributes = {
					stewardship = 5
				}
			}
			new_character = {
				remove_trait = imbecile
				random = {
					chance = 80
					remove_trait = slow
					remove_trait = dull
				}
				random_list = {
					40 = { change_stewardship = 1 }
					20 = { change_stewardship = 2 }
					10 = { change_stewardship = 3 }
					5  = { change_stewardship = 4 }
				}
				random = {
					chance = 50
					if = {
						limit = { trait = fortune_builder }
						random = {
							chance = 50 # 1 out of 4 fortune_builders
							remove_trait = fortune_builder
							add_trait = midas_touched
						}
					}
					if = {
						limit = { trait = thrifty_clerk }
						remove_trait = thrifty_clerk
						add_trait = fortune_builder
					}
					if = {
						limit = { trait = indulgent_wastrel }
						remove_trait = indulgent_wastrel
						add_trait = thrifty_clerk
					}
				}
				save_event_target_as = emf_governor
			}
		}
		
		event_target:emf_governor = {
			if = {
				limit = { NOT = { religion_group = ROOT } }
				ROOT = {
					trigger_switch = {
						on_trigger = religion_group
						christian          = { PREV = { add_trait = sympathy_christendom } }
						muslim             = { PREV = { add_trait = sympathy_islam } }
						pagan_group        = { PREV = { add_trait = sympathy_pagans } }
						zoroastrian_group  = { PREV = { add_trait = sympathy_zoroastrianism } }
						jewish_group       = { PREV = { add_trait = sympathy_judaism } }
						indian_group       = { PREV = { add_trait = sympathy_indian } }
					}
				}
			}
			if = {
				limit = { NOT = { religion = ROOT } }
				remove_trait = zealous
			}
			emf_new_character_noble_effect = yes
			character_event = { id = emf_autolander.10 } # Grant target_county
		}
		if = {
			limit = { has_character_flag = emf_pay_governor }
			transfer_scaled_wealth = {
				to = event_target:emf_governor
				value = 0.125
				min = 25
			}
		}
		
		clear_event_target = emf_match_culrel
		clear_event_target = emf_governor
	}
}

# emf_autolander.20 -- fired from title decision emf_autolander_grant_county
character_event = {
	id = emf_autolander.20
	desc = emf_autolander.20.desc
	picture = GFX_evt_small_town
	border = GFX_event_normal_frame_economy
	
	is_triggered_only = yes
	show_ROOT = yes
	hide_from = yes
	
	immediate = {
		FROM = {
			save_event_target_as = target_county
			location = { save_event_target_as = target_prov }
		}
	}
	
	option = {
		name = emf_autolander.20.opt.steward
		hidden_tooltip = { character_event = { id = emf_autolander.21 } }
	}
	
	option = {
		name = emf_autolander.20.opt.marshal
		set_character_flag = emf_military_governor
		hidden_tooltip = { character_event = { id = emf_autolander.21 } }
	}
	
	option = {
		name = CANCEL
	}
}

# emf_autolander.21 -- has selected steward vs. military governor for target_county
character_event = {
	id = emf_autolander.21
	picture = GFX_evt_small_town
	border = GFX_event_normal_frame_economy
	
	desc = {
		text = emf_autolander.21.desc_matching_culrel
		trigger = {
			religion = event_target:target_prov
			culture = event_target:target_prov
		}
	}
	desc = {
		text = emf_autolander.21.desc
		trigger = {
			NAND = {
				religion = event_target:target_prov
				culture = event_target:target_prov
			}
		}
	}
	
	is_triggered_only = yes
	show_ROOT = yes
	hide_from = yes
	
	option = {
		name = emf_autolander.21.opt.my_culrel
		trigger = {
			NAND = {
				religion = event_target:target_prov
				culture = event_target:target_prov
			}
		}
		set_character_flag = emf_pay_governor
		tooltip = { scaled_wealth = { value = -0.125 min = -25 } }
		custom_tooltip = { text = emf_autolander_ctt_pay_governor }
		if = {
			limit = {
				NAND = {
					scaled_wealth = 0.125
					wealth = 25
				}
			}
			custom_tooltip = { text = emf_autolander_ctt_negative_gold_warning }
		}
		hidden_tooltip = {
			character_event = { id = emf_autolander.11 }
		}
		clr_character_flag = emf_pay_governor
	}
	
	option = {
		name = emf_autolander.21.opt.prov_culrel
		set_character_flag = emf_match_province
		custom_tooltip = { text = emf_autolander_ctt_pay_governor_not_required_for_prov_culrel }
		hidden_tooltip = {
			character_event = { id = emf_autolander.11 }
		}
		clr_character_flag = emf_match_province
	}
	
	option = {
		name = CANCEL
	}
	
	after = {
		clr_character_flag = emf_military_governor
	}
}
