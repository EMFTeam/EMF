# -*- ck2.events -*-
# Written by zijistark via trait-notify.pl v1.0 on Mon Jul 11 07:34:03 2016 (Pacific)

#########################################
#       TRAIT NOTIFICATION EVENTS       #
#########################################

namespace = emf_notify

# NOTE: One should never call these event IDs directly but instead should use
# the named scripted effects in emf_notify_effects.txt to deliver notifications
# for the add/remove of traits. That way, when traits are added or changed,
# their trait IDs and thus event IDs here may change, but their named effects
# will always resolve to the correct event. Additionally, the scripted effects
# actually add/remove the trait as well so as to be able to avoid redundant
# notifications and catch coding errors.


##################################################
#    Trait Gain Notification Forwarder Events    #
# emf_notify.1 through emf_notify.1000 reserved  #
##################################################

# emf_notify.1 -- added amateurish_plotter (Amateurish Plotter)
character_event = {
	id = emf_notify.1

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2001 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2001 } }
		}
	}
}

# emf_notify.2 -- added flamboyant_schemer (Flamboyant Schemer)
character_event = {
	id = emf_notify.2

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2002 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2002 } }
		}
	}
}

# emf_notify.3 -- added intricate_webweaver (Intricate Webweaver)
character_event = {
	id = emf_notify.3

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2003 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2003 } }
		}
	}
}

# emf_notify.4 -- added elusive_shadow (Elusive Shadow)
character_event = {
	id = emf_notify.4

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2004 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2004 } }
		}
	}
}

# emf_notify.5 -- added naive_appeaser (Naive Appeaser)
character_event = {
	id = emf_notify.5

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2005 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2005 } }
		}
	}
}

# emf_notify.6 -- added underhanded_rogue (Underhanded Rogue)
character_event = {
	id = emf_notify.6

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2006 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2006 } }
		}
	}
}

# emf_notify.7 -- added charismatic_negotiator (Charismatic Negotiator)
character_event = {
	id = emf_notify.7

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2007 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2007 } }
		}
	}
}

# emf_notify.8 -- added grey_eminence (Grey Eminence)
character_event = {
	id = emf_notify.8

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2008 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2008 } }
		}
	}
}

# emf_notify.9 -- added indulgent_wastrel (Indulgent Wastrel)
character_event = {
	id = emf_notify.9

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2009 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2009 } }
		}
	}
}

# emf_notify.10 -- added thrifty_clerk (Thrifty Clerk)
character_event = {
	id = emf_notify.10

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2010 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2010 } }
		}
	}
}

# emf_notify.11 -- added fortune_builder (Fortune Builder)
character_event = {
	id = emf_notify.11

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2011 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2011 } }
		}
	}
}

# emf_notify.12 -- added midas_touched (Midas Touched)
character_event = {
	id = emf_notify.12

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2012 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2012 } }
		}
	}
}

# emf_notify.13 -- added misguided_warrior (Misguided Warrior)
character_event = {
	id = emf_notify.13

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2013 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2013 } }
		}
	}
}

# emf_notify.14 -- added tough_soldier (Tough Soldier)
character_event = {
	id = emf_notify.14

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2014 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2014 } }
		}
	}
}

# emf_notify.15 -- added skilled_tactician (Skilled Tactician)
character_event = {
	id = emf_notify.15

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2015 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2015 } }
		}
	}
}

# emf_notify.16 -- added brilliant_strategist (Brilliant Strategist)
character_event = {
	id = emf_notify.16

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2016 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2016 } }
		}
	}
}

# emf_notify.17 -- added detached_priest (Detached Priest)
character_event = {
	id = emf_notify.17

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2017 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2017 } }
		}
	}
}

# emf_notify.18 -- added martial_cleric (Dutiful Cleric)
character_event = {
	id = emf_notify.18

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2018 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2018 } }
		}
	}
}

# emf_notify.19 -- added scholarly_theologian (Scholarly Theologian)
character_event = {
	id = emf_notify.19

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2019 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2019 } }
		}
	}
}

# emf_notify.20 -- added mastermind_theologian (Mastermind Theologian)
character_event = {
	id = emf_notify.20

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2020 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2020 } }
		}
	}
}

# emf_notify.21 -- added stressed (Stressed)
character_event = {
	id = emf_notify.21

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2021 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2021 } }
		}
	}
}

# emf_notify.22 -- added depressed (Depressed)
character_event = {
	id = emf_notify.22

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2022 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2022 } }
		}
	}
}

# emf_notify.23 -- added ill (Ill)
character_event = {
	id = emf_notify.23

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2023 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2023 } }
		}
	}
}

# emf_notify.24 -- added pneumonic (Pneumonic)
character_event = {
	id = emf_notify.24

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2024 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2024 } }
		}
	}
}

# emf_notify.25 -- added syphilitic (Gonorrhea)
character_event = {
	id = emf_notify.25

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2025 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2025 } }
		}
	}
}

# emf_notify.26 -- added leper (Leper)
character_event = {
	id = emf_notify.26

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2026 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2026 } }
		}
	}
}

# emf_notify.27 -- added wounded (Wounded)
character_event = {
	id = emf_notify.27

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2027 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2027 } }
		}
	}
}

# emf_notify.28 -- added maimed (Maimed)
character_event = {
	id = emf_notify.28

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2028 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2028 } }
		}
	}
}

# emf_notify.29 -- added infirm (Infirm)
character_event = {
	id = emf_notify.29

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2029 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2029 } }
		}
	}
}

# emf_notify.30 -- added incapable (Incapable)
character_event = {
	id = emf_notify.30

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2030 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2030 } }
		}
	}
}

# emf_notify.31 -- added drunkard (Drunkard)
character_event = {
	id = emf_notify.31

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2031 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2031 } }
		}
	}
}

# emf_notify.32 -- added has_tuberculosis (Has Consumption)
character_event = {
	id = emf_notify.32

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2032 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2032 } }
		}
	}
}

# emf_notify.33 -- added has_typhoid_fever (Has Slow Fever)
character_event = {
	id = emf_notify.33

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2033 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2033 } }
		}
	}
}

# emf_notify.34 -- added has_typhus (Has Camp Fever)
character_event = {
	id = emf_notify.34

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2034 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2034 } }
		}
	}
}

# emf_notify.35 -- added has_bubonic_plague (Has the Plague!)
character_event = {
	id = emf_notify.35

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2035 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2035 } }
		}
	}
}

# emf_notify.36 -- added has_measles (Has Measles)
character_event = {
	id = emf_notify.36

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2036 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2036 } }
		}
	}
}

# emf_notify.37 -- added has_small_pox (Has Smallpox)
character_event = {
	id = emf_notify.37

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2037 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2037 } }
		}
	}
}

# emf_notify.38 -- added crusader (Crusader)
character_event = {
	id = emf_notify.38

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2038 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2038 } }
		}
	}
}

# emf_notify.39 -- added bastard (Bastard)
character_event = {
	id = emf_notify.39

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2039 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2039 } }
		}
	}
}

# emf_notify.40 -- added twin (Twin)
character_event = {
	id = emf_notify.40

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2040 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2040 } }
		}
	}
}

# emf_notify.41 -- added legit_bastard (Legitimized Bastard)
character_event = {
	id = emf_notify.41

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2041 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2041 } }
		}
	}
}

# emf_notify.42 -- added pregnant (Pregnant)
character_event = {
	id = emf_notify.42

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2042 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2042 } }
		}
	}
}

# emf_notify.43 -- added excommunicated (Excommunicated)
character_event = {
	id = emf_notify.43

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2043 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2043 } }
		}
	}
}

# emf_notify.44 -- added kinslayer (Kinslayer)
character_event = {
	id = emf_notify.44

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2044 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2044 } }
		}
	}
}

# emf_notify.45 -- added homosexual (Homosexual)
character_event = {
	id = emf_notify.45

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2045 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2045 } }
		}
	}
}

# emf_notify.46 -- added clubfooted (Clubfooted)
character_event = {
	id = emf_notify.46

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2046 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2046 } }
		}
	}
}

# emf_notify.47 -- added harelip (Harelip)
character_event = {
	id = emf_notify.47

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2047 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2047 } }
		}
	}
}

# emf_notify.48 -- added hunchback (Hunchback)
character_event = {
	id = emf_notify.48

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2048 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2048 } }
		}
	}
}

# emf_notify.49 -- added lisp (Lisp)
character_event = {
	id = emf_notify.49

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2049 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2049 } }
		}
	}
}

# emf_notify.50 -- added stutter (Stutter)
character_event = {
	id = emf_notify.50

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2050 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2050 } }
		}
	}
}

# emf_notify.51 -- added fair (Attractive)
character_event = {
	id = emf_notify.51

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2051 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2051 } }
		}
	}
}

# emf_notify.52 -- added ugly (Ugly)
character_event = {
	id = emf_notify.52

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2052 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2052 } }
		}
	}
}

# emf_notify.53 -- added dwarf (Dwarf)
character_event = {
	id = emf_notify.53

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2053 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2053 } }
		}
	}
}

# emf_notify.54 -- added genius (Genius)
character_event = {
	id = emf_notify.54

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2054 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2054 } }
		}
	}
}

# emf_notify.55 -- added quick (Quick)
character_event = {
	id = emf_notify.55

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2055 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2055 } }
		}
	}
}

# emf_notify.56 -- added slow (Slow)
character_event = {
	id = emf_notify.56

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2056 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2056 } }
		}
	}
}

# emf_notify.57 -- added imbecile (Imbecile)
character_event = {
	id = emf_notify.57

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2057 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2057 } }
		}
	}
}

# emf_notify.58 -- added inbred (Inbred)
character_event = {
	id = emf_notify.58

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2058 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2058 } }
		}
	}
}

# emf_notify.59 -- added strong (Strong)
character_event = {
	id = emf_notify.59

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2059 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2059 } }
		}
	}
}

# emf_notify.60 -- added weak (Weak)
character_event = {
	id = emf_notify.60

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2060 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2060 } }
		}
	}
}

# emf_notify.61 -- added celibate (Celibate)
character_event = {
	id = emf_notify.61

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2061 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2061 } }
		}
	}
}

# emf_notify.62 -- added hedonist (Hedonist)
character_event = {
	id = emf_notify.62

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2062 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2062 } }
		}
	}
}

# emf_notify.63 -- added scholar (Scholar)
character_event = {
	id = emf_notify.63

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2063 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2063 } }
		}
	}
}

# emf_notify.64 -- added gardener (Gardener)
character_event = {
	id = emf_notify.64

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2064 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2064 } }
		}
	}
}

# emf_notify.65 -- added mystic (Mystic)
character_event = {
	id = emf_notify.65

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2065 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2065 } }
		}
	}
}

# emf_notify.66 -- added impaler (Impaler)
character_event = {
	id = emf_notify.66

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2066 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2066 } }
		}
	}
}

# emf_notify.67 -- added duelist (Duelist)
character_event = {
	id = emf_notify.67

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2067 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2067 } }
		}
	}
}

# emf_notify.68 -- added hunter (Hunter)
character_event = {
	id = emf_notify.68

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2068 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2068 } }
		}
	}
}

# emf_notify.69 -- added poet (Poet)
character_event = {
	id = emf_notify.69

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2069 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2069 } }
		}
	}
}

# emf_notify.70 -- added falconer (Falconer)
character_event = {
	id = emf_notify.70

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2070 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2070 } }
		}
	}
}

# emf_notify.71 -- added lustful (Lustful)
character_event = {
	id = emf_notify.71

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2071 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2071 } }
		}
	}
}

# emf_notify.72 -- added chaste (Chaste)
character_event = {
	id = emf_notify.72

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2072 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2072 } }
		}
	}
}

# emf_notify.73 -- added gluttonous (Gluttonous)
character_event = {
	id = emf_notify.73

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2073 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2073 } }
		}
	}
}

# emf_notify.74 -- added temperate (Temperate)
character_event = {
	id = emf_notify.74

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2074 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2074 } }
		}
	}
}

# emf_notify.75 -- added greedy (Greedy)
character_event = {
	id = emf_notify.75

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2075 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2075 } }
		}
	}
}

# emf_notify.76 -- added charitable (Charitable)
character_event = {
	id = emf_notify.76

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2076 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2076 } }
		}
	}
}

# emf_notify.77 -- added slothful (Slothful)
character_event = {
	id = emf_notify.77

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2077 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2077 } }
		}
	}
}

# emf_notify.78 -- added diligent (Diligent)
character_event = {
	id = emf_notify.78

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2078 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2078 } }
		}
	}
}

# emf_notify.79 -- added envious (Envious)
character_event = {
	id = emf_notify.79

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2079 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2079 } }
		}
	}
}

# emf_notify.80 -- added kind (Kind)
character_event = {
	id = emf_notify.80

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2080 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2080 } }
		}
	}
}

# emf_notify.81 -- added wroth (Wroth)
character_event = {
	id = emf_notify.81

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2081 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2081 } }
		}
	}
}

# emf_notify.82 -- added patient (Patient)
character_event = {
	id = emf_notify.82

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2082 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2082 } }
		}
	}
}

# emf_notify.83 -- added proud (Proud)
character_event = {
	id = emf_notify.83

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2083 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2083 } }
		}
	}
}

# emf_notify.84 -- added humble (Humble)
character_event = {
	id = emf_notify.84

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2084 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2084 } }
		}
	}
}

# emf_notify.85 -- added deceitful (Deceitful)
character_event = {
	id = emf_notify.85

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2085 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2085 } }
		}
	}
}

# emf_notify.86 -- added honest (Honest)
character_event = {
	id = emf_notify.86

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2086 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2086 } }
		}
	}
}

# emf_notify.87 -- added craven (Craven)
character_event = {
	id = emf_notify.87

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2087 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2087 } }
		}
	}
}

# emf_notify.88 -- added brave (Brave)
character_event = {
	id = emf_notify.88

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2088 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2088 } }
		}
	}
}

# emf_notify.89 -- added shy (Shy)
character_event = {
	id = emf_notify.89

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2089 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2089 } }
		}
	}
}

# emf_notify.90 -- added gregarious (Gregarious)
character_event = {
	id = emf_notify.90

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2090 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2090 } }
		}
	}
}

# emf_notify.91 -- added ambitious (Ambitious)
character_event = {
	id = emf_notify.91

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2091 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2091 } }
		}
	}
}

# emf_notify.92 -- added content (Content)
character_event = {
	id = emf_notify.92

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2092 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2092 } }
		}
	}
}

# emf_notify.93 -- added arbitrary (Arbitrary)
character_event = {
	id = emf_notify.93

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2093 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2093 } }
		}
	}
}

# emf_notify.94 -- added just (Just)
character_event = {
	id = emf_notify.94

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2094 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2094 } }
		}
	}
}

# emf_notify.95 -- added cynical (Cynical)
character_event = {
	id = emf_notify.95

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2095 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2095 } }
		}
	}
}

# emf_notify.96 -- added zealous (Zealous)
character_event = {
	id = emf_notify.96

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2096 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2096 } }
		}
	}
}

# emf_notify.97 -- added paranoid (Paranoid)
character_event = {
	id = emf_notify.97

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2097 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2097 } }
		}
	}
}

# emf_notify.98 -- added trusting (Trusting)
character_event = {
	id = emf_notify.98

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2098 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2098 } }
		}
	}
}

# emf_notify.99 -- added cruel (Cruel)
character_event = {
	id = emf_notify.99

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2099 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2099 } }
		}
	}
}

# emf_notify.100 -- added light_foot_leader (Light Foot Leader)
character_event = {
	id = emf_notify.100

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2100 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2100 } }
		}
	}
}

# emf_notify.101 -- added heavy_infantry_leader (Heavy Infantry Leader)
character_event = {
	id = emf_notify.101

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2101 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2101 } }
		}
	}
}

# emf_notify.102 -- added cavalry_leader (Cavalry Leader)
character_event = {
	id = emf_notify.102

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2102 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2102 } }
		}
	}
}

# emf_notify.103 -- added inspiring_leader (Inspiring Leader)
character_event = {
	id = emf_notify.103

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2103 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2103 } }
		}
	}
}

# emf_notify.104 -- added trickster (Trickster)
character_event = {
	id = emf_notify.104

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2104 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2104 } }
		}
	}
}

# emf_notify.105 -- added organizer (Organizer)
character_event = {
	id = emf_notify.105

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2105 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2105 } }
		}
	}
}

# emf_notify.106 -- added defensive_leader (Defender)
character_event = {
	id = emf_notify.106

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2106 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2106 } }
		}
	}
}

# emf_notify.107 -- added experimenter (Direct Leader)
character_event = {
	id = emf_notify.107

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2107 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2107 } }
		}
	}
}

# emf_notify.108 -- added flanker (Flanker)
character_event = {
	id = emf_notify.108

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2108 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2108 } }
		}
	}
}

# emf_notify.109 -- added aggressive_leader (Aggressive Leader)
character_event = {
	id = emf_notify.109

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2109 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2109 } }
		}
	}
}

# emf_notify.110 -- added siege_leader (Siege Leader)
character_event = {
	id = emf_notify.110

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2110 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2110 } }
		}
	}
}

# emf_notify.111 -- added mujahid (Mujahid)
character_event = {
	id = emf_notify.111

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2111 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2111 } }
		}
	}
}

# emf_notify.112 -- added hajjaj (Hajajj)
character_event = {
	id = emf_notify.112

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2112 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2112 } }
		}
	}
}

# emf_notify.113 -- added on_hajj (On Hajj)
character_event = {
	id = emf_notify.113

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2113 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2113 } }
		}
	}
}

# emf_notify.114 -- added faqih (Faqih)
character_event = {
	id = emf_notify.114

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2114 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2114 } }
		}
	}
}

# emf_notify.115 -- added hafiz (Hafiz)
character_event = {
	id = emf_notify.115

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2115 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2115 } }
		}
	}
}

# emf_notify.116 -- added sayyid (Sayyid)
character_event = {
	id = emf_notify.116

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2116 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2116 } }
		}
	}
}

# emf_notify.117 -- added pilgrim (Pilgrim)
character_event = {
	id = emf_notify.117

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2117 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2117 } }
		}
	}
}

# emf_notify.118 -- added mirza (Mirza)
character_event = {
	id = emf_notify.118

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2118 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2118 } }
		}
	}
}

# emf_notify.119 -- added scarred (Scarred)
character_event = {
	id = emf_notify.119

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2119 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2119 } }
		}
	}
}

# emf_notify.120 -- added eunuch (Eunuch)
character_event = {
	id = emf_notify.120

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2120 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2120 } }
		}
	}
}

# emf_notify.121 -- added blinded (Blinded)
character_event = {
	id = emf_notify.121

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2121 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2121 } }
		}
	}
}

# emf_notify.122 -- added born_in_the_purple (Born in the Purple)
character_event = {
	id = emf_notify.122

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2122 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2122 } }
		}
	}
}

# emf_notify.123 -- added augustus (Augustus)
character_event = {
	id = emf_notify.123

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2123 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2123 } }
		}
	}
}

# emf_notify.124 -- added flat_terrain_leader (Flat Terrain Expert)
character_event = {
	id = emf_notify.124

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2124 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2124 } }
		}
	}
}

# emf_notify.125 -- added rough_terrain_leader (Rough Terrain Expert)
character_event = {
	id = emf_notify.125

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2125 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2125 } }
		}
	}
}

# emf_notify.126 -- added mountain_terrain_leader (Mountain Expert)
character_event = {
	id = emf_notify.126

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2126 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2126 } }
		}
	}
}

# emf_notify.127 -- added desert_terrain_leader (Desert Expert)
character_event = {
	id = emf_notify.127

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2127 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2127 } }
		}
	}
}

# emf_notify.128 -- added holy_warrior (Holy Warrior)
character_event = {
	id = emf_notify.128

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2128 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2128 } }
		}
	}
}

# emf_notify.129 -- added unyielding_leader (Unyielding)
character_event = {
	id = emf_notify.129

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2129 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2129 } }
		}
	}
}

# emf_notify.130 -- added has_aztec_disease (Syphilitic)
character_event = {
	id = emf_notify.130

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2130 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2130 } }
		}
	}
}

# emf_notify.131 -- added child_of_consort (Child of Concubine)
character_event = {
	id = emf_notify.131

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2131 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2131 } }
		}
	}
}

# emf_notify.132 -- added peasant_leader (Peasant Leader)
character_event = {
	id = emf_notify.132

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2132 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2132 } }
		}
	}
}

# emf_notify.133 -- added heresiarch (Heresiarch)
character_event = {
	id = emf_notify.133

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2133 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2133 } }
		}
	}
}

# emf_notify.134 -- added berserker (Berserker)
character_event = {
	id = emf_notify.134

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2134 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2134 } }
		}
	}
}

# emf_notify.135 -- added varangian (Varangian)
character_event = {
	id = emf_notify.135

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2135 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2135 } }
		}
	}
}

# emf_notify.136 -- added saoshyant (Saoshyant)
character_event = {
	id = emf_notify.136

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2136 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2136 } }
		}
	}
}

# emf_notify.137 -- added saoshyant_descendant (Saoshyant Descendant)
character_event = {
	id = emf_notify.137

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2137 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2137 } }
		}
	}
}

# emf_notify.138 -- added viking (Viking)
character_event = {
	id = emf_notify.138

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2138 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2138 } }
		}
	}
}

# emf_notify.139 -- added monk (Monk)
character_event = {
	id = emf_notify.139

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2139 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2139 } }
		}
	}
}

# emf_notify.140 -- added nun (Nun)
character_event = {
	id = emf_notify.140

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2140 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2140 } }
		}
	}
}

# emf_notify.141 -- added on_pilgrimage (On pilgrimage)
character_event = {
	id = emf_notify.141

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2141 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2141 } }
		}
	}
}

# emf_notify.142 -- added sickly (Sickly)
character_event = {
	id = emf_notify.142

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2142 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2142 } }
		}
	}
}

# emf_notify.143 -- added mutazilite (Mu'tazilite)
character_event = {
	id = emf_notify.143

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2143 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2143 } }
		}
	}
}

# emf_notify.144 -- added ashari (Ash'ari)
character_event = {
	id = emf_notify.144

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2144 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2144 } }
		}
	}
}

# emf_notify.145 -- added sympathy_christendom (Sympathy for Christendom)
character_event = {
	id = emf_notify.145

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2145 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2145 } }
		}
	}
}

# emf_notify.146 -- added sympathy_islam (Sympathy for Islam)
character_event = {
	id = emf_notify.146

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2146 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2146 } }
		}
	}
}

# emf_notify.147 -- added sympathy_pagans (Sympathy for Pagans)
character_event = {
	id = emf_notify.147

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2147 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2147 } }
		}
	}
}

# emf_notify.148 -- added sympathy_zoroastrianism (Sympathy for Zoroastrianism)
character_event = {
	id = emf_notify.148

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2148 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2148 } }
		}
	}
}

# emf_notify.149 -- added sympathy_judaism (Sympathy for Judaism)
character_event = {
	id = emf_notify.149

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2149 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2149 } }
		}
	}
}

# emf_notify.150 -- added bad_priest_christian (Wicked Priest)
character_event = {
	id = emf_notify.150

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2150 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2150 } }
		}
	}
}

# emf_notify.151 -- added bad_priest_muslim (Wicked Caliph)
character_event = {
	id = emf_notify.151

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2151 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2151 } }
		}
	}
}

# emf_notify.152 -- added bad_priest_norse (Unworthy Priest)
character_event = {
	id = emf_notify.152

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2152 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2152 } }
		}
	}
}

# emf_notify.153 -- added bad_priest_tengri (Unworthy Priest)
character_event = {
	id = emf_notify.153

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2153 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2153 } }
		}
	}
}

# emf_notify.154 -- added bad_priest_zoroastrian (Immoral Priest)
character_event = {
	id = emf_notify.154

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2154 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2154 } }
		}
	}
}

# emf_notify.155 -- added bad_priest_aztec (Unworthy Priest)
character_event = {
	id = emf_notify.155

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2155 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2155 } }
		}
	}
}

# emf_notify.156 -- added narrow_flank_leader (Battlefield Terrain Master)
character_event = {
	id = emf_notify.156

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2156 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2156 } }
		}
	}
}

# emf_notify.157 -- added brahmin (Brahmin)
character_event = {
	id = emf_notify.157

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2157 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2157 } }
		}
	}
}

# emf_notify.158 -- added kshatriya (Kshatriya)
character_event = {
	id = emf_notify.158

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2158 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2158 } }
		}
	}
}

# emf_notify.159 -- added vaishya (Vaishya)
character_event = {
	id = emf_notify.159

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2159 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2159 } }
		}
	}
}

# emf_notify.160 -- added sympathy_indian (Sympathy for Indian religons)
character_event = {
	id = emf_notify.160

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2160 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2160 } }
		}
	}
}

# emf_notify.161 -- added shaivist_hindu (Shaivist)
character_event = {
	id = emf_notify.161

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2161 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2161 } }
		}
	}
}

# emf_notify.162 -- added vaishnavist_hindu (Vaishnavist)
character_event = {
	id = emf_notify.162

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2162 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2162 } }
		}
	}
}

# emf_notify.163 -- added shaktist_hindu (Shaktist)
character_event = {
	id = emf_notify.163

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2163 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2163 } }
		}
	}
}

# emf_notify.164 -- added smartist_hindu (Smartist)
character_event = {
	id = emf_notify.164

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2164 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2164 } }
		}
	}
}

# emf_notify.165 -- added mahayana_buddhist (Mahayana Buddhist)
character_event = {
	id = emf_notify.165

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2165 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2165 } }
		}
	}
}

# emf_notify.166 -- added vajrayana_buddhist (Vajrayana Buddhist)
character_event = {
	id = emf_notify.166

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2166 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2166 } }
		}
	}
}

# emf_notify.167 -- added theravada_buddhist (Theravada Buddhist)
character_event = {
	id = emf_notify.167

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2167 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2167 } }
		}
	}
}

# emf_notify.168 -- added digambara_jain (Digambara Jain)
character_event = {
	id = emf_notify.168

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2168 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2168 } }
		}
	}
}

# emf_notify.169 -- added svetambara_jain (Svetambara Jain)
character_event = {
	id = emf_notify.169

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2169 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2169 } }
		}
	}
}

# emf_notify.170 -- added decadent (Decadent)
character_event = {
	id = emf_notify.170

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2170 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2170 } }
		}
	}
}

# emf_notify.171 -- added reincarnation (Reincarnation of [Reincarnation.GetBestName])
character_event = {
	id = emf_notify.171

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2171 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2171 } }
		}
	}
}

# emf_notify.172 -- added war_elephant_leader (War Elephant Leader)
character_event = {
	id = emf_notify.172

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2172 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2172 } }
		}
	}
}

# emf_notify.173 -- added jungle_terrain_leader (Jungle Expert)
character_event = {
	id = emf_notify.173

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2173 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2173 } }
		}
	}
}

# emf_notify.174 -- added in_hiding (In Hiding)
character_event = {
	id = emf_notify.174

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2174 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2174 } }
		}
	}
}

# emf_notify.175 -- added winter_soldier (Winter Soldier)
character_event = {
	id = emf_notify.175

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2175 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2175 } }
		}
	}
}

# emf_notify.176 -- added seducer (Master Seducer)
character_event = {
	id = emf_notify.176

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2176 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2176 } }
		}
	}
}

# emf_notify.177 -- added seductress (Master Seductress)
character_event = {
	id = emf_notify.177

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2177 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2177 } }
		}
	}
}

# emf_notify.178 -- added administrator (Administrator)
character_event = {
	id = emf_notify.178

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2178 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2178 } }
		}
	}
}

# emf_notify.179 -- added architect (Architect)
character_event = {
	id = emf_notify.179

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2179 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2179 } }
		}
	}
}

# emf_notify.180 -- added strategist (Strategist)
character_event = {
	id = emf_notify.180

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2180 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2180 } }
		}
	}
}

# emf_notify.181 -- added socializer (Socializer)
character_event = {
	id = emf_notify.181

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2181 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2181 } }
		}
	}
}

# emf_notify.182 -- added schemer (Master Schemer)
character_event = {
	id = emf_notify.182

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2182 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2182 } }
		}
	}
}

# emf_notify.183 -- added theologian (Theologian)
character_event = {
	id = emf_notify.183

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2183 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2183 } }
		}
	}
}

# emf_notify.184 -- added gamer (Game Master)
character_event = {
	id = emf_notify.184

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2184 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2184 } }
		}
	}
}

# emf_notify.185 -- added adventurer (Adventurer)
character_event = {
	id = emf_notify.185

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2185 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2185 } }
		}
	}
}

# emf_notify.186 -- added erudite (Erudite)
character_event = {
	id = emf_notify.186

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2186 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2186 } }
		}
	}
}

# emf_notify.187 -- added stubborn (Stubborn)
character_event = {
	id = emf_notify.187

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2187 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2187 } }
		}
	}
}

# emf_notify.188 -- added haughty (Haughty)
character_event = {
	id = emf_notify.188

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2188 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2188 } }
		}
	}
}

# emf_notify.189 -- added affectionate (Affectionate)
character_event = {
	id = emf_notify.189

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2189 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2189 } }
		}
	}
}

# emf_notify.190 -- added timid (Timid)
character_event = {
	id = emf_notify.190

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2190 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2190 } }
		}
	}
}

# emf_notify.191 -- added rowdy (Rowdy)
character_event = {
	id = emf_notify.191

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2191 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2191 } }
		}
	}
}

# emf_notify.192 -- added willful (Willful)
character_event = {
	id = emf_notify.192

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2192 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2192 } }
		}
	}
}

# emf_notify.193 -- added brooding (Brooding)
character_event = {
	id = emf_notify.193

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2193 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2193 } }
		}
	}
}

# emf_notify.194 -- added indolent (Indolent)
character_event = {
	id = emf_notify.194

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2194 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2194 } }
		}
	}
}

# emf_notify.195 -- added playful (Playful)
character_event = {
	id = emf_notify.195

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2195 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2195 } }
		}
	}
}

# emf_notify.196 -- added conscientious (Conscientious)
character_event = {
	id = emf_notify.196

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2196 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2196 } }
		}
	}
}

# emf_notify.197 -- added fussy (Fussy)
character_event = {
	id = emf_notify.197

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2197 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2197 } }
		}
	}
}

# emf_notify.198 -- added curious (Curious)
character_event = {
	id = emf_notify.198

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2198 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2198 } }
		}
	}
}

# emf_notify.199 -- added idolizer (Idolizer)
character_event = {
	id = emf_notify.199

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2199 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2199 } }
		}
	}
}

# emf_notify.200 -- added horse (Horse)
character_event = {
	id = emf_notify.200

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2200 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2200 } }
		}
	}
}

# emf_notify.201 -- added robust (Brawny)
character_event = {
	id = emf_notify.201

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2201 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2201 } }
		}
	}
}

# emf_notify.202 -- added feeble (Frail)
character_event = {
	id = emf_notify.202

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2202 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2202 } }
		}
	}
}

# emf_notify.203 -- added shrewd (Shrewd)
character_event = {
	id = emf_notify.203

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2203 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2203 } }
		}
	}
}

# emf_notify.204 -- added dull (Dull)
character_event = {
	id = emf_notify.204

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2204 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2204 } }
		}
	}
}

# emf_notify.205 -- added novice_diplomat (Novice Diplomat)
character_event = {
	id = emf_notify.205

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2205 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2205 } }
		}
	}
}

# emf_notify.206 -- added trained_diplomat (Trained Diplomat)
character_event = {
	id = emf_notify.206

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2206 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2206 } }
		}
	}
}

# emf_notify.207 -- added skilled_diplomat (Skilled Diplomat)
character_event = {
	id = emf_notify.207

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2207 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2207 } }
		}
	}
}

# emf_notify.208 -- added master_diplomat (Master Diplomat)
character_event = {
	id = emf_notify.208

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2208 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2208 } }
		}
	}
}

# emf_notify.209 -- added poor_warrior (Novice Fighter)
character_event = {
	id = emf_notify.209

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2209 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2209 } }
		}
	}
}

# emf_notify.210 -- added trained_warrior (Trained Fighter)
character_event = {
	id = emf_notify.210

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2210 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2210 } }
		}
	}
}

# emf_notify.211 -- added skilled_warrior (Skilled Fighter)
character_event = {
	id = emf_notify.211

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2211 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2211 } }
		}
	}
}

# emf_notify.212 -- added master_warrior (Formidable Fighter)
character_event = {
	id = emf_notify.212

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2212 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2212 } }
		}
	}
}

# emf_notify.213 -- added tall (Tall)
character_event = {
	id = emf_notify.213

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2213 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2213 } }
		}
	}
}

# emf_notify.214 -- added agile (Agile)
character_event = {
	id = emf_notify.214

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2214 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2214 } }
		}
	}
}

# emf_notify.215 -- added perceptive (Perceptive)
character_event = {
	id = emf_notify.215

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2215 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2215 } }
		}
	}
}

# emf_notify.216 -- added melodious_voice (Melodious Voice)
character_event = {
	id = emf_notify.216

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2216 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2216 } }
		}
	}
}

# emf_notify.217 -- added powerful_voice (Powerful Voice)
character_event = {
	id = emf_notify.217

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2217 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2217 } }
		}
	}
}

# emf_notify.218 -- added calm_voice (Calm Voice)
character_event = {
	id = emf_notify.218

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2218 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2218 } }
		}
	}
}

# emf_notify.219 -- added ambidextrous (Ambidextrous)
character_event = {
	id = emf_notify.219

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2219 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2219 } }
		}
	}
}

# emf_notify.220 -- added lefthanded (Lefthanded)
character_event = {
	id = emf_notify.220

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2220 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2220 } }
		}
	}
}

# emf_notify.221 -- added wrymouth (Wrymouth)
character_event = {
	id = emf_notify.221

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2221 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2221 } }
		}
	}
}

# emf_notify.222 -- added deaf (Deaf)
character_event = {
	id = emf_notify.222

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2222 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2222 } }
		}
	}
}

# emf_notify.223 -- added absentminded (Absent-Minded)
character_event = {
	id = emf_notify.223

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2223 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2223 } }
		}
	}
}

# emf_notify.224 -- added fertile (Fertile)
character_event = {
	id = emf_notify.224

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2224 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2224 } }
		}
	}
}

# emf_notify.225 -- added imposing (Imposing)
character_event = {
	id = emf_notify.225

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2225 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2225 } }
		}
	}
}

# emf_notify.226 -- added isis (Mother of the Universe)
character_event = {
	id = emf_notify.226

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2226 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2226 } }
		}
	}
}

# emf_notify.227 -- added immortal (Immortal)
character_event = {
	id = emf_notify.227

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2227 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2227 } }
		}
	}
}

# emf_notify.228 -- added traveling (Traveling)
character_event = {
	id = emf_notify.228

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2228 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2228 } }
		}
	}
}

# emf_notify.229 -- added lucky_ruler (Lucky Ruler)
character_event = {
	id = emf_notify.229

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2229 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2229 } }
		}
	}
}

# emf_notify.230 -- added conqueror (Conqueror)
character_event = {
	id = emf_notify.230

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2230 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2230 } }
		}
	}
}

# emf_notify.231 -- added commander1 (Respected Commander)
character_event = {
	id = emf_notify.231

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2231 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2231 } }
		}
	}
}

# emf_notify.232 -- added commander2 (Distinguished Commander)
character_event = {
	id = emf_notify.232

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2232 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2232 } }
		}
	}
}

# emf_notify.233 -- added commander3 (Renowned Commander)
character_event = {
	id = emf_notify.233

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2233 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2233 } }
		}
	}
}

# emf_notify.234 -- added commander4 (Legendary Commander)
character_event = {
	id = emf_notify.234

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2234 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2234 } }
		}
	}
}

# emf_notify.235 -- added inheritance_disabled (Cannot Inherit)
character_event = {
	id = emf_notify.235

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2235 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2235 } }
		}
	}
}

# emf_notify.236 -- added raider (Raider)
character_event = {
	id = emf_notify.236

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2236 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2236 } }
		}
	}
}

# emf_notify.237 -- added roma_victrix (Roma Victrix)
character_event = {
	id = emf_notify.237

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2237 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2237 } }
		}
	}
}

# emf_notify.238 -- added pf_loyalist (Loyalist)
character_event = {
	id = emf_notify.238

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2238 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2238 } }
		}
	}
}

# emf_notify.239 -- added pf_neutral (Neutral)
character_event = {
	id = emf_notify.239

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2239 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2239 } }
		}
	}
}

# emf_notify.240 -- added pf_rebel (Rebel)
character_event = {
	id = emf_notify.240

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2240 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2240 } }
		}
	}
}

# emf_notify.241 -- added imperial_bureaucrat (Imperial Bureaucrat)
character_event = {
	id = emf_notify.241

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2241 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2241 } }
		}
	}
}

# emf_notify.242 -- added imperial_courtier (Imperial Courtier)
character_event = {
	id = emf_notify.242

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2242 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2242 } }
		}
	}
}

# emf_notify.243 -- added imperial_guard (Imperial Guard)
character_event = {
	id = emf_notify.243

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2243 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2243 } }
		}
	}
}

# emf_notify.244 -- added dynasty_decadence_low (Decadent Dynasty)
character_event = {
	id = emf_notify.244

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2244 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2244 } }
		}
	}
}

# emf_notify.245 -- added dynasty_decadence_med (Very Decadent Dynasty)
character_event = {
	id = emf_notify.245

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2245 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2245 } }
		}
	}
}

# emf_notify.246 -- added dynasty_decadence_high (Extremely Decadent Dynasty)
character_event = {
	id = emf_notify.246

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2246 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2246 } }
		}
	}
}

# emf_notify.247 -- added adopted (Adopted)
character_event = {
	id = emf_notify.247

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2247 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2247 } }
		}
	}
}

# emf_notify.248 -- added alexandrine (Alexandrine)
character_event = {
	id = emf_notify.248

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2248 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2248 } }
		}
	}
}

# emf_notify.249 -- added antiochene (Antiochian)
character_event = {
	id = emf_notify.249

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2249 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2249 } }
		}
	}
}

# emf_notify.250 -- added court_anarchy (Court Anarchy)
character_event = {
	id = emf_notify.250

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2250 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2250 } }
		}
	}
}

# emf_notify.251 -- added cult_of_lucifer (Cult of Lucifer)
character_event = {
	id = emf_notify.251

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2251 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2251 } }
		}
	}
}

# emf_notify.252 -- added desert_father (Desert Father)
character_event = {
	id = emf_notify.252

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2252 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2252 } }
		}
	}
}

# emf_notify.253 -- added desert_mother (Desert Mother)
character_event = {
	id = emf_notify.253

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2253 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2253 } }
		}
	}
}

# emf_notify.254 -- added doctores (Doctores)
character_event = {
	id = emf_notify.254

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2254 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2254 } }
		}
	}
}

# emf_notify.255 -- added druze_ajawid (Ajawid)
character_event = {
	id = emf_notify.255

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2255 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2255 } }
		}
	}
}

# emf_notify.256 -- added druze_juhhal (Juhhal)
character_event = {
	id = emf_notify.256

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2256 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2256 } }
		}
	}
}

# emf_notify.257 -- added druze_uqqal (Uqqal)
character_event = {
	id = emf_notify.257

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2257 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2257 } }
		}
	}
}

# emf_notify.258 -- added hurufi_diwan (Diwan Poet)
character_event = {
	id = emf_notify.258

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2258 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2258 } }
		}
	}
}

# emf_notify.259 -- added hurufi_mystic_a (Sufi Initiate)
character_event = {
	id = emf_notify.259

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2259 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2259 } }
		}
	}
}

# emf_notify.260 -- added hurufi_mystic_b (Sufi Adept)
character_event = {
	id = emf_notify.260

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2260 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2260 } }
		}
	}
}

# emf_notify.261 -- added hurufi_mystic_c (Sufi Master)
character_event = {
	id = emf_notify.261

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2261 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2261 } }
		}
	}
}

# emf_notify.262 -- added iconoclast_trait (Icon-Breaker)
character_event = {
	id = emf_notify.262

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2262 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2262 } }
		}
	}
}

# emf_notify.263 -- added imamah_claimant (Isma'ili Claimant)
character_event = {
	id = emf_notify.263

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2263 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2263 } }
		}
	}
}

# emf_notify.264 -- added kharijite_kafir (Kafir)
character_event = {
	id = emf_notify.264

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2264 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2264 } }
		}
	}
}

# emf_notify.265 -- added koasasa_taus (Koasasa)
character_event = {
	id = emf_notify.265

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2265 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2265 } }
		}
	}
}

# emf_notify.266 -- added koasasa_israfel (Koasasa)
character_event = {
	id = emf_notify.266

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2266 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2266 } }
		}
	}
}

# emf_notify.267 -- added koasasa_azrael (Koasasa)
character_event = {
	id = emf_notify.267

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2267 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2267 } }
		}
	}
}

# emf_notify.268 -- added koasasa_mihael (Koasasa)
character_event = {
	id = emf_notify.268

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2268 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2268 } }
		}
	}
}

# emf_notify.269 -- added koasasa_dardael (Koasasa)
character_event = {
	id = emf_notify.269

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2269 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2269 } }
		}
	}
}

# emf_notify.270 -- added koasasa_samael (Koasasa)
character_event = {
	id = emf_notify.270

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2270 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2270 } }
		}
	}
}

# emf_notify.271 -- added koasasa_nurael (Koasasa)
character_event = {
	id = emf_notify.271

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2271 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2271 } }
		}
	}
}

# emf_notify.272 -- added messalian_master (Perfection)
character_event = {
	id = emf_notify.272

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2272 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2272 } }
		}
	}
}

# emf_notify.273 -- added novellani (Novellani)
character_event = {
	id = emf_notify.273

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2273 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2273 } }
		}
	}
}

# emf_notify.274 -- added perfecti (Perfecti)
character_event = {
	id = emf_notify.274

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2274 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2274 } }
		}
	}
}

# emf_notify.275 -- added reincarnated (Has Been Reincarnated)
character_event = {
	id = emf_notify.275

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2275 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2275 } }
		}
	}
}

# emf_notify.276 -- added saint (Saint)
character_event = {
	id = emf_notify.276

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2276 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2276 } }
		}
	}
}

# emf_notify.277 -- added sandaliati (Sandaliati)
character_event = {
	id = emf_notify.277

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2277 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2277 } }
		}
	}
}

# emf_notify.278 -- added yazidi_pilgrim (Yazidi Pilgrim)
character_event = {
	id = emf_notify.278

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2278 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2278 } }
		}
	}
}

# emf_notify.279 -- added crowned (Crowned)
character_event = {
	id = emf_notify.279

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2279 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2279 } }
		}
	}
}

# emf_notify.280 -- added crowned_by_pope (Crowned By The Pope)
character_event = {
	id = emf_notify.280

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2280 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2280 } }
		}
	}
}

# emf_notify.281 -- added strong_basileus (Strong Basileus)
character_event = {
	id = emf_notify.281

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2281 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2281 } }
		}
	}
}

# emf_notify.282 -- added uncrowned (Uncrowned)
character_event = {
	id = emf_notify.282

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2282 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2282 } }
		}
	}
}

# emf_notify.283 -- added weak_basileus (Coronated Basileus)
character_event = {
	id = emf_notify.283

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2283 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2283 } }
		}
	}
}

# emf_notify.284 -- added martyr (Martyr)
character_event = {
	id = emf_notify.284

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2284 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2284 } }
		}
	}
}

# emf_notify.285 -- added paragon (Paragon)
character_event = {
	id = emf_notify.285

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait gain to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.2285 } }
		}
		# If FROM is a player, send notification about ROOT's trait gain to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.2285 } }
		}
	}
}


####################################################
#     Trait Loss Notification Forwarder Events     #
# emf_notify.1001 through emf_notify.2000 reserved #
####################################################

# emf_notify.1001 -- removed amateurish_plotter (Amateurish Plotter)
character_event = {
	id = emf_notify.1001

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3001 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3001 } }
		}
	}
}

# emf_notify.1002 -- removed flamboyant_schemer (Flamboyant Schemer)
character_event = {
	id = emf_notify.1002

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3002 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3002 } }
		}
	}
}

# emf_notify.1003 -- removed intricate_webweaver (Intricate Webweaver)
character_event = {
	id = emf_notify.1003

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3003 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3003 } }
		}
	}
}

# emf_notify.1004 -- removed elusive_shadow (Elusive Shadow)
character_event = {
	id = emf_notify.1004

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3004 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3004 } }
		}
	}
}

# emf_notify.1005 -- removed naive_appeaser (Naive Appeaser)
character_event = {
	id = emf_notify.1005

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3005 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3005 } }
		}
	}
}

# emf_notify.1006 -- removed underhanded_rogue (Underhanded Rogue)
character_event = {
	id = emf_notify.1006

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3006 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3006 } }
		}
	}
}

# emf_notify.1007 -- removed charismatic_negotiator (Charismatic Negotiator)
character_event = {
	id = emf_notify.1007

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3007 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3007 } }
		}
	}
}

# emf_notify.1008 -- removed grey_eminence (Grey Eminence)
character_event = {
	id = emf_notify.1008

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3008 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3008 } }
		}
	}
}

# emf_notify.1009 -- removed indulgent_wastrel (Indulgent Wastrel)
character_event = {
	id = emf_notify.1009

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3009 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3009 } }
		}
	}
}

# emf_notify.1010 -- removed thrifty_clerk (Thrifty Clerk)
character_event = {
	id = emf_notify.1010

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3010 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3010 } }
		}
	}
}

# emf_notify.1011 -- removed fortune_builder (Fortune Builder)
character_event = {
	id = emf_notify.1011

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3011 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3011 } }
		}
	}
}

# emf_notify.1012 -- removed midas_touched (Midas Touched)
character_event = {
	id = emf_notify.1012

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3012 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3012 } }
		}
	}
}

# emf_notify.1013 -- removed misguided_warrior (Misguided Warrior)
character_event = {
	id = emf_notify.1013

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3013 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3013 } }
		}
	}
}

# emf_notify.1014 -- removed tough_soldier (Tough Soldier)
character_event = {
	id = emf_notify.1014

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3014 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3014 } }
		}
	}
}

# emf_notify.1015 -- removed skilled_tactician (Skilled Tactician)
character_event = {
	id = emf_notify.1015

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3015 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3015 } }
		}
	}
}

# emf_notify.1016 -- removed brilliant_strategist (Brilliant Strategist)
character_event = {
	id = emf_notify.1016

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3016 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3016 } }
		}
	}
}

# emf_notify.1017 -- removed detached_priest (Detached Priest)
character_event = {
	id = emf_notify.1017

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3017 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3017 } }
		}
	}
}

# emf_notify.1018 -- removed martial_cleric (Dutiful Cleric)
character_event = {
	id = emf_notify.1018

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3018 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3018 } }
		}
	}
}

# emf_notify.1019 -- removed scholarly_theologian (Scholarly Theologian)
character_event = {
	id = emf_notify.1019

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3019 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3019 } }
		}
	}
}

# emf_notify.1020 -- removed mastermind_theologian (Mastermind Theologian)
character_event = {
	id = emf_notify.1020

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3020 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3020 } }
		}
	}
}

# emf_notify.1021 -- removed stressed (Stressed)
character_event = {
	id = emf_notify.1021

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3021 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3021 } }
		}
	}
}

# emf_notify.1022 -- removed depressed (Depressed)
character_event = {
	id = emf_notify.1022

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3022 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3022 } }
		}
	}
}

# emf_notify.1023 -- removed ill (Ill)
character_event = {
	id = emf_notify.1023

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3023 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3023 } }
		}
	}
}

# emf_notify.1024 -- removed pneumonic (Pneumonic)
character_event = {
	id = emf_notify.1024

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3024 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3024 } }
		}
	}
}

# emf_notify.1025 -- removed syphilitic (Gonorrhea)
character_event = {
	id = emf_notify.1025

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3025 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3025 } }
		}
	}
}

# emf_notify.1026 -- removed leper (Leper)
character_event = {
	id = emf_notify.1026

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3026 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3026 } }
		}
	}
}

# emf_notify.1027 -- removed wounded (Wounded)
character_event = {
	id = emf_notify.1027

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3027 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3027 } }
		}
	}
}

# emf_notify.1028 -- removed maimed (Maimed)
character_event = {
	id = emf_notify.1028

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3028 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3028 } }
		}
	}
}

# emf_notify.1029 -- removed infirm (Infirm)
character_event = {
	id = emf_notify.1029

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3029 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3029 } }
		}
	}
}

# emf_notify.1030 -- removed incapable (Incapable)
character_event = {
	id = emf_notify.1030

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3030 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3030 } }
		}
	}
}

# emf_notify.1031 -- removed drunkard (Drunkard)
character_event = {
	id = emf_notify.1031

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3031 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3031 } }
		}
	}
}

# emf_notify.1032 -- removed has_tuberculosis (Has Consumption)
character_event = {
	id = emf_notify.1032

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3032 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3032 } }
		}
	}
}

# emf_notify.1033 -- removed has_typhoid_fever (Has Slow Fever)
character_event = {
	id = emf_notify.1033

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3033 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3033 } }
		}
	}
}

# emf_notify.1034 -- removed has_typhus (Has Camp Fever)
character_event = {
	id = emf_notify.1034

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3034 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3034 } }
		}
	}
}

# emf_notify.1035 -- removed has_bubonic_plague (Has the Plague!)
character_event = {
	id = emf_notify.1035

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3035 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3035 } }
		}
	}
}

# emf_notify.1036 -- removed has_measles (Has Measles)
character_event = {
	id = emf_notify.1036

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3036 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3036 } }
		}
	}
}

# emf_notify.1037 -- removed has_small_pox (Has Smallpox)
character_event = {
	id = emf_notify.1037

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3037 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3037 } }
		}
	}
}

# emf_notify.1038 -- removed crusader (Crusader)
character_event = {
	id = emf_notify.1038

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3038 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3038 } }
		}
	}
}

# emf_notify.1039 -- removed bastard (Bastard)
character_event = {
	id = emf_notify.1039

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3039 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3039 } }
		}
	}
}

# emf_notify.1040 -- removed twin (Twin)
character_event = {
	id = emf_notify.1040

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3040 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3040 } }
		}
	}
}

# emf_notify.1041 -- removed legit_bastard (Legitimized Bastard)
character_event = {
	id = emf_notify.1041

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3041 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3041 } }
		}
	}
}

# emf_notify.1042 -- removed pregnant (Pregnant)
character_event = {
	id = emf_notify.1042

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3042 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3042 } }
		}
	}
}

# emf_notify.1043 -- removed excommunicated (Excommunicated)
character_event = {
	id = emf_notify.1043

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3043 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3043 } }
		}
	}
}

# emf_notify.1044 -- removed kinslayer (Kinslayer)
character_event = {
	id = emf_notify.1044

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3044 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3044 } }
		}
	}
}

# emf_notify.1045 -- removed homosexual (Homosexual)
character_event = {
	id = emf_notify.1045

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3045 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3045 } }
		}
	}
}

# emf_notify.1046 -- removed clubfooted (Clubfooted)
character_event = {
	id = emf_notify.1046

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3046 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3046 } }
		}
	}
}

# emf_notify.1047 -- removed harelip (Harelip)
character_event = {
	id = emf_notify.1047

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3047 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3047 } }
		}
	}
}

# emf_notify.1048 -- removed hunchback (Hunchback)
character_event = {
	id = emf_notify.1048

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3048 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3048 } }
		}
	}
}

# emf_notify.1049 -- removed lisp (Lisp)
character_event = {
	id = emf_notify.1049

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3049 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3049 } }
		}
	}
}

# emf_notify.1050 -- removed stutter (Stutter)
character_event = {
	id = emf_notify.1050

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3050 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3050 } }
		}
	}
}

# emf_notify.1051 -- removed fair (Attractive)
character_event = {
	id = emf_notify.1051

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3051 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3051 } }
		}
	}
}

# emf_notify.1052 -- removed ugly (Ugly)
character_event = {
	id = emf_notify.1052

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3052 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3052 } }
		}
	}
}

# emf_notify.1053 -- removed dwarf (Dwarf)
character_event = {
	id = emf_notify.1053

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3053 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3053 } }
		}
	}
}

# emf_notify.1054 -- removed genius (Genius)
character_event = {
	id = emf_notify.1054

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3054 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3054 } }
		}
	}
}

# emf_notify.1055 -- removed quick (Quick)
character_event = {
	id = emf_notify.1055

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3055 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3055 } }
		}
	}
}

# emf_notify.1056 -- removed slow (Slow)
character_event = {
	id = emf_notify.1056

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3056 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3056 } }
		}
	}
}

# emf_notify.1057 -- removed imbecile (Imbecile)
character_event = {
	id = emf_notify.1057

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3057 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3057 } }
		}
	}
}

# emf_notify.1058 -- removed inbred (Inbred)
character_event = {
	id = emf_notify.1058

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3058 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3058 } }
		}
	}
}

# emf_notify.1059 -- removed strong (Strong)
character_event = {
	id = emf_notify.1059

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3059 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3059 } }
		}
	}
}

# emf_notify.1060 -- removed weak (Weak)
character_event = {
	id = emf_notify.1060

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3060 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3060 } }
		}
	}
}

# emf_notify.1061 -- removed celibate (Celibate)
character_event = {
	id = emf_notify.1061

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3061 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3061 } }
		}
	}
}

# emf_notify.1062 -- removed hedonist (Hedonist)
character_event = {
	id = emf_notify.1062

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3062 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3062 } }
		}
	}
}

# emf_notify.1063 -- removed scholar (Scholar)
character_event = {
	id = emf_notify.1063

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3063 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3063 } }
		}
	}
}

# emf_notify.1064 -- removed gardener (Gardener)
character_event = {
	id = emf_notify.1064

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3064 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3064 } }
		}
	}
}

# emf_notify.1065 -- removed mystic (Mystic)
character_event = {
	id = emf_notify.1065

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3065 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3065 } }
		}
	}
}

# emf_notify.1066 -- removed impaler (Impaler)
character_event = {
	id = emf_notify.1066

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3066 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3066 } }
		}
	}
}

# emf_notify.1067 -- removed duelist (Duelist)
character_event = {
	id = emf_notify.1067

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3067 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3067 } }
		}
	}
}

# emf_notify.1068 -- removed hunter (Hunter)
character_event = {
	id = emf_notify.1068

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3068 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3068 } }
		}
	}
}

# emf_notify.1069 -- removed poet (Poet)
character_event = {
	id = emf_notify.1069

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3069 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3069 } }
		}
	}
}

# emf_notify.1070 -- removed falconer (Falconer)
character_event = {
	id = emf_notify.1070

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3070 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3070 } }
		}
	}
}

# emf_notify.1071 -- removed lustful (Lustful)
character_event = {
	id = emf_notify.1071

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3071 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3071 } }
		}
	}
}

# emf_notify.1072 -- removed chaste (Chaste)
character_event = {
	id = emf_notify.1072

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3072 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3072 } }
		}
	}
}

# emf_notify.1073 -- removed gluttonous (Gluttonous)
character_event = {
	id = emf_notify.1073

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3073 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3073 } }
		}
	}
}

# emf_notify.1074 -- removed temperate (Temperate)
character_event = {
	id = emf_notify.1074

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3074 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3074 } }
		}
	}
}

# emf_notify.1075 -- removed greedy (Greedy)
character_event = {
	id = emf_notify.1075

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3075 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3075 } }
		}
	}
}

# emf_notify.1076 -- removed charitable (Charitable)
character_event = {
	id = emf_notify.1076

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3076 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3076 } }
		}
	}
}

# emf_notify.1077 -- removed slothful (Slothful)
character_event = {
	id = emf_notify.1077

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3077 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3077 } }
		}
	}
}

# emf_notify.1078 -- removed diligent (Diligent)
character_event = {
	id = emf_notify.1078

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3078 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3078 } }
		}
	}
}

# emf_notify.1079 -- removed envious (Envious)
character_event = {
	id = emf_notify.1079

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3079 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3079 } }
		}
	}
}

# emf_notify.1080 -- removed kind (Kind)
character_event = {
	id = emf_notify.1080

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3080 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3080 } }
		}
	}
}

# emf_notify.1081 -- removed wroth (Wroth)
character_event = {
	id = emf_notify.1081

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3081 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3081 } }
		}
	}
}

# emf_notify.1082 -- removed patient (Patient)
character_event = {
	id = emf_notify.1082

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3082 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3082 } }
		}
	}
}

# emf_notify.1083 -- removed proud (Proud)
character_event = {
	id = emf_notify.1083

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3083 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3083 } }
		}
	}
}

# emf_notify.1084 -- removed humble (Humble)
character_event = {
	id = emf_notify.1084

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3084 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3084 } }
		}
	}
}

# emf_notify.1085 -- removed deceitful (Deceitful)
character_event = {
	id = emf_notify.1085

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3085 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3085 } }
		}
	}
}

# emf_notify.1086 -- removed honest (Honest)
character_event = {
	id = emf_notify.1086

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3086 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3086 } }
		}
	}
}

# emf_notify.1087 -- removed craven (Craven)
character_event = {
	id = emf_notify.1087

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3087 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3087 } }
		}
	}
}

# emf_notify.1088 -- removed brave (Brave)
character_event = {
	id = emf_notify.1088

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3088 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3088 } }
		}
	}
}

# emf_notify.1089 -- removed shy (Shy)
character_event = {
	id = emf_notify.1089

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3089 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3089 } }
		}
	}
}

# emf_notify.1090 -- removed gregarious (Gregarious)
character_event = {
	id = emf_notify.1090

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3090 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3090 } }
		}
	}
}

# emf_notify.1091 -- removed ambitious (Ambitious)
character_event = {
	id = emf_notify.1091

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3091 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3091 } }
		}
	}
}

# emf_notify.1092 -- removed content (Content)
character_event = {
	id = emf_notify.1092

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3092 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3092 } }
		}
	}
}

# emf_notify.1093 -- removed arbitrary (Arbitrary)
character_event = {
	id = emf_notify.1093

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3093 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3093 } }
		}
	}
}

# emf_notify.1094 -- removed just (Just)
character_event = {
	id = emf_notify.1094

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3094 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3094 } }
		}
	}
}

# emf_notify.1095 -- removed cynical (Cynical)
character_event = {
	id = emf_notify.1095

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3095 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3095 } }
		}
	}
}

# emf_notify.1096 -- removed zealous (Zealous)
character_event = {
	id = emf_notify.1096

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3096 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3096 } }
		}
	}
}

# emf_notify.1097 -- removed paranoid (Paranoid)
character_event = {
	id = emf_notify.1097

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3097 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3097 } }
		}
	}
}

# emf_notify.1098 -- removed trusting (Trusting)
character_event = {
	id = emf_notify.1098

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3098 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3098 } }
		}
	}
}

# emf_notify.1099 -- removed cruel (Cruel)
character_event = {
	id = emf_notify.1099

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3099 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3099 } }
		}
	}
}

# emf_notify.1100 -- removed light_foot_leader (Light Foot Leader)
character_event = {
	id = emf_notify.1100

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3100 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3100 } }
		}
	}
}

# emf_notify.1101 -- removed heavy_infantry_leader (Heavy Infantry Leader)
character_event = {
	id = emf_notify.1101

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3101 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3101 } }
		}
	}
}

# emf_notify.1102 -- removed cavalry_leader (Cavalry Leader)
character_event = {
	id = emf_notify.1102

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3102 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3102 } }
		}
	}
}

# emf_notify.1103 -- removed inspiring_leader (Inspiring Leader)
character_event = {
	id = emf_notify.1103

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3103 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3103 } }
		}
	}
}

# emf_notify.1104 -- removed trickster (Trickster)
character_event = {
	id = emf_notify.1104

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3104 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3104 } }
		}
	}
}

# emf_notify.1105 -- removed organizer (Organizer)
character_event = {
	id = emf_notify.1105

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3105 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3105 } }
		}
	}
}

# emf_notify.1106 -- removed defensive_leader (Defender)
character_event = {
	id = emf_notify.1106

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3106 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3106 } }
		}
	}
}

# emf_notify.1107 -- removed experimenter (Direct Leader)
character_event = {
	id = emf_notify.1107

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3107 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3107 } }
		}
	}
}

# emf_notify.1108 -- removed flanker (Flanker)
character_event = {
	id = emf_notify.1108

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3108 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3108 } }
		}
	}
}

# emf_notify.1109 -- removed aggressive_leader (Aggressive Leader)
character_event = {
	id = emf_notify.1109

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3109 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3109 } }
		}
	}
}

# emf_notify.1110 -- removed siege_leader (Siege Leader)
character_event = {
	id = emf_notify.1110

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3110 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3110 } }
		}
	}
}

# emf_notify.1111 -- removed mujahid (Mujahid)
character_event = {
	id = emf_notify.1111

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3111 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3111 } }
		}
	}
}

# emf_notify.1112 -- removed hajjaj (Hajajj)
character_event = {
	id = emf_notify.1112

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3112 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3112 } }
		}
	}
}

# emf_notify.1113 -- removed on_hajj (On Hajj)
character_event = {
	id = emf_notify.1113

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3113 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3113 } }
		}
	}
}

# emf_notify.1114 -- removed faqih (Faqih)
character_event = {
	id = emf_notify.1114

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3114 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3114 } }
		}
	}
}

# emf_notify.1115 -- removed hafiz (Hafiz)
character_event = {
	id = emf_notify.1115

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3115 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3115 } }
		}
	}
}

# emf_notify.1116 -- removed sayyid (Sayyid)
character_event = {
	id = emf_notify.1116

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3116 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3116 } }
		}
	}
}

# emf_notify.1117 -- removed pilgrim (Pilgrim)
character_event = {
	id = emf_notify.1117

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3117 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3117 } }
		}
	}
}

# emf_notify.1118 -- removed mirza (Mirza)
character_event = {
	id = emf_notify.1118

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3118 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3118 } }
		}
	}
}

# emf_notify.1119 -- removed scarred (Scarred)
character_event = {
	id = emf_notify.1119

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3119 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3119 } }
		}
	}
}

# emf_notify.1120 -- removed eunuch (Eunuch)
character_event = {
	id = emf_notify.1120

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3120 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3120 } }
		}
	}
}

# emf_notify.1121 -- removed blinded (Blinded)
character_event = {
	id = emf_notify.1121

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3121 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3121 } }
		}
	}
}

# emf_notify.1122 -- removed born_in_the_purple (Born in the Purple)
character_event = {
	id = emf_notify.1122

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3122 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3122 } }
		}
	}
}

# emf_notify.1123 -- removed augustus (Augustus)
character_event = {
	id = emf_notify.1123

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3123 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3123 } }
		}
	}
}

# emf_notify.1124 -- removed flat_terrain_leader (Flat Terrain Expert)
character_event = {
	id = emf_notify.1124

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3124 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3124 } }
		}
	}
}

# emf_notify.1125 -- removed rough_terrain_leader (Rough Terrain Expert)
character_event = {
	id = emf_notify.1125

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3125 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3125 } }
		}
	}
}

# emf_notify.1126 -- removed mountain_terrain_leader (Mountain Expert)
character_event = {
	id = emf_notify.1126

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3126 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3126 } }
		}
	}
}

# emf_notify.1127 -- removed desert_terrain_leader (Desert Expert)
character_event = {
	id = emf_notify.1127

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3127 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3127 } }
		}
	}
}

# emf_notify.1128 -- removed holy_warrior (Holy Warrior)
character_event = {
	id = emf_notify.1128

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3128 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3128 } }
		}
	}
}

# emf_notify.1129 -- removed unyielding_leader (Unyielding)
character_event = {
	id = emf_notify.1129

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3129 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3129 } }
		}
	}
}

# emf_notify.1130 -- removed has_aztec_disease (Syphilitic)
character_event = {
	id = emf_notify.1130

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3130 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3130 } }
		}
	}
}

# emf_notify.1131 -- removed child_of_consort (Child of Concubine)
character_event = {
	id = emf_notify.1131

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3131 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3131 } }
		}
	}
}

# emf_notify.1132 -- removed peasant_leader (Peasant Leader)
character_event = {
	id = emf_notify.1132

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3132 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3132 } }
		}
	}
}

# emf_notify.1133 -- removed heresiarch (Heresiarch)
character_event = {
	id = emf_notify.1133

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3133 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3133 } }
		}
	}
}

# emf_notify.1134 -- removed berserker (Berserker)
character_event = {
	id = emf_notify.1134

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3134 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3134 } }
		}
	}
}

# emf_notify.1135 -- removed varangian (Varangian)
character_event = {
	id = emf_notify.1135

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3135 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3135 } }
		}
	}
}

# emf_notify.1136 -- removed saoshyant (Saoshyant)
character_event = {
	id = emf_notify.1136

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3136 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3136 } }
		}
	}
}

# emf_notify.1137 -- removed saoshyant_descendant (Saoshyant Descendant)
character_event = {
	id = emf_notify.1137

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3137 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3137 } }
		}
	}
}

# emf_notify.1138 -- removed viking (Viking)
character_event = {
	id = emf_notify.1138

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3138 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3138 } }
		}
	}
}

# emf_notify.1139 -- removed monk (Monk)
character_event = {
	id = emf_notify.1139

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3139 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3139 } }
		}
	}
}

# emf_notify.1140 -- removed nun (Nun)
character_event = {
	id = emf_notify.1140

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3140 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3140 } }
		}
	}
}

# emf_notify.1141 -- removed on_pilgrimage (On pilgrimage)
character_event = {
	id = emf_notify.1141

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3141 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3141 } }
		}
	}
}

# emf_notify.1142 -- removed sickly (Sickly)
character_event = {
	id = emf_notify.1142

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3142 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3142 } }
		}
	}
}

# emf_notify.1143 -- removed mutazilite (Mu'tazilite)
character_event = {
	id = emf_notify.1143

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3143 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3143 } }
		}
	}
}

# emf_notify.1144 -- removed ashari (Ash'ari)
character_event = {
	id = emf_notify.1144

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3144 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3144 } }
		}
	}
}

# emf_notify.1145 -- removed sympathy_christendom (Sympathy for Christendom)
character_event = {
	id = emf_notify.1145

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3145 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3145 } }
		}
	}
}

# emf_notify.1146 -- removed sympathy_islam (Sympathy for Islam)
character_event = {
	id = emf_notify.1146

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3146 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3146 } }
		}
	}
}

# emf_notify.1147 -- removed sympathy_pagans (Sympathy for Pagans)
character_event = {
	id = emf_notify.1147

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3147 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3147 } }
		}
	}
}

# emf_notify.1148 -- removed sympathy_zoroastrianism (Sympathy for Zoroastrianism)
character_event = {
	id = emf_notify.1148

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3148 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3148 } }
		}
	}
}

# emf_notify.1149 -- removed sympathy_judaism (Sympathy for Judaism)
character_event = {
	id = emf_notify.1149

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3149 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3149 } }
		}
	}
}

# emf_notify.1150 -- removed bad_priest_christian (Wicked Priest)
character_event = {
	id = emf_notify.1150

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3150 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3150 } }
		}
	}
}

# emf_notify.1151 -- removed bad_priest_muslim (Wicked Caliph)
character_event = {
	id = emf_notify.1151

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3151 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3151 } }
		}
	}
}

# emf_notify.1152 -- removed bad_priest_norse (Unworthy Priest)
character_event = {
	id = emf_notify.1152

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3152 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3152 } }
		}
	}
}

# emf_notify.1153 -- removed bad_priest_tengri (Unworthy Priest)
character_event = {
	id = emf_notify.1153

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3153 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3153 } }
		}
	}
}

# emf_notify.1154 -- removed bad_priest_zoroastrian (Immoral Priest)
character_event = {
	id = emf_notify.1154

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3154 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3154 } }
		}
	}
}

# emf_notify.1155 -- removed bad_priest_aztec (Unworthy Priest)
character_event = {
	id = emf_notify.1155

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3155 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3155 } }
		}
	}
}

# emf_notify.1156 -- removed narrow_flank_leader (Battlefield Terrain Master)
character_event = {
	id = emf_notify.1156

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3156 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3156 } }
		}
	}
}

# emf_notify.1157 -- removed brahmin (Brahmin)
character_event = {
	id = emf_notify.1157

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3157 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3157 } }
		}
	}
}

# emf_notify.1158 -- removed kshatriya (Kshatriya)
character_event = {
	id = emf_notify.1158

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3158 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3158 } }
		}
	}
}

# emf_notify.1159 -- removed vaishya (Vaishya)
character_event = {
	id = emf_notify.1159

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3159 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3159 } }
		}
	}
}

# emf_notify.1160 -- removed sympathy_indian (Sympathy for Indian religons)
character_event = {
	id = emf_notify.1160

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3160 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3160 } }
		}
	}
}

# emf_notify.1161 -- removed shaivist_hindu (Shaivist)
character_event = {
	id = emf_notify.1161

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3161 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3161 } }
		}
	}
}

# emf_notify.1162 -- removed vaishnavist_hindu (Vaishnavist)
character_event = {
	id = emf_notify.1162

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3162 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3162 } }
		}
	}
}

# emf_notify.1163 -- removed shaktist_hindu (Shaktist)
character_event = {
	id = emf_notify.1163

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3163 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3163 } }
		}
	}
}

# emf_notify.1164 -- removed smartist_hindu (Smartist)
character_event = {
	id = emf_notify.1164

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3164 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3164 } }
		}
	}
}

# emf_notify.1165 -- removed mahayana_buddhist (Mahayana Buddhist)
character_event = {
	id = emf_notify.1165

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3165 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3165 } }
		}
	}
}

# emf_notify.1166 -- removed vajrayana_buddhist (Vajrayana Buddhist)
character_event = {
	id = emf_notify.1166

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3166 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3166 } }
		}
	}
}

# emf_notify.1167 -- removed theravada_buddhist (Theravada Buddhist)
character_event = {
	id = emf_notify.1167

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3167 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3167 } }
		}
	}
}

# emf_notify.1168 -- removed digambara_jain (Digambara Jain)
character_event = {
	id = emf_notify.1168

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3168 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3168 } }
		}
	}
}

# emf_notify.1169 -- removed svetambara_jain (Svetambara Jain)
character_event = {
	id = emf_notify.1169

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3169 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3169 } }
		}
	}
}

# emf_notify.1170 -- removed decadent (Decadent)
character_event = {
	id = emf_notify.1170

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3170 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3170 } }
		}
	}
}

# emf_notify.1171 -- removed reincarnation (Reincarnation of [Reincarnation.GetBestName])
character_event = {
	id = emf_notify.1171

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3171 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3171 } }
		}
	}
}

# emf_notify.1172 -- removed war_elephant_leader (War Elephant Leader)
character_event = {
	id = emf_notify.1172

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3172 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3172 } }
		}
	}
}

# emf_notify.1173 -- removed jungle_terrain_leader (Jungle Expert)
character_event = {
	id = emf_notify.1173

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3173 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3173 } }
		}
	}
}

# emf_notify.1174 -- removed in_hiding (In Hiding)
character_event = {
	id = emf_notify.1174

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3174 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3174 } }
		}
	}
}

# emf_notify.1175 -- removed winter_soldier (Winter Soldier)
character_event = {
	id = emf_notify.1175

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3175 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3175 } }
		}
	}
}

# emf_notify.1176 -- removed seducer (Master Seducer)
character_event = {
	id = emf_notify.1176

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3176 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3176 } }
		}
	}
}

# emf_notify.1177 -- removed seductress (Master Seductress)
character_event = {
	id = emf_notify.1177

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3177 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3177 } }
		}
	}
}

# emf_notify.1178 -- removed administrator (Administrator)
character_event = {
	id = emf_notify.1178

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3178 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3178 } }
		}
	}
}

# emf_notify.1179 -- removed architect (Architect)
character_event = {
	id = emf_notify.1179

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3179 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3179 } }
		}
	}
}

# emf_notify.1180 -- removed strategist (Strategist)
character_event = {
	id = emf_notify.1180

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3180 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3180 } }
		}
	}
}

# emf_notify.1181 -- removed socializer (Socializer)
character_event = {
	id = emf_notify.1181

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3181 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3181 } }
		}
	}
}

# emf_notify.1182 -- removed schemer (Master Schemer)
character_event = {
	id = emf_notify.1182

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3182 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3182 } }
		}
	}
}

# emf_notify.1183 -- removed theologian (Theologian)
character_event = {
	id = emf_notify.1183

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3183 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3183 } }
		}
	}
}

# emf_notify.1184 -- removed gamer (Game Master)
character_event = {
	id = emf_notify.1184

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3184 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3184 } }
		}
	}
}

# emf_notify.1185 -- removed adventurer (Adventurer)
character_event = {
	id = emf_notify.1185

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3185 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3185 } }
		}
	}
}

# emf_notify.1186 -- removed erudite (Erudite)
character_event = {
	id = emf_notify.1186

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3186 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3186 } }
		}
	}
}

# emf_notify.1187 -- removed stubborn (Stubborn)
character_event = {
	id = emf_notify.1187

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3187 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3187 } }
		}
	}
}

# emf_notify.1188 -- removed haughty (Haughty)
character_event = {
	id = emf_notify.1188

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3188 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3188 } }
		}
	}
}

# emf_notify.1189 -- removed affectionate (Affectionate)
character_event = {
	id = emf_notify.1189

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3189 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3189 } }
		}
	}
}

# emf_notify.1190 -- removed timid (Timid)
character_event = {
	id = emf_notify.1190

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3190 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3190 } }
		}
	}
}

# emf_notify.1191 -- removed rowdy (Rowdy)
character_event = {
	id = emf_notify.1191

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3191 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3191 } }
		}
	}
}

# emf_notify.1192 -- removed willful (Willful)
character_event = {
	id = emf_notify.1192

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3192 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3192 } }
		}
	}
}

# emf_notify.1193 -- removed brooding (Brooding)
character_event = {
	id = emf_notify.1193

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3193 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3193 } }
		}
	}
}

# emf_notify.1194 -- removed indolent (Indolent)
character_event = {
	id = emf_notify.1194

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3194 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3194 } }
		}
	}
}

# emf_notify.1195 -- removed playful (Playful)
character_event = {
	id = emf_notify.1195

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3195 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3195 } }
		}
	}
}

# emf_notify.1196 -- removed conscientious (Conscientious)
character_event = {
	id = emf_notify.1196

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3196 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3196 } }
		}
	}
}

# emf_notify.1197 -- removed fussy (Fussy)
character_event = {
	id = emf_notify.1197

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3197 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3197 } }
		}
	}
}

# emf_notify.1198 -- removed curious (Curious)
character_event = {
	id = emf_notify.1198

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3198 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3198 } }
		}
	}
}

# emf_notify.1199 -- removed idolizer (Idolizer)
character_event = {
	id = emf_notify.1199

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3199 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3199 } }
		}
	}
}

# emf_notify.1200 -- removed horse (Horse)
character_event = {
	id = emf_notify.1200

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3200 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3200 } }
		}
	}
}

# emf_notify.1201 -- removed robust (Brawny)
character_event = {
	id = emf_notify.1201

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3201 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3201 } }
		}
	}
}

# emf_notify.1202 -- removed feeble (Frail)
character_event = {
	id = emf_notify.1202

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3202 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3202 } }
		}
	}
}

# emf_notify.1203 -- removed shrewd (Shrewd)
character_event = {
	id = emf_notify.1203

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3203 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3203 } }
		}
	}
}

# emf_notify.1204 -- removed dull (Dull)
character_event = {
	id = emf_notify.1204

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3204 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3204 } }
		}
	}
}

# emf_notify.1205 -- removed novice_diplomat (Novice Diplomat)
character_event = {
	id = emf_notify.1205

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3205 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3205 } }
		}
	}
}

# emf_notify.1206 -- removed trained_diplomat (Trained Diplomat)
character_event = {
	id = emf_notify.1206

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3206 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3206 } }
		}
	}
}

# emf_notify.1207 -- removed skilled_diplomat (Skilled Diplomat)
character_event = {
	id = emf_notify.1207

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3207 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3207 } }
		}
	}
}

# emf_notify.1208 -- removed master_diplomat (Master Diplomat)
character_event = {
	id = emf_notify.1208

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3208 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3208 } }
		}
	}
}

# emf_notify.1209 -- removed poor_warrior (Novice Fighter)
character_event = {
	id = emf_notify.1209

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3209 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3209 } }
		}
	}
}

# emf_notify.1210 -- removed trained_warrior (Trained Fighter)
character_event = {
	id = emf_notify.1210

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3210 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3210 } }
		}
	}
}

# emf_notify.1211 -- removed skilled_warrior (Skilled Fighter)
character_event = {
	id = emf_notify.1211

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3211 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3211 } }
		}
	}
}

# emf_notify.1212 -- removed master_warrior (Formidable Fighter)
character_event = {
	id = emf_notify.1212

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3212 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3212 } }
		}
	}
}

# emf_notify.1213 -- removed tall (Tall)
character_event = {
	id = emf_notify.1213

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3213 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3213 } }
		}
	}
}

# emf_notify.1214 -- removed agile (Agile)
character_event = {
	id = emf_notify.1214

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3214 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3214 } }
		}
	}
}

# emf_notify.1215 -- removed perceptive (Perceptive)
character_event = {
	id = emf_notify.1215

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3215 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3215 } }
		}
	}
}

# emf_notify.1216 -- removed melodious_voice (Melodious Voice)
character_event = {
	id = emf_notify.1216

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3216 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3216 } }
		}
	}
}

# emf_notify.1217 -- removed powerful_voice (Powerful Voice)
character_event = {
	id = emf_notify.1217

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3217 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3217 } }
		}
	}
}

# emf_notify.1218 -- removed calm_voice (Calm Voice)
character_event = {
	id = emf_notify.1218

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3218 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3218 } }
		}
	}
}

# emf_notify.1219 -- removed ambidextrous (Ambidextrous)
character_event = {
	id = emf_notify.1219

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3219 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3219 } }
		}
	}
}

# emf_notify.1220 -- removed lefthanded (Lefthanded)
character_event = {
	id = emf_notify.1220

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3220 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3220 } }
		}
	}
}

# emf_notify.1221 -- removed wrymouth (Wrymouth)
character_event = {
	id = emf_notify.1221

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3221 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3221 } }
		}
	}
}

# emf_notify.1222 -- removed deaf (Deaf)
character_event = {
	id = emf_notify.1222

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3222 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3222 } }
		}
	}
}

# emf_notify.1223 -- removed absentminded (Absent-Minded)
character_event = {
	id = emf_notify.1223

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3223 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3223 } }
		}
	}
}

# emf_notify.1224 -- removed fertile (Fertile)
character_event = {
	id = emf_notify.1224

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3224 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3224 } }
		}
	}
}

# emf_notify.1225 -- removed imposing (Imposing)
character_event = {
	id = emf_notify.1225

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3225 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3225 } }
		}
	}
}

# emf_notify.1226 -- removed isis (Mother of the Universe)
character_event = {
	id = emf_notify.1226

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3226 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3226 } }
		}
	}
}

# emf_notify.1227 -- removed immortal (Immortal)
character_event = {
	id = emf_notify.1227

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3227 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3227 } }
		}
	}
}

# emf_notify.1228 -- removed traveling (Traveling)
character_event = {
	id = emf_notify.1228

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3228 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3228 } }
		}
	}
}

# emf_notify.1229 -- removed lucky_ruler (Lucky Ruler)
character_event = {
	id = emf_notify.1229

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3229 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3229 } }
		}
	}
}

# emf_notify.1230 -- removed conqueror (Conqueror)
character_event = {
	id = emf_notify.1230

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3230 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3230 } }
		}
	}
}

# emf_notify.1231 -- removed commander1 (Respected Commander)
character_event = {
	id = emf_notify.1231

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3231 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3231 } }
		}
	}
}

# emf_notify.1232 -- removed commander2 (Distinguished Commander)
character_event = {
	id = emf_notify.1232

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3232 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3232 } }
		}
	}
}

# emf_notify.1233 -- removed commander3 (Renowned Commander)
character_event = {
	id = emf_notify.1233

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3233 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3233 } }
		}
	}
}

# emf_notify.1234 -- removed commander4 (Legendary Commander)
character_event = {
	id = emf_notify.1234

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3234 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3234 } }
		}
	}
}

# emf_notify.1235 -- removed inheritance_disabled (Cannot Inherit)
character_event = {
	id = emf_notify.1235

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3235 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3235 } }
		}
	}
}

# emf_notify.1236 -- removed raider (Raider)
character_event = {
	id = emf_notify.1236

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3236 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3236 } }
		}
	}
}

# emf_notify.1237 -- removed roma_victrix (Roma Victrix)
character_event = {
	id = emf_notify.1237

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3237 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3237 } }
		}
	}
}

# emf_notify.1238 -- removed pf_loyalist (Loyalist)
character_event = {
	id = emf_notify.1238

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3238 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3238 } }
		}
	}
}

# emf_notify.1239 -- removed pf_neutral (Neutral)
character_event = {
	id = emf_notify.1239

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3239 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3239 } }
		}
	}
}

# emf_notify.1240 -- removed pf_rebel (Rebel)
character_event = {
	id = emf_notify.1240

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3240 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3240 } }
		}
	}
}

# emf_notify.1241 -- removed imperial_bureaucrat (Imperial Bureaucrat)
character_event = {
	id = emf_notify.1241

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3241 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3241 } }
		}
	}
}

# emf_notify.1242 -- removed imperial_courtier (Imperial Courtier)
character_event = {
	id = emf_notify.1242

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3242 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3242 } }
		}
	}
}

# emf_notify.1243 -- removed imperial_guard (Imperial Guard)
character_event = {
	id = emf_notify.1243

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3243 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3243 } }
		}
	}
}

# emf_notify.1244 -- removed dynasty_decadence_low (Decadent Dynasty)
character_event = {
	id = emf_notify.1244

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3244 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3244 } }
		}
	}
}

# emf_notify.1245 -- removed dynasty_decadence_med (Very Decadent Dynasty)
character_event = {
	id = emf_notify.1245

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3245 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3245 } }
		}
	}
}

# emf_notify.1246 -- removed dynasty_decadence_high (Extremely Decadent Dynasty)
character_event = {
	id = emf_notify.1246

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3246 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3246 } }
		}
	}
}

# emf_notify.1247 -- removed adopted (Adopted)
character_event = {
	id = emf_notify.1247

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3247 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3247 } }
		}
	}
}

# emf_notify.1248 -- removed alexandrine (Alexandrine)
character_event = {
	id = emf_notify.1248

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3248 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3248 } }
		}
	}
}

# emf_notify.1249 -- removed antiochene (Antiochian)
character_event = {
	id = emf_notify.1249

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3249 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3249 } }
		}
	}
}

# emf_notify.1250 -- removed court_anarchy (Court Anarchy)
character_event = {
	id = emf_notify.1250

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3250 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3250 } }
		}
	}
}

# emf_notify.1251 -- removed cult_of_lucifer (Cult of Lucifer)
character_event = {
	id = emf_notify.1251

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3251 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3251 } }
		}
	}
}

# emf_notify.1252 -- removed desert_father (Desert Father)
character_event = {
	id = emf_notify.1252

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3252 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3252 } }
		}
	}
}

# emf_notify.1253 -- removed desert_mother (Desert Mother)
character_event = {
	id = emf_notify.1253

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3253 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3253 } }
		}
	}
}

# emf_notify.1254 -- removed doctores (Doctores)
character_event = {
	id = emf_notify.1254

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3254 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3254 } }
		}
	}
}

# emf_notify.1255 -- removed druze_ajawid (Ajawid)
character_event = {
	id = emf_notify.1255

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3255 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3255 } }
		}
	}
}

# emf_notify.1256 -- removed druze_juhhal (Juhhal)
character_event = {
	id = emf_notify.1256

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3256 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3256 } }
		}
	}
}

# emf_notify.1257 -- removed druze_uqqal (Uqqal)
character_event = {
	id = emf_notify.1257

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3257 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3257 } }
		}
	}
}

# emf_notify.1258 -- removed hurufi_diwan (Diwan Poet)
character_event = {
	id = emf_notify.1258

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3258 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3258 } }
		}
	}
}

# emf_notify.1259 -- removed hurufi_mystic_a (Sufi Initiate)
character_event = {
	id = emf_notify.1259

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3259 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3259 } }
		}
	}
}

# emf_notify.1260 -- removed hurufi_mystic_b (Sufi Adept)
character_event = {
	id = emf_notify.1260

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3260 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3260 } }
		}
	}
}

# emf_notify.1261 -- removed hurufi_mystic_c (Sufi Master)
character_event = {
	id = emf_notify.1261

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3261 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3261 } }
		}
	}
}

# emf_notify.1262 -- removed iconoclast_trait (Icon-Breaker)
character_event = {
	id = emf_notify.1262

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3262 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3262 } }
		}
	}
}

# emf_notify.1263 -- removed imamah_claimant (Isma'ili Claimant)
character_event = {
	id = emf_notify.1263

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3263 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3263 } }
		}
	}
}

# emf_notify.1264 -- removed kharijite_kafir (Kafir)
character_event = {
	id = emf_notify.1264

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3264 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3264 } }
		}
	}
}

# emf_notify.1265 -- removed koasasa_taus (Koasasa)
character_event = {
	id = emf_notify.1265

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3265 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3265 } }
		}
	}
}

# emf_notify.1266 -- removed koasasa_israfel (Koasasa)
character_event = {
	id = emf_notify.1266

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3266 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3266 } }
		}
	}
}

# emf_notify.1267 -- removed koasasa_azrael (Koasasa)
character_event = {
	id = emf_notify.1267

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3267 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3267 } }
		}
	}
}

# emf_notify.1268 -- removed koasasa_mihael (Koasasa)
character_event = {
	id = emf_notify.1268

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3268 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3268 } }
		}
	}
}

# emf_notify.1269 -- removed koasasa_dardael (Koasasa)
character_event = {
	id = emf_notify.1269

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3269 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3269 } }
		}
	}
}

# emf_notify.1270 -- removed koasasa_samael (Koasasa)
character_event = {
	id = emf_notify.1270

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3270 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3270 } }
		}
	}
}

# emf_notify.1271 -- removed koasasa_nurael (Koasasa)
character_event = {
	id = emf_notify.1271

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3271 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3271 } }
		}
	}
}

# emf_notify.1272 -- removed messalian_master (Perfection)
character_event = {
	id = emf_notify.1272

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3272 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3272 } }
		}
	}
}

# emf_notify.1273 -- removed novellani (Novellani)
character_event = {
	id = emf_notify.1273

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3273 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3273 } }
		}
	}
}

# emf_notify.1274 -- removed perfecti (Perfecti)
character_event = {
	id = emf_notify.1274

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3274 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3274 } }
		}
	}
}

# emf_notify.1275 -- removed reincarnated (Has Been Reincarnated)
character_event = {
	id = emf_notify.1275

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3275 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3275 } }
		}
	}
}

# emf_notify.1276 -- removed saint (Saint)
character_event = {
	id = emf_notify.1276

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3276 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3276 } }
		}
	}
}

# emf_notify.1277 -- removed sandaliati (Sandaliati)
character_event = {
	id = emf_notify.1277

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3277 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3277 } }
		}
	}
}

# emf_notify.1278 -- removed yazidi_pilgrim (Yazidi Pilgrim)
character_event = {
	id = emf_notify.1278

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3278 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3278 } }
		}
	}
}

# emf_notify.1279 -- removed crowned (Crowned)
character_event = {
	id = emf_notify.1279

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3279 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3279 } }
		}
	}
}

# emf_notify.1280 -- removed crowned_by_pope (Crowned By The Pope)
character_event = {
	id = emf_notify.1280

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3280 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3280 } }
		}
	}
}

# emf_notify.1281 -- removed strong_basileus (Strong Basileus)
character_event = {
	id = emf_notify.1281

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3281 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3281 } }
		}
	}
}

# emf_notify.1282 -- removed uncrowned (Uncrowned)
character_event = {
	id = emf_notify.1282

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3282 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3282 } }
		}
	}
}

# emf_notify.1283 -- removed weak_basileus (Coronated Basileus)
character_event = {
	id = emf_notify.1283

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3283 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3283 } }
		}
	}
}

# emf_notify.1284 -- removed martyr (Martyr)
character_event = {
	id = emf_notify.1284

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3284 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3284 } }
		}
	}
}

# emf_notify.1285 -- removed paragon (Paragon)
character_event = {
	id = emf_notify.1285

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			FROM = { ai = no }
			event_target:emf_notify_receiver = { ai = no }
		}
	}

	immediate = {
		# If the target emf_notify_receiver is defined (and player), send notifications about ROOT's trait loss to them.
		if = {
			limit = { event_target:emf_notify_receiver = { ai = no } }
			event_target:emf_notify_receiver = { character_event = { id = emf_notify.3285 } }
		}
		# If FROM is a player, send notification about ROOT's trait loss to FROM.
		if = {
			limit = {
				# Don't duplicate to FROM -- we can only send 2 notification events if FROM and emf_notify_receiver are
				# two different player characters.
				FROM = {
					ai = no
					NOT = { character = event_target:emf_notify_receiver }
				}
			}
			FROM = { character_event = { id = emf_notify.3285 } }
		}
	}
}


####################################################
#          Trait Gain Notification Events          #
# emf_notify.2001 through emf_notify.3000 reserved #
####################################################

# emf_notify.2001 -- added amateurish_plotter (Amateurish Plotter) to FROM [notification]
character_event = {
	id = emf_notify.2001
	desc = emf_notify.2001.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2001.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2002 -- added flamboyant_schemer (Flamboyant Schemer) to FROM [notification]
character_event = {
	id = emf_notify.2002
	desc = emf_notify.2002.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2002.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2003 -- added intricate_webweaver (Intricate Webweaver) to FROM [notification]
character_event = {
	id = emf_notify.2003
	desc = emf_notify.2003.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2003.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2004 -- added elusive_shadow (Elusive Shadow) to FROM [notification]
character_event = {
	id = emf_notify.2004
	desc = emf_notify.2004.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2004.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2005 -- added naive_appeaser (Naive Appeaser) to FROM [notification]
character_event = {
	id = emf_notify.2005
	desc = emf_notify.2005.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2005.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2006 -- added underhanded_rogue (Underhanded Rogue) to FROM [notification]
character_event = {
	id = emf_notify.2006
	desc = emf_notify.2006.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2006.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2007 -- added charismatic_negotiator (Charismatic Negotiator) to FROM [notification]
character_event = {
	id = emf_notify.2007
	desc = emf_notify.2007.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2007.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2008 -- added grey_eminence (Grey Eminence) to FROM [notification]
character_event = {
	id = emf_notify.2008
	desc = emf_notify.2008.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2008.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2009 -- added indulgent_wastrel (Indulgent Wastrel) to FROM [notification]
character_event = {
	id = emf_notify.2009
	desc = emf_notify.2009.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2009.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2010 -- added thrifty_clerk (Thrifty Clerk) to FROM [notification]
character_event = {
	id = emf_notify.2010
	desc = emf_notify.2010.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2010.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2011 -- added fortune_builder (Fortune Builder) to FROM [notification]
character_event = {
	id = emf_notify.2011
	desc = emf_notify.2011.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2011.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2012 -- added midas_touched (Midas Touched) to FROM [notification]
character_event = {
	id = emf_notify.2012
	desc = emf_notify.2012.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2012.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2013 -- added misguided_warrior (Misguided Warrior) to FROM [notification]
character_event = {
	id = emf_notify.2013
	desc = emf_notify.2013.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2013.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2014 -- added tough_soldier (Tough Soldier) to FROM [notification]
character_event = {
	id = emf_notify.2014
	desc = emf_notify.2014.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2014.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2015 -- added skilled_tactician (Skilled Tactician) to FROM [notification]
character_event = {
	id = emf_notify.2015
	desc = emf_notify.2015.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2015.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2016 -- added brilliant_strategist (Brilliant Strategist) to FROM [notification]
character_event = {
	id = emf_notify.2016
	desc = emf_notify.2016.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2016.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2017 -- added detached_priest (Detached Priest) to FROM [notification]
character_event = {
	id = emf_notify.2017
	desc = emf_notify.2017.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2017.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2018 -- added martial_cleric (Dutiful Cleric) to FROM [notification]
character_event = {
	id = emf_notify.2018
	desc = emf_notify.2018.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2018.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2019 -- added scholarly_theologian (Scholarly Theologian) to FROM [notification]
character_event = {
	id = emf_notify.2019
	desc = emf_notify.2019.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2019.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2020 -- added mastermind_theologian (Mastermind Theologian) to FROM [notification]
character_event = {
	id = emf_notify.2020
	desc = emf_notify.2020.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2020.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2021 -- added stressed (Stressed) to FROM [notification]
character_event = {
	id = emf_notify.2021
	desc = emf_notify.2021.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2021.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2022 -- added depressed (Depressed) to FROM [notification]
character_event = {
	id = emf_notify.2022
	desc = emf_notify.2022.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2022.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2023 -- added ill (Ill) to FROM [notification]
character_event = {
	id = emf_notify.2023
	desc = emf_notify.2023.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2023.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2024 -- added pneumonic (Pneumonic) to FROM [notification]
character_event = {
	id = emf_notify.2024
	desc = emf_notify.2024.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2024.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2025 -- added syphilitic (Gonorrhea) to FROM [notification]
character_event = {
	id = emf_notify.2025
	desc = emf_notify.2025.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2025.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2026 -- added leper (Leper) to FROM [notification]
character_event = {
	id = emf_notify.2026
	desc = emf_notify.2026.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2026.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2027 -- added wounded (Wounded) to FROM [notification]
character_event = {
	id = emf_notify.2027
	desc = emf_notify.2027.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2027.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2028 -- added maimed (Maimed) to FROM [notification]
character_event = {
	id = emf_notify.2028
	desc = emf_notify.2028.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2028.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2029 -- added infirm (Infirm) to FROM [notification]
character_event = {
	id = emf_notify.2029
	desc = emf_notify.2029.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2029.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2030 -- added incapable (Incapable) to FROM [notification]
character_event = {
	id = emf_notify.2030
	desc = emf_notify.2030.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2030.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2031 -- added drunkard (Drunkard) to FROM [notification]
character_event = {
	id = emf_notify.2031
	desc = emf_notify.2031.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2031.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2032 -- added has_tuberculosis (Has Consumption) to FROM [notification]
character_event = {
	id = emf_notify.2032
	desc = emf_notify.2032.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2032.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2033 -- added has_typhoid_fever (Has Slow Fever) to FROM [notification]
character_event = {
	id = emf_notify.2033
	desc = emf_notify.2033.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2033.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2034 -- added has_typhus (Has Camp Fever) to FROM [notification]
character_event = {
	id = emf_notify.2034
	desc = emf_notify.2034.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2034.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2035 -- added has_bubonic_plague (Has the Plague!) to FROM [notification]
character_event = {
	id = emf_notify.2035
	desc = emf_notify.2035.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2035.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2036 -- added has_measles (Has Measles) to FROM [notification]
character_event = {
	id = emf_notify.2036
	desc = emf_notify.2036.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2036.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2037 -- added has_small_pox (Has Smallpox) to FROM [notification]
character_event = {
	id = emf_notify.2037
	desc = emf_notify.2037.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2037.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2038 -- added crusader (Crusader) to FROM [notification]
character_event = {
	id = emf_notify.2038
	desc = emf_notify.2038.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2038.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2039 -- added bastard (Bastard) to FROM [notification]
character_event = {
	id = emf_notify.2039
	desc = emf_notify.2039.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2039.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2040 -- added twin (Twin) to FROM [notification]
character_event = {
	id = emf_notify.2040
	desc = emf_notify.2040.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2040.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2041 -- added legit_bastard (Legitimized Bastard) to FROM [notification]
character_event = {
	id = emf_notify.2041
	desc = emf_notify.2041.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2041.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2042 -- added pregnant (Pregnant) to FROM [notification]
character_event = {
	id = emf_notify.2042
	desc = emf_notify.2042.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2042.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2043 -- added excommunicated (Excommunicated) to FROM [notification]
character_event = {
	id = emf_notify.2043
	desc = emf_notify.2043.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2043.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2044 -- added kinslayer (Kinslayer) to FROM [notification]
character_event = {
	id = emf_notify.2044
	desc = emf_notify.2044.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2044.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2045 -- added homosexual (Homosexual) to FROM [notification]
character_event = {
	id = emf_notify.2045
	desc = emf_notify.2045.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2045.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2046 -- added clubfooted (Clubfooted) to FROM [notification]
character_event = {
	id = emf_notify.2046
	desc = emf_notify.2046.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2046.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2047 -- added harelip (Harelip) to FROM [notification]
character_event = {
	id = emf_notify.2047
	desc = emf_notify.2047.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2047.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2048 -- added hunchback (Hunchback) to FROM [notification]
character_event = {
	id = emf_notify.2048
	desc = emf_notify.2048.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2048.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2049 -- added lisp (Lisp) to FROM [notification]
character_event = {
	id = emf_notify.2049
	desc = emf_notify.2049.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2049.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2050 -- added stutter (Stutter) to FROM [notification]
character_event = {
	id = emf_notify.2050
	desc = emf_notify.2050.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2050.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2051 -- added fair (Attractive) to FROM [notification]
character_event = {
	id = emf_notify.2051
	desc = emf_notify.2051.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2051.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2052 -- added ugly (Ugly) to FROM [notification]
character_event = {
	id = emf_notify.2052
	desc = emf_notify.2052.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2052.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2053 -- added dwarf (Dwarf) to FROM [notification]
character_event = {
	id = emf_notify.2053
	desc = emf_notify.2053.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2053.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2054 -- added genius (Genius) to FROM [notification]
character_event = {
	id = emf_notify.2054
	desc = emf_notify.2054.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2054.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2055 -- added quick (Quick) to FROM [notification]
character_event = {
	id = emf_notify.2055
	desc = emf_notify.2055.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2055.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2056 -- added slow (Slow) to FROM [notification]
character_event = {
	id = emf_notify.2056
	desc = emf_notify.2056.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2056.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2057 -- added imbecile (Imbecile) to FROM [notification]
character_event = {
	id = emf_notify.2057
	desc = emf_notify.2057.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2057.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2058 -- added inbred (Inbred) to FROM [notification]
character_event = {
	id = emf_notify.2058
	desc = emf_notify.2058.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2058.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2059 -- added strong (Strong) to FROM [notification]
character_event = {
	id = emf_notify.2059
	desc = emf_notify.2059.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2059.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2060 -- added weak (Weak) to FROM [notification]
character_event = {
	id = emf_notify.2060
	desc = emf_notify.2060.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2060.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2061 -- added celibate (Celibate) to FROM [notification]
character_event = {
	id = emf_notify.2061
	desc = emf_notify.2061.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2061.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2062 -- added hedonist (Hedonist) to FROM [notification]
character_event = {
	id = emf_notify.2062
	desc = emf_notify.2062.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2062.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2063 -- added scholar (Scholar) to FROM [notification]
character_event = {
	id = emf_notify.2063
	desc = emf_notify.2063.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2063.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2064 -- added gardener (Gardener) to FROM [notification]
character_event = {
	id = emf_notify.2064
	desc = emf_notify.2064.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2064.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2065 -- added mystic (Mystic) to FROM [notification]
character_event = {
	id = emf_notify.2065
	desc = emf_notify.2065.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2065.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2066 -- added impaler (Impaler) to FROM [notification]
character_event = {
	id = emf_notify.2066
	desc = emf_notify.2066.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2066.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2067 -- added duelist (Duelist) to FROM [notification]
character_event = {
	id = emf_notify.2067
	desc = emf_notify.2067.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2067.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2068 -- added hunter (Hunter) to FROM [notification]
character_event = {
	id = emf_notify.2068
	desc = emf_notify.2068.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2068.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2069 -- added poet (Poet) to FROM [notification]
character_event = {
	id = emf_notify.2069
	desc = emf_notify.2069.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2069.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2070 -- added falconer (Falconer) to FROM [notification]
character_event = {
	id = emf_notify.2070
	desc = emf_notify.2070.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2070.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2071 -- added lustful (Lustful) to FROM [notification]
character_event = {
	id = emf_notify.2071
	desc = emf_notify.2071.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2071.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2072 -- added chaste (Chaste) to FROM [notification]
character_event = {
	id = emf_notify.2072
	desc = emf_notify.2072.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2072.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2073 -- added gluttonous (Gluttonous) to FROM [notification]
character_event = {
	id = emf_notify.2073
	desc = emf_notify.2073.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2073.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2074 -- added temperate (Temperate) to FROM [notification]
character_event = {
	id = emf_notify.2074
	desc = emf_notify.2074.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2074.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2075 -- added greedy (Greedy) to FROM [notification]
character_event = {
	id = emf_notify.2075
	desc = emf_notify.2075.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2075.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2076 -- added charitable (Charitable) to FROM [notification]
character_event = {
	id = emf_notify.2076
	desc = emf_notify.2076.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2076.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2077 -- added slothful (Slothful) to FROM [notification]
character_event = {
	id = emf_notify.2077
	desc = emf_notify.2077.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2077.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2078 -- added diligent (Diligent) to FROM [notification]
character_event = {
	id = emf_notify.2078
	desc = emf_notify.2078.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2078.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2079 -- added envious (Envious) to FROM [notification]
character_event = {
	id = emf_notify.2079
	desc = emf_notify.2079.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2079.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2080 -- added kind (Kind) to FROM [notification]
character_event = {
	id = emf_notify.2080
	desc = emf_notify.2080.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2080.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2081 -- added wroth (Wroth) to FROM [notification]
character_event = {
	id = emf_notify.2081
	desc = emf_notify.2081.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2081.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2082 -- added patient (Patient) to FROM [notification]
character_event = {
	id = emf_notify.2082
	desc = emf_notify.2082.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2082.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2083 -- added proud (Proud) to FROM [notification]
character_event = {
	id = emf_notify.2083
	desc = emf_notify.2083.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2083.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2084 -- added humble (Humble) to FROM [notification]
character_event = {
	id = emf_notify.2084
	desc = emf_notify.2084.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2084.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2085 -- added deceitful (Deceitful) to FROM [notification]
character_event = {
	id = emf_notify.2085
	desc = emf_notify.2085.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2085.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2086 -- added honest (Honest) to FROM [notification]
character_event = {
	id = emf_notify.2086
	desc = emf_notify.2086.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2086.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2087 -- added craven (Craven) to FROM [notification]
character_event = {
	id = emf_notify.2087
	desc = emf_notify.2087.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2087.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2088 -- added brave (Brave) to FROM [notification]
character_event = {
	id = emf_notify.2088
	desc = emf_notify.2088.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2088.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2089 -- added shy (Shy) to FROM [notification]
character_event = {
	id = emf_notify.2089
	desc = emf_notify.2089.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2089.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2090 -- added gregarious (Gregarious) to FROM [notification]
character_event = {
	id = emf_notify.2090
	desc = emf_notify.2090.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2090.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2091 -- added ambitious (Ambitious) to FROM [notification]
character_event = {
	id = emf_notify.2091
	desc = emf_notify.2091.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2091.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2092 -- added content (Content) to FROM [notification]
character_event = {
	id = emf_notify.2092
	desc = emf_notify.2092.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2092.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2093 -- added arbitrary (Arbitrary) to FROM [notification]
character_event = {
	id = emf_notify.2093
	desc = emf_notify.2093.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2093.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2094 -- added just (Just) to FROM [notification]
character_event = {
	id = emf_notify.2094
	desc = emf_notify.2094.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2094.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2095 -- added cynical (Cynical) to FROM [notification]
character_event = {
	id = emf_notify.2095
	desc = emf_notify.2095.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2095.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2096 -- added zealous (Zealous) to FROM [notification]
character_event = {
	id = emf_notify.2096
	desc = emf_notify.2096.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2096.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2097 -- added paranoid (Paranoid) to FROM [notification]
character_event = {
	id = emf_notify.2097
	desc = emf_notify.2097.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2097.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2098 -- added trusting (Trusting) to FROM [notification]
character_event = {
	id = emf_notify.2098
	desc = emf_notify.2098.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2098.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2099 -- added cruel (Cruel) to FROM [notification]
character_event = {
	id = emf_notify.2099
	desc = emf_notify.2099.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2099.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2100 -- added light_foot_leader (Light Foot Leader) to FROM [notification]
character_event = {
	id = emf_notify.2100
	desc = emf_notify.2100.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2100.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2101 -- added heavy_infantry_leader (Heavy Infantry Leader) to FROM [notification]
character_event = {
	id = emf_notify.2101
	desc = emf_notify.2101.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2101.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2102 -- added cavalry_leader (Cavalry Leader) to FROM [notification]
character_event = {
	id = emf_notify.2102
	desc = emf_notify.2102.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2102.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2103 -- added inspiring_leader (Inspiring Leader) to FROM [notification]
character_event = {
	id = emf_notify.2103
	desc = emf_notify.2103.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2103.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2104 -- added trickster (Trickster) to FROM [notification]
character_event = {
	id = emf_notify.2104
	desc = emf_notify.2104.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2104.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2105 -- added organizer (Organizer) to FROM [notification]
character_event = {
	id = emf_notify.2105
	desc = emf_notify.2105.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2105.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2106 -- added defensive_leader (Defender) to FROM [notification]
character_event = {
	id = emf_notify.2106
	desc = emf_notify.2106.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2106.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2107 -- added experimenter (Direct Leader) to FROM [notification]
character_event = {
	id = emf_notify.2107
	desc = emf_notify.2107.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2107.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2108 -- added flanker (Flanker) to FROM [notification]
character_event = {
	id = emf_notify.2108
	desc = emf_notify.2108.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2108.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2109 -- added aggressive_leader (Aggressive Leader) to FROM [notification]
character_event = {
	id = emf_notify.2109
	desc = emf_notify.2109.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2109.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2110 -- added siege_leader (Siege Leader) to FROM [notification]
character_event = {
	id = emf_notify.2110
	desc = emf_notify.2110.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2110.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2111 -- added mujahid (Mujahid) to FROM [notification]
character_event = {
	id = emf_notify.2111
	desc = emf_notify.2111.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2111.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2112 -- added hajjaj (Hajajj) to FROM [notification]
character_event = {
	id = emf_notify.2112
	desc = emf_notify.2112.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2112.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2113 -- added on_hajj (On Hajj) to FROM [notification]
character_event = {
	id = emf_notify.2113
	desc = emf_notify.2113.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2113.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2114 -- added faqih (Faqih) to FROM [notification]
character_event = {
	id = emf_notify.2114
	desc = emf_notify.2114.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2114.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2115 -- added hafiz (Hafiz) to FROM [notification]
character_event = {
	id = emf_notify.2115
	desc = emf_notify.2115.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2115.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2116 -- added sayyid (Sayyid) to FROM [notification]
character_event = {
	id = emf_notify.2116
	desc = emf_notify.2116.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2116.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2117 -- added pilgrim (Pilgrim) to FROM [notification]
character_event = {
	id = emf_notify.2117
	desc = emf_notify.2117.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2117.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2118 -- added mirza (Mirza) to FROM [notification]
character_event = {
	id = emf_notify.2118
	desc = emf_notify.2118.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2118.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2119 -- added scarred (Scarred) to FROM [notification]
character_event = {
	id = emf_notify.2119
	desc = emf_notify.2119.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2119.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2120 -- added eunuch (Eunuch) to FROM [notification]
character_event = {
	id = emf_notify.2120
	desc = emf_notify.2120.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2120.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2121 -- added blinded (Blinded) to FROM [notification]
character_event = {
	id = emf_notify.2121
	desc = emf_notify.2121.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2121.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2122 -- added born_in_the_purple (Born in the Purple) to FROM [notification]
character_event = {
	id = emf_notify.2122
	desc = emf_notify.2122.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2122.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2123 -- added augustus (Augustus) to FROM [notification]
character_event = {
	id = emf_notify.2123
	desc = emf_notify.2123.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2123.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2124 -- added flat_terrain_leader (Flat Terrain Expert) to FROM [notification]
character_event = {
	id = emf_notify.2124
	desc = emf_notify.2124.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2124.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2125 -- added rough_terrain_leader (Rough Terrain Expert) to FROM [notification]
character_event = {
	id = emf_notify.2125
	desc = emf_notify.2125.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2125.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2126 -- added mountain_terrain_leader (Mountain Expert) to FROM [notification]
character_event = {
	id = emf_notify.2126
	desc = emf_notify.2126.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2126.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2127 -- added desert_terrain_leader (Desert Expert) to FROM [notification]
character_event = {
	id = emf_notify.2127
	desc = emf_notify.2127.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2127.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2128 -- added holy_warrior (Holy Warrior) to FROM [notification]
character_event = {
	id = emf_notify.2128
	desc = emf_notify.2128.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2128.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2129 -- added unyielding_leader (Unyielding) to FROM [notification]
character_event = {
	id = emf_notify.2129
	desc = emf_notify.2129.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2129.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2130 -- added has_aztec_disease (Syphilitic) to FROM [notification]
character_event = {
	id = emf_notify.2130
	desc = emf_notify.2130.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2130.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2131 -- added child_of_consort (Child of Concubine) to FROM [notification]
character_event = {
	id = emf_notify.2131
	desc = emf_notify.2131.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2131.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2132 -- added peasant_leader (Peasant Leader) to FROM [notification]
character_event = {
	id = emf_notify.2132
	desc = emf_notify.2132.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2132.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2133 -- added heresiarch (Heresiarch) to FROM [notification]
character_event = {
	id = emf_notify.2133
	desc = emf_notify.2133.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2133.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2134 -- added berserker (Berserker) to FROM [notification]
character_event = {
	id = emf_notify.2134
	desc = emf_notify.2134.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2134.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2135 -- added varangian (Varangian) to FROM [notification]
character_event = {
	id = emf_notify.2135
	desc = emf_notify.2135.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2135.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2136 -- added saoshyant (Saoshyant) to FROM [notification]
character_event = {
	id = emf_notify.2136
	desc = emf_notify.2136.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2136.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2137 -- added saoshyant_descendant (Saoshyant Descendant) to FROM [notification]
character_event = {
	id = emf_notify.2137
	desc = emf_notify.2137.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2137.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2138 -- added viking (Viking) to FROM [notification]
character_event = {
	id = emf_notify.2138
	desc = emf_notify.2138.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2138.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2139 -- added monk (Monk) to FROM [notification]
character_event = {
	id = emf_notify.2139
	desc = emf_notify.2139.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2139.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2140 -- added nun (Nun) to FROM [notification]
character_event = {
	id = emf_notify.2140
	desc = emf_notify.2140.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2140.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2141 -- added on_pilgrimage (On pilgrimage) to FROM [notification]
character_event = {
	id = emf_notify.2141
	desc = emf_notify.2141.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2141.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2142 -- added sickly (Sickly) to FROM [notification]
character_event = {
	id = emf_notify.2142
	desc = emf_notify.2142.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2142.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2143 -- added mutazilite (Mu'tazilite) to FROM [notification]
character_event = {
	id = emf_notify.2143
	desc = emf_notify.2143.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2143.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2144 -- added ashari (Ash'ari) to FROM [notification]
character_event = {
	id = emf_notify.2144
	desc = emf_notify.2144.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2144.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2145 -- added sympathy_christendom (Sympathy for Christendom) to FROM [notification]
character_event = {
	id = emf_notify.2145
	desc = emf_notify.2145.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2145.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2146 -- added sympathy_islam (Sympathy for Islam) to FROM [notification]
character_event = {
	id = emf_notify.2146
	desc = emf_notify.2146.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2146.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2147 -- added sympathy_pagans (Sympathy for Pagans) to FROM [notification]
character_event = {
	id = emf_notify.2147
	desc = emf_notify.2147.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2147.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2148 -- added sympathy_zoroastrianism (Sympathy for Zoroastrianism) to FROM [notification]
character_event = {
	id = emf_notify.2148
	desc = emf_notify.2148.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2148.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2149 -- added sympathy_judaism (Sympathy for Judaism) to FROM [notification]
character_event = {
	id = emf_notify.2149
	desc = emf_notify.2149.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2149.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2150 -- added bad_priest_christian (Wicked Priest) to FROM [notification]
character_event = {
	id = emf_notify.2150
	desc = emf_notify.2150.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2150.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2151 -- added bad_priest_muslim (Wicked Caliph) to FROM [notification]
character_event = {
	id = emf_notify.2151
	desc = emf_notify.2151.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2151.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2152 -- added bad_priest_norse (Unworthy Priest) to FROM [notification]
character_event = {
	id = emf_notify.2152
	desc = emf_notify.2152.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2152.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2153 -- added bad_priest_tengri (Unworthy Priest) to FROM [notification]
character_event = {
	id = emf_notify.2153
	desc = emf_notify.2153.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2153.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2154 -- added bad_priest_zoroastrian (Immoral Priest) to FROM [notification]
character_event = {
	id = emf_notify.2154
	desc = emf_notify.2154.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2154.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2155 -- added bad_priest_aztec (Unworthy Priest) to FROM [notification]
character_event = {
	id = emf_notify.2155
	desc = emf_notify.2155.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2155.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2156 -- added narrow_flank_leader (Battlefield Terrain Master) to FROM [notification]
character_event = {
	id = emf_notify.2156
	desc = emf_notify.2156.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2156.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2157 -- added brahmin (Brahmin) to FROM [notification]
character_event = {
	id = emf_notify.2157
	desc = emf_notify.2157.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2157.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2158 -- added kshatriya (Kshatriya) to FROM [notification]
character_event = {
	id = emf_notify.2158
	desc = emf_notify.2158.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2158.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2159 -- added vaishya (Vaishya) to FROM [notification]
character_event = {
	id = emf_notify.2159
	desc = emf_notify.2159.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2159.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2160 -- added sympathy_indian (Sympathy for Indian religons) to FROM [notification]
character_event = {
	id = emf_notify.2160
	desc = emf_notify.2160.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2160.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2161 -- added shaivist_hindu (Shaivist) to FROM [notification]
character_event = {
	id = emf_notify.2161
	desc = emf_notify.2161.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2161.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2162 -- added vaishnavist_hindu (Vaishnavist) to FROM [notification]
character_event = {
	id = emf_notify.2162
	desc = emf_notify.2162.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2162.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2163 -- added shaktist_hindu (Shaktist) to FROM [notification]
character_event = {
	id = emf_notify.2163
	desc = emf_notify.2163.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2163.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2164 -- added smartist_hindu (Smartist) to FROM [notification]
character_event = {
	id = emf_notify.2164
	desc = emf_notify.2164.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2164.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2165 -- added mahayana_buddhist (Mahayana Buddhist) to FROM [notification]
character_event = {
	id = emf_notify.2165
	desc = emf_notify.2165.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2165.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2166 -- added vajrayana_buddhist (Vajrayana Buddhist) to FROM [notification]
character_event = {
	id = emf_notify.2166
	desc = emf_notify.2166.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2166.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2167 -- added theravada_buddhist (Theravada Buddhist) to FROM [notification]
character_event = {
	id = emf_notify.2167
	desc = emf_notify.2167.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2167.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2168 -- added digambara_jain (Digambara Jain) to FROM [notification]
character_event = {
	id = emf_notify.2168
	desc = emf_notify.2168.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2168.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2169 -- added svetambara_jain (Svetambara Jain) to FROM [notification]
character_event = {
	id = emf_notify.2169
	desc = emf_notify.2169.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2169.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2170 -- added decadent (Decadent) to FROM [notification]
character_event = {
	id = emf_notify.2170
	desc = emf_notify.2170.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2170.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2171 -- added reincarnation (Reincarnation of [Reincarnation.GetBestName]) to FROM [notification]
character_event = {
	id = emf_notify.2171
	desc = emf_notify.2171.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2171.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2172 -- added war_elephant_leader (War Elephant Leader) to FROM [notification]
character_event = {
	id = emf_notify.2172
	desc = emf_notify.2172.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2172.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2173 -- added jungle_terrain_leader (Jungle Expert) to FROM [notification]
character_event = {
	id = emf_notify.2173
	desc = emf_notify.2173.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2173.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2174 -- added in_hiding (In Hiding) to FROM [notification]
character_event = {
	id = emf_notify.2174
	desc = emf_notify.2174.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2174.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2175 -- added winter_soldier (Winter Soldier) to FROM [notification]
character_event = {
	id = emf_notify.2175
	desc = emf_notify.2175.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2175.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2176 -- added seducer (Master Seducer) to FROM [notification]
character_event = {
	id = emf_notify.2176
	desc = emf_notify.2176.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2176.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2177 -- added seductress (Master Seductress) to FROM [notification]
character_event = {
	id = emf_notify.2177
	desc = emf_notify.2177.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2177.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2178 -- added administrator (Administrator) to FROM [notification]
character_event = {
	id = emf_notify.2178
	desc = emf_notify.2178.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2178.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2179 -- added architect (Architect) to FROM [notification]
character_event = {
	id = emf_notify.2179
	desc = emf_notify.2179.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2179.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2180 -- added strategist (Strategist) to FROM [notification]
character_event = {
	id = emf_notify.2180
	desc = emf_notify.2180.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2180.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2181 -- added socializer (Socializer) to FROM [notification]
character_event = {
	id = emf_notify.2181
	desc = emf_notify.2181.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2181.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2182 -- added schemer (Master Schemer) to FROM [notification]
character_event = {
	id = emf_notify.2182
	desc = emf_notify.2182.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2182.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2183 -- added theologian (Theologian) to FROM [notification]
character_event = {
	id = emf_notify.2183
	desc = emf_notify.2183.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2183.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2184 -- added gamer (Game Master) to FROM [notification]
character_event = {
	id = emf_notify.2184
	desc = emf_notify.2184.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2184.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2185 -- added adventurer (Adventurer) to FROM [notification]
character_event = {
	id = emf_notify.2185
	desc = emf_notify.2185.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2185.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2186 -- added erudite (Erudite) to FROM [notification]
character_event = {
	id = emf_notify.2186
	desc = emf_notify.2186.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2186.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2187 -- added stubborn (Stubborn) to FROM [notification]
character_event = {
	id = emf_notify.2187
	desc = emf_notify.2187.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2187.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2188 -- added haughty (Haughty) to FROM [notification]
character_event = {
	id = emf_notify.2188
	desc = emf_notify.2188.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2188.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2189 -- added affectionate (Affectionate) to FROM [notification]
character_event = {
	id = emf_notify.2189
	desc = emf_notify.2189.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2189.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2190 -- added timid (Timid) to FROM [notification]
character_event = {
	id = emf_notify.2190
	desc = emf_notify.2190.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2190.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2191 -- added rowdy (Rowdy) to FROM [notification]
character_event = {
	id = emf_notify.2191
	desc = emf_notify.2191.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2191.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2192 -- added willful (Willful) to FROM [notification]
character_event = {
	id = emf_notify.2192
	desc = emf_notify.2192.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2192.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2193 -- added brooding (Brooding) to FROM [notification]
character_event = {
	id = emf_notify.2193
	desc = emf_notify.2193.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2193.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2194 -- added indolent (Indolent) to FROM [notification]
character_event = {
	id = emf_notify.2194
	desc = emf_notify.2194.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2194.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2195 -- added playful (Playful) to FROM [notification]
character_event = {
	id = emf_notify.2195
	desc = emf_notify.2195.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2195.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2196 -- added conscientious (Conscientious) to FROM [notification]
character_event = {
	id = emf_notify.2196
	desc = emf_notify.2196.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2196.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2197 -- added fussy (Fussy) to FROM [notification]
character_event = {
	id = emf_notify.2197
	desc = emf_notify.2197.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2197.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2198 -- added curious (Curious) to FROM [notification]
character_event = {
	id = emf_notify.2198
	desc = emf_notify.2198.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2198.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2199 -- added idolizer (Idolizer) to FROM [notification]
character_event = {
	id = emf_notify.2199
	desc = emf_notify.2199.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2199.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2200 -- added horse (Horse) to FROM [notification]
character_event = {
	id = emf_notify.2200
	desc = emf_notify.2200.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2200.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2201 -- added robust (Brawny) to FROM [notification]
character_event = {
	id = emf_notify.2201
	desc = emf_notify.2201.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2201.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2202 -- added feeble (Frail) to FROM [notification]
character_event = {
	id = emf_notify.2202
	desc = emf_notify.2202.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2202.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2203 -- added shrewd (Shrewd) to FROM [notification]
character_event = {
	id = emf_notify.2203
	desc = emf_notify.2203.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2203.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2204 -- added dull (Dull) to FROM [notification]
character_event = {
	id = emf_notify.2204
	desc = emf_notify.2204.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2204.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2205 -- added novice_diplomat (Novice Diplomat) to FROM [notification]
character_event = {
	id = emf_notify.2205
	desc = emf_notify.2205.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2205.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2206 -- added trained_diplomat (Trained Diplomat) to FROM [notification]
character_event = {
	id = emf_notify.2206
	desc = emf_notify.2206.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2206.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2207 -- added skilled_diplomat (Skilled Diplomat) to FROM [notification]
character_event = {
	id = emf_notify.2207
	desc = emf_notify.2207.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2207.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2208 -- added master_diplomat (Master Diplomat) to FROM [notification]
character_event = {
	id = emf_notify.2208
	desc = emf_notify.2208.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2208.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2209 -- added poor_warrior (Novice Fighter) to FROM [notification]
character_event = {
	id = emf_notify.2209
	desc = emf_notify.2209.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2209.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2210 -- added trained_warrior (Trained Fighter) to FROM [notification]
character_event = {
	id = emf_notify.2210
	desc = emf_notify.2210.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2210.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2211 -- added skilled_warrior (Skilled Fighter) to FROM [notification]
character_event = {
	id = emf_notify.2211
	desc = emf_notify.2211.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2211.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2212 -- added master_warrior (Formidable Fighter) to FROM [notification]
character_event = {
	id = emf_notify.2212
	desc = emf_notify.2212.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2212.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2213 -- added tall (Tall) to FROM [notification]
character_event = {
	id = emf_notify.2213
	desc = emf_notify.2213.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2213.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2214 -- added agile (Agile) to FROM [notification]
character_event = {
	id = emf_notify.2214
	desc = emf_notify.2214.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2214.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2215 -- added perceptive (Perceptive) to FROM [notification]
character_event = {
	id = emf_notify.2215
	desc = emf_notify.2215.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2215.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2216 -- added melodious_voice (Melodious Voice) to FROM [notification]
character_event = {
	id = emf_notify.2216
	desc = emf_notify.2216.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2216.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2217 -- added powerful_voice (Powerful Voice) to FROM [notification]
character_event = {
	id = emf_notify.2217
	desc = emf_notify.2217.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2217.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2218 -- added calm_voice (Calm Voice) to FROM [notification]
character_event = {
	id = emf_notify.2218
	desc = emf_notify.2218.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2218.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2219 -- added ambidextrous (Ambidextrous) to FROM [notification]
character_event = {
	id = emf_notify.2219
	desc = emf_notify.2219.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2219.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2220 -- added lefthanded (Lefthanded) to FROM [notification]
character_event = {
	id = emf_notify.2220
	desc = emf_notify.2220.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2220.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2221 -- added wrymouth (Wrymouth) to FROM [notification]
character_event = {
	id = emf_notify.2221
	desc = emf_notify.2221.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2221.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2222 -- added deaf (Deaf) to FROM [notification]
character_event = {
	id = emf_notify.2222
	desc = emf_notify.2222.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2222.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2223 -- added absentminded (Absent-Minded) to FROM [notification]
character_event = {
	id = emf_notify.2223
	desc = emf_notify.2223.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2223.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2224 -- added fertile (Fertile) to FROM [notification]
character_event = {
	id = emf_notify.2224
	desc = emf_notify.2224.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2224.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2225 -- added imposing (Imposing) to FROM [notification]
character_event = {
	id = emf_notify.2225
	desc = emf_notify.2225.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2225.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2226 -- added isis (Mother of the Universe) to FROM [notification]
character_event = {
	id = emf_notify.2226
	desc = emf_notify.2226.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2226.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2227 -- added immortal (Immortal) to FROM [notification]
character_event = {
	id = emf_notify.2227
	desc = emf_notify.2227.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2227.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2228 -- added traveling (Traveling) to FROM [notification]
character_event = {
	id = emf_notify.2228
	desc = emf_notify.2228.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2228.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2229 -- added lucky_ruler (Lucky Ruler) to FROM [notification]
character_event = {
	id = emf_notify.2229
	desc = emf_notify.2229.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2229.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2230 -- added conqueror (Conqueror) to FROM [notification]
character_event = {
	id = emf_notify.2230
	desc = emf_notify.2230.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2230.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2231 -- added commander1 (Respected Commander) to FROM [notification]
character_event = {
	id = emf_notify.2231
	desc = emf_notify.2231.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2231.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2232 -- added commander2 (Distinguished Commander) to FROM [notification]
character_event = {
	id = emf_notify.2232
	desc = emf_notify.2232.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2232.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2233 -- added commander3 (Renowned Commander) to FROM [notification]
character_event = {
	id = emf_notify.2233
	desc = emf_notify.2233.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2233.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2234 -- added commander4 (Legendary Commander) to FROM [notification]
character_event = {
	id = emf_notify.2234
	desc = emf_notify.2234.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2234.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2235 -- added inheritance_disabled (Cannot Inherit) to FROM [notification]
character_event = {
	id = emf_notify.2235
	desc = emf_notify.2235.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2235.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2236 -- added raider (Raider) to FROM [notification]
character_event = {
	id = emf_notify.2236
	desc = emf_notify.2236.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2236.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2237 -- added roma_victrix (Roma Victrix) to FROM [notification]
character_event = {
	id = emf_notify.2237
	desc = emf_notify.2237.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2237.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2238 -- added pf_loyalist (Loyalist) to FROM [notification]
character_event = {
	id = emf_notify.2238
	desc = emf_notify.2238.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2238.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2239 -- added pf_neutral (Neutral) to FROM [notification]
character_event = {
	id = emf_notify.2239
	desc = emf_notify.2239.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2239.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2240 -- added pf_rebel (Rebel) to FROM [notification]
character_event = {
	id = emf_notify.2240
	desc = emf_notify.2240.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2240.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2241 -- added imperial_bureaucrat (Imperial Bureaucrat) to FROM [notification]
character_event = {
	id = emf_notify.2241
	desc = emf_notify.2241.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2241.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2242 -- added imperial_courtier (Imperial Courtier) to FROM [notification]
character_event = {
	id = emf_notify.2242
	desc = emf_notify.2242.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2242.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2243 -- added imperial_guard (Imperial Guard) to FROM [notification]
character_event = {
	id = emf_notify.2243
	desc = emf_notify.2243.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2243.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2244 -- added dynasty_decadence_low (Decadent Dynasty) to FROM [notification]
character_event = {
	id = emf_notify.2244
	desc = emf_notify.2244.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2244.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2245 -- added dynasty_decadence_med (Very Decadent Dynasty) to FROM [notification]
character_event = {
	id = emf_notify.2245
	desc = emf_notify.2245.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2245.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2246 -- added dynasty_decadence_high (Extremely Decadent Dynasty) to FROM [notification]
character_event = {
	id = emf_notify.2246
	desc = emf_notify.2246.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2246.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2247 -- added adopted (Adopted) to FROM [notification]
character_event = {
	id = emf_notify.2247
	desc = emf_notify.2247.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2247.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2248 -- added alexandrine (Alexandrine) to FROM [notification]
character_event = {
	id = emf_notify.2248
	desc = emf_notify.2248.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2248.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2249 -- added antiochene (Antiochian) to FROM [notification]
character_event = {
	id = emf_notify.2249
	desc = emf_notify.2249.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2249.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2250 -- added court_anarchy (Court Anarchy) to FROM [notification]
character_event = {
	id = emf_notify.2250
	desc = emf_notify.2250.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2250.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2251 -- added cult_of_lucifer (Cult of Lucifer) to FROM [notification]
character_event = {
	id = emf_notify.2251
	desc = emf_notify.2251.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2251.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2252 -- added desert_father (Desert Father) to FROM [notification]
character_event = {
	id = emf_notify.2252
	desc = emf_notify.2252.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2252.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2253 -- added desert_mother (Desert Mother) to FROM [notification]
character_event = {
	id = emf_notify.2253
	desc = emf_notify.2253.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2253.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2254 -- added doctores (Doctores) to FROM [notification]
character_event = {
	id = emf_notify.2254
	desc = emf_notify.2254.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2254.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2255 -- added druze_ajawid (Ajawid) to FROM [notification]
character_event = {
	id = emf_notify.2255
	desc = emf_notify.2255.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2255.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2256 -- added druze_juhhal (Juhhal) to FROM [notification]
character_event = {
	id = emf_notify.2256
	desc = emf_notify.2256.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2256.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2257 -- added druze_uqqal (Uqqal) to FROM [notification]
character_event = {
	id = emf_notify.2257
	desc = emf_notify.2257.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2257.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2258 -- added hurufi_diwan (Diwan Poet) to FROM [notification]
character_event = {
	id = emf_notify.2258
	desc = emf_notify.2258.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2258.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2259 -- added hurufi_mystic_a (Sufi Initiate) to FROM [notification]
character_event = {
	id = emf_notify.2259
	desc = emf_notify.2259.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2259.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2260 -- added hurufi_mystic_b (Sufi Adept) to FROM [notification]
character_event = {
	id = emf_notify.2260
	desc = emf_notify.2260.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2260.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2261 -- added hurufi_mystic_c (Sufi Master) to FROM [notification]
character_event = {
	id = emf_notify.2261
	desc = emf_notify.2261.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2261.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2262 -- added iconoclast_trait (Icon-Breaker) to FROM [notification]
character_event = {
	id = emf_notify.2262
	desc = emf_notify.2262.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2262.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2263 -- added imamah_claimant (Isma'ili Claimant) to FROM [notification]
character_event = {
	id = emf_notify.2263
	desc = emf_notify.2263.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2263.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2264 -- added kharijite_kafir (Kafir) to FROM [notification]
character_event = {
	id = emf_notify.2264
	desc = emf_notify.2264.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2264.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2265 -- added koasasa_taus (Koasasa) to FROM [notification]
character_event = {
	id = emf_notify.2265
	desc = emf_notify.2265.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2265.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2266 -- added koasasa_israfel (Koasasa) to FROM [notification]
character_event = {
	id = emf_notify.2266
	desc = emf_notify.2266.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2266.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2267 -- added koasasa_azrael (Koasasa) to FROM [notification]
character_event = {
	id = emf_notify.2267
	desc = emf_notify.2267.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2267.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2268 -- added koasasa_mihael (Koasasa) to FROM [notification]
character_event = {
	id = emf_notify.2268
	desc = emf_notify.2268.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2268.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2269 -- added koasasa_dardael (Koasasa) to FROM [notification]
character_event = {
	id = emf_notify.2269
	desc = emf_notify.2269.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2269.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2270 -- added koasasa_samael (Koasasa) to FROM [notification]
character_event = {
	id = emf_notify.2270
	desc = emf_notify.2270.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2270.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2271 -- added koasasa_nurael (Koasasa) to FROM [notification]
character_event = {
	id = emf_notify.2271
	desc = emf_notify.2271.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2271.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2272 -- added messalian_master (Perfection) to FROM [notification]
character_event = {
	id = emf_notify.2272
	desc = emf_notify.2272.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2272.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2273 -- added novellani (Novellani) to FROM [notification]
character_event = {
	id = emf_notify.2273
	desc = emf_notify.2273.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2273.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2274 -- added perfecti (Perfecti) to FROM [notification]
character_event = {
	id = emf_notify.2274
	desc = emf_notify.2274.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2274.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2275 -- added reincarnated (Has Been Reincarnated) to FROM [notification]
character_event = {
	id = emf_notify.2275
	desc = emf_notify.2275.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2275.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2276 -- added saint (Saint) to FROM [notification]
character_event = {
	id = emf_notify.2276
	desc = emf_notify.2276.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2276.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2277 -- added sandaliati (Sandaliati) to FROM [notification]
character_event = {
	id = emf_notify.2277
	desc = emf_notify.2277.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2277.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2278 -- added yazidi_pilgrim (Yazidi Pilgrim) to FROM [notification]
character_event = {
	id = emf_notify.2278
	desc = emf_notify.2278.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2278.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2279 -- added crowned (Crowned) to FROM [notification]
character_event = {
	id = emf_notify.2279
	desc = emf_notify.2279.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2279.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2280 -- added crowned_by_pope (Crowned By The Pope) to FROM [notification]
character_event = {
	id = emf_notify.2280
	desc = emf_notify.2280.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2280.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2281 -- added strong_basileus (Strong Basileus) to FROM [notification]
character_event = {
	id = emf_notify.2281
	desc = emf_notify.2281.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2281.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2282 -- added uncrowned (Uncrowned) to FROM [notification]
character_event = {
	id = emf_notify.2282
	desc = emf_notify.2282.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2282.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2283 -- added weak_basileus (Coronated Basileus) to FROM [notification]
character_event = {
	id = emf_notify.2283
	desc = emf_notify.2283.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2283.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2284 -- added martyr (Martyr) to FROM [notification]
character_event = {
	id = emf_notify.2284
	desc = emf_notify.2284.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2284.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.2285 -- added paragon (Paragon) to FROM [notification]
character_event = {
	id = emf_notify.2285
	desc = emf_notify.2285.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.2285.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}


####################################################
#          Trait Loss Notification Events          #
# emf_notify.3001 through emf_notify.4000 reserved #
####################################################

# emf_notify.3001 -- removed amateurish_plotter (Amateurish Plotter) from FROM [notification]
character_event = {
	id = emf_notify.3001
	desc = emf_notify.3001.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3001.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3002 -- removed flamboyant_schemer (Flamboyant Schemer) from FROM [notification]
character_event = {
	id = emf_notify.3002
	desc = emf_notify.3002.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3002.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3003 -- removed intricate_webweaver (Intricate Webweaver) from FROM [notification]
character_event = {
	id = emf_notify.3003
	desc = emf_notify.3003.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3003.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3004 -- removed elusive_shadow (Elusive Shadow) from FROM [notification]
character_event = {
	id = emf_notify.3004
	desc = emf_notify.3004.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3004.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3005 -- removed naive_appeaser (Naive Appeaser) from FROM [notification]
character_event = {
	id = emf_notify.3005
	desc = emf_notify.3005.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3005.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3006 -- removed underhanded_rogue (Underhanded Rogue) from FROM [notification]
character_event = {
	id = emf_notify.3006
	desc = emf_notify.3006.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3006.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3007 -- removed charismatic_negotiator (Charismatic Negotiator) from FROM [notification]
character_event = {
	id = emf_notify.3007
	desc = emf_notify.3007.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3007.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3008 -- removed grey_eminence (Grey Eminence) from FROM [notification]
character_event = {
	id = emf_notify.3008
	desc = emf_notify.3008.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3008.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3009 -- removed indulgent_wastrel (Indulgent Wastrel) from FROM [notification]
character_event = {
	id = emf_notify.3009
	desc = emf_notify.3009.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3009.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3010 -- removed thrifty_clerk (Thrifty Clerk) from FROM [notification]
character_event = {
	id = emf_notify.3010
	desc = emf_notify.3010.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3010.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3011 -- removed fortune_builder (Fortune Builder) from FROM [notification]
character_event = {
	id = emf_notify.3011
	desc = emf_notify.3011.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3011.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3012 -- removed midas_touched (Midas Touched) from FROM [notification]
character_event = {
	id = emf_notify.3012
	desc = emf_notify.3012.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3012.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3013 -- removed misguided_warrior (Misguided Warrior) from FROM [notification]
character_event = {
	id = emf_notify.3013
	desc = emf_notify.3013.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3013.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3014 -- removed tough_soldier (Tough Soldier) from FROM [notification]
character_event = {
	id = emf_notify.3014
	desc = emf_notify.3014.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3014.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3015 -- removed skilled_tactician (Skilled Tactician) from FROM [notification]
character_event = {
	id = emf_notify.3015
	desc = emf_notify.3015.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3015.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3016 -- removed brilliant_strategist (Brilliant Strategist) from FROM [notification]
character_event = {
	id = emf_notify.3016
	desc = emf_notify.3016.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3016.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3017 -- removed detached_priest (Detached Priest) from FROM [notification]
character_event = {
	id = emf_notify.3017
	desc = emf_notify.3017.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3017.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3018 -- removed martial_cleric (Dutiful Cleric) from FROM [notification]
character_event = {
	id = emf_notify.3018
	desc = emf_notify.3018.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3018.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3019 -- removed scholarly_theologian (Scholarly Theologian) from FROM [notification]
character_event = {
	id = emf_notify.3019
	desc = emf_notify.3019.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3019.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3020 -- removed mastermind_theologian (Mastermind Theologian) from FROM [notification]
character_event = {
	id = emf_notify.3020
	desc = emf_notify.3020.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3020.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3021 -- removed stressed (Stressed) from FROM [notification]
character_event = {
	id = emf_notify.3021
	desc = emf_notify.3021.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3021.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3022 -- removed depressed (Depressed) from FROM [notification]
character_event = {
	id = emf_notify.3022
	desc = emf_notify.3022.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3022.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3023 -- removed ill (Ill) from FROM [notification]
character_event = {
	id = emf_notify.3023
	desc = emf_notify.3023.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3023.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3024 -- removed pneumonic (Pneumonic) from FROM [notification]
character_event = {
	id = emf_notify.3024
	desc = emf_notify.3024.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3024.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3025 -- removed syphilitic (Gonorrhea) from FROM [notification]
character_event = {
	id = emf_notify.3025
	desc = emf_notify.3025.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3025.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3026 -- removed leper (Leper) from FROM [notification]
character_event = {
	id = emf_notify.3026
	desc = emf_notify.3026.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3026.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3027 -- removed wounded (Wounded) from FROM [notification]
character_event = {
	id = emf_notify.3027
	desc = emf_notify.3027.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3027.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3028 -- removed maimed (Maimed) from FROM [notification]
character_event = {
	id = emf_notify.3028
	desc = emf_notify.3028.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3028.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3029 -- removed infirm (Infirm) from FROM [notification]
character_event = {
	id = emf_notify.3029
	desc = emf_notify.3029.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3029.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3030 -- removed incapable (Incapable) from FROM [notification]
character_event = {
	id = emf_notify.3030
	desc = emf_notify.3030.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3030.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3031 -- removed drunkard (Drunkard) from FROM [notification]
character_event = {
	id = emf_notify.3031
	desc = emf_notify.3031.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3031.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3032 -- removed has_tuberculosis (Has Consumption) from FROM [notification]
character_event = {
	id = emf_notify.3032
	desc = emf_notify.3032.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3032.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3033 -- removed has_typhoid_fever (Has Slow Fever) from FROM [notification]
character_event = {
	id = emf_notify.3033
	desc = emf_notify.3033.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3033.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3034 -- removed has_typhus (Has Camp Fever) from FROM [notification]
character_event = {
	id = emf_notify.3034
	desc = emf_notify.3034.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3034.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3035 -- removed has_bubonic_plague (Has the Plague!) from FROM [notification]
character_event = {
	id = emf_notify.3035
	desc = emf_notify.3035.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3035.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3036 -- removed has_measles (Has Measles) from FROM [notification]
character_event = {
	id = emf_notify.3036
	desc = emf_notify.3036.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3036.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3037 -- removed has_small_pox (Has Smallpox) from FROM [notification]
character_event = {
	id = emf_notify.3037
	desc = emf_notify.3037.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3037.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3038 -- removed crusader (Crusader) from FROM [notification]
character_event = {
	id = emf_notify.3038
	desc = emf_notify.3038.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3038.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3039 -- removed bastard (Bastard) from FROM [notification]
character_event = {
	id = emf_notify.3039
	desc = emf_notify.3039.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3039.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3040 -- removed twin (Twin) from FROM [notification]
character_event = {
	id = emf_notify.3040
	desc = emf_notify.3040.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3040.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3041 -- removed legit_bastard (Legitimized Bastard) from FROM [notification]
character_event = {
	id = emf_notify.3041
	desc = emf_notify.3041.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3041.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3042 -- removed pregnant (Pregnant) from FROM [notification]
character_event = {
	id = emf_notify.3042
	desc = emf_notify.3042.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3042.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3043 -- removed excommunicated (Excommunicated) from FROM [notification]
character_event = {
	id = emf_notify.3043
	desc = emf_notify.3043.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3043.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3044 -- removed kinslayer (Kinslayer) from FROM [notification]
character_event = {
	id = emf_notify.3044
	desc = emf_notify.3044.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3044.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3045 -- removed homosexual (Homosexual) from FROM [notification]
character_event = {
	id = emf_notify.3045
	desc = emf_notify.3045.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3045.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3046 -- removed clubfooted (Clubfooted) from FROM [notification]
character_event = {
	id = emf_notify.3046
	desc = emf_notify.3046.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3046.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3047 -- removed harelip (Harelip) from FROM [notification]
character_event = {
	id = emf_notify.3047
	desc = emf_notify.3047.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3047.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3048 -- removed hunchback (Hunchback) from FROM [notification]
character_event = {
	id = emf_notify.3048
	desc = emf_notify.3048.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3048.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3049 -- removed lisp (Lisp) from FROM [notification]
character_event = {
	id = emf_notify.3049
	desc = emf_notify.3049.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3049.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3050 -- removed stutter (Stutter) from FROM [notification]
character_event = {
	id = emf_notify.3050
	desc = emf_notify.3050.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3050.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3051 -- removed fair (Attractive) from FROM [notification]
character_event = {
	id = emf_notify.3051
	desc = emf_notify.3051.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3051.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3052 -- removed ugly (Ugly) from FROM [notification]
character_event = {
	id = emf_notify.3052
	desc = emf_notify.3052.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3052.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3053 -- removed dwarf (Dwarf) from FROM [notification]
character_event = {
	id = emf_notify.3053
	desc = emf_notify.3053.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3053.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3054 -- removed genius (Genius) from FROM [notification]
character_event = {
	id = emf_notify.3054
	desc = emf_notify.3054.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3054.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3055 -- removed quick (Quick) from FROM [notification]
character_event = {
	id = emf_notify.3055
	desc = emf_notify.3055.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3055.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3056 -- removed slow (Slow) from FROM [notification]
character_event = {
	id = emf_notify.3056
	desc = emf_notify.3056.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3056.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3057 -- removed imbecile (Imbecile) from FROM [notification]
character_event = {
	id = emf_notify.3057
	desc = emf_notify.3057.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3057.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3058 -- removed inbred (Inbred) from FROM [notification]
character_event = {
	id = emf_notify.3058
	desc = emf_notify.3058.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3058.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3059 -- removed strong (Strong) from FROM [notification]
character_event = {
	id = emf_notify.3059
	desc = emf_notify.3059.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3059.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3060 -- removed weak (Weak) from FROM [notification]
character_event = {
	id = emf_notify.3060
	desc = emf_notify.3060.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3060.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3061 -- removed celibate (Celibate) from FROM [notification]
character_event = {
	id = emf_notify.3061
	desc = emf_notify.3061.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3061.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3062 -- removed hedonist (Hedonist) from FROM [notification]
character_event = {
	id = emf_notify.3062
	desc = emf_notify.3062.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3062.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3063 -- removed scholar (Scholar) from FROM [notification]
character_event = {
	id = emf_notify.3063
	desc = emf_notify.3063.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3063.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3064 -- removed gardener (Gardener) from FROM [notification]
character_event = {
	id = emf_notify.3064
	desc = emf_notify.3064.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3064.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3065 -- removed mystic (Mystic) from FROM [notification]
character_event = {
	id = emf_notify.3065
	desc = emf_notify.3065.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3065.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3066 -- removed impaler (Impaler) from FROM [notification]
character_event = {
	id = emf_notify.3066
	desc = emf_notify.3066.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3066.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3067 -- removed duelist (Duelist) from FROM [notification]
character_event = {
	id = emf_notify.3067
	desc = emf_notify.3067.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3067.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3068 -- removed hunter (Hunter) from FROM [notification]
character_event = {
	id = emf_notify.3068
	desc = emf_notify.3068.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3068.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3069 -- removed poet (Poet) from FROM [notification]
character_event = {
	id = emf_notify.3069
	desc = emf_notify.3069.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3069.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3070 -- removed falconer (Falconer) from FROM [notification]
character_event = {
	id = emf_notify.3070
	desc = emf_notify.3070.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3070.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3071 -- removed lustful (Lustful) from FROM [notification]
character_event = {
	id = emf_notify.3071
	desc = emf_notify.3071.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3071.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3072 -- removed chaste (Chaste) from FROM [notification]
character_event = {
	id = emf_notify.3072
	desc = emf_notify.3072.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3072.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3073 -- removed gluttonous (Gluttonous) from FROM [notification]
character_event = {
	id = emf_notify.3073
	desc = emf_notify.3073.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3073.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3074 -- removed temperate (Temperate) from FROM [notification]
character_event = {
	id = emf_notify.3074
	desc = emf_notify.3074.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3074.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3075 -- removed greedy (Greedy) from FROM [notification]
character_event = {
	id = emf_notify.3075
	desc = emf_notify.3075.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3075.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3076 -- removed charitable (Charitable) from FROM [notification]
character_event = {
	id = emf_notify.3076
	desc = emf_notify.3076.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3076.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3077 -- removed slothful (Slothful) from FROM [notification]
character_event = {
	id = emf_notify.3077
	desc = emf_notify.3077.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3077.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3078 -- removed diligent (Diligent) from FROM [notification]
character_event = {
	id = emf_notify.3078
	desc = emf_notify.3078.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3078.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3079 -- removed envious (Envious) from FROM [notification]
character_event = {
	id = emf_notify.3079
	desc = emf_notify.3079.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3079.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3080 -- removed kind (Kind) from FROM [notification]
character_event = {
	id = emf_notify.3080
	desc = emf_notify.3080.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3080.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3081 -- removed wroth (Wroth) from FROM [notification]
character_event = {
	id = emf_notify.3081
	desc = emf_notify.3081.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3081.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3082 -- removed patient (Patient) from FROM [notification]
character_event = {
	id = emf_notify.3082
	desc = emf_notify.3082.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3082.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3083 -- removed proud (Proud) from FROM [notification]
character_event = {
	id = emf_notify.3083
	desc = emf_notify.3083.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3083.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3084 -- removed humble (Humble) from FROM [notification]
character_event = {
	id = emf_notify.3084
	desc = emf_notify.3084.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3084.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3085 -- removed deceitful (Deceitful) from FROM [notification]
character_event = {
	id = emf_notify.3085
	desc = emf_notify.3085.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3085.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3086 -- removed honest (Honest) from FROM [notification]
character_event = {
	id = emf_notify.3086
	desc = emf_notify.3086.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3086.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3087 -- removed craven (Craven) from FROM [notification]
character_event = {
	id = emf_notify.3087
	desc = emf_notify.3087.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3087.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3088 -- removed brave (Brave) from FROM [notification]
character_event = {
	id = emf_notify.3088
	desc = emf_notify.3088.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3088.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3089 -- removed shy (Shy) from FROM [notification]
character_event = {
	id = emf_notify.3089
	desc = emf_notify.3089.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3089.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3090 -- removed gregarious (Gregarious) from FROM [notification]
character_event = {
	id = emf_notify.3090
	desc = emf_notify.3090.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3090.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3091 -- removed ambitious (Ambitious) from FROM [notification]
character_event = {
	id = emf_notify.3091
	desc = emf_notify.3091.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3091.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3092 -- removed content (Content) from FROM [notification]
character_event = {
	id = emf_notify.3092
	desc = emf_notify.3092.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3092.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3093 -- removed arbitrary (Arbitrary) from FROM [notification]
character_event = {
	id = emf_notify.3093
	desc = emf_notify.3093.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3093.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3094 -- removed just (Just) from FROM [notification]
character_event = {
	id = emf_notify.3094
	desc = emf_notify.3094.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3094.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3095 -- removed cynical (Cynical) from FROM [notification]
character_event = {
	id = emf_notify.3095
	desc = emf_notify.3095.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3095.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3096 -- removed zealous (Zealous) from FROM [notification]
character_event = {
	id = emf_notify.3096
	desc = emf_notify.3096.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3096.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3097 -- removed paranoid (Paranoid) from FROM [notification]
character_event = {
	id = emf_notify.3097
	desc = emf_notify.3097.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3097.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3098 -- removed trusting (Trusting) from FROM [notification]
character_event = {
	id = emf_notify.3098
	desc = emf_notify.3098.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3098.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3099 -- removed cruel (Cruel) from FROM [notification]
character_event = {
	id = emf_notify.3099
	desc = emf_notify.3099.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3099.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3100 -- removed light_foot_leader (Light Foot Leader) from FROM [notification]
character_event = {
	id = emf_notify.3100
	desc = emf_notify.3100.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3100.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3101 -- removed heavy_infantry_leader (Heavy Infantry Leader) from FROM [notification]
character_event = {
	id = emf_notify.3101
	desc = emf_notify.3101.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3101.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3102 -- removed cavalry_leader (Cavalry Leader) from FROM [notification]
character_event = {
	id = emf_notify.3102
	desc = emf_notify.3102.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3102.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3103 -- removed inspiring_leader (Inspiring Leader) from FROM [notification]
character_event = {
	id = emf_notify.3103
	desc = emf_notify.3103.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3103.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3104 -- removed trickster (Trickster) from FROM [notification]
character_event = {
	id = emf_notify.3104
	desc = emf_notify.3104.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3104.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3105 -- removed organizer (Organizer) from FROM [notification]
character_event = {
	id = emf_notify.3105
	desc = emf_notify.3105.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3105.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3106 -- removed defensive_leader (Defender) from FROM [notification]
character_event = {
	id = emf_notify.3106
	desc = emf_notify.3106.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3106.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3107 -- removed experimenter (Direct Leader) from FROM [notification]
character_event = {
	id = emf_notify.3107
	desc = emf_notify.3107.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3107.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3108 -- removed flanker (Flanker) from FROM [notification]
character_event = {
	id = emf_notify.3108
	desc = emf_notify.3108.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3108.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3109 -- removed aggressive_leader (Aggressive Leader) from FROM [notification]
character_event = {
	id = emf_notify.3109
	desc = emf_notify.3109.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3109.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3110 -- removed siege_leader (Siege Leader) from FROM [notification]
character_event = {
	id = emf_notify.3110
	desc = emf_notify.3110.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3110.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3111 -- removed mujahid (Mujahid) from FROM [notification]
character_event = {
	id = emf_notify.3111
	desc = emf_notify.3111.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3111.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3112 -- removed hajjaj (Hajajj) from FROM [notification]
character_event = {
	id = emf_notify.3112
	desc = emf_notify.3112.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3112.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3113 -- removed on_hajj (On Hajj) from FROM [notification]
character_event = {
	id = emf_notify.3113
	desc = emf_notify.3113.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3113.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3114 -- removed faqih (Faqih) from FROM [notification]
character_event = {
	id = emf_notify.3114
	desc = emf_notify.3114.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3114.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3115 -- removed hafiz (Hafiz) from FROM [notification]
character_event = {
	id = emf_notify.3115
	desc = emf_notify.3115.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3115.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3116 -- removed sayyid (Sayyid) from FROM [notification]
character_event = {
	id = emf_notify.3116
	desc = emf_notify.3116.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3116.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3117 -- removed pilgrim (Pilgrim) from FROM [notification]
character_event = {
	id = emf_notify.3117
	desc = emf_notify.3117.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3117.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3118 -- removed mirza (Mirza) from FROM [notification]
character_event = {
	id = emf_notify.3118
	desc = emf_notify.3118.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3118.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3119 -- removed scarred (Scarred) from FROM [notification]
character_event = {
	id = emf_notify.3119
	desc = emf_notify.3119.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3119.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3120 -- removed eunuch (Eunuch) from FROM [notification]
character_event = {
	id = emf_notify.3120
	desc = emf_notify.3120.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3120.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3121 -- removed blinded (Blinded) from FROM [notification]
character_event = {
	id = emf_notify.3121
	desc = emf_notify.3121.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3121.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3122 -- removed born_in_the_purple (Born in the Purple) from FROM [notification]
character_event = {
	id = emf_notify.3122
	desc = emf_notify.3122.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3122.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3123 -- removed augustus (Augustus) from FROM [notification]
character_event = {
	id = emf_notify.3123
	desc = emf_notify.3123.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3123.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3124 -- removed flat_terrain_leader (Flat Terrain Expert) from FROM [notification]
character_event = {
	id = emf_notify.3124
	desc = emf_notify.3124.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3124.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3125 -- removed rough_terrain_leader (Rough Terrain Expert) from FROM [notification]
character_event = {
	id = emf_notify.3125
	desc = emf_notify.3125.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3125.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3126 -- removed mountain_terrain_leader (Mountain Expert) from FROM [notification]
character_event = {
	id = emf_notify.3126
	desc = emf_notify.3126.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3126.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3127 -- removed desert_terrain_leader (Desert Expert) from FROM [notification]
character_event = {
	id = emf_notify.3127
	desc = emf_notify.3127.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3127.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3128 -- removed holy_warrior (Holy Warrior) from FROM [notification]
character_event = {
	id = emf_notify.3128
	desc = emf_notify.3128.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3128.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3129 -- removed unyielding_leader (Unyielding) from FROM [notification]
character_event = {
	id = emf_notify.3129
	desc = emf_notify.3129.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3129.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3130 -- removed has_aztec_disease (Syphilitic) from FROM [notification]
character_event = {
	id = emf_notify.3130
	desc = emf_notify.3130.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3130.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3131 -- removed child_of_consort (Child of Concubine) from FROM [notification]
character_event = {
	id = emf_notify.3131
	desc = emf_notify.3131.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3131.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3132 -- removed peasant_leader (Peasant Leader) from FROM [notification]
character_event = {
	id = emf_notify.3132
	desc = emf_notify.3132.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3132.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3133 -- removed heresiarch (Heresiarch) from FROM [notification]
character_event = {
	id = emf_notify.3133
	desc = emf_notify.3133.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3133.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3134 -- removed berserker (Berserker) from FROM [notification]
character_event = {
	id = emf_notify.3134
	desc = emf_notify.3134.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3134.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3135 -- removed varangian (Varangian) from FROM [notification]
character_event = {
	id = emf_notify.3135
	desc = emf_notify.3135.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3135.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3136 -- removed saoshyant (Saoshyant) from FROM [notification]
character_event = {
	id = emf_notify.3136
	desc = emf_notify.3136.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3136.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3137 -- removed saoshyant_descendant (Saoshyant Descendant) from FROM [notification]
character_event = {
	id = emf_notify.3137
	desc = emf_notify.3137.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3137.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3138 -- removed viking (Viking) from FROM [notification]
character_event = {
	id = emf_notify.3138
	desc = emf_notify.3138.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3138.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3139 -- removed monk (Monk) from FROM [notification]
character_event = {
	id = emf_notify.3139
	desc = emf_notify.3139.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3139.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3140 -- removed nun (Nun) from FROM [notification]
character_event = {
	id = emf_notify.3140
	desc = emf_notify.3140.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3140.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3141 -- removed on_pilgrimage (On pilgrimage) from FROM [notification]
character_event = {
	id = emf_notify.3141
	desc = emf_notify.3141.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3141.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3142 -- removed sickly (Sickly) from FROM [notification]
character_event = {
	id = emf_notify.3142
	desc = emf_notify.3142.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3142.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3143 -- removed mutazilite (Mu'tazilite) from FROM [notification]
character_event = {
	id = emf_notify.3143
	desc = emf_notify.3143.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3143.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3144 -- removed ashari (Ash'ari) from FROM [notification]
character_event = {
	id = emf_notify.3144
	desc = emf_notify.3144.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3144.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3145 -- removed sympathy_christendom (Sympathy for Christendom) from FROM [notification]
character_event = {
	id = emf_notify.3145
	desc = emf_notify.3145.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3145.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3146 -- removed sympathy_islam (Sympathy for Islam) from FROM [notification]
character_event = {
	id = emf_notify.3146
	desc = emf_notify.3146.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3146.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3147 -- removed sympathy_pagans (Sympathy for Pagans) from FROM [notification]
character_event = {
	id = emf_notify.3147
	desc = emf_notify.3147.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3147.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3148 -- removed sympathy_zoroastrianism (Sympathy for Zoroastrianism) from FROM [notification]
character_event = {
	id = emf_notify.3148
	desc = emf_notify.3148.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3148.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3149 -- removed sympathy_judaism (Sympathy for Judaism) from FROM [notification]
character_event = {
	id = emf_notify.3149
	desc = emf_notify.3149.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3149.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3150 -- removed bad_priest_christian (Wicked Priest) from FROM [notification]
character_event = {
	id = emf_notify.3150
	desc = emf_notify.3150.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3150.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3151 -- removed bad_priest_muslim (Wicked Caliph) from FROM [notification]
character_event = {
	id = emf_notify.3151
	desc = emf_notify.3151.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3151.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3152 -- removed bad_priest_norse (Unworthy Priest) from FROM [notification]
character_event = {
	id = emf_notify.3152
	desc = emf_notify.3152.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3152.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3153 -- removed bad_priest_tengri (Unworthy Priest) from FROM [notification]
character_event = {
	id = emf_notify.3153
	desc = emf_notify.3153.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3153.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3154 -- removed bad_priest_zoroastrian (Immoral Priest) from FROM [notification]
character_event = {
	id = emf_notify.3154
	desc = emf_notify.3154.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3154.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3155 -- removed bad_priest_aztec (Unworthy Priest) from FROM [notification]
character_event = {
	id = emf_notify.3155
	desc = emf_notify.3155.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3155.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3156 -- removed narrow_flank_leader (Battlefield Terrain Master) from FROM [notification]
character_event = {
	id = emf_notify.3156
	desc = emf_notify.3156.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3156.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3157 -- removed brahmin (Brahmin) from FROM [notification]
character_event = {
	id = emf_notify.3157
	desc = emf_notify.3157.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3157.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3158 -- removed kshatriya (Kshatriya) from FROM [notification]
character_event = {
	id = emf_notify.3158
	desc = emf_notify.3158.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3158.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3159 -- removed vaishya (Vaishya) from FROM [notification]
character_event = {
	id = emf_notify.3159
	desc = emf_notify.3159.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3159.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3160 -- removed sympathy_indian (Sympathy for Indian religons) from FROM [notification]
character_event = {
	id = emf_notify.3160
	desc = emf_notify.3160.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3160.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3161 -- removed shaivist_hindu (Shaivist) from FROM [notification]
character_event = {
	id = emf_notify.3161
	desc = emf_notify.3161.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3161.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3162 -- removed vaishnavist_hindu (Vaishnavist) from FROM [notification]
character_event = {
	id = emf_notify.3162
	desc = emf_notify.3162.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3162.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3163 -- removed shaktist_hindu (Shaktist) from FROM [notification]
character_event = {
	id = emf_notify.3163
	desc = emf_notify.3163.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3163.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3164 -- removed smartist_hindu (Smartist) from FROM [notification]
character_event = {
	id = emf_notify.3164
	desc = emf_notify.3164.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3164.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3165 -- removed mahayana_buddhist (Mahayana Buddhist) from FROM [notification]
character_event = {
	id = emf_notify.3165
	desc = emf_notify.3165.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3165.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3166 -- removed vajrayana_buddhist (Vajrayana Buddhist) from FROM [notification]
character_event = {
	id = emf_notify.3166
	desc = emf_notify.3166.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3166.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3167 -- removed theravada_buddhist (Theravada Buddhist) from FROM [notification]
character_event = {
	id = emf_notify.3167
	desc = emf_notify.3167.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3167.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3168 -- removed digambara_jain (Digambara Jain) from FROM [notification]
character_event = {
	id = emf_notify.3168
	desc = emf_notify.3168.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3168.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3169 -- removed svetambara_jain (Svetambara Jain) from FROM [notification]
character_event = {
	id = emf_notify.3169
	desc = emf_notify.3169.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3169.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3170 -- removed decadent (Decadent) from FROM [notification]
character_event = {
	id = emf_notify.3170
	desc = emf_notify.3170.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3170.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3171 -- removed reincarnation (Reincarnation of [Reincarnation.GetBestName]) from FROM [notification]
character_event = {
	id = emf_notify.3171
	desc = emf_notify.3171.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3171.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3172 -- removed war_elephant_leader (War Elephant Leader) from FROM [notification]
character_event = {
	id = emf_notify.3172
	desc = emf_notify.3172.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3172.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3173 -- removed jungle_terrain_leader (Jungle Expert) from FROM [notification]
character_event = {
	id = emf_notify.3173
	desc = emf_notify.3173.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3173.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3174 -- removed in_hiding (In Hiding) from FROM [notification]
character_event = {
	id = emf_notify.3174
	desc = emf_notify.3174.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3174.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3175 -- removed winter_soldier (Winter Soldier) from FROM [notification]
character_event = {
	id = emf_notify.3175
	desc = emf_notify.3175.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3175.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3176 -- removed seducer (Master Seducer) from FROM [notification]
character_event = {
	id = emf_notify.3176
	desc = emf_notify.3176.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3176.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3177 -- removed seductress (Master Seductress) from FROM [notification]
character_event = {
	id = emf_notify.3177
	desc = emf_notify.3177.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3177.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3178 -- removed administrator (Administrator) from FROM [notification]
character_event = {
	id = emf_notify.3178
	desc = emf_notify.3178.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3178.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3179 -- removed architect (Architect) from FROM [notification]
character_event = {
	id = emf_notify.3179
	desc = emf_notify.3179.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3179.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3180 -- removed strategist (Strategist) from FROM [notification]
character_event = {
	id = emf_notify.3180
	desc = emf_notify.3180.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3180.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3181 -- removed socializer (Socializer) from FROM [notification]
character_event = {
	id = emf_notify.3181
	desc = emf_notify.3181.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3181.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3182 -- removed schemer (Master Schemer) from FROM [notification]
character_event = {
	id = emf_notify.3182
	desc = emf_notify.3182.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3182.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3183 -- removed theologian (Theologian) from FROM [notification]
character_event = {
	id = emf_notify.3183
	desc = emf_notify.3183.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3183.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3184 -- removed gamer (Game Master) from FROM [notification]
character_event = {
	id = emf_notify.3184
	desc = emf_notify.3184.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3184.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3185 -- removed adventurer (Adventurer) from FROM [notification]
character_event = {
	id = emf_notify.3185
	desc = emf_notify.3185.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3185.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3186 -- removed erudite (Erudite) from FROM [notification]
character_event = {
	id = emf_notify.3186
	desc = emf_notify.3186.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3186.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3187 -- removed stubborn (Stubborn) from FROM [notification]
character_event = {
	id = emf_notify.3187
	desc = emf_notify.3187.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3187.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3188 -- removed haughty (Haughty) from FROM [notification]
character_event = {
	id = emf_notify.3188
	desc = emf_notify.3188.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3188.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3189 -- removed affectionate (Affectionate) from FROM [notification]
character_event = {
	id = emf_notify.3189
	desc = emf_notify.3189.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3189.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3190 -- removed timid (Timid) from FROM [notification]
character_event = {
	id = emf_notify.3190
	desc = emf_notify.3190.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3190.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3191 -- removed rowdy (Rowdy) from FROM [notification]
character_event = {
	id = emf_notify.3191
	desc = emf_notify.3191.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3191.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3192 -- removed willful (Willful) from FROM [notification]
character_event = {
	id = emf_notify.3192
	desc = emf_notify.3192.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3192.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3193 -- removed brooding (Brooding) from FROM [notification]
character_event = {
	id = emf_notify.3193
	desc = emf_notify.3193.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3193.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3194 -- removed indolent (Indolent) from FROM [notification]
character_event = {
	id = emf_notify.3194
	desc = emf_notify.3194.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3194.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3195 -- removed playful (Playful) from FROM [notification]
character_event = {
	id = emf_notify.3195
	desc = emf_notify.3195.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3195.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3196 -- removed conscientious (Conscientious) from FROM [notification]
character_event = {
	id = emf_notify.3196
	desc = emf_notify.3196.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3196.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3197 -- removed fussy (Fussy) from FROM [notification]
character_event = {
	id = emf_notify.3197
	desc = emf_notify.3197.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3197.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3198 -- removed curious (Curious) from FROM [notification]
character_event = {
	id = emf_notify.3198
	desc = emf_notify.3198.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3198.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3199 -- removed idolizer (Idolizer) from FROM [notification]
character_event = {
	id = emf_notify.3199
	desc = emf_notify.3199.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3199.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3200 -- removed horse (Horse) from FROM [notification]
character_event = {
	id = emf_notify.3200
	desc = emf_notify.3200.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3200.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3201 -- removed robust (Brawny) from FROM [notification]
character_event = {
	id = emf_notify.3201
	desc = emf_notify.3201.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3201.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3202 -- removed feeble (Frail) from FROM [notification]
character_event = {
	id = emf_notify.3202
	desc = emf_notify.3202.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3202.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3203 -- removed shrewd (Shrewd) from FROM [notification]
character_event = {
	id = emf_notify.3203
	desc = emf_notify.3203.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3203.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3204 -- removed dull (Dull) from FROM [notification]
character_event = {
	id = emf_notify.3204
	desc = emf_notify.3204.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3204.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3205 -- removed novice_diplomat (Novice Diplomat) from FROM [notification]
character_event = {
	id = emf_notify.3205
	desc = emf_notify.3205.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3205.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3206 -- removed trained_diplomat (Trained Diplomat) from FROM [notification]
character_event = {
	id = emf_notify.3206
	desc = emf_notify.3206.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3206.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3207 -- removed skilled_diplomat (Skilled Diplomat) from FROM [notification]
character_event = {
	id = emf_notify.3207
	desc = emf_notify.3207.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3207.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3208 -- removed master_diplomat (Master Diplomat) from FROM [notification]
character_event = {
	id = emf_notify.3208
	desc = emf_notify.3208.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3208.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3209 -- removed poor_warrior (Novice Fighter) from FROM [notification]
character_event = {
	id = emf_notify.3209
	desc = emf_notify.3209.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3209.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3210 -- removed trained_warrior (Trained Fighter) from FROM [notification]
character_event = {
	id = emf_notify.3210
	desc = emf_notify.3210.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3210.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3211 -- removed skilled_warrior (Skilled Fighter) from FROM [notification]
character_event = {
	id = emf_notify.3211
	desc = emf_notify.3211.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3211.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3212 -- removed master_warrior (Formidable Fighter) from FROM [notification]
character_event = {
	id = emf_notify.3212
	desc = emf_notify.3212.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3212.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3213 -- removed tall (Tall) from FROM [notification]
character_event = {
	id = emf_notify.3213
	desc = emf_notify.3213.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3213.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3214 -- removed agile (Agile) from FROM [notification]
character_event = {
	id = emf_notify.3214
	desc = emf_notify.3214.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3214.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3215 -- removed perceptive (Perceptive) from FROM [notification]
character_event = {
	id = emf_notify.3215
	desc = emf_notify.3215.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3215.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3216 -- removed melodious_voice (Melodious Voice) from FROM [notification]
character_event = {
	id = emf_notify.3216
	desc = emf_notify.3216.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3216.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3217 -- removed powerful_voice (Powerful Voice) from FROM [notification]
character_event = {
	id = emf_notify.3217
	desc = emf_notify.3217.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3217.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3218 -- removed calm_voice (Calm Voice) from FROM [notification]
character_event = {
	id = emf_notify.3218
	desc = emf_notify.3218.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3218.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3219 -- removed ambidextrous (Ambidextrous) from FROM [notification]
character_event = {
	id = emf_notify.3219
	desc = emf_notify.3219.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3219.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3220 -- removed lefthanded (Lefthanded) from FROM [notification]
character_event = {
	id = emf_notify.3220
	desc = emf_notify.3220.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3220.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3221 -- removed wrymouth (Wrymouth) from FROM [notification]
character_event = {
	id = emf_notify.3221
	desc = emf_notify.3221.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3221.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3222 -- removed deaf (Deaf) from FROM [notification]
character_event = {
	id = emf_notify.3222
	desc = emf_notify.3222.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3222.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3223 -- removed absentminded (Absent-Minded) from FROM [notification]
character_event = {
	id = emf_notify.3223
	desc = emf_notify.3223.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3223.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3224 -- removed fertile (Fertile) from FROM [notification]
character_event = {
	id = emf_notify.3224
	desc = emf_notify.3224.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3224.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3225 -- removed imposing (Imposing) from FROM [notification]
character_event = {
	id = emf_notify.3225
	desc = emf_notify.3225.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3225.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3226 -- removed isis (Mother of the Universe) from FROM [notification]
character_event = {
	id = emf_notify.3226
	desc = emf_notify.3226.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3226.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3227 -- removed immortal (Immortal) from FROM [notification]
character_event = {
	id = emf_notify.3227
	desc = emf_notify.3227.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3227.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3228 -- removed traveling (Traveling) from FROM [notification]
character_event = {
	id = emf_notify.3228
	desc = emf_notify.3228.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3228.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3229 -- removed lucky_ruler (Lucky Ruler) from FROM [notification]
character_event = {
	id = emf_notify.3229
	desc = emf_notify.3229.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3229.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3230 -- removed conqueror (Conqueror) from FROM [notification]
character_event = {
	id = emf_notify.3230
	desc = emf_notify.3230.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3230.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3231 -- removed commander1 (Respected Commander) from FROM [notification]
character_event = {
	id = emf_notify.3231
	desc = emf_notify.3231.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3231.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3232 -- removed commander2 (Distinguished Commander) from FROM [notification]
character_event = {
	id = emf_notify.3232
	desc = emf_notify.3232.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3232.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3233 -- removed commander3 (Renowned Commander) from FROM [notification]
character_event = {
	id = emf_notify.3233
	desc = emf_notify.3233.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3233.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3234 -- removed commander4 (Legendary Commander) from FROM [notification]
character_event = {
	id = emf_notify.3234
	desc = emf_notify.3234.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3234.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3235 -- removed inheritance_disabled (Cannot Inherit) from FROM [notification]
character_event = {
	id = emf_notify.3235
	desc = emf_notify.3235.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3235.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3236 -- removed raider (Raider) from FROM [notification]
character_event = {
	id = emf_notify.3236
	desc = emf_notify.3236.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3236.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3237 -- removed roma_victrix (Roma Victrix) from FROM [notification]
character_event = {
	id = emf_notify.3237
	desc = emf_notify.3237.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3237.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3238 -- removed pf_loyalist (Loyalist) from FROM [notification]
character_event = {
	id = emf_notify.3238
	desc = emf_notify.3238.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3238.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3239 -- removed pf_neutral (Neutral) from FROM [notification]
character_event = {
	id = emf_notify.3239
	desc = emf_notify.3239.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3239.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3240 -- removed pf_rebel (Rebel) from FROM [notification]
character_event = {
	id = emf_notify.3240
	desc = emf_notify.3240.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3240.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3241 -- removed imperial_bureaucrat (Imperial Bureaucrat) from FROM [notification]
character_event = {
	id = emf_notify.3241
	desc = emf_notify.3241.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3241.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3242 -- removed imperial_courtier (Imperial Courtier) from FROM [notification]
character_event = {
	id = emf_notify.3242
	desc = emf_notify.3242.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3242.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3243 -- removed imperial_guard (Imperial Guard) from FROM [notification]
character_event = {
	id = emf_notify.3243
	desc = emf_notify.3243.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3243.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3244 -- removed dynasty_decadence_low (Decadent Dynasty) from FROM [notification]
character_event = {
	id = emf_notify.3244
	desc = emf_notify.3244.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3244.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3245 -- removed dynasty_decadence_med (Very Decadent Dynasty) from FROM [notification]
character_event = {
	id = emf_notify.3245
	desc = emf_notify.3245.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3245.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3246 -- removed dynasty_decadence_high (Extremely Decadent Dynasty) from FROM [notification]
character_event = {
	id = emf_notify.3246
	desc = emf_notify.3246.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3246.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3247 -- removed adopted (Adopted) from FROM [notification]
character_event = {
	id = emf_notify.3247
	desc = emf_notify.3247.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3247.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3248 -- removed alexandrine (Alexandrine) from FROM [notification]
character_event = {
	id = emf_notify.3248
	desc = emf_notify.3248.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3248.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3249 -- removed antiochene (Antiochian) from FROM [notification]
character_event = {
	id = emf_notify.3249
	desc = emf_notify.3249.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3249.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3250 -- removed court_anarchy (Court Anarchy) from FROM [notification]
character_event = {
	id = emf_notify.3250
	desc = emf_notify.3250.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3250.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3251 -- removed cult_of_lucifer (Cult of Lucifer) from FROM [notification]
character_event = {
	id = emf_notify.3251
	desc = emf_notify.3251.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3251.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3252 -- removed desert_father (Desert Father) from FROM [notification]
character_event = {
	id = emf_notify.3252
	desc = emf_notify.3252.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3252.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3253 -- removed desert_mother (Desert Mother) from FROM [notification]
character_event = {
	id = emf_notify.3253
	desc = emf_notify.3253.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3253.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3254 -- removed doctores (Doctores) from FROM [notification]
character_event = {
	id = emf_notify.3254
	desc = emf_notify.3254.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3254.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3255 -- removed druze_ajawid (Ajawid) from FROM [notification]
character_event = {
	id = emf_notify.3255
	desc = emf_notify.3255.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3255.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3256 -- removed druze_juhhal (Juhhal) from FROM [notification]
character_event = {
	id = emf_notify.3256
	desc = emf_notify.3256.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3256.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3257 -- removed druze_uqqal (Uqqal) from FROM [notification]
character_event = {
	id = emf_notify.3257
	desc = emf_notify.3257.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3257.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3258 -- removed hurufi_diwan (Diwan Poet) from FROM [notification]
character_event = {
	id = emf_notify.3258
	desc = emf_notify.3258.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3258.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3259 -- removed hurufi_mystic_a (Sufi Initiate) from FROM [notification]
character_event = {
	id = emf_notify.3259
	desc = emf_notify.3259.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3259.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3260 -- removed hurufi_mystic_b (Sufi Adept) from FROM [notification]
character_event = {
	id = emf_notify.3260
	desc = emf_notify.3260.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3260.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3261 -- removed hurufi_mystic_c (Sufi Master) from FROM [notification]
character_event = {
	id = emf_notify.3261
	desc = emf_notify.3261.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3261.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3262 -- removed iconoclast_trait (Icon-Breaker) from FROM [notification]
character_event = {
	id = emf_notify.3262
	desc = emf_notify.3262.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3262.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3263 -- removed imamah_claimant (Isma'ili Claimant) from FROM [notification]
character_event = {
	id = emf_notify.3263
	desc = emf_notify.3263.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3263.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3264 -- removed kharijite_kafir (Kafir) from FROM [notification]
character_event = {
	id = emf_notify.3264
	desc = emf_notify.3264.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3264.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3265 -- removed koasasa_taus (Koasasa) from FROM [notification]
character_event = {
	id = emf_notify.3265
	desc = emf_notify.3265.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3265.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3266 -- removed koasasa_israfel (Koasasa) from FROM [notification]
character_event = {
	id = emf_notify.3266
	desc = emf_notify.3266.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3266.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3267 -- removed koasasa_azrael (Koasasa) from FROM [notification]
character_event = {
	id = emf_notify.3267
	desc = emf_notify.3267.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3267.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3268 -- removed koasasa_mihael (Koasasa) from FROM [notification]
character_event = {
	id = emf_notify.3268
	desc = emf_notify.3268.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3268.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3269 -- removed koasasa_dardael (Koasasa) from FROM [notification]
character_event = {
	id = emf_notify.3269
	desc = emf_notify.3269.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3269.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3270 -- removed koasasa_samael (Koasasa) from FROM [notification]
character_event = {
	id = emf_notify.3270
	desc = emf_notify.3270.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3270.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3271 -- removed koasasa_nurael (Koasasa) from FROM [notification]
character_event = {
	id = emf_notify.3271
	desc = emf_notify.3271.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3271.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3272 -- removed messalian_master (Perfection) from FROM [notification]
character_event = {
	id = emf_notify.3272
	desc = emf_notify.3272.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3272.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3273 -- removed novellani (Novellani) from FROM [notification]
character_event = {
	id = emf_notify.3273
	desc = emf_notify.3273.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3273.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3274 -- removed perfecti (Perfecti) from FROM [notification]
character_event = {
	id = emf_notify.3274
	desc = emf_notify.3274.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3274.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3275 -- removed reincarnated (Has Been Reincarnated) from FROM [notification]
character_event = {
	id = emf_notify.3275
	desc = emf_notify.3275.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3275.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3276 -- removed saint (Saint) from FROM [notification]
character_event = {
	id = emf_notify.3276
	desc = emf_notify.3276.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3276.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3277 -- removed sandaliati (Sandaliati) from FROM [notification]
character_event = {
	id = emf_notify.3277
	desc = emf_notify.3277.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3277.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3278 -- removed yazidi_pilgrim (Yazidi Pilgrim) from FROM [notification]
character_event = {
	id = emf_notify.3278
	desc = emf_notify.3278.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3278.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3279 -- removed crowned (Crowned) from FROM [notification]
character_event = {
	id = emf_notify.3279
	desc = emf_notify.3279.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3279.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3280 -- removed crowned_by_pope (Crowned By The Pope) from FROM [notification]
character_event = {
	id = emf_notify.3280
	desc = emf_notify.3280.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3280.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3281 -- removed strong_basileus (Strong Basileus) from FROM [notification]
character_event = {
	id = emf_notify.3281
	desc = emf_notify.3281.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3281.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3282 -- removed uncrowned (Uncrowned) from FROM [notification]
character_event = {
	id = emf_notify.3282
	desc = emf_notify.3282.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3282.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3283 -- removed weak_basileus (Coronated Basileus) from FROM [notification]
character_event = {
	id = emf_notify.3283
	desc = emf_notify.3283.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3283.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3284 -- removed martyr (Martyr) from FROM [notification]
character_event = {
	id = emf_notify.3284
	desc = emf_notify.3284.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3284.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}

# emf_notify.3285 -- removed paragon (Paragon) from FROM [notification]
character_event = {
	id = emf_notify.3285
	desc = emf_notify.3285.desc
	picture = GFX_evt_emissary

	desc = {
		text = emf_notify.3285.desc_w_relation
		trigger = {
			OR = {
				dynasty = FROM
				is_close_relative = FROM
				is_married = FROM
				any_ward = { character = FROM }
				guardian = { character = FROM }
			}
		}
	}

	is_triggered_only = yes
	notification = yes

	option = { name = OK }
}
