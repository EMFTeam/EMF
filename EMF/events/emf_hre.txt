# -*- ck2.events -*-

namespace = emf_hre

# emf_hre.0 to emf_hre.49 reserved for karling-usurper mechanic

# emf_hre.0 -- handle when a non-karling becomes king of a carolingien kingdom
character_event = {
	id = emf_hre.0

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		# Traditional Karling titles only
		FROM = { emf_is_karling_title = yes }
		# Previous title holder was a Karling, and we are not a Karling
		FROMFROM = {
			emf_is_karling_dynasty = yes
			NOT = { dynasty = ROOT }
		}
	}

	immediate = {
		FROMFROM = { save_event_target_as = emf_prev_holder }
		FROM = {
			save_event_target_as = emf_title
			if = {
				limit = { NOT = { has_flag = emf_hre_karlings_first_lost_title } }
				set_flag = emf_hre_karlings_first_lost_title
			}
			set_flag = emf_karlings_last_lost_title
			# TODO: announcement events are not just for k_france & k_germany, yo!
		}
		log = "INFO: emf_hre.0: karling title [From.GetID] usurped/inherited by [Root.GetTitledFirstName] [Root.GetOnlyDynastyName] (#[Root.GetID]/[Root.PrimaryTitle.GetID]) from [FromFrom.GetTitledFirstName] [FromFrom.GetOnlyDynastyName] (#[FromFrom.GetID]/[FromFrom.PrimaryTitle.GetID])"
		character_event = { id = emf_hre.10 } # Become a karling-usurper if qualified / relevant
	}
}


# emf_hre.10 -- if appropriate, give some temporary bonuses to non-Karling characters whom usurp (or inherit) a Karling
#			   title from a Karling, if this is their first such rodeo. we're only going to do this when there are still
#			   other Karling kings or emperors in power. this mechanic is to promote the rise of an "Otto" [the Great] and
#			   generally to combat the snowball effect of dynastic entrenchment somewhat intrinsic to CK2: most folks
#			   would prefer if the Karlings didn't rule the world forever from 867 starts, take joy in seeing them fall,
#			   and would *probably* be pretty stoked to see the rise of a new great dynasty.
character_event = {
	id = emf_hre.10

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes
	ai = yes

	trigger = {
		emf_can_be_karling_usurper = yes
		# Must hold a Carolingien kingdom (event_target:emf_title) or now be the HRE
		OR = {
			# We've usurped/inherited the HRE from a Karling
			event_target:emf_title = { emf_is_hre = yes }
			# Or, still makes sense to be trying to restore the HRE
			emf_is_hre_being_restored = yes
		}
		# Have not fired this before for this character (or his predecessor(s), since this is inherited)
		NOT = { trait = karling_usurper }
		# Is this mechanic even in force?
		emf_are_karling_usurpers_enabled = yes
	}

	immediate = {
		log = "---> a karling-usurper is born!"
		set_flag = karling_usurper
		add_trait = karling_usurper
		add_character_modifier = { name = karling_usurper_modifier duration = -1 } # We'll expire it ourselves
		reverse_opinion = { who = event_target:isis modifier = karling_usurper_tom }
		set_variable = { which = "karling_usurper_years_left" which = event_target:duat }
		set_variable = { which = "karling_usurper_years_elapsed" value = 0 }

		# On the next day, give a temp. opinion bonus from vassals that aren't Karlings. We wait a day, because this
		# can be called from CBs, and the title usurpation in the CB may happen before the CB's on_success is
		# complete in whatever it is doing to our realm.
		character_event = { id = emf_hre.11 days = 1 }
	}
}


# emf_hre.11 -- add temporary opinion boost from non-karling vassals to karling-usurper liege
character_event = {
	id = emf_hre.11

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes
	ai = yes

	trigger = {
		has_landed_title = event_target:emf_title
	}

	immediate = {
		log = "DEBUG: emf_hre.11: applying post-usurpation opinions for karling-usurper [Root.GetTitledFirstName] [Root.GetOnlyDynastyName] (#[Root.GetID]/[Root.PrimaryTitle.GetID]):"
		any_vassal = {
			limit = { NOT = { dynasty = event_target:emf_prev_holder } } # Not Karling
			# Don't stack any such opinions, but if the vassal has it already, it's older, so just remove it
			# before adding this one.
			if = {
				limit = { has_opinion_modifier = { who = ROOT modifier = opinion_karling_usurper_pos } }
				remove_opinion = { who = ROOT modifier = opinion_karling_usurper_pos }
			}
			opinion = { who = ROOT modifier = opinion_karling_usurper_pos }
			# This'd be insane to log per instance.
		}
		any_independent_ruler = {
			limit = {
				dynasty = event_target:emf_prev_holder
				NOR = {
					is_friend = ROOT
					opinion = { who = ROOT value = 40 }
				}
			}
			# These can stack.
			opinion = { who = ROOT modifier = opinion_karling_usurper_neg }
			log = "---> pissed off: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
		}
	}
}


# emf_hre.12
#
# inherit the karling-usurper state if unexpired on_death and our heir is of our dynasty. if we have multiple
# heirs to different held karling kingdoms, they also inherit the status and any remaining bonuses.
character_event = {
	id = emf_hre.12

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		trait = karling_usurper
	}

	immediate = {
		log = "DEBUG: emf_hre.12: karling-usurper is dying: [Root.GetTitledFirstName] [Root.GetOnlyDynastyName] (#[Root.GetID]/[Root.PrimaryTitle.GetID]):"
		if = {
			limit = { emf_is_valid_karling_usurper = no }
			emf_invalidate_karling_usurper = yes
			break = yes
		}
		any_demesne_title = {
			limit = {
				emf_is_karling_title = yes
				current_heir = {
					dynasty = ROOT
					emf_can_be_karling_usurper = yes
					NOT = { trait = karling_usurper }
				}
			}
			current_heir = {
				# Just mark them with a TOM so that we can make a single pass over all eligible inheritor(s)
				reverse_opinion = { who = ROOT modifier = karling_usurper_heir_tom }
			}
		}
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = ROOT modifier = karling_usurper_heir_tom } }
			reverse_remove_opinion = { who = ROOT modifier = karling_usurper_heir_tom }
			log = "---> inheriting [Root.GetHerHis] karling-usurper status: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			# Here we go!
			add_trait = karling_usurper
			set_flag = karling_usurper
			set_flag = karling_usurper_new # We weren't the original KU in this line
			add_character_modifier = { name = karling_usurper_modifier duration = -1 }
			# Isis starts tracking heir
			reverse_opinion = { who = event_target:isis modifier = karling_usurper_tom }
			# Copy remaining years of bonus to heir
			set_variable = { which = "karling_usurper_years_left"	which = ROOT }
			set_variable = { which = "karling_usurper_years_elapsed" which = ROOT }
			# If ROOT is an original karling-usurper (i.e., did not inherit the status), then
			# his death adds +10 years to the inherited countdown timer for removing the status.
			if = {
				limit = { NOT = { ROOT = { has_flag = karling_usurper_new } } }
				change_variable = { which = "karling_usurper_years_left" value = 10 }
			}
			# Else, he only adds 5 (subject to the absolute cap as well)
			if = {
				limit = { ROOT = { has_flag = karling_usurper_new } }
				change_variable = { which = "karling_usurper_years_left" value = 5 }
			}
		}
	}
}


# emf_hre.13
#
# isis on_yearly_pulse scopes to all karling-usurpers, invalidates them if necessary, and then decrements the
# bonus countdown timer variable `karling_usurper_years_left` for all of those that are still valid. Note that
# invalidation also occurs automatically when the countdown variable has reached zero, which is why there is
# no explicit expiry step.
character_event = {
	id = emf_hre.13

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
		has_any_opinion_modifier = karling_usurper_tom
	}

	immediate = {
		log = "DEBUG: emf_hre.13: karling-usurper yearly pulse:"
		# Invalidate karling-usurpers as necessary.
		any_opinion_modifier_target = {
			limit = {
				reverse_has_opinion_modifier = { who = PREV modifier = karling_usurper_tom }
				emf_is_valid_karling_usurper = no
			}
			emf_invalidate_karling_usurper = yes
		}
		# Update the bonus countdown variables for the remaining valid karling-usurpers.
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = karling_usurper_tom } }
			change_variable = { which = "karling_usurper_years_left"	value = -1 }
			change_variable = { which = "karling_usurper_years_elapsed" value =  1 }
			log = "---> [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID]) now has:"
			log = "----> [This.karling_usurper_years_left.GetValue] years remaining"
			log = "----> [This.karling_usurper_years_elapsed.GetValue] years elapsed"
		}
	}
}

##############################################################################################################

# emf_hre.50-emf_hre.59 reserved for emf_hre_map.txt

##############################################################################################################

# emf_hre.60
#
# dynamically assign prince-elector titles in the HRE (any variant supported); triggered on_yearly_pulse & by
# title transfer on_actions w/ a possible repeating bounce event to defer reassignment until no longer
# defending against a major revolt (since the realm being split would screw up our elector title selection).
# if event_target:emf_(gained|usurped|inherited)_elector_title is defined, it is a freed elector title slot
# (due to another elector gaining it).
character_event = {
	id = emf_hre.60

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes

	trigger = {
		has_landed_title = event_target:emf_global_hre
		OR = {
			emf_hre_has_spare_elector_title = yes
			e_hre = {
				OR = {
					persistent_event_target:hre_title_1_per = { owner = { emf_has_too_many_hre_elector_titles = yes } }
					persistent_event_target:hre_title_2_per = { owner = { emf_has_too_many_hre_elector_titles = yes } }
					persistent_event_target:hre_title_3_per = { owner = { emf_has_too_many_hre_elector_titles = yes } }
					persistent_event_target:hre_title_4_per = { owner = { emf_has_too_many_hre_elector_titles = yes } }
					persistent_event_target:hre_title_5_per = { owner = { emf_has_too_many_hre_elector_titles = yes } }
					persistent_event_target:hre_title_6_per = { owner = { emf_has_too_many_hre_elector_titles = yes } }
					persistent_event_target:hre_title_7_per = { owner = { emf_has_too_many_hre_elector_titles = yes } }
				}
			}
		}
	}

	immediate = {
		log = "DEBUG: emf_hre.60: assigning title(s) to vacant prince-elector slot(s) in the HRE:"
		log = " --> HRE ELECTOR TITLES BEFORE DYNAMIC REASSIGNMENT:"
		emf_log_hre_elector_titles = yes
		# Step zero: invalidate the electorship of any excess elector titles held by a person
		emf_invalidate_extra_elector_titles = yes
		# First attempt to make sure there are at least 3 ecclesiastic elector titles.
		if = {
			limit = { emf_hre_has_at_least_3_theocracy_electors = no }
			log = " --> not enough (3) theocratic prince-electors, so assigning up to 3 theocrats first:"
		}
		while = {
			count = 3 # Safety guard (you never know...)
			limit = {
				# There aren't 3+ valid prince-elector titles that are also theocratic
				emf_hre_has_at_least_3_theocracy_electors = no
				# And there exists a theocrat to be appointed...
				any_character = {
					emf_hre_theocratic_elector_potential = yes
					top_liege = {
						OR = {
							character = ROOT
							emf_cb_is_leading_major_revolt_against_ROOT = yes
						}
					}
				}
			} # end: while->limit
			random_character = {
				limit = {
					emf_hre_theocratic_elector_potential = yes
					top_liege = {
						OR = {
							character = ROOT
							emf_cb_is_leading_major_revolt_against_ROOT = yes
						}
					}
				}
				preferred_limit = {
					real_tier = KING
					controls_religion = yes
				}
				preferred_limit = {
					real_tier = KING
					any_demesne_title = { is_holy_site = ROOT }
				}
				preferred_limit = {
					real_tier = KING
					any_realm_title = {
						is_holy_site = ROOT
						de_jure_liege_or_above = PREV
					}
				}
				preferred_limit = {
					real_tier = KING
				}
				preferred_limit = {
					any_demesne_title = { is_holy_site = ROOT }
				}
				preferred_limit = {
					any_demesne_title = { emf_is_historical_core_theocracy_hre_elector_title = yes }
				}
				preferred_limit = {
					real_tier = DUKE
				}
				preferred_limit = {
					any_demesne_title = { emf_is_historical_fringe_theocracy_hre_elector_title = yes }
				}
				preferred_limit = {
					real_tier = COUNT
				}
				log = " ----> selected theocratic elector: [This.EMF_GetDebugName]"
				emf_select_theocratic_hre_elector_demesne_title = yes
				event_target:emf_new_elector_title = {
					log = " ------> selected title: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
					emf_replace_invalid_hre_elector_title = yes
					event_target:emf_former_elector_title = {
						log = " ------> replaced title: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
					}
				}
				save_event_target_as = emf_new_elector
			} # end: random_realm_lord
			if = {
				limit = { NOT = { event_target:emf_former_elector_title = { always = yes } } }
				event_target:emf_gained_elector_title = {
					save_event_target_as = emf_former_elector_title
				}
			}
			narrative_event = { id = emf_hre.65 }
			any_player = {
				limit = {
					NOT = { character = ROOT }
					OR = {
						top_liege = { character = ROOT }
						top_liege = { emf_cb_is_leading_major_revolt_against_ROOT = yes }
						any_dejure_liege = { title = event_target:emf_global_hre }
					}
				}
				narrative_event = { id = emf_hre.65 }
			}
			clear_event_target = emf_former_elector_title
			clear_event_target = emf_new_elector_title
			clear_event_target = emf_new_elector
		} # end: while loop

		# Now, select up to the remaining amount of open elector slots as secular rulers. Preference here is mostly
		# based around how powerful the vassal is, but we'll give some preference to historical stem duchy titles in
		# the HRE too.
		if = {
			limit = { emf_hre_has_spare_elector_title = yes }
			log = " --> assigning secular elector titles:"
		}
		while = {
			count = 7 # Safety guard (you never know...)
			limit = {
				emf_hre_has_spare_elector_title = yes
				# And there are realm lords to appoint...
				any_character = { # any_playable_ruler does not work as a trigger before unpausing the game
					emf_hre_secular_elector_potential = yes
					top_liege = {
						OR = {
							character = ROOT
							emf_cb_is_leading_major_revolt_against_ROOT = yes
						}
					}
				}
			} # end: while->limit
			any_playable_ruler = {
				limit = {
					emf_hre_secular_elector_potential = yes
					top_liege = {
						OR = {
							character = ROOT
							emf_cb_is_leading_major_revolt_against_ROOT = yes
						}
					}
				}
				score_value = {
					value = 1
					additive_modifier = {
						value = 1000
						capital_scope = { # Try to spread electors across all stem duchies
							empire = { title = event_target:emf_global_hre }
							NOT = {
								kingdom = {
									OR = {
										owner = {
											OR = {
												is_feudal = yes
												is_tribal = yes
											}
											emf_is_hre_elector = yes
										}
										any_direct_de_jure_vassal_title = {
											count = 2
											owner = {
												OR = {
													is_feudal = yes
													is_tribal = yes
												}
												emf_is_hre_elector = yes
											}
										}
									}
								}
							}
						}
					}
					additive_modifier = { # Emperor with a traditional elector title
						value = 1000
						character = ROOT
						any_demesne_title = { emf_is_historical_secular_hre_elector_title = yes }
					}
					additive_modifier = {
						value = 700
						religion = ROOT
					}
					additive_modifier = {
						value = 450
						NOT = { religion = ROOT }
						OR = {
							religion_group = ROOT
							ROOT = { emf_syncretized_religion_with_PREV = yes }
						}
					}
					additive_modifier = {
						value = 300
						any_demesne_title = {
							tier = KING
							de_jure_liege = event_target:emf_global_hre
							is_de_jure_title = yes
						}
					}
					additive_modifier = {
						value = 150
						any_demesne_title = {
							tier = KING
							emf_is_historical_core_secular_hre_elector_title = yes
						}
					}
					additive_modifier = {
						value = 130
						NOT = {
							any_demesne_title = {
								tier = KING
								emf_is_historical_core_secular_hre_elector_title = yes
							}
						}
						any_demesne_title = {
							tier = KING
							emf_is_historical_fringe_secular_hre_elector_title = yes
						}
					}
					additive_modifier = {
						value = 100
						real_tier = KING
					}
					additive_modifier = {
						value = 100
						NOT = {
							any_demesne_title = {
								tier = KING
								emf_is_historical_secular_hre_elector_title = yes
							}
						}
						any_demesne_title = {
							tier = DUKE
							emf_is_historical_core_secular_hre_elector_title = yes
						}
					}
					additive_modifier = {
						value = 80
						NOT = {
							any_demesne_title = {
								OR = {
									AND = {
										tier = KING
										emf_is_historical_secular_hre_elector_title = yes
									}
									AND = {
										tier = DUKE
										emf_is_historical_core_secular_hre_elector_title = yes
									}
								}
							}
						}
						any_demesne_title = {
							tier = DUKE
							emf_is_historical_fringe_secular_hre_elector_title = yes
						}
					}
					additive_modifier = {
						value = 50
						higher_real_tier_than = COUNT
					}
					additive_modifier = {
						value = 50
						is_feudal = yes
					}
					additive_modifier = {
						value = 10
						vassal_of = ROOT
						among_most_powerful_vassals = 1
					}
					additive_modifier = {
						value = 10
						vassal_of = ROOT
						among_most_powerful_vassals = 2
					}
					additive_modifier = {
						value = 10
						vassal_of = ROOT
						among_most_powerful_vassals = 3
					}
					additive_modifier = {
						value = 10
						vassal_of = ROOT
						among_most_powerful_vassals = 4
					}
					additive_modifier = {
						value = 10
						among_most_powerful_vassals = 5
					}
					additive_modifier = {
						value = 10
						vassal_of = ROOT
						among_most_powerful_vassals = 6
					}
					additive_modifier = {
						value = 10
						vassal_of = ROOT
						among_most_powerful_vassals = 7
					}
					additive_modifier = {
						value = 10
						vassal_of = ROOT
						among_most_powerful_vassals = 8
					}
					# Assign random bonus between 0-9 to avoid determinism. Synced to needing to break ties between 2 people
					additive_modifier = {
						value = 1
						random = 50
					}
					additive_modifier = {
						value = 1
						random = 50
					}
					additive_modifier = {
						value = 1
						random = 50
					}
					additive_modifier = {
						value = 1
						random = 50
					}
					additive_modifier = {
						value = 1
						random = 50
					}
					additive_modifier = {
						value = 1
						random = 50
					}
					additive_modifier = {
						value = 1
						random = 50
					}
					additive_modifier = {
						value = 1
						random = 50
					}
					additive_modifier = {
						value = 1
						random = 50
					}
				} # end: score_value
				log = " ----> selected secular elector: [This.EMF_GetDebugName]"
				emf_select_secular_hre_elector_demesne_title = yes
				event_target:emf_new_elector_title = {
					log = " ------> selected title: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
					emf_replace_invalid_hre_elector_title = yes
					event_target:emf_former_elector_title = {
						log = " ------> replaced title: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
					}
				}
				save_event_target_as = emf_new_elector
			} # end: any_realm_lord
			if = {
				limit = { NOT = { event_target:emf_former_elector_title = { always = yes } } }
				event_target:emf_gained_elector_title = {
					save_event_target_as = emf_former_elector_title
				}
			}
			narrative_event = { id = emf_hre.65 }
			any_player = {
				limit = {
					NOT = { character = ROOT }
					OR = {
						top_liege = { character = ROOT }
						top_liege = { emf_cb_is_leading_major_revolt_against_ROOT = yes }
						any_dejure_liege = { title = event_target:emf_global_hre }
					}
				}
				narrative_event = { id = emf_hre.65 }
			}
			clear_event_target = emf_former_elector_title
			clear_event_target = emf_new_elector_title
			clear_event_target = emf_new_elector
		} # end: while loop
		log = " --> HRE ELECTOR TITLES AFTER DYNAMIC REASSIGNMENT:"
		emf_log_hre_elector_titles = yes
	}
}

character_event = {
	id = emf_hre.61

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		event_target:emf_global_hre = { has_holder = yes }
		emf_has_too_many_hre_elector_titles = yes
	}

	immediate = {
		log = "DEBUG: emf_hre.61: prince-elector gained a secondary elector title: [This.EMF_GetDebugName]"
		log = " --> gained title: [From.EMF_GetDebugTitleNameWithDeJureLieges]"
		save_event_target_as = emf_gaining_elector
		FROM = { save_event_target_as = emf_gained_elector_title }
		FROMFROM = { save_event_target_as = emf_losing_elector }
		e_hre = {
			if = {
				limit = { persistent_event_target:hre_title_1_per = { title = FROM } }
				log = " ----> found title in slot #1"
				clear_persistent_event_target = hre_title_1_per
			}
			else_if = {
				limit = { persistent_event_target:hre_title_2_per = { title = FROM } }
				log = " ----> found title in slot #2"
				clear_persistent_event_target = hre_title_2_per
			}
			else_if = {
				limit = { persistent_event_target:hre_title_3_per = { title = FROM } }
				log = " ----> found title in slot #3"
				clear_persistent_event_target = hre_title_3_per
			}
			else_if = {
				limit = { persistent_event_target:hre_title_4_per = { title = FROM } }
				log = " ----> found title in slot #4"
				clear_persistent_event_target = hre_title_4_per
			}
			else_if = {
				limit = { persistent_event_target:hre_title_5_per = { title = FROM } }
				log = " ----> found title in slot #5"
				clear_persistent_event_target = hre_title_5_per
			}
			else_if = {
				limit = { persistent_event_target:hre_title_6_per = { title = FROM } }
				log = " ----> found title in slot #6"
				clear_persistent_event_target = hre_title_6_per
			}
			else_if = {
				limit = { persistent_event_target:hre_title_7_per = { title = FROM } }
				log = " ----> found title in slot #7"
				clear_persistent_event_target = hre_title_7_per
			}
			else = {
				log = " ----> ERROR: COULD NOT FIND GAINED TITLE AMONG SAVED ELECTOR TITLES!"
				# We're fucked if this happens somehow. It *should* be guaranteed to never happen unless some other code
				# messes with elector slot assignments, but then almost none of this will work properly in that case, so
				# meh.
				break = yes
			}
		}
		event_target:emf_global_hre = {
			owner = {
				character_event = { id = emf_hre.60 }
			}
		}
	}
}

narrative_event = {
	id = emf_hre.65
	title = emf_hre_65_title
	picture = GFX_evt_a_crowning_ceremony
	border = GFX_event_narrative_frame_diplomacy
	portrait = event_target:emf_new_elector

	is_triggered_only = yes

	trigger = {
		has_global_flag = EMF # Must not be executed until after initial elector title assignment.
		# We silently do elector title reassignment for the HRE when it has a different succession law in the event
		# that it returns to Princely Elective, but that means Princely Elective must be active for notifications:
		event_target:emf_global_hre = { has_law = succ_hre_elective }
		# Don't bother with a notification if only the elector title has changed and not the chosen elector (note
		# that this cannot stop all possible cases of notifying based only upon an elector title change, since the
		# holder of the replaced elector title is not always known or up-to-date):
		NOR = {
			event_target:emf_former_elector_title = {
				owner = { character = event_target:emf_new_elector }
			}
			event_target:emf_losing_elector = { character = event_target:emf_new_elector }
		}
	}

	desc = {
		text = emf_hre_65_desc_elector_title_no_longer_de_jure_theocratic
		trigger = {
			event_target:emf_former_elector_title = {
				NOT = { title = event_target:emf_gained_elector_title }
				owner = {
					NOT = { any_dejure_liege = { title = event_target:emf_global_hre } }
				}
			}
			event_target:emf_new_elector = { is_theocracy = yes }
		}
	}

	desc = {
		text = emf_hre_65_desc_elector_title_no_longer_de_jure_secular
		trigger = {
			event_target:emf_former_elector_title = {
				NOT = { title = event_target:emf_gained_elector_title }
				owner = {
					NOT = { any_dejure_liege = { title = event_target:emf_global_hre } }
				}
			}
			event_target:emf_new_elector = { is_theocracy = no }
		}
	}

	desc = {
		text = emf_hre_65_desc_secondary_elector_title_gained_theocratic
		trigger = {
			event_target:emf_gained_elector_title = { always = yes }
			event_target:emf_new_elector = { is_theocracy = yes }
		}
	}

	desc = {
		text = emf_hre_65_desc_secondary_elector_title_gained_secular
		trigger = {
			event_target:emf_gained_elector_title = { always = yes }
			event_target:emf_new_elector = { is_theocracy = no }
		}
	}

	desc = {
		text = emf_hre_65_desc_theocratic
		trigger = {
			event_target:emf_new_elector = { is_theocracy = yes }
			NOR = {
				event_target:emf_former_elector_title = {
					owner = {
						NOT = { any_dejure_liege = { title = event_target:emf_global_hre } }
					}
				}
				event_target:emf_gained_elector_title = { always = yes }
			}
		}
	}

	desc = {
		text = emf_hre_65_desc_secular
		trigger = {
			event_target:emf_new_elector = { is_theocracy = no }
			NOR = {
				event_target:emf_former_elector_title = {
					owner = {
						NOT = { any_dejure_liege = { title = event_target:emf_global_hre } }
					}
				}
				event_target:emf_gained_elector_title = { always = yes }
			}
		}
	}

	option = {
		name = emf_hre_65_opt_a_emperor
		trigger = { character = FROM }
		custom_tooltip = { text = emf_hre_65_opt_TT }
	}

	option = {
		name = emf_hre_65_opt_a_realm_lord_pos
		trigger = {
			NOT = { character = FROM }
			OR = {
				AND = {
					NOT = { is_foe = event_target:emf_new_elector }
					opinion = { who = event_target:emf_new_elector value = -10 }
				}
				is_friend = event_target:emf_new_elector
			}
		}
		custom_tooltip = { text = emf_hre_65_opt_TT }
	}

	option = {
		name = emf_hre_65_opt_b_realm_lord_neg
		trigger = {
			NOT = { character = FROM }
			NOT = { is_friend = event_target:emf_new_elector }
			OR = {
				is_foe = event_target:emf_new_elector
				NOT = { same_realm = event_target:emf_new_elector } # Can happen if separated by civil war
				NOT = { opinion = { who = event_target:emf_new_elector value = -10 } }
				any_close_relative = { is_foe = event_target:emf_new_elector }
				any_spouse = { is_foe = event_target:emf_new_elector }
				any_dynasty_member = {
					is_foe = event_target:emf_new_elector
					OR = {
						is_cousin_of = ROOT
						is_grandchild_of = ROOT
					}
				}
				any_dynasty_member = {
					is_ruler = yes
					is_rival = event_target:emf_new_elector
				}
			}
		}
		custom_tooltip = { text = emf_hre_65_opt_TT }
	}
}

##############################################################################################################

# emf_hre.70
#
# If an AI HREmperor gains a forbidden title (as of now, k_italy or k_burgundy), then automatically destroy
# the title. We still destroy the title even if it's currently contested in some form of war. [HREmperor]
character_event = {
	id = emf_hre.70

	is_triggered_only = yes # all on_new_holder on_actions
	hide_window = yes

	only_independent = yes
	ai = yes

	trigger = {
		FROM = { has_flag = emf_hre_forbidden_title }
		emf_has_hre = yes
	}

	immediate = {
		log = "INFO: emf_hre.70: AI HRE gained forbidden title [From.GetID]: [This.EMF_GetDebugName]"
		FROM = {
			if = {
				limit = { is_contested = yes }
				log = " --> title is contested"
			}
		}
		# Actually destroy title on next day after re-checking triggers due to issue wherein an AI player_heir can
		# trigger this event during succession, yet the next day he'd be considered a player, and we don't need/want
		# to destroy a player emperor's forbidden title:
		character_event = { id = emf_hre.73 days = 1 }
	}
}

# emf_hre.71
#
# When a holder of an AI HRE forbidden title(s) ascends to HRE, destroy the forbidden titles. [HREmperor]
character_event = {
	id = emf_hre.71

	is_triggered_only = yes # all on_new_holder on_actions
	hide_window = yes

	only_independent = yes
	ai = yes

	trigger = {
		FROM = { emf_is_hre = yes }
		FROMFROM = { always = yes } # Title creation case is handled by formation decisions
		any_demesne_title = {
			has_flag = emf_hre_forbidden_title
		}
	}

	immediate = {
		log = "INFO: emf_hre.71: AI with HRE forbidden titles gained the HRE: [This.EMF_GetDebugName]"
		any_demesne_title = {
			limit = {
				has_flag = emf_hre_forbidden_title
			}
			log = " --> forbidden title: [This.GetID]"
			if = {
				limit = { is_contested = yes }
				log = " ----> title is contested"
			}
		}
		# Actually destroy title on next day after re-checking triggers due to issue wherein an AI player_heir can
		# trigger this event during succession, yet the next day he'd be considered a player, and we don't need/want
		# to destroy a player emperor's forbidden title:
		character_event = { id = emf_hre.73 days = 1 }
	}
}

# emf_hre.72
#
# Campaign startup event to destroy any HRE forbidden title(s) immediately. Note that in this case we still
# destroy the titles even if they are held by a player. [HREmperor]
character_event = {
	id = emf_hre.72

	is_triggered_only = yes # from main emf_startup event
	hide_window = yes

	trigger = {
		emf_has_hre = yes
		any_demesne_title = {
			has_flag = emf_hre_forbidden_title
		}
	}

	immediate = {
		log = "INFO: emf_hre.72: Destroying forbidden titles held by the HRE at campaign start: [This.EMF_GetDebugName]"
		any_demesne_title = {
			limit = {
				has_flag = emf_hre_forbidden_title
			}
			log = " --> forbidden title: [This.GetID]"
			if = {
				limit = { is_contested = yes }
				log = " ----> title is contested"
			}
			log = " ----> destroying title..."
			destroy_landed_title = THIS
		}
	}
}

# emf_hre.73
#
# 1-day continuation of emf_hre.70-71: actually destroy any forbidden titles if our trigger (namely, that ROOT
# is still AI) still checks out properly. Literally same as previous event except for requirement that ROOT is
# AI. [HREmperor]
character_event = {
	id = emf_hre.73

	is_triggered_only = yes # from emf_hre.70-71
	hide_window = yes

	only_independent = yes
	ai = yes

	trigger = {
		emf_has_hre = yes
		any_demesne_title = {
			has_flag = emf_hre_forbidden_title
		}
	}

	immediate = {
		log = "INFO: emf_hre.73: AI with HRE forbidden titles: a day later: [This.EMF_GetDebugName]"
		any_demesne_title = {
			limit = {
				has_flag = emf_hre_forbidden_title
			}
			log = " --> forbidden title: [This.GetID]"
			if = {
				limit = { is_contested = yes }
				log = " ----> title is contested"
			}
			log = " ----> launching missiles..."
			destroy_landed_title = THIS
		}
	}
}
