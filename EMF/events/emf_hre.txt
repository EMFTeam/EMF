# -*- ck2.events -*-

namespace = emf_hre


# emf_hre.0 -- handle when a non-karling becomes king of a carolingien kingdom
character_event = {
	id = emf_hre.0

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		# Traditional Karling titles only
		FROM = { emf_is_karling_title = yes }
		# Previous title holder was a Karling, and we are not a Karling
		FROMFROM = {
			emf_is_karling_dynasty = yes
			NOT = { dynasty = ROOT }
		}
	}

	immediate = {
		FROMFROM = { save_event_target_as = emf_prev_holder }
		FROM = {
			save_event_target_as = emf_title
			if = {
				limit = { NOT = { has_title_flag = emf_hre_karlings_first_lost_title } }
				set_title_flag = emf_hre_karlings_first_lost_title
			}
			set_title_flag = emf_karlings_last_lost_title
			# TODO: announcement events are not just for k_france & k_germany, yo!
		}
		log = "INFO: emf_hre.0: karling title [From.GetID] usurped/inherited by [Root.GetTitledFirstName] [Root.GetOnlyDynastyName] (#[Root.GetID]/[Root.PrimaryTitle.GetID]) from [FromFrom.GetTitledFirstName] [FromFrom.GetOnlyDynastyName] (#[FromFrom.GetID]/[FromFrom.PrimaryTitle.GetID])"
		character_event = { id = emf_hre.10 } # Become a karling-usurper if qualified / relevant
	}
}


# emf_hre.10 -- if appropriate, give some temporary bonuses to non-Karling characters whom usurp (or inherit) a Karling
#			   title from a Karling, if this is their first such rodeo. we're only going to do this when there are still
#			   other Karling kings or emperors in power. this mechanic is to promote the rise of an "Otto" [the Great] and
#			   generally to combat the snowball effect of dynastic entrenchment somewhat intrinsic to CK2: most folks
#			   would prefer if the Karlings didn't rule the world forever from 867 starts, take joy in seeing them fall,
#			   and would *probably* be pretty stoked to see the rise of a new great dynasty.
character_event = {
	id = emf_hre.10

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes
	ai = yes

	trigger = {
		emf_can_be_karling_usurper = yes
		# Must hold a Carolingien kingdom (event_target:emf_title) or now be the HRE
		OR = {
			# We've usurped/inherited the HRE from a Karling
			event_target:emf_title = { emf_is_hre = yes }
			# Or, still makes sense to be trying to restore the HRE
			emf_is_hre_being_restored = yes
		}
		# Have not fired this before for this character (or his predecessor(s), since this is inherited)
		NOT = { trait = karling_usurper }
		# Is this mechanic even in force?
		emf_are_karling_usurpers_enabled = yes
	}

	immediate = {
		log = "---> a karling-usurper is born!"
		set_character_flag = karling_usurper
		add_trait = karling_usurper
		add_character_modifier = { name = karling_usurper_modifier duration = -1 } # We'll expire it ourselves
		reverse_opinion = { who = event_target:isis modifier = karling_usurper_tom }
		set_variable = { which = "karling_usurper_years_left"	which = event_target:duat }
		set_variable = { which = "karling_usurper_years_elapsed" value = 0 }

		# On the next day, give a temp. opinion bonus from vassals that aren't Karlings. We wait a day, because this
		# can be called from CBs, and the title usurpation in the CB may happen before the CB's on_success is
		# complete in whatever it is doing to our realm.
		character_event = { id = emf_hre.11 days = 1 }
	}
}


# emf_hre.11 -- add temporary opinion boost from non-karling vassals to karling-usurper liege
character_event = {
	id = emf_hre.11

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes
	ai = yes

	trigger = {
		has_landed_title = event_target:emf_title
	}

	immediate = {
		log = "DEBUG: emf_hre.11: applying post-usurpation opinions for karling-usurper [Root.GetTitledFirstName] [Root.GetOnlyDynastyName] (#[Root.GetID]/[Root.PrimaryTitle.GetID]):"
		any_vassal = {
			limit = { NOT = { dynasty = event_target:emf_prev_holder } } # Not Karling
			# Don't stack any such opinions, but if the vassal has it already, it's older, so just remove it
			# before adding this one.
			if = {
				limit = { has_opinion_modifier = { who = ROOT modifier = opinion_karling_usurper_pos } }
				remove_opinion = { who = ROOT modifier = opinion_karling_usurper_pos }
			}
			opinion = { who = ROOT modifier = opinion_karling_usurper_pos }
			# This'd be insane to log per instance.
		}
		any_independent_ruler = {
			limit = {
				dynasty = event_target:emf_prev_holder
				NOR = {
					is_friend = ROOT
					opinion = { who = ROOT value = 40 }
				}
			}
			# These can stack.
			opinion = { who = ROOT modifier = opinion_karling_usurper_neg }
			log = "---> pissed off: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
		}
	}
}


# emf_hre.12 -- inherit the karling-usurper state if unexpired on_death and our heir is of our dynasty. if we have multiple
#			   heirs to different held karling kingdoms, they also inherit the status and any remaining bonuses.
character_event = {
	id = emf_hre.12

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		trait = karling_usurper
	}

	immediate = {
		log = "DEBUG: emf_hre.12: karling-usurper is dying: [Root.GetTitledFirstName] [Root.GetOnlyDynastyName] (#[Root.GetID]/[Root.PrimaryTitle.GetID]):"
		if = {
			limit = { emf_is_valid_karling_usurper = no }
			emf_invalidate_karling_usurper = yes
			break = yes
		}
		any_demesne_title = {
			limit = {
				emf_is_karling_title = yes
				current_heir = {
					dynasty = ROOT
					emf_can_be_karling_usurper = yes
					NOT = { trait = karling_usurper }
				}
			}
			current_heir = {
				# Just mark them with a TOM so that we can make a single pass over all eligible inheritor(s)
				reverse_opinion = { who = ROOT modifier = karling_usurper_heir_tom }
			}
		}
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = ROOT modifier = karling_usurper_heir_tom } }
			reverse_remove_opinion = { who = ROOT modifier = karling_usurper_heir_tom }
			log = "---> inheriting [Root.GetHerHis] karling-usurper status: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			# Here we go!
			add_trait = karling_usurper
			set_character_flag = karling_usurper
			set_character_flag = karling_usurper_new # We weren't the original KU in this line
			add_character_modifier = { name = karling_usurper_modifier duration = -1 }
			# Isis starts tracking heir
			reverse_opinion = { who = event_target:isis modifier = karling_usurper_tom }
			# Copy remaining years of bonus to heir
			set_variable = { which = "karling_usurper_years_left"	which = ROOT }
			set_variable = { which = "karling_usurper_years_elapsed" which = ROOT }
			# If ROOT is an original karling-usurper (i.e., did not inherit the status), then
			# his death adds +10 years to the inherited countdown timer for removing the status.
			if = {
				limit = { NOT = { ROOT = { has_character_flag = karling_usurper_new } } }
				change_variable = { which = "karling_usurper_years_left" value = 10 }
			}
			# Else, he only adds 5 (subject to the absolute cap as well)
			if = {
				limit = { ROOT = { has_character_flag = karling_usurper_new } }
				change_variable = { which = "karling_usurper_years_left" value = 5 }
			}
		}
	}
}


# emf_hre.13 -- isis on_yearly_pulse scopes to all karling-usurpers, invalidates them if necessary, and then decrements the
# bonus countdown timer variable `karling_usurper_years_left` for all of those that are still valid. Note that
# invalidation also occurs automatically when the countdown variable has reached zero, which is why there is no explicit
# expiry step.
character_event = {
	id = emf_hre.13

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
		has_any_opinion_modifier = karling_usurper_tom
	}

	immediate = {
		log = "DEBUG: emf_hre.13: karling-usurper yearly pulse:"
		# Invalidate karling-usurpers as necessary.
		any_opinion_modifier_target = {
			limit = {
				reverse_has_opinion_modifier = { who = PREV modifier = karling_usurper_tom }
				emf_is_valid_karling_usurper = no
			}
			emf_invalidate_karling_usurper = yes
		}
		# Update the bonus countdown variables for the remaining valid karling-usurpers.
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = karling_usurper_tom } }
			change_variable = { which = "karling_usurper_years_left"	value = -1 }
			change_variable = { which = "karling_usurper_years_elapsed" value =  1 }
			log = "---> [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID]) now has:"
			log = "----> [This.karling_usurper_years_left.GetValue] years remaining"
			log = "----> [This.karling_usurper_years_elapsed.GetValue] years elapsed"
		}
	}
}
