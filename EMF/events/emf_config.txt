# -*- ck2.events -*-

namespace = emf_config


#######################################################################
# EMF CONFIGURATION												   #
#																	 #
# SUBMODDING NOTE: This file is intentionally made to be very easy to #
# override, allowing tweaking of various configurable aspects of EMF  #
# in one simple place without overriding a whole bunch of other stuff #
# that you'll need to keep synchronized with new releases.			#
#																	 #
# Commented-out configuration lines are examples of non-default but   #
# valid configuration choices.										#
#######################################################################


# emf_config.0 -- Invoked upon Isis (owner of e_hip) BEFORE any of the standard EMF startup code executes. This ordering
#				 of execution is so that configuration parameters (flags, variables, etc.) are set prior to any startup
#				 code which may check their values. If we are running on the SWMH map, the global flag 'SWMH' has already
#				 been set for us by now. If running on the vanilla map, no such global flag is set.
character_event = {
	id = emf_config.0

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
		NOT = { has_global_flag = EMF }
	}

	immediate = {
		############################################################################################################
		####											 Nomads												 ####
		############################################################################################################

		######## BEGIN:	[ emf_config_latb_disabled ]
		# When this flag is set, EMF will protect the province culture of nomadic provinces conquered by nomads of a
		# different culture, rather than letting the nomadic province instantly erase the old province culture. This
		# mechanic is called Leave A Tribe Behind (LATB), because the hack required to override the vanilla culture
		# erasure behavior is to auto-build a single tribal holding in the nomadic province upon transfer of its
		# county title via some means (just wars of conquest, for the most part).
		#
		# Note that in CKII 2.6 (Reaper's Due), the strikingly similar Nomad Agitation mechanic was added to vanilla,
		# but it only covers those cases where nomadic provinces are conquered by non-nomads. Thus, if you disable
		# EMF's LATB, you'll still have vanilla's Nomad Agitation active: LATB now only affects the behavior of
		# nomads conquering nomadic provinces.
		#
		# set_global_flag = emf_config_latb_disabled
		clr_global_flag = emf_config_latb_disabled
		######## END ########

		######## BEGIN:	[ emf_config_antinomad_disabled ]
		# Though the "antinomad" feature of EMF sounds rather sinister, it's simply a [very extensive] campaign
		# startup routine that re-executes an extensive [but optimized/fast] code-generated form of all of the
		# history files' *intentional* province culture and religion at any given start date when doing first-time
		# campaign setup.
		#
		# Before antinomad runs, when a nomadic province's culture or religion differs from what is specified in
		# province history, it's because the provinces are owned by nomads.
		#
		# In these cases, vanilla CK2's "immediate local culture/religion override" property for empty/nomadic
		# provinces has screwed us, so antinomad then corrects all these cases in a similar way to the LATB mechanic
		# (Leave A Tribe Behind -- see description re: enabling/disabling it in emf_config.1): it either builds a
		# tribal holding or a temple holding (the latter if the province would've had a temple in it at that start
		# date were Horse Lords disabled, else the former) to make the province no longer empty, and it then corrects
		# culture/religion (the culture/religion change will only work if the province is non-empty).
		#
		# You might want to disable antinomad if you are also disabling LATB (presumably because you prefer the
		# vanilla immediate province culture/religion change behavior), although the two are independent.
		#
		# set_global_flag = emf_config_antinomad_disabled
		clr_global_flag = emf_config_antinomad_disabled
		######## END ########
	}

	after = {
		# Run submodder-defined event (stub to override is in events/emf_config_user.txt) which can selectively
		# change the config we've just set without even requiring overriding this file at all. Like the default
		# implementation, event doesn't have to do anything, so override only at your pleasure.
		character_event = { id = emf_config.100 }
	}
}

# emf_config.1

# Invoked upon Isis (owner of e_hip) AFTER all of the EMF startup code has executed. Thus, if
# your choice of configuration depends upon changes made to the game state by EMF startup (such as the de jure hierarchy or
# flags, variables, or various other things), you can leverage that here to conditionally configure the campaign.

# Quirk with ruler-designed characters: They're not present in the game state until _after_ startup and thus this event.
# While we have an emf_startup event to detect when they enter the game [partially], it's far from perfect. No hook is
# provided for that case.
character_event = {
	id = emf_config.1

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
		has_global_flag = EMF
	}

	immediate = {
		############################################################################################################
		####											  Plots												 ####
		############################################################################################################

		######## BEGIN:	[ emf_config_plot_revoking_baronies_disabled ]
		# When this flag is set, EMF will not allow either player or AI to plot-revoke baron-tier titles (like
		# vanilla). Despite all we've done to lessen the gameyness that this can enable, such a more conservative
		# setting may be desired.
		#
		# set_global_flag = emf_config_plot_revoking_baronies_disabled
		clr_global_flag = emf_config_plot_revoking_baronies_disabled
		######## END ########

		############################################################################################################
		####											Holy War												####
		############################################################################################################

		######## BEGIN:	[ emf_config_relsub_disabled ]
		# When this flag is set, EMF will not use its patented Religious Subjugation™ mechanic to resolve duke-tier
		# holy war outcomes and will instead use the traditional holy war success effect (a
		# vassalize_or_take_under_title w/ same_religion = yes & is_religious = yes parameters).
		#
		# set_global_flag = emf_config_relsub_disabled
		clr_global_flag = emf_config_relsub_disabled
		######## END ########

		############################################################################################################
		####								  867 HRE / Carolingien Realms									  ####
		############################################################################################################

		######## BEGIN:	[ emf_config_no_karling_usurpers ]
		# Enabling this flag would disable giving any temporary bonuses to non-Karlings that usurp (or inherit)
		# traditional Karling kingdoms or empires from a Karling:
		#
		# set_global_flag = emf_config_no_karling_usurpers
		clr_global_flag = emf_config_no_karling_usurpers
		######## END ########

		######## BEGIN:	[ karling_usurper_years_left ]
		# This sets the *base* number of years for which such "karling-usurpers" get a bonus of any kind, so long as
		# they remain valid karling-usurpers (i.e., still hold appropriate titles, are feudal, have an HRE-related
		# culture, have an HRE-related religion, and are AI). Once the years expire (though this can be a bit fuzzy
		# by design-- see next note), they're the same as any other ruler.
		e_hip = { set_variable = { which = "karling_usurper_years_left" value = 50 } }
		######## END ########

		######## BEGIN:	[ karling_usurper_years_elapsed ]
		# When a karling-usurper dies, their heir(s) which also qualify to be karling-usurpers and are same-dynasty
		# will inherit the remaining years left on their predecessor's status. They will ALSO add 10 more years for
		# themselves upon the first succession. If there are more successions, however, they will only add 5 years
		# each. Though it's highly unlikely that these extra years would stack up faster than they expired, we do
		# track the total elapsed years for a line of karling-usurpers and invalidate them when/if their total
		# meets/exceeds the value set here.
		e_hip = { set_variable = { which = "karling_usurper_years_elapsed" value = 80 } }
		######## END ########

		######## BEGIN:	[ emf_config_cooldowns_for_ai_hre_restoration_wars_apply_to_all ]
		# If this flag is set, then all [AI] attackers using the AI-only version of the HRE Unification Claim CB
		# (emf_restore_hre) will receive a cooldown timer at the war's [successful] conclusion which must expire
		# before they can use that CB again. By default due to the intentional design of the mechanic, these
		# cooldowns are only applied to Carolingien [dynasty] kings. Note that the cooldowns gradually decrease in
		# length from years 867 to 950, whereafter they cease to be applied to anyone at all. See emf_hre_effects.txt
		# for more information.
		#
		# set_global_flag = emf_config_cooldowns_for_ai_hre_restoration_wars_apply_to_all
		clr_global_flag = emf_config_cooldowns_for_ai_hre_restoration_wars_apply_to_all
		######## END ########

		######## BEGIN:	[ emf_config_no_cooldowns_for_ai_hre_restoration_wars ]
		# Same deal pretty as much as the previous flag, but if you set this one, nobody will get cooldowns after a
		# [successful] AI HRE restoration war -- not Karlings, not any other dynasty, nobody. Obviously, this takes
		# priority over the previous setting.
		#
		# set_global_flag = emf_config_no_cooldowns_for_ai_hre_restoration_wars
		clr_global_flag = emf_config_no_cooldowns_for_ai_hre_restoration_wars
		######## END ########

		######## BEGIN:	[ emf_config_no_hre_restoration_non_dj_vassal_defection ]
		# NOTE: This setting currently has no effect, because this feature has been put on the backburner [!!]
		#
		# Enabling this flag would disable the "fully not de jure AI vassal of HRE precursor AI realm defects to
		# neighboring realm whose AI top liege also owns an HRE precursor kingdom and is considered 'fit' for
		# unification of the HRE (namely, correct religion, culture, and government) and, most importantly to that
		# vassal, is de jure liege to ALL of their subrealm titles" mechanic. Phew.
		#
		# set_global_flag = emf_config_no_hre_restoration_non_dj_vassal_defection
		clr_global_flag = emf_config_no_hre_restoration_non_dj_vassal_defection
		######## END ########
	}

	after = {
		# Run submodder-defined event (stub to override is in events/emf_config_user.txt) which can selectively
		# change the config we've just set without even requiring overriding this file at all. Like the default
		# implementation, event doesn't have to do anything, so override only at your pleasure.
		character_event = { id = emf_config.101 }
	}
}

# emf_config.2 -- Event that only fires on_startup for campaigns that have already been fully initialized (i.e., when loading
# a savegame). Very useful for upgrading the configuration settings of old saves upon their next reload. Note that due to a
# scripting limitation, the save will have to be of a game that was unpaused for at least 1 day before saving for this to
# fire upon reload.
#
# Like the other emf_config events so far, ROOT (event_target:isis and merely 'isis' if used to open a new scope -- i.e.,
# 'isis = { emf_initiate_the_end_of_times = yes }' would be valid somewhere if indeed EMF had such a scripted effect to begin
# the end of the world) is the owner of e_hip (event_target:duat).  The isis & duat event targets are global; they come in
# handy when referring to either (why both? isis is a character and thus must be explicitly coded to inherit state to her
# clone if she gets console-killed or whatever, but e_hip is a title that never dies, so its variables and flags persist
# automatically). [The event targets are mostly for convenient right-hand-side usage.]
character_event = {
	id = emf_config.2

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
		has_global_flag = EMF
		is_save_game = yes
	}

	immediate = {
		# Just reset to whatever we wanted the config to be if this were a new campaign and EMF had just finished
		# initializing otherwise.
		character_event = { id = emf_config.1 }
	}

	after = {
		# Run submodder-defined event (stub to override is in events/emf_config_user.txt) which can selectively
		# change the config we've just set without even requiring overriding this file at all. Like the default
		# implementation, event doesn't have to do anything, so override only at your pleasure.
		character_event = { id = emf_config.102 }
	}
}
