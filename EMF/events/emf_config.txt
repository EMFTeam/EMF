# -*- ck2.events -*-

namespace = emf_config


#######################################################################
# EMF CONFIGURATION                                                   #
#                                                                     #
# SUBMODDING NOTE: This file is intentionally made to be very easy to #
# override, allowing tweaking of various configurable aspects of EMF  #
# in one simple place without overriding a whole bunch of other stuff #
# that you'll need to keep synchronized.                              #
#                                                                     #
# Commented-out configuration lines are examples of non-default but   #
# valid configuration choices.                                        #
#######################################################################


# emf_config.0 -- Invoked upon Isis (owner of e_hip) BEFORE any of the standard EMF startup code executes. This ordering
#                 of execution is so that configuration parameters (flags, variables, etc.) are set prior to any startup
#                 code which may check their values. If we are running on the SWMH map, the global flag 'SWMH' has already
#                 been set for us by now. If running on the vanilla map, no such global flag is set.
character_event = {
	id = emf_config.0

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
		NOT = { has_global_flag = EMF }
	}

	immediate = {
	}
}

# emf_config.1

# Invoked upon Isis (owner of e_hip) AFTER all of the EMF startup code has executed. Thus, if
# your choice of configuration depends upon changes made to the game state by EMF startup (such as the de jure hierarchy or
# flags, variables, or various other things), you can leverage that here to conditionally configure the campaign.

# Quirk with ruler-designed characters: They're not present in the game state until _after_ startup and thus this event.
# While we have an emf_startup event to detect when they enter the game [partially], it's far from perfect. No hook is
# provided for that case.
character_event = {
	id = emf_config.1

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
		has_global_flag = EMF
		is_save_game = no
	}

	immediate = {
		############################################################################################################
		####                                  867 HRE / Carolingien Realms                                      ####
		############################################################################################################

		######## BEGIN:	[ emf_config_no_karling_usurpers ]
		# Enabling this flag would disable giving any temporary bonuses to non-Karlings that usurp (or inherit)
		# traditional Karling kingdoms or empires from a Karling:
		#
		# set_global_flag = emf_config_no_karling_usurpers
		clr_global_flag = emf_config_no_karling_usurpers
		######## END ########
		
		######## BEGIN:	[ karling_usurper_years_left ]
		# This sets the *base* number of years for which such "karling-usurpers" get a bonus of any kind, so long as
		# they remain valid karling-usurpers (i.e., still hold appropriate titles, are feudal, have an HRE-related
		# culture, have an HRE-related religion, and are AI). Once the years expire (though this can be a bit fuzzy
		# by design-- see next note), they're the same as any other ruler.
		e_hip = { set_variable = { which = "karling_usurper_years_left" value = 50 } }
		######## END ########

		######## BEGIN:	[ karling_usurper_years_elapsed ]
		# When a karling-usurper dies, their heir(s) which also qualify to be karling-usurpers and are same-dynasty
		# will inherit the remaining years left on their predecessor's status. They will ALSO add 10 more years for
		# themselves upon the first succession. If there are more successions, however, they will only add 5 years
		# each. Though it's highly unlikely that these extra years would stack up faster than they expired, we do
		# track the total elapsed years for a line of karling-usurpers and invalidate them when/if their total
		# meets/exceeds the value set here.
		e_hip = { set_variable = { which = "karling_usurper_years_elapsed" value = 80 } }
		######## END ########

		######## BEGIN:	[ emf_config_no_border_cleanup_in_frankish_realm_during_hre_restoration_era ]
		# Enabling this flag would disable the "fully not de jure AI vassal of HRE precursor AI realm defects to
		# neighboring realm whose AI top liege also owns an HRE precursor kingdom and is considered 'fit' for
		# unification of the HRE (namely, correct religion, culture, and government) and, most importantly to that
		# vassal, is de jure liege to ALL of their subrealm titles" mechanic. Phew.
		#
		# set_global_flag = emf_config_no_border_cleanup_in_frankish_realm_during_hre_restoration_era
		clr_global_flag = emf_config_no_border_cleanup_in_frankish_realm_during_hre_restoration_era
		######## END ########

		######## BEGIN:	[ emf_config_no_cooldowns_for_ai_karling_hre_restoration_wars ]
		# If this flag is set, then all [AI] attackers using the AI-only version of the HRE Unification Claim CB
		# (emf_restore_hre) will receive a cooldown timer at the war's conclusion which must expire before they can
		# use that CB again. By default due to the intentional design of the mechanic, these cooldowns are only
		# applied to Carolingien [dynasty] kings. Note that the cooldowns gradually decrease in length from years 867
		# to 950, whereafter they cease to be applied to anyone at all. See emf_hre_effects.txt for more information.
		#
		# set_global_flag = emf_config_no_cooldowns_for_ai_karling_hre_restoration_wars
		clr_global_flag = emf_config_no_cooldowns_for_ai_karling_hre_restoration_wars
		######## END ########

		######## BEGIN:	[ emf_config_no_cooldowns_for_ai_hre_restoration_wars ]
		# Same deal pretty as much as the previous flag, but if you set this one, nobody will get cooldowns after an
		# AI HRE restoration war -- not Karlings, not any other dynasty, nobody.
		#
		# set_global_flag = emf_config_no_cooldowns_for_ai_hre_restoration_wars
		clr_global_flag = emf_config_no_cooldowns_for_ai_hre_restoration_wars
		######## END ########
	}
}

# emf_config.2 -- Event that only fires on_startup for campaigns that have already been fully initialized (i.e., when loading
# a savegame). Very useful for upgrading the configuration settings of old saves upon their next reload. Note that due to a
# scripting limitation, the save will have to be of a game that was unpaused for at least 1 day before saving for this to
# fire upon reload.
#
# Like the other emf_config events so far, ROOT (event_target:isis and merely 'isis' if used to open a new scope -- i.e.,
# 'isis = { emf_initiate_the_end_of_times = yes }' would be valid somewhere if indeed EMF had such a scripted effect to begin
# the end of the world) is the owner of e_hip (event_target:duat).  The isis & duat event targets are global; they come in
# handy when referring to either (why both? isis is a character and thus must be explicitly coded to inherit state to her
# clone if she gets console-killed or whatever), but e_hip is a title that never dies, so its variables and flags persist
# automatically).
character_event = {
	id = emf_config.2

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
		has_global_flag = EMF
		is_save_game = yes
	}

	immediate = {
		character_event = { id = emf_config.1 }
	}
}
