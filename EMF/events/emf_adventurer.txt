#########################################################
#
# Landless Character Adventures
# Replaces the vanilla range TOG.1200 through TOG.1499
#
#########################################################

# Based upon concept authored by Henrik Fahraeus for the The Old Gods DLC
# Re-Written by Rylock for CK2Plus
# Adapted by zijistark for EMF

namespace = emf_adventurer

### CLAIMANT ADVENTURES

# emf_adventurer.1 [Landless Claimant]
#
# A landless claimant begins an adventure to press their claim
character_event = {
	id = emf_adventurer.1
	
	hide_window = yes
	
	min_age = 16
	max_age = 50
	prisoner = no
	only_capable = yes

	trigger = {
		is_ruler = no
		num_of_claims = 1
		
		# must be competent and healthy
		health = 4
		OR = {
			diplomacy = 7
			trait = ambitious
			is_smart_trigger = yes
			is_strong_trigger = yes
		}
		OR = {
			diplomacy = 12
			martial = 10
			prestige = 500
			wealth = 200
		}
		
		# has a suitable claim that can be seized
		any_claim = {
			emf_adventurer_claim_is_valid_target_trigger = yes
		}
		
		# basic disqualifiers
		NOR = {
			trait = content
			trait = craven
			trait = depressed
			trait = imbecile
			trait = nun
			trait = monk
			trait = horse
			any_heir_title = { higher_tier_than = BARON }
			any_liege = { holy_order = yes }
		}
		
		# mechanical disqualifiers
		NOR = {
			has_character_modifier = planning_claimant_adventure
			has_character_flag = claimant_adventurer
			has_character_flag = was_claimant_adventurer
		}
	}
	
	mean_time_to_happen = {
		years = 50
		modifier = {
			factor = 0.75
			is_female = no
		}
		modifier = {
			factor = 0.75
			any_claim = { higher_tier_than = DUKE }
		}
		modifier = {
			factor = 0.2
			has_character_flag = flag_denied_title
		}
		modifier = {
			factor = 0.2
			has_character_flag = demon_child_non_pagan
		}
		modifier = {
			factor = 0.5
			has_character_flag = justified_claimant
		}
		modifier = {
			factor = 0.5
			trait = ambitious
		}
		modifier = {
			factor = 0.5
			OR = {
				trait = lunatic
				trait = possessed
			}
		}
		modifier = {
			factor = 0.75
			trait = brilliant_strategist
		}
		modifier = {
			factor = 0.75
			is_smart_trigger = yes
		}
		modifier = {
			factor = 0.75
			trait = brave
		}
		modifier = {
			factor = 0.75
			trait = proud
		}
		modifier = {
			factor = 0.75
			trait = greedy
		}
		modifier = {
			factor = 0.75
			trait = envious
		}
		modifier = {
			factor = 0.75
			trait = wroth
		}
		modifier = {
			factor = 0.75
			trait = sayyid
		}
		modifier = {
			factor = 0.75
			wealth = 100
		}
		modifier = {
			factor = 0.75
			wealth = 200
		}
		modifier = {
			factor = 0.75
			wealth = 300
		}
		modifier = {
			factor = 0.75
			diplomacy = 12
		}
		modifier = {
			factor = 1.5
			trait = slothful
		}
		modifier = {
			factor = 1.5
			trait = charitable
		}
		modifier = {
			factor = 1.25
			trait = patient
		}
		modifier = {
			factor = 2.0
			trait = kind
		}
		modifier = {
			factor = 2.0
			trait = humble
		}
		modifier = {
			factor = 2.0
			NOT = { diplomacy = 7 }
		}
	}

	immediate = {
		# Pick adventurer target, preferring those whom hold claimed
		# titles with the best tier, claim strength, and number...
		
		# If we have a valid claim-target of EMPIRE-tier, we only worry about preference in claim strength (it's so
		# unlikely to have claims on two empire titles, but hey, if they do...)...
		random_claim = {
			limit = {
				tier = EMPEROR
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		random_claim = {
			limit = {
				tier = EMPEROR
				emf_adventurer_claim_is_valid_target_trigger = yes
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# Highest tier claim is KING...
		# 2+ high-tier strong claims
		random_claim = {
			limit = {
				tier = KING
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							ROOT = { has_strong_claim = PREV }
							NOR = {
								lower_tier_than = PREVPREVPREV
								title = PREVPREVPREV
							}
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 2+ high-tier claims (one high-tier & strong)
		random_claim = {
			limit = {
				tier = KING
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							NOR = {
								lower_tier_than = PREVPREVPREV
								title = PREVPREVPREV
							}
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 1 high-tier strong claim, 1+ other strong claims
		random_claim = {
			limit = {
				tier = KING
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							ROOT = { has_strong_claim = PREV }
							NOT = { title = PREVPREVPREV }
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 1 high-tier strong claim, 1+ other claims
		random_claim = {
			limit = {
				tier = KING
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							NOT = { title = PREVPREVPREV }
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 1 high-tier strong claim
		random_claim = {
			limit = {
				tier = KING
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 1 high-tier weak claim
		random_claim = {
			limit = {
				tier = KING
				emf_adventurer_claim_is_valid_target_trigger = yes
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# Highest tier claim is DUKE...
		# 2+ high-tier strong claims
		random_claim = {
			limit = {
				tier = DUKE
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							ROOT = { has_strong_claim = PREV }
							NOR = {
								lower_tier_than = PREVPREVPREV
								title = PREVPREVPREV
							}
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 2+ high-tier claims (one high-tier & strong)
		random_claim = {
			limit = {
				tier = DUKE
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							NOR = {
								lower_tier_than = PREVPREVPREV
								title = PREVPREVPREV
							}
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 1 high-tier strong claim, 1+ other strong claims
		random_claim = {
			limit = {
				tier = DUKE
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							ROOT = { has_strong_claim = PREV }
							NOT = { title = PREVPREVPREV }
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 1 high-tier strong claim, 1+ other claims
		random_claim = {
			limit = {
				tier = DUKE
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							NOT = { title = PREVPREVPREV }
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 1 high-tier strong claim
		random_claim = {
			limit = {
				tier = DUKE
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 1 high-tier weak claim
		random_claim = {
			limit = {
				tier = DUKE
				emf_adventurer_claim_is_valid_target_trigger = yes
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# Highest tier claim is COUNT...
		# 2+ high-tier strong claims
		random_claim = {
			limit = {
				tier = COUNT
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							ROOT = { has_strong_claim = PREV }
							NOR = {
								lower_tier_than = PREVPREVPREV
								title = PREVPREVPREV
							}
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 2+ high-tier claims (one high-tier & strong)
		random_claim = {
			limit = {
				tier = COUNT
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
				holder_scope = {
					ROOT = {
						any_claim = {
							holder = PREVPREV
							NOR = {
								lower_tier_than = PREVPREVPREV
								title = PREVPREVPREV
							}
						}
					}
				}
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# 1 high-tier strong claim
		random_claim = {
			limit = {
				tier = COUNT
				emf_adventurer_claim_is_valid_target_trigger = yes
				ROOT = { has_strong_claim = PREV }
			}
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
		# any valid claim-target
		random_claim = {
			limit = { emf_adventurer_claim_is_valid_target_trigger = yes }
			holder_scope = { save_event_target_as = emf_adv_target }
			break = yes
		}
	}
	
	option = {
		name = OK
		log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) has begun a claimant adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID]):"
		event_target:emf_adv_target = {
			any_demesne_title = {
				limit = {
					tier = EMPEROR
					ROOT = { has_strong_claim = PREV }
				}
				log = "--> strong claim: [This.GetID] ([This.GetFullBaseName])"
			}
			any_demesne_title = {
				limit = {
					tier = EMPEROR
					ROOT = { has_weak_claim = PREV }
				}
				log = "--> weak claim: [This.GetID] ([This.GetFullBaseName])"
			}
			any_demesne_title = {
				limit = {
					tier = KING
					ROOT = { has_strong_claim = PREV }
				}
				log = "--> strong claim: [This.GetID] ([This.GetFullBaseName])"
			}
			any_demesne_title = {
				limit = {
					tier = KING
					ROOT = { has_weak_claim = PREV }
				}
				log = "--> weak claim: [This.GetID] ([This.GetFullBaseName])"
			}
			any_demesne_title = {
				limit = {
					tier = DUKE
					ROOT = { has_strong_claim = PREV }
				}
				log = "--> strong claim: [This.GetID] ([This.GetFullBaseName])"
			}
			any_demesne_title = {
				limit = {
					tier = DUKE
					ROOT = { has_weak_claim = PREV }
				}
				log = "--> weak claim: [This.GetID] ([This.GetFullBaseName])"
			}
			any_demesne_title = {
				limit = {
					tier = COUNT
					ROOT = { has_strong_claim = PREV }
				}
				log = "--> strong claim: [This.GetID] ([This.GetFullBaseName])"
			}
			any_demesne_title = {
				limit = {
					tier = COUNT
					ROOT = { has_weak_claim = PREV }
				}
				log = "--> weak claim: [This.GetID] ([This.GetFullBaseName])"
			}
			any_demesne_title = {
				limit = {
					tier = BARON
					ROOT = { has_strong_claim = PREV }
				}
				log = "--> strong claim: [This.GetID] ([This.GetFullBaseName])"
			}
			any_demesne_title = {
				limit = {
					tier = BARON
					ROOT = { has_weak_claim = PREV }
				}
				log = "--> weak claim: [This.GetID] ([This.GetFullBaseName])"
			}
		}
		
		ROOT = {
			set_character_flag = was_claimant_adventurer
			set_character_flag = planning_claimant_adventure
			add_character_modifier = { name = planning_claimant_adventure hidden = yes duration = 1825 }
			emf_stop_hiding_effect = yes
		}
		
		#warn the target
		holder_scope = {
			reverse_opinion = { who = ROOT modifier = opinion_claimant_adventure_target years = 10 }
			add_character_modifier = { name = adventurer_target_timer duration = 1825 hidden = yes }
			character_event = { id = emf_adventurer.2 }
		}
		
		#find a court to reside in
		character_event = { id = emf_adventurer.3 }
	}
}

# emf_adventurer.2 [Adventure Target]
#
# Targeted ruler receives word of the adventurer
character_event = {
	id = emf_adventurer.2
	desc = EVTDESC_TOG_1201
	picture = GFX_evt_crusaders
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_TOG_1201
		opinion = {
			who = FROM
			modifier = opinion_targeted_by_adventurer
			months = 60
		}
	}
}

# emf_adventurer.3 [Claimant]
#
# Claimant seeks a court in which to "reside," creates a claimant adventurer title, moves his family & friends to his new
# landless court, creates a few useful random courtiers, and then begins approaching rulers (to emf_adventurer.10)
character_event = {
	id = emf_adventurer.3
	
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {		
		if = {
			limit = {
				liege = {
					NOR = {
						character = event_target:emf_adv_target
						is_liege_or_above = event_target:emf_adv_target
					}
				}
			}
			liege = { save_event_target_as = emf_start_court }
		}
		
		#only move if the target is their liege or above their liege
		if = {
			limit = {
				liege = {
					OR = {
						character = event_target:emf_adv_target
						is_liege_or_above = event_target:emf_adv_target
					}
				}
			}
			#first check for a nearby friendly ruler
			random_playable_ruler = {
				limit = {
					emf_adventurer_can_approach_trigger = yes
					opinion = { who = ROOT value = -25 }
					OR = {
						opinion = { who = ROOT value = 40 }
						NOT = { opinion = { who = event_target:emf_adv_target value = -40 } }
					}
					NOR = {
						same_realm = event_target:emf_adv_target
						is_allied_with = event_target:emf_adv_target
						has_non_aggression_pact_with = event_target:emf_adv_target
						opinion = { who = event_target:emf_adv_target value = 25 }
					}
					capital_scope = {
						event_target:emf_adv_target = {
							capital_scope = {
								NOT = { distance = { where = PREVPREV value = 200 } }
							}
						}
					}
				}
				ROOT = { set_character_flag = found_adventurer_court }
				save_event_target_as = emf_start_court
			}
			#then check for a nearby ruler who doesn't hate me and doesn't like my target
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						opinion = { who = ROOT value = -25 }
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
						capital_scope = {
							event_target:emf_adv_target = {
								capital_scope = {
									NOT = { distance = { where = PREVPREV value = 200 } }
								}
							}
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#first check for a meadium distance friendly ruler
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						opinion = { who = ROOT value = -25 }
						OR = {
							opinion = { who = ROOT value = 40 }
							NOT = { opinion = { who = event_target:emf_adv_target value = -40 } }
						}
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
						capital_scope = {
							event_target:emf_adv_target = {
								capital_scope = {
									NOT = { distance = { where = PREVPREV value = 400 } }
								}
							}
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#then check for a medium distance ruler who doesn't hate me and doesn't like my target
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						opinion = { who = ROOT value = -25 }
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
						capital_scope = {
							event_target:emf_adv_target = {
								capital_scope = {
									NOT = { distance = { where = PREVPREV value = 400 } }
								}
							}
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#first check for a far away friendly ruler
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						opinion = { who = ROOT value = -25 }
						OR = {
							opinion = { who = ROOT value = 40 }
							NOT = { opinion = { who = event_target:emf_adv_target value = -40 } }
						}
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
						capital_scope = {
							event_target:emf_adv_target = {
								capital_scope = {
									NOT = { distance = { where = PREVPREV value = 600 } }
								}
							}
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#then check for a far away ruler who doesn't hate me and doesn't like my target
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						opinion = { who = ROOT value = -25 }
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
						capital_scope = {
							event_target:emf_adv_target = {
								capital_scope = {
									NOT = { distance = { where = PREVPREV value = 600 } }
								}
							}
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#then check for any friendly ruler
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						opinion = { who = ROOT value = -25 }
						OR = {
							opinion = { who = ROOT value = 40 }
							NOT = { opinion = { who = event_target:emf_adv_target value = -40 } }
						}
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#then check for any ruler who doesn't hate me and doesn't like my target
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						opinion = { who = ROOT value = -25 }
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#then check for any nearby appropriate ruler
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
						capital_scope = {
							event_target:emf_adv_target = {
								capital_scope = {
									NOT = { distance = { where = PREVPREV value = 200 } }
								}
							}
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#then check for any medium distance appropriate ruler
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
						capital_scope = {
							event_target:emf_adv_target = {
								capital_scope = {
									NOT = { distance = { where = PREVPREV value = 400 } }
								}
							}
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#then check for any far away appropriate ruler
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						NOR = {
							same_realm = event_target:emf_adv_target
							is_allied_with = event_target:emf_adv_target
							has_non_aggression_pact_with = event_target:emf_adv_target
							opinion = { who = event_target:emf_adv_target value = 25 }
						}
						capital_scope = {
							event_target:emf_adv_target = {
								capital_scope = {
									NOT = { distance = { where = PREVPREV value = 600 } }
								}
							}
						}
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			#failing that, any ruler will do
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						emf_adventurer_can_approach_trigger = yes
						NOT = { same_realm = event_target:emf_adv_target }
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			if = {
				limit = { NOT = { has_character_flag = found_adventurer_court } }
				random_playable_ruler = {
					limit = {
						is_landed = yes
						NOT = { same_realm = event_target:emf_adv_target }
					}
					ROOT = { set_character_flag = found_adventurer_court }
					save_event_target_as = emf_start_court
				}
			}
			clr_character_flag = found_adventurer_court

			#move the adventurer there and create their title
			move_character = event_target:emf_start_court
		}
		
		log = "--> [Root.GetFullName] will begin [Root.GetHerHis] adventure in the court of [emf_start_court.GetTitledName] ([emf_start_court.PrimaryTitle.GetID] / ID: [emf_start_court.GetID])"
		
		event_target:emf_start_court = {
			capital_scope = {
				county = {
					ROOT = {
						create_title = {
							tier = DUKE
							landless = yes
							adventurer = yes
							culture = THIS
							name = "CLAIMANT_ADVENTURE"
							holder = THIS
							ruler = "LORD"
							ruler_female = "LADY"
							base_title = PREV
						}
					}
				}
			}
		}
		set_defacto_liege = ROOT
		
		#move family & friends to their court
		any_spouse = {
			limit = {
				prisoner = no
				is_ruler = no
			}
			log = "--> [This.GetFullName] has joined their adventure (spouse)"
			emf_stop_hiding_effect = yes
			move_character = ROOT
		}
		any_child = {
			limit = {
				is_ruler = no
				prisoner = no
				OR = {
					is_adult = no
					AND = {
						opinion = { who = ROOT value = 50 }
						NOT = { opinion = { who = LIEGE value = 0 } }
						NOT = { liege = { dynasty = PREV } }
					}
				}
			}
			log = "--> [This.GetFullName] has joined their adventure (child)"
			emf_stop_hiding_effect = yes
			move_character = ROOT
			any_child = {
				limit = {
					is_ruler = no
					prisoner = no
					OR = {
						is_adult = no
						AND = {
							opinion = { who = ROOT value = 25 }
							NOT = { opinion = { who = LIEGE value = 0 } }
							NOT = { liege = { dynasty = PREV } }
						}
					}
				}
				log = "--> [This.GetFullName] has joined their adventure (grandchild)"
				emf_stop_hiding_effect = yes
				move_character = ROOT
			}
		}
		any_friend = {
			limit = {
				is_adult = yes
				prisoner = no
				is_ruler = no
				NOR = {
					trait = incapable
					opinion = { who = event_target:emf_adv_target value = 25 }
					opinion = { who = LIEGE value = 50 }
				}
			}
			log = "--> [This.GetFullName] has joined their adventure (friend)"
			emf_stop_hiding_effect = yes
			move_character = ROOT
		}
		# TODO: Be smarter about the realm characters we bring with us, since we can only bring a few: higher affinity, more skill
		event_target:emf_adv_target = {
			any_realm_character = {
				count = 3
				limit = {
					is_adult = yes
					prisoner = no
					is_ruler = no
					is_councillor = no
					OR = {
						opinion = { who = ROOT value = 40 }
						AND = {
							NOT = { opinion = { who = event_target:emf_adv_target value = -40 } }
							opinion = { who = ROOT value = 25 }
						}
					}
					NOR = {
						trait = incapable
						is_married = event_target:emf_adv_target
						opinion = { who = event_target:emf_adv_target value = 0 }
						opinion = { who = LIEGE value = 25 }
					}
				}
				log = "--> [This.GetFullName] has joined their adventure (realm character)"
				emf_stop_hiding_effect = yes
				move_character = ROOT
			}
		}

		# Create some courtiers
		create_random_soldier = {
			random_traits = yes
			dynasty = none
			religion = ROOT
			culture = ROOT
			female = no
			age = 30
		}
		create_random_soldier = {
			random_traits = yes
			dynasty = none
			religion = ROOT
			culture = ROOT
			female = no
			age = 25
		}
		create_random_soldier = {
			random_traits = yes
			dynasty = none
			religion = ROOT
			culture = ROOT
			female = no
			age = 29
		}
		create_random_intriguer = {
			random_traits = yes
			dynasty = none
			religion = ROOT
			culture = ROOT
			female = no
			age = 30
		}
		
		#begin approaching rulers
		character_event = { id = emf_adventurer.10 days = 1 }
	}
}

# emf_adventurer.10 [Adventurer]
#
# Adventurer seeks a court to begin recruiting in
character_event = {
	id = emf_adventurer.10
	
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		ROOT = { emf_adventurer_is_valid_trigger = yes }
		NOT = { has_character_flag = began_adventure }
		NOT = { wealth = 1000 }
	}
	
	immediate = {
		emf_can_disturb_effect = yes
		emf_adventurer_reset_target_effect = yes
		emf_adventurer_reset_location_effect = yes
		
		#first ask from the top liege of their current location
		if = {
			limit = {
				location = {
					owner = {
						top_liege = { emf_adventurer_can_approach_trigger = yes }
					}
				}
			}
			emf_do_not_disturb_effect = yes
			location = {
				owner = {
					top_liege = { character_event = { id = emf_adventurer.11 days = 1 } }
				}
			}
			break = yes
		}
		#then seek out close independent rulers who hate the targeted ruler and are also friends/close relatives
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_like_adventurer_trigger = yes
				emf_adventurer_hate_adventurer_target_trigger = yes
				NOT = { distance = { where = event_target:emf_court value = 150 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 5 }
			break = yes
		}
		#then seek out close independent rulers who hate the targeted ruler and are of the same religion/culture
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_hate_adventurer_target_trigger = yes
				religion = ROOT
				culture = ROOT
				NOT = { distance = { where = event_target:emf_court value = 150 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 5 }
			break = yes
		}
		#then seek out close independent rulers who like me
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_like_adventurer_trigger = yes
				NOT = { distance = { where = event_target:emf_court value = 150 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 5 }
			break = yes
		}
		#then seek out nearby independent rulers who hate the targeted ruler and are also friends/close relatives
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_like_adventurer_trigger = yes
				emf_adventurer_hate_adventurer_target_trigger = yes
				NOT = { distance = { where = event_target:emf_court value = 300 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 10 }
			break = yes
		}
		#then seek out nearby independent rulers who hate the targeted ruler and are of the same religion/culture
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_hate_adventurer_target_trigger = yes
				religion = ROOT
				culture = ROOT
				NOT = { distance = { where = event_target:emf_court value = 300 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 10 }
			break = yes
		}
		#then seek out nearby independent rulers who like me
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_like_adventurer_trigger = yes
				NOT = { distance = { where = event_target:emf_court value = 300 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 10 }
			break = yes
		}
		#then seek out independent rulers who are further afield and who hate the targeted ruler and also like me
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_like_adventurer_trigger = yes
				emf_adventurer_hate_adventurer_target_trigger = yes
				NOT = { distance = { where = event_target:emf_court value = 600 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 15 }
			break = yes
		}
		#then seek out independent rulers who are further afield and who hate the targeted ruler and are of the same religion and culture
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_hate_adventurer_target_trigger = yes
				religion = ROOT
				culture = ROOT
				NOT = { distance = { where = event_target:emf_court value = 600 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 15 }
			break = yes
		}
		#then seek out independent rulers who are further afield and who like me
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_like_adventurer_trigger = yes
				NOT = { distance = { where = event_target:emf_court value = 600 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 15 }
			break = yes
		}
		#then seek out close independent rulers who hate the targeted ruler but do not hate me
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_hate_adventurer_target_trigger = yes
				opinion = { who = ROOT value = -25 }
				NOT = { distance = { where = event_target:emf_court value = 150 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 5 }
			break = yes
		}
		#then seek out nearby independent rulers who hate the targeted ruler but do not hate me
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_hate_adventurer_target_trigger = yes
				opinion = { who = ROOT value = -25 }
				NOT = { distance = { where = event_target:emf_court value = 300 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 10 }
			break = yes
		}
		#then seek out independent rulers who are further afield and who hate the targeted ruler but do not hate me
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				emf_adventurer_hate_adventurer_target_trigger = yes
				opinion = { who = ROOT value = -25 }
				NOT = { distance = { where = event_target:emf_court value = 600 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 15 }
			break = yes
		}
		#then seek out anyone of the same religion AND culture who is close
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				religion = ROOT
				culture = ROOT
				NOT = { distance = { where = event_target:emf_court value = 150 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 5 }
			break = yes
		}
		#then seek out anyone of the same religion AND culture who is nearby
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				religion = ROOT
				culture = ROOT
				NOT = { distance = { where = event_target:emf_court value = 300 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 10 }
			break = yes
		}
		#then seek out anyone of the same religion AND culture who is further afield
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				religion = ROOT
				culture = ROOT
				NOT = { distance = { where = event_target:emf_court value = 600 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 15 }
			break = yes
		}
		#then seek out anyone of the same religion OR culture who is close
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				OR = {
					religion = ROOT
					culture = ROOT
				}
				NOT = { distance = { where = event_target:emf_court value = 150 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 5 }
			break = yes
		}
		#then seek out anyone of the same religion OR culture who is nearby
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				OR = {
					religion = ROOT
					culture = ROOT
				}
				NOT = { distance = { where = event_target:emf_court value = 300 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 10 }
			break = yes
		}
		#then seek out anyone of the same religion OR culture who is further afield
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				OR = {
					religion = ROOT
					culture = ROOT
				}
				NOT = { distance = { where = event_target:emf_court value = 600 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 15 }
			break = yes
		}
		#then seek out anyone of the same religion group AND culture group who doesn't hate me and who is close
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				culture_group = ROOT
				opinion = { who = ROOT value = -25 }
				NOT = { distance = { where = event_target:emf_court value = 150 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 5 }
			break = yes
		}
		#then seek out anyone of the same religion group AND culture group who doesn't hate me and who is nearby
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				culture_group = ROOT
				opinion = { who = ROOT value = -25 }
				NOT = { distance = { where = event_target:emf_court value = 300 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 10 }
			break = yes
		}
		#then seek out anyone of the same religion group AND culture group who doesn't hate me and who is further afield
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				culture_group = ROOT
				opinion = { who = ROOT value = -25 }
				NOT = { distance = { where = event_target:emf_court value = 600 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 15 }
			break = yes
		}
		#then seek out anyone of the same religion group who doesn't hate me and who is close
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				opinion = { who = ROOT value = -25 }
				NOT = { distance = { where = event_target:emf_court value = 150 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 5 }
			break = yes
		}
		#then seek out anyone of the same religion group who doesn't hate me and who is nearby
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				opinion = { who = ROOT value = -25 }
				NOT = { distance = { where = event_target:emf_court value = 300 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 10 }
			break = yes
		}
		#then seek out anyone of the same religion group who doesn't hate me and who is further afield
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				opinion = { who = ROOT value = -25 }
				NOT = { distance = { where = event_target:emf_court value = 600 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 15 }
			break = yes
		}
		#last resort: go anywhere close
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				NOT = { distance = { where = event_target:emf_court value = 150 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 5 }
			break = yes
		}
		#last resort: go anywhere nearby
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				NOT = { distance = { where = event_target:emf_court value = 300 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 10 }
			break = yes
		}
		#last resort: go anywhere further afield
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
				NOT = { distance = { where = event_target:emf_court value = 600 } }
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 15 }
			break = yes
		}
		#failing that, go anywhere
		random_independent_ruler = {
			limit = {
				emf_adventurer_can_approach_trigger = yes
			}
			ROOT = { emf_do_not_disturb_effect = yes }
			character_event = { id = emf_adventurer.11 days = 30 }
			break = yes
		}
	}
}

# emf_adventurer.11 [Adventurer's Potential Host]
#
# Adventurer arrives at a foreign court and asks for support
character_event = {
	id = emf_adventurer.11
	desc = EVTDESC_TOG_1215
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_diplomacy
	
	is_triggered_only = yes
	
	trigger = {
		FROM = {
			emf_adventurer_is_valid_trigger = yes
			NOT = { has_character_flag = began_adventure }
		}
	}
	
	immediate = {
		set_character_flag = emf_adv_approached_@FROM
		FROM = { emf_can_disturb_effect = yes }
		capital_scope = {
			save_event_target_as = emf_court
			county = {
				log = "INFO: adventurer: [From.GetFullName] (ID: [From.GetID]) has arrived at the court of [Root.GetTitledName] (ID: [Root.GetID] / [Root.PrimaryTitle.GetID]) in [This.GetID] ([This.GetBaseName])"
			}
		}
	}
	
	option = {
		name = EVTOPTA_TOG_1215 # I will give him my full support
		trigger = {
			wealth = 10
		}
		ai_chance = {
			factor = 20
			modifier = {
				factor = 0.75
				war = yes
			}
			modifier = {
				factor = 0.5
				FROM = { wealth = 500 }
			}
			modifier = {
				factor = 0.5
				FROM = { wealth = 750 }
			}
			modifier = {
				factor = 0.5
				FROM = { wealth = 1000 }
			}
			modifier = {
				factor = 5
				is_friend = FROM
			}
			modifier = {
				factor = 5
				is_rival = event_target:emf_adv_target
			}
			modifier = {
				factor = 0
				OR = {
					is_friend = event_target:emf_adv_target
					is_rival = FROM
					NOT = { opinion = { who = FROM value = -50 } }
					opinion = { who = event_target:emf_adv_target value = 50 }
				}
			}
			modifier = {
				factor = 1.5
				religion = FROM
				NOT = { religion = event_target:emf_adv_target }
			}
			modifier = {
				factor = 1.5
				culture = FROM
				NOT = { culture = event_target:emf_adv_target }
			}
			modifier = {
				factor = 2
				is_close_relative = FROM
				NOT = { is_close_relative = event_target:emf_adv_target }
			}
			modifier = {
				factor = 1.5
				OR = {
					dynasty = FROM
					is_allied_with = FROM
				}
				NOT = {
					is_close_relative = FROM
					dynasty = event_target:emf_adv_target
					is_allied_with = event_target:emf_adv_target
					has_non_aggression_pact_with = event_target:emf_adv_target
				}
			}
			# modifier = {
			# 	factor = 0.1
			# 	has_character_modifier = ai_austerity
			# }
			modifier = {
				factor = 1.5
				trait = charitable
			}
			modifier = {
				factor = 0.25
				is_allied_with = event_target:emf_adv_target
			}
			modifier = {
				factor = 0.5
				NOT = { is_allied_with = event_target:emf_adv_target }
				has_non_aggression_pact_with = event_target:emf_adv_target
			}
			modifier = {
				factor = 0.5
				trait = greedy
			}
			modifier = {
				factor = 0.5
				NOT = { religion = FROM }
			}
			modifier = {
				factor = 0.5
				NOT = { culture_group = FROM }
			}
			modifier = {
				factor = 0.75
				NOT = { opinion = { who = FROM value = 0 } }
			}
			modifier = {
				factor = 0.5
				NOT = { opinion = { who = FROM value = -25 } }
			}
			modifier = {
				factor = 1.25
				opinion = { who = FROM value = 25 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROM value = 50 }
			}
			modifier = {
				factor = 2
				opinion = { who = FROM value = 75 }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = event_target:emf_adv_target value = -25 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = event_target:emf_adv_target value = -50 } }
			}
			modifier = {
				factor = 2
				NOT = { opinion = { who = event_target:emf_adv_target value = -75 } }
			}
			modifier = {
				factor = 0.5
				opinion = { who = event_target:emf_adv_target value = 25 }
			}
			modifier = {
				factor = 0.5
				FROM = { NOT = { diplomacy = 6 } }
			}
			modifier = {
				factor = 1.1
				FROM = { diplomacy = 10 }
			}
			modifier = {
				factor = 1.1
				FROM = { diplomacy = 12 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 14 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 16 }
			}
		}
		log = "INFO: adventurer: [From.GetFullName] (ID: [From.GetID]) was backed by [Root.GetFullName] (ID: [Root.GetID] / [Root.PrimaryTitle.GetID]) for their adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID])"
		emf_adventurer_donate_effect = yes
		reverse_opinion = { who = FROM modifier = backed_adventurer years = 20 }
		reverse_opinion = { who = event_target:emf_adv_target modifier = supported_adventurer_against_me multiplier = 2 years = 10 }
		FROM = { custom_tooltip = { text = ADVENTURER_RECRUITS_FROM_MY_LANDS } }
		hidden_tooltip = {
			# inform targeted ruler
			if = {
				limit = {
					is_within_diplo_range = event_target:emf_adv_target
					FROM = { NOT = { has_character_flag = not_interested_in_movement } }
				}
				event_target:emf_adv_target = { character_event = { id = emf_adventurer.16 days = 15 } }
			}
			
			# adventurer recruits in the realm for a length of time that is proportional to provincial recruiting
			# factors (based upon size of realm) as well as the number of realm lords who may donate directly.
			#
			# the current solution is not ideal, but it is a far cry better than what we had here previously.
			
			FROM = { # Kick off recursive, time-distributed recruiting
				emf_do_not_disturb_effect = yes
				character_event = { id = emf_adventurer.12 days = 5 } # Takes a bit to prep for recruitment
			}
		}		
	}
	option = {
		name = EVTOPTB_TOG_1215 # He may raise support in my lands
		ai_chance = {
			factor = 30
			modifier = {
				factor = 0.75
				war = yes
			}
			modifier = {
				factor = 5
				is_friend = FROM
			}
			modifier = {
				factor = 5
				is_rival = event_target:emf_adv_target
			}
			modifier = {
				factor = 0
				OR = {
					is_friend = event_target:emf_adv_target
					is_rival = FROM
					NOT = { opinion = { who = FROM value = -50 } }
					opinion = { who = event_target:emf_adv_target value = 50 }
				}
			}
			modifier = {
				factor = 1.5
				religion = FROM
				NOT = { religion = event_target:emf_adv_target }
			}
			modifier = {
				factor = 1.5
				culture = FROM
				NOT = { culture = event_target:emf_adv_target }
			}
			modifier = {
				factor = 2
				is_close_relative = FROM
				NOT = { is_close_relative = event_target:emf_adv_target }
			}
			modifier = {
				factor = 1.5
				OR = {
					dynasty = FROM
					is_allied_with = FROM
				}
				NOR = {
					is_close_relative = FROM
					dynasty = event_target:emf_adv_target
					is_allied_with = event_target:emf_adv_target
					has_non_aggression_pact_with = event_target:emf_adv_target
				}
			}
			modifier = {
				factor = 0.25
				is_allied_with = event_target:emf_adv_target
			}
			modifier = {
				factor = 0.5
				NOT = { is_allied_with = event_target:emf_adv_target }
				has_non_aggression_pact_with = event_target:emf_adv_target
			}
			modifier = {
				factor = 0.5
				NOT = { religion = FROM }
			}
			modifier = {
				factor = 0.5
				NOT = { culture_group = FROM }
			}
			modifier = {
				factor = 0.75
				NOT = { opinion = { who = FROM value = 0 } }
			}
			modifier = {
				factor = 0.5
				NOT = { opinion = { who = FROM value = -25 } }
			}
			modifier = {
				factor = 1.25
				opinion = { who = FROM value = 25 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROM value = 50 }
			}
			modifier = {
				factor = 2
				opinion = { who = FROM value = 75 }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = event_target:emf_adv_target value = -25 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = event_target:emf_adv_target value = -50 } }
			}
			modifier = {
				factor = 2
				NOT = { opinion = { who = event_target:emf_adv_target value = -75 } }
			}
			modifier = {
				factor = 0.5
				opinion = { who = event_target:emf_adv_target value = 25 }
			}
			modifier = {
				factor = 0.5
				FROM = { NOT = { diplomacy = 6 } }
			}
			modifier = {
				factor = 1.1
				FROM = { diplomacy = 10 }
			}
			modifier = {
				factor = 1.1
				FROM = { diplomacy = 12 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 14 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 16 }
			}
		}
		log = "INFO: adventurer: [From.GetFullName] (ID: [From.GetID]) was allowed to stay in the realm of [Root.GetFullName] (ID: [Root.GetID] / [Root.PrimaryTitle.GetID]) for their adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID])"
		reverse_opinion = { who = FROM modifier = let_adventurer_stay years = 20 }
		reverse_opinion = { who = event_target:emf_adv_target modifier = supported_adventurer_against_me years = 10 }
		FROM = { custom_tooltip = { text = ADVENTURER_RECRUITS_FROM_MY_LANDS } }
		hidden_tooltip = {
			# inform targeted ruler
			if = {
				limit = {
					is_within_diplo_range = event_target:emf_adv_target
					FROM = { NOT = { has_character_flag = not_interested_in_movement } }
				}
				event_target:emf_adv_target = { character_event = { id = emf_adventurer.17 days = 15 } }
			}
			FROM = { # Kick off recursive, time-distributed recruiting
				emf_do_not_disturb_effect = yes
				character_event = { id = emf_adventurer.12 days = 5 } # Takes a bit to prep for recruitment
			}
		}
	}
	option = {
		name = EVTOPTC_TOG_1215 # He can do as he wishes, but not here
		ai_chance = {
			factor = 40
			additive_modifier = {
				value = 10
				NOT = { culture = FROM }
			}
			additive_modifier = {
				value = 10
				NOT = { culture_group = FROM }
			}
			modifier = {
				factor = 2
				NOT = { religion = FROM }
			}
		}
		log = "INFO: adventurer: [From.GetFullName] (ID: [From.GetID]) was turned away from recruitment within the realm of [Root.GetFullName] (ID: [Root.GetID] / [Root.PrimaryTitle.GetID]) for the adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID])"
		reverse_opinion = { who = FROM modifier = turned_adventurer_away years = 20 }
		FROM = {
			custom_tooltip = {
				text = ADVENTURER_MUST_MOVE_ON
				hidden_tooltip = { character_event = { id = emf_adventurer.10 } }
			}
		}
	}
	option = {
		name = EVTOPTD_TOG_1215 # Betray him for a ransom
		trigger = {
			intrigue = 8
			NOT = { trait = honest }
		}
		ai_chance = {
			factor = 10
			modifier = {
				factor = 2
				NOT = { religion_group = FROM }
			}
			modifier = {
				factor = 2
				trait = deceitful
			}
			modifier = {
				factor = 2
				likes_better_than = { who = event_target:emf_adv_target than = FROM }
			}
			modifier = {
				factor = 0.5
				likes_better_than = { who = FROM than = event_target:emf_adv_target }
			}
			modifier = {
				factor = 1.5
				is_allied_with = event_target:emf_adv_target
			}
			modifier = {
				factor = 1.5
				trait = cruel
			}
			modifier = {
				factor = 1.5
				trait = greedy
			}
			modifier = {
				factor = 1.25
				trait = arbitrary
			}
			modifier = {
				factor = 1.25
				FROM = { NOT = { diplomacy = 6 } }
			}
			modifier = {
				factor = 0.8
				FROM = { diplomacy = 10 }
			}
			modifier = {
				factor = 0.8
				FROM = { diplomacy = 14 }
			}
			modifier = {
				factor = 0.8
				FROM = { diplomacy = 18 }
			}
			modifier = {
				factor = 0.5
				is_close_relative = FROM
			}
			modifier = {
				factor = 0.5
				trait = just
			}
			modifier = {
				factor = 0
				NOR = {
					trait = deceitful
					trait = ambitious
					trait = cruel
					is_allied_with = event_target:emf_adv_target
				}
			}
			modifier = {
				factor = 0
				OR = {
					trait = kind
					has_truce = event_target:emf_adv_target
					has_non_aggression_pact_with = event_target:emf_adv_target
					war_with = event_target:emf_adv_target
					is_rival = event_target:emf_adv_target
					is_friend = FROM
				}
			}	
		}
		log = "INFO: adventurer: [From.GetFullName] (ID: [From.GetID]) was betrayed by [Root.GetFullName] (ID: [Root.GetID] / [Root.PrimaryTitle.GetID]) when seeking support for [From.GetHerHis] adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID])"
		if = {
			limit = { trait = kind }
			random = {
				chance = 50
				remove_trait = kind
				# TODO: trait notification event
			}
		}
		if = {
			limit = { NOT = { trait = deceitful } }
			random = {
				chance = 50
				add_trait = deceitful
				# TODO: trait notification event
			}
		}
		tooltip_info = intrigue
		reverse_opinion = { who = FROM modifier = betrayed_adventurer years = 100 }
		random_list = {
			50 = {
				modifier = {
					factor = 1.2
					FROM = { attribute_diff = { character = ROOT attribute = intrigue value = 1 } }
				}
				modifier = {
					factor = 1.2
					FROM = { attribute_diff = { character = ROOT attribute = intrigue value = 3 } }
				}
				modifier = {
					factor = 1.2
					FROM = { attribute_diff = { character = ROOT attribute = intrigue value = 5 } }
				}
				modifier = {
					factor = 1.5
					FROM = { attribute_diff = { character = ROOT attribute = intrigue value = 7 } }
				}
				modifier = {
					factor = 1.5
					FROM = { attribute_diff = { character = ROOT attribute = intrigue value = 9 } }
				}
				modifier = {
					factor = 2.0
					FROM = { attribute_diff = { character = ROOT attribute = intrigue value = 11 } }
				}
				log = "---> [From.GetSheHeCap] escapes [From.GetHerHis] attempted capture and flees!"
				prestige = -50
				FROM = { custom_tooltip = { text = ADVENTURER_ESCAPES } }
				hidden_tooltip = {
					character_event = { id = emf_adventurer.20 }
					FROM = { character_event = { id = emf_adventurer.10 } } # Adventurer moves on
				}
			}
			50 = {
				modifier = {
					factor = 1.2
					attribute_diff = { character = FROM attribute = intrigue value = 1 }
				}
				modifier = {
					factor = 1.2
					attribute_diff = { character = FROM attribute = intrigue value = 3 }
				}
				modifier = {
					factor = 1.2
					attribute_diff = { character = FROM attribute = intrigue value = 5 }
				}
				modifier = {
					factor = 1.2
					attribute_diff = { character = FROM attribute = intrigue value = 7 }
				}
				modifier = {
					factor = 1.2
					attribute_diff = { character = FROM attribute = intrigue value = 9 }
				}
				log = "---> [From.GetSheHeCap] is successfully captured and will now be offered for ransom!"
				FROM = {
					imprison = ROOT
					emf_do_not_disturb_effect = yes
				}
				event_target:emf_adv_target = { letter_event = { id = emf_adventurer.22 tooltip = OFFER_ADVENTURER_FOR_RANSOM } }
				hidden_tooltip = {
					character_event = { id = emf_adventurer.21 }
				}
			}
		}
	}
}

# emf_adventurer.12 [Adventurer]
#
# Recursive event for seeking donations & recruiting from provinces in the realm of FROM with the effects evenly distributed
# over a period of time dependent roughly on realm size (more directly, number of approachable realm lords and number of
# realm provinces that haven't recently been recruited from by other adventurers and aren't occupied).
#
# FROM = Original host (when event chain started)
character_event = {
	id = emf_adventurer.12
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		emf_adventurer_reset_target_effect = yes
		emf_adventurer_reset_location_effect = yes
		
		# Adventurer invalidation check
		if = {
			limit = { emf_adventurer_is_valid_trigger = no }
			character_event = { id = emf_adventurer.51 } # abandon & notify
			break = yes
		}
		
		# No need to over-recruit here (leave some wealth for the other adventurers!)
		if = {
			limit = { wealth = 1000 }
			emf_can_disturb_effect = yes
			break = yes
		}
		
		if = {
			limit = {
				NOT = { event_target:emf_court = { owner = { character = FROM } } }
			}
			# As far as we can tell, we no longer have permission to recruit within the subrealm of FROM, or
			# FROM doesn't even have a subrealm anymore, or similar, so terminate.
			log = "WARNING: adventurer: [Root.GetFullName] (ID: [Root.GetID])'s current court location changed owner while recruiting for their adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID]) -- recruiting terminated, will relocate..."
			emf_can_disturb_effect = yes
			character_event = { id = emf_adventurer.10 } # Plan to move on to another realm
			break = yes
		}
		
		emf_do_not_disturb_effect = yes # renew
		
		# Try to process up to 3 realm lords & 1 realm province per tick. When we run out of both to do, we terminate.
		
		FROM = {
			# A random subrealm province, with preference toward provinces neighboring or within a short distance
			# of the capital / host court. Prefer tight clustering in terms of "expansion" of the recruited area
			# rather than a random walk (clustering around whichever province was the last-recruited-from), which
			# is also a reasonable approach depending upon how you want to think about the recruitment
			# abstraction's model. The current model is one of "call-to-arms" / "central marshalling" wherein
			# recruitment spreads organically from the place in which it was ordered / permitted. AKA "word spreads"
			
			event_target:emf_court = {
				if = {
					limit = { emf_adventurer_can_recruit_province_trigger = yes }
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = {
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						any_neighbor_province = { province = event_target:emf_court }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			# From here, strictly consider whether the province neighbors a province from which we've recruited
			# and its distance to our capital court
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = {
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						any_neighbor_province = { has_province_flag = emf_adv_recruited_@ROOT }
						NOT = { distance = { where = event_target:emf_court value = 100 } }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = {
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						NOT = { distance = { where = event_target:emf_court value = 100 } }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = {
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						any_neighbor_province = { has_province_flag = emf_adv_recruited_@ROOT }
						NOT = { distance = { where = event_target:emf_court value = 200 } }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = {
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						NOT = { distance = { where = event_target:emf_court value = 200 } }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = {
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						any_neighbor_province = { has_province_flag = emf_adv_recruited_@ROOT }
						NOT = { distance = { where = event_target:emf_court value = 300 } }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = {
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						NOT = { distance = { where = event_target:emf_court value = 300 } }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = {
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						any_neighbor_province = { has_province_flag = emf_adv_recruited_@ROOT }
						NOT = { distance = { where = event_target:emf_court value = 400 } }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = {
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						NOT = { distance = { where = event_target:emf_court value = 400 } }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = { # No distance max, but neighboring a recruited province
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
						any_neighbor_province = { has_province_flag = emf_adv_recruited_@ROOT }
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			if = {
				limit = { NOT = { ROOT = { has_character_flag = emf_recruiting_progress } } }
				random_realm_province = { # Any recruitable province
					limit = {
						emf_adventurer_can_recruit_province_trigger = yes
					}
					province_event = { id = emf_adventurer.19 }
					ROOT = { set_character_flag = emf_recruiting_progress }
				}
			}
			
			# 3 random subrealm lords
			# TODO: prefer those [still unapproached] whose capital is in one of our recruited provinces, as they
			# will tend to coincide directly, in terms of location, with recent province recruitment progress.
			# This would respect the notion of "word spreading from central court" better.
			random_realm_lord = {
				limit = { emf_adventurer_can_approach_vassal_trigger = yes }
				letter_event = { id = emf_adventurer.18 }
				ROOT = { set_character_flag = emf_recruiting_progress }
			}
			random_realm_lord = {
				limit = { emf_adventurer_can_approach_vassal_trigger = yes }
				letter_event = { id = emf_adventurer.18 }
				ROOT = { set_character_flag = emf_recruiting_progress }
			}
			random_realm_lord = {
				limit = { emf_adventurer_can_approach_vassal_trigger = yes }
				letter_event = { id = emf_adventurer.18 }
				ROOT = { set_character_flag = emf_recruiting_progress }
			}
		}
		
		if = {
			limit = { NOT = { has_character_flag = emf_recruiting_progress } }
			# Nothing left to do in this subrealm, so terminate.
			emf_can_disturb_effect = yes
			character_event = { id = emf_adventurer.10 } # Plan to move on to another realm
			break = yes
		}
		
		clr_character_flag = emf_recruiting_progress
		repeat_event = { id = emf_adventurer.12 days = 3 }
	}
}

# emf_adventurer.16 [Adventure Target]
#
# Targeted ruler hears that adventurer is being supported
character_event = {
	id = emf_adventurer.16
	desc = EVTDESC_TOG_1216
	picture = GFX_evt_crusaders
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	show_from_from = yes
	
	trigger = {
		ai = no
		has_opinion_modifier = { who = FROMFROM modifier = opinion_targeted_by_adventurer }
		FROMFROM = { emf_adventurer_is_valid_trigger = yes }
	}
	
	option = {
		name = EVTOPTA_TOG_1216
	}
	option = {
		name = EVTOPTB_TOG_1216
		hidden_tooltip = {
			FROMFROM = { set_character_flag = not_interested_in_movements }
		}
	}
}

# emf_adventurer.17 [Adventure Target]
#
# Targeted ruler hears that adventurer is being allowed to recruit
character_event = {
	id = emf_adventurer.17
	desc = EVTDESC_TOG_1217
	picture = GFX_evt_crusaders
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	show_from_from = yes
	
	trigger = {
		ai = no
		has_opinion_modifier = { who = FROMFROM modifier = opinion_targeted_by_adventurer }
		FROMFROM = { emf_adventurer_is_valid_trigger = yes }
	}
	
	option = {
		name = EVTOPTA_TOG_1217
	}
	option = {
		name = EVTOPTB_TOG_1216
		hidden_tooltip = {
			FROMFROM = { set_character_flag = not_interested_in_movements }
		}
	}
}

# emf_adventurer.18 [Adventurer Host's Realm Lord]
#
# Adventurer asks those in the realm for support
#
# FROM = Adventurer
letter_event = {
	id = emf_adventurer.18
	desc = EVTDESC_TOG_1218
	border = GFX_event_letter_frame_diplomacy
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_TOG_1218 # Agree
		trigger = { wealth = 10 }
		ai_chance = {
			factor = 35
			modifier = {
				factor = 0.5
				FROM = { wealth = 500 }
			}
			modifier = {
				factor = 0.5
				FROM = { wealth = 750 }
			}
			modifier = {
				factor = 0.5
				FROM = { wealth = 1000 }
			}
			modifier = {
				factor = 0.75
				NOT = { wealth = 25 }
			}
			modifier = {
				factor = 5
				is_friend = FROM
			}
			modifier = {
				factor = 5
				is_rival = event_target:emf_adv_target
			}
			modifier = {
				factor = 0
				OR = {
					is_friend = event_target:emf_adv_target
					is_rival = FROM
					NOT = { opinion = { who = FROM value = -50 } }
					opinion = { who = event_target:emf_adv_target value = 50 }
				}
			}
			modifier = {
				factor = 1.5
				religion = FROM
				NOT = { religion = event_target:emf_adv_target }
			}
			modifier = {
				factor = 1.5
				culture = FROM
				NOT = { culture = event_target:emf_adv_target }
			}
			modifier = {
				factor = 2
				is_close_relative = FROM
				NOT = { is_close_relative = event_target:emf_adv_target }
			}
			modifier = {
				factor = 1.5
				OR = {
					dynasty = FROM
					is_allied_with = FROM
				}
				NOR = {
					is_close_relative = FROM
					dynasty = event_target:emf_adv_target
					is_allied_with = event_target:emf_adv_target
					has_non_aggression_pact_with = event_target:emf_adv_target
				}
			}
			# modifier = {
			# 	factor = 0.1
			# 	has_character_modifier = ai_austerity
			# }
			modifier = {
				factor = 1.5
				trait = charitable
			}
			modifier = {
				factor = 0.25
				is_allied_with = event_target:emf_adv_target
			}
			modifier = {
				factor = 0.5
				NOT = { is_allied_with = event_target:emf_adv_target }
				has_non_aggression_pact_with = event_target:emf_adv_target
			}
			modifier = {
				factor = 0.5
				trait = greedy
			}
			modifier = {
				factor = 0.5
				NOT = { religion = FROM }
			}
			modifier = {
				factor = 0.8
				NOT = { culture = FROM }
			}
			modifier = {
				factor = 0.5
				NOT = { culture_group = FROM }
			}
			modifier = {
				factor = 0.75
				NOT = { opinion = { who = FROM value = 0 } }
			}
			modifier = {
				factor = 0.5
				NOT = { opinion = { who = FROM value = -25 } }
			}
			modifier = {
				factor = 1.25
				opinion = { who = FROM value = 25 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROM value = 50 }
			}
			modifier = {
				factor = 2
				opinion = { who = FROM value = 75 }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = event_target:emf_adv_target value = -25 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = event_target:emf_adv_target value = -50 } }
			}
			modifier = {
				factor = 2
				NOT = { opinion = { who = event_target:emf_adv_target value = -75 } }
			}
			modifier = {
				factor = 0.5
				opinion = { who = event_target:emf_adv_target value = 25 }
			}
			modifier = {
				factor = 0.5
				FROM = { NOT = { diplomacy = 6 } }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 10 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 12 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 14 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 16 }
			}
		}
		log = "DEBUG: adventurer: [From.GetFullName] (ID: [From.GetID]) received host-realm donation from [Root.GetFullName] (ID: [Root.GetID] / [Root.PrimaryTitle.GetID]) for [From.HerHis] adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID])"
		emf_adventurer_donate_effect = yes
		reverse_opinion = { who = FROM modifier = backed_adventurer years = 20 }
	}
	option = {
		name = EVTOPTB_TOG_1218 # Refuse
		ai_chance = {
			factor = 65
		}
		reverse_opinion = { who = FROM modifier = refused_adventurer years = 20 }
	}
}

# emf_adventurer.19 [Adventurer Host's Realm Province]
#
# Adventurer recruits from a province in the realm
#
# FROM = Adventurer
province_event = {
	id = emf_adventurer.19
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		set_province_flag = emf_adv_recruited_@FROM
		add_province_modifier = {
			name = adventurer_recruited
			duration = 900
		}
		log = "DEBUG: adventurer: [From.GetFullName] (ID: [From.GetID]) recruits from province [Root.GetName] ([Root.County.GetID] / [Root.GetID]) for [From.HerHis] adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID])"
		if = {
			limit = {
				culture_group = FROM
				religion = FROM
			}
			random_list = {
				50 = {
					modifier = {
						factor = 0.8
						FROM = {
							diplomacy = 10
							NOT = { diplomacy = 15 }
						}
					}
					modifier = {
						factor = 0.4
						FROM = { diplomacy = 15 }
					}
					#no bonus
				}
				40 = {
					modifier = {
						factor = 0.75
						FROM = { diplomacy = 10 }
					}
					FROM = { wealth = 10 }
				}
				10 = {
					modifier = {
						factor = 2.0
						FROM = {
							diplomacy = 10
							NOT = { diplomacy = 15 }
						}
					}
					modifier = {
						factor = 3.0
						FROM = { diplomacy = 15 }
					}
					FROM = { wealth = 20 }
				}
				10 = {
					modifier = {
						factor = 0
						FROM = { NOT = { diplomacy = 10 } }
					}
					modifier = {
						factor = 2.0
						FROM = { diplomacy = 15 }
					}
					FROM = { wealth = 30 }
				}
			}
		}
		if = {
			limit = {
				OR = {
					NOT = { culture_group = FROM }
					NOT = { religion = FROM }
				}
				OR = {
					culture_group = FROM
					religion = FROM
				}
			}
			random_list = {
				60 = {
					modifier = {
						factor = 0.83
						FROM = {
							diplomacy = 10
							NOT = { diplomacy = 15 }
						}
					}
					modifier = {
						factor = 0.58
						FROM = { diplomacy = 15 }
					}
					#no bonus
				}
				30 = {
					modifier = {
						factor = 0.66
						FROM = {
							diplomacy = 10
							NOT = { diplomacy = 15 }
						}
					}
					modifier = {
						factor = 1.17
						FROM = { diplomacy = 15 }
					}
					FROM = { wealth = 10 }
				}
				10 = {
					modifier = {
						factor = 2.0
						FROM = { diplomacy = 10 }
					}
					FROM = { wealth = 20 }
				}
				10 = {
					modifier = {
						factor = 0
						FROM = { NOT = { diplomacy = 10 } }
					}
					FROM = { wealth = 30 }
				}
			}
		}
		if = {
			limit = {
				NOT = { culture_group = FROM }
				NOT = { religion = FROM }
			}
			random_list = {
				80 = {
					modifier = {
						factor = 0.75
						FROM = {
							diplomacy = 10
							NOT = { diplomacy = 15 }
						}
					}
					modifier = {
						factor = 0.56
						FROM = { diplomacy = 15 }
					}
					FROM = { wealth = 0 }
				}
				10 = {
					modifier = {
						factor = 3.0
						FROM = {
							diplomacy = 10
							NOT = { diplomacy = 15 }
						}
					}
					modifier = {
						factor = 3.5
						FROM = { diplomacy = 15 }
					}
					FROM = { wealth = 10 }
				}
				10 = {
					modifier = {
						factor = 1.5
						FROM = { diplomacy = 15 }
					}
					FROM = { wealth = 20 }
				}
				5 = {
					modifier = {
						factor = 0
						FROM = { NOT = { diplomacy = 15 } }
					}
					FROM = { wealth = 30 }
				}
			}
		}
	}
}

# Adventurer escapes the trap and flees the realm
character_event = {
	id = emf_adventurer.20
	desc = EVTDESC_TOG_1220
	picture = GFX_evt_bandits
	
	is_triggered_only = yes
	show_from_from = yes
	
	option = {
		name = CURSES
	}
}

# Adventurer is imprisoned and can now be offered for ransom
character_event = {
	id = emf_adventurer.21
	desc = EVTDESC_TOG_1221
	picture = GFX_evt_bandits
	
	is_triggered_only = yes
	show_from_from = yes
	
	option = {
		name = EXCELLENT
	}
}

# Adventurer offered to the targeted ruler for ransom
letter_event = {
	id = emf_adventurer.22
	desc = EVTDESC_TOG_1222
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_TOG_1222 # Pay the ransom
		ai_chance = {
			factor = 75
			modifier = {
				factor = 0
				NOT = { wealth = 50 }
			}
			# modifier = {
			# 	factor = 0.5
			# 	has_character_modifier = ai_austerity
			# }
			modifier = {
				factor = 0.5
				trait = greedy
			}
			modifier = {
				factor = 0.75
				FROMFROM = { NOT = { wealth = 250 } }
			}
			modifier = {
				factor = 0.75
				FROMFROM = { NOT = { wealth = 200 } }
			}
			modifier = {
				factor = 0.75
				FROMFROM = { NOT = { wealth = 150 } }
			}
			modifier = {
				factor = 0.75
				FROMFROM = { NOT = { wealth = 100 } }
			}
		}
		wealth = -50
		hidden_tooltip = {
			save_event_target_as = emf_new_home_court
			FROM = { letter_event = { id = emf_adventurer.23 days = 3 } }
			FROMFROM = {
				hidden_tooltip = { prisoner = no }
				emf_adventurer_cleanup_effect = yes
				reverse_opinion = { who = ROOT modifier = opinion_traitor }
			}
		}
		FROMFROM = { imprison = ROOT }
	}
	option = {
		name = EVTOPTB_TOG_1222 # Refuse
		ai_chance = {
			factor = 25
			modifier = {
				factor = 2
				trait = greedy
			}
		}
		FROMFROM = { emf_can_disturb_effect = yes }
		hidden_tooltip = {
			FROM = { letter_event = { id = emf_adventurer.24 days = 3 } }
		}
	}
}

# Notification that the ransom has been paid
letter_event = {
	id = emf_adventurer.23
	desc = EVTDESC_TOG_1223
	
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
		wealth = 50
		reverse_opinion = { who = FROM modifier = opinion_grateful years = 10 }
	}
}

# Notification that the ransom has been refused
letter_event = {
	id = emf_adventurer.24
	desc = EVTDESC_TOG_1224
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_TOG_1224 # Let him go
		FROMFROMFROM = {
			prisoner = no
			custom_tooltip = {
				text = ADVENTURER_MUST_MOVE_ON
				character_event = { id = emf_adventurer.10 } # Adventurer moves on
			}
		}
	}
	option = {
		name = EVTOPTB_TOG_1224 # Leave him where he is
		FROMFROMFROM = {
			custom_tooltip = { text = ADVENTURER_STAYS_IN_PRISON }
		}
	}
}

# emf_adventurer.30
#
# FIXME: This had the potential to be _extremely_ computationally-intensive for the simple task it performs. It's now better,
# but it's still pretty crazy. It should be replaced with something similar to the recursive-delayed subrealm recruiting
# system, except much more variable in terms of delays and slowing-down significantly as the adventurer's wealth grows.
#
# Adventurer seeks support in the targeted liege's realm
character_event = {
	id = emf_adventurer.30
	
	hide_window = yes
	
	only_rulers = yes
	min_age = 16
	capable_only = yes
	prisoner = no
	has_character_flag = planning_claimant_adventure
	
	trigger = {
		emf_adventurer_is_valid_trigger = yes
		NOT = { has_character_flag = began_adventure }
		NOT = { wealth = 1000 }
		any_opinion_modifier_target = {
			has_opinion_modifier = { who = ROOT modifier = opinion_targeted_by_adventurer }
			any_realm_lord = {
				wealth = 10
				is_within_diplo_range = ROOT
				is_adult = yes
				prisoner = no
				OR = {
					dynasty = ROOT
					is_close_relative = ROOT
					any_spouse = { is_close_relative = ROOT }
					is_friend = ROOT
					opinion = { who = ROOT value = 40 }
					is_rival = PREV
					NOT = { reverse_opinion = { who = PREV value = -40 } }
				}
				NOR = {
					trait = incapable
					character = PREV
					reverse_has_opinion_modifier = { who = ROOT modifier = turned_adventurer_away }
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
					reverse_has_opinion_modifier = { who = ROOT modifier = betrayed_adventurer }
					reverse_has_opinion_modifier = { who = ROOT modifier = refused_adventurer }
				}
			}
		}
	}
	
	mean_time_to_happen = {
		days = 30
		modifier = {
			factor = 0.5
			NOT = { wealth = 100 }
		}
		modifier = {
			factor = 1.5
			wealth = 300
		}
		modifier = {
			factor = 1.5
			wealth = 400
		}
		modifier = {
			factor = 1.5
			wealth = 500
		}
		modifier = {
			factor = 2
			wealth = 600
		}
		modifier = {
			factor = 2
			wealth = 700
		}
	}
	
	immediate = {
		emf_adventurer_reset_target_effect = yes
		event_target:emf_adv_target = {
			random_realm_lord = {
				limit = {
					wealth = 10
					is_within_diplo_range = ROOT
					is_adult = yes
					prisoner = no
					OR = {
						dynasty = ROOT
						is_close_relative = ROOT
						any_spouse = { is_close_relative = ROOT }
						is_friend = ROOT
						opinion = { who = ROOT value = 40 }
						is_rival = PREV
						NOT = { reverse_opinion = { who = PREV value = -40 } }
					}
					NOR = {
						trait = incapable
						character = PREV
						reverse_has_opinion_modifier = { who = ROOT modifier = turned_adventurer_away }
						reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
						reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
						reverse_has_opinion_modifier = { who = ROOT modifier = betrayed_adventurer }
						reverse_has_opinion_modifier = { who = ROOT modifier = refused_adventurer }
					}
				}
				letter_event = { id = emf_adventurer.31 }
			}
		}
	}
}

# emf_adventurer.31 [Adventure Target's Realm Lord]
# Member of targeted ruler's realm receives plea for support
letter_event = {
	id = emf_adventurer.31
	desc = EVTDESC_TOG_1231
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_TOG_1231 # Agree
		ai_chance = {
			factor = 35
			modifier = {
				factor = 5
				in_faction = faction_claimant
				supported_claimant = { character = FROM }
			}
			modifier = {
				factor = 0.75
				NOT = { wealth = 25 }
			}
			modifier = {
				factor = 0.5
				FROM = { wealth = 500 }
			}
			modifier = {
				factor = 0.5
				FROM = { wealth = 750 }
			}
			modifier = {
				factor = 0.5
				FROM = { wealth = 1000 }
			}
			modifier = {
				factor = 5
				is_friend = FROM
			}
			modifier = {
				factor = 5
				top_liege = { is_rival = ROOT }
			}
			modifier = {
				factor = 0
				OR = {
					top_liege = { is_friend = ROOT }
					is_rival = FROM
					NOT = { opinion = { who = FROM value = -50 } }
					top_liege = { reverse_opinion = { who = ROOT value = 50 } }
				}
			}
			modifier = {
				factor = 1.25
				religion = FROM
				top_liege = { NOT = { religion = ROOT } }
			}
			modifier = {
				factor = 1.25
				culture = FROM
				top_liege = { NOT = { culture = ROOT } }
			}
			modifier = {
				factor = 2
				is_close_relative = FROM
				top_liege = { NOT = { is_close_relative = ROOT } }
			}
			modifier = {
				factor = 1.5
				OR = {
					dynasty = FROM
					is_allied_with = FROM
				}
				NOR = {
					is_close_relative = FROM
					top_liege = { dynasty = ROOT }
					top_liege = { is_allied_with = ROOT }
					top_liege = { has_non_aggression_pact_with = ROOT }
				}
			}
			# modifier = {
			# 	factor = 0.1
			# 	has_character_modifier = ai_austerity
			# }
			modifier = {
				factor = 1.5
				trait = charitable
			}
			modifier = {
				factor = 0.5
				top_liege = { is_allied_with = ROOT }
			}
			modifier = {
				factor = 0.75
				top_liege = {
					NOT = { is_allied_with = ROOT }
					has_non_aggression_pact_with = ROOT
				}
			}
			modifier = {
				factor = 0.5
				trait = greedy
			}
			modifier = {
				factor = 0.5
				NOT = { religion = FROM }
			}
			modifier = {
				factor = 0.8
				NOT = { culture = FROM }
			}
			modifier = {
				factor = 0.5
				NOT = { culture_group = FROM }
			}
			modifier = {
				factor = 0.75
				NOT = { opinion = { who = FROM value = 0 } }
			}
			modifier = {
				factor = 0.5
				NOT = { opinion = { who = FROM value = -25 } }
			}
			modifier = {
				factor = 1.25
				opinion = { who = FROM value = 25 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROM value = 50 }
			}
			modifier = {
				factor = 2
				opinion = { who = FROM value = 75 }
			}
			modifier = {
				factor = 1.25
				top_liege = { NOT = { reverse_opinion = { who = ROOT value = -25 } } }
			}
			modifier = {
				factor = 1.5
				top_liege = { NOT = { reverse_opinion = { who = ROOT value = -50 } } }
			}
			modifier = {
				factor = 2
				top_liege = { NOT = { reverse_opinion = { who = ROOT value = -75 } } }
			}
			modifier = {
				factor = 0.5
				top_liege = { reverse_opinion = { who = ROOT value = 25 } }
			}
			modifier = {
				factor = 0.5
				FROM = { NOT = { diplomacy = 6 } }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 10 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 12 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 14 }
			}
			modifier = {
				factor = 1.2
				FROM = { diplomacy = 16 }
			}
		}
		log = "DEBUG: adventurer: [From.GetFullName] (ID: [From.GetID]) received target-realm donation from [Root.GetFullName] (ID: [Root.GetID] / [Root.PrimaryTitle.GetID]) for the adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID])"
		emf_adventurer_donate_effect = yes
		# FUTURE: chance of discovery of assistance by top liege
		reverse_opinion = { who = FROM modifier = backed_adventurer years = 20 }
		hidden_tooltip = {
			if = {
				limit = { wealth = 50 }
				random = {
					chance = 50
					modifier = {
						factor = 0.5
						top_liege = { NOT = { realm_intrigue = 20 } }
					}
					modifier = {
						factor = 1.5
						top_liege = { realm_intrigue = 40 }
					}
					top_liege = { character_event = { id = emf_adventurer.32 } }
				}
			}
		}
	}
	option = {
		name = EVTOPTB_TOG_1231 # Refuse
		ai_chance = {
			factor = 65
		}
		reverse_opinion = { who = FROM modifier = refused_adventurer years = 20 }
	}
}

# Targeted ruler hears that someone prominent in their realm is supporting the adventurer
character_event = {
	id = emf_adventurer.32
	desc = EVTDESC_TOG_1232
	picture = GFX_evt_crusaders
	border = GFX_event_normal_frame_war
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_TOG_1232
		opinion = { who = FROM modifier = supported_adventurer_against_me multiplier = 2 years = 10 }
	}
}

# Notify targeted ruler that adventurer is halfway to raising an army
character_event = {
	id = emf_adventurer.40
	desc = EVTDESC_TOG_1240
	picture = GFX_evt_crusaders
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	
	trigger = { ai = no }
	
	option = {
		name = EVTOPTA_TOG_1240
	}
}

# Notify ruler that adventurer has abandoned their quest after too long
character_event = {
	id = emf_adventurer.41
	desc = EVTDESC_TOG_1241
	picture = GFX_evt_crusaders
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	
	trigger = { ai = no }
	
	option = {
		name = EVTOPTA_TOG_1241
	}
}

# Notify ruler that adventurer has abandoned their quest because they are incapable
character_event = {
	id = emf_adventurer.42
	desc = EVTDESC_TOG_1242
	picture = GFX_evt_crusaders
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	
	trigger = { ai = no }
	
	option = {
		name = EVTOPTA_TOG_1242
	}
}

# Notify ruler that adventurer has abandoned their quest because they are now a ruler themselves
character_event = {
	id = emf_adventurer.43
	desc = EVTDESC_TOG_1243
	picture = GFX_evt_crusaders
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	
	trigger = { ai = no }
	
	option = {
		name = EVTOPTA_TOG_1243
	}
}

# Notify ruler of adventurer's death
character_event = {
	id = emf_adventurer.46
	desc = EVTDESC_TOG_1248
	picture = GFX_evt_crusaders
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	
	trigger = { ai = no }
	
	option = {
		name = EVTOPTA_TOG_1248
	}	
}

# Ping event post-DoW to ensure that the war was declared properly
character_event = {
	id = emf_adventurer.47
	
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = { war = yes }
			add_trait = adventurer
			remove_character_modifier = planning_claimant_adventure
			clr_character_flag = planning_claimant_adventure
			clr_character_flag = warned_adventurer_target
			clr_character_flag = not_interested_in_movements
			break = yes
		}
		
		log = "ERROR: [Root.GetFullName] (ID: [Root.GetID]) had an invalid adventure war -- removing adventurer status"
		emf_adventurer_abandon_effect = yes
	}
}

# emf_adventurer.48 [Ruler that has claimant_adventure event forces]
#
# Armies disbanded after five years (or lack of claimant_adventurer flag), if at peace
character_event = {
	id = emf_adventurer.48
	desc = EVTDESC_TOG_1253
	picture = GFX_evt_crusaders
	
	only_rulers = yes
	
	trigger = {
		has_earmarked_regiments = claimant_adventure
		war = no
		OR = {
			had_character_flag = { flag = claimant_adventurer days = 1825 }
			NOT = { has_character_flag = claimant_adventurer }
		}
	}
	
	mean_time_to_happen = {
		days = 1
	}
	
	option = {
		name = EVTOPTA_TOG_1253
		clr_character_flag = claimant_adventurer
		disband_event_forces = claimant_adventure
	}
}

# emf_adventurer.49 [Adventurer]
#
# Adventurer begins their war against the targeted ruler
character_event = {
	id = emf_adventurer.49
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		emf_adventurer_reset_target_effect = yes
		
		# find a friendly court near the target, if possible
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 100 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 150 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 200 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 250 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 300 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 350 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 400 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 450 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 500 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 550 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		random_playable_ruler = {
			limit = {
				NOT = { event_target:emf_prov = { always = yes } }
				is_landed = yes
				OR = {
					reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
					reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				}
				capital_scope = {
					event_target:emf_adv_target = {
						capital_scope = {
							NOT = { distance = { where = PREVPREV value = 600 } }
						}
					}
				}
			}
			capital_scope = { save_event_target_as = emf_prov }
		}
		if = {
			limit = { NOT = { event_target:emf_prov = { always = yes } } }
			location = { save_event_target_as = emf_prov }
		}
		
		event_target:emf_prov = {
			county = {
				log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) assembles his invasion forces in [This.GetID] ([This.GetBaseName]) of [emf_prov.Owner.PrimaryTitle.GetID] ([emf_prov.Owner.PrimaryTitle.GetBaseName]), the capital of [emf_prov.Owner.GetTitledName] (ID: [emf_prov.Owner.GetID])"
			}
		}
		
		# spawn armies
		event_target:emf_prov = {
			ROOT = {
				emf_can_disturb_effect = yes
				set_character_flag = claimant_adventurer
				# base troops
				random_list = {
					30 = {
						spawn_unit = {
							province = PREV
							home = PREV
							owner = THIS
							match_character = event_target:emf_adv_target
							match_mult = 0.2
							match_min = 300
							match_max = 5000
							attrition = 0.25
							earmark = claimant_adventure
							cannot_inherit = yes
							reinforces = yes
						}
						spawn_unit = {
							province = PREV
							home = PREV
							owner = THIS
							match_character = event_target:emf_adv_target
							match_mult = 0.2
							match_min = 300
							match_max = 5000
							attrition = 0.25
							earmark = claimant_adventure
							cannot_inherit = yes
							reinforces = yes
						}
						spawn_unit = {
							province = PREV
							home = PREV
							owner = THIS
							match_character = event_target:emf_adv_target
							match_mult = 0.2
							match_min = 300
							match_max = 5000
							attrition = 0.25
							earmark = claimant_adventure
							merge = yes
							cannot_inherit = yes
							reinforces = yes
						}
					}
					40 = {
						spawn_unit = {
							province = PREV
							home = PREV
							owner = THIS
							match_character = event_target:emf_adv_target
							match_mult = 0.175
							match_min = 300
							match_max = 5000
							attrition = 0.25
							earmark = claimant_adventure
							cannot_inherit = yes
							reinforces = yes
						}
						spawn_unit = {
							province = PREV
							home = PREV
							owner = THIS
							match_character = event_target:emf_adv_target
							match_mult = 0.175
							match_min = 300
							match_max = 5000
							attrition = 0.25
							earmark = claimant_adventure
							cannot_inherit = yes
							reinforces = yes
						}
						spawn_unit = {
							province = PREV
							home = PREV
							owner = THIS
							match_character = event_target:emf_adv_target
							match_mult = 0.175
							match_min = 300
							match_max = 5000
							attrition = 0.25
							earmark = claimant_adventure
							merge = yes
							cannot_inherit = yes
							reinforces = yes
						}
					}
					30 = {
						spawn_unit = {
							province = PREV
							home = PREV
							owner = THIS
							match_character = event_target:emf_adv_target
							match_mult = 0.15
							match_min = 300
							match_max = 5000
							attrition = 0.25
							earmark = claimant_adventure
							cannot_inherit = yes
							reinforces = yes
						}
						spawn_unit = {
							province = PREV
							home = PREV
							owner = THIS
							match_character = event_target:emf_adv_target
							match_mult = 0.15
							match_min = 300
							match_max = 5000
							attrition = 0.25
							earmark = claimant_adventure
							cannot_inherit = yes
							reinforces = yes
						}
						spawn_unit = {
							province = PREV
							home = PREV
							owner = THIS
							match_character = event_target:emf_adv_target
							match_mult = 0.15
							match_min = 300
							match_max = 5000
							attrition = 0.25
							earmark = claimant_adventure
							merge = yes
							cannot_inherit = yes
							reinforces = yes
						}
					}
				}
				# troops bought with wealth
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				emf_adventurer_buy_troops_effect = yes
				# diplomacy/leadership troops
				if = {
					limit = { diplomacy = 12 }
					spawn_unit = {
						province = PREV
						home = PREV
						owner = THIS
						match_character = event_target:emf_adv_target
						match_mult = 0.05
						match_min = 100
						match_max = 2000
						attrition = 0.25
						earmark = claimant_adventure
						merge = yes
						cannot_inherit = yes
						reinforces = yes
					}
				}
				if = {
					limit = { diplomacy = 14 }
					spawn_unit = {
						province = PREV
						home = PREV
						owner = THIS
						match_character = event_target:emf_adv_target
						match_mult = 0.05
						match_min = 100
						match_max = 2000
						attrition = 0.25
						earmark = claimant_adventure
						merge = yes
						cannot_inherit = yes
						reinforces = yes
					}
				}
				if = {
					limit = { diplomacy = 16 }
					spawn_unit = {
						province = PREV
						home = PREV
						owner = THIS
						match_character = event_target:emf_adv_target
						match_mult = 0.075
						match_min = 100
						match_max = 2000
						attrition = 0.25
						earmark = claimant_adventure
						merge = yes
						cannot_inherit = yes
						reinforces = yes
					}
				}
				if = {
					limit = { diplomacy = 18 }
					spawn_unit = {
						province = PREV
						home = PREV
						owner = THIS
						match_character = event_target:emf_adv_target
						match_mult = 0.075
						match_min = 100
						match_max = 2000
						attrition = 0.25
						earmark = claimant_adventure
						merge = yes
						cannot_inherit = yes
						reinforces = yes
					}
				}
				if = {
					limit = { diplomacy = 20 }
					spawn_unit = {
						province = PREV
						home = PREV
						owner = THIS
						match_character = event_target:emf_adv_target
						match_mult = 0.075
						match_min = 100
						match_max = 2000
						attrition = 0.25
						earmark = claimant_adventure
						merge = yes
						cannot_inherit = yes
						reinforces = yes
					}
				}
				if = {
					limit = { 
						diplomacy = 10
						martial = 10
						OR = {
							trait = genius
							trait = brilliant_strategist
						}
					}
					spawn_unit = {
						province = PREV
						home = PREV
						owner = THIS
						match_character = event_target:emf_adv_target
						match_mult = 0.125
						match_min = 300
						match_max = 5000
						attrition = 0.25
						earmark = claimant_adventure
						merge = yes
						cannot_inherit = yes
						reinforces = yes
					}
				}
			}
		}
		
		# create a fleet, just to be sure
		spawn_fleet = {
			province = closest # closest sea zone
			owner = ROOT
			disband_on_peace = yes
			merge = yes
			troops = {
				galleys = { 100 100 }
			}
			earmark = claimant_adventure
		}

		# begin war, choosing a claim to use in descending order of tier
		random_claim = {
			limit = {
				tier = EMPEROR
				holder = event_target:emf_adv_target
				holder_scope = {
					NAND = {
						government = nomadic_government
						primary_title = { title = PREVPREV }
					}
				}
			}
			log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) starts claimaint adventure war for [This.GetID] ([This.GetFullName])"
			holder_scope = {
				reverse_war = {
					target = ROOT
					casus_belli = claim
					thirdparty_title = PREV
					infamy = 0
				}
				emf_adventurer_started_war_effect = yes
			}
			break = yes
		}
		random_claim = {
			limit = {
				tier = KING
				holder = event_target:emf_adv_target
				holder_scope = {
					NAND = {
						government = nomadic_government
						clan_title = { title = PREVPREV }
					}
				}
			}
			log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) starts claimaint adventure war for [This.GetID] ([This.GetFullName])"
			holder_scope = {
				reverse_war = {
					target = ROOT
					casus_belli = claim
					thirdparty_title = PREV
					infamy = 0
				}
				emf_adventurer_started_war_effect = yes
			}
			break = yes
		}
		random_claim = {
			limit = {
				tier = DUKE
				holder = event_target:emf_adv_target
			}
			log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) starts claimaint adventure war for [This.GetID] ([This.GetFullName])"
			holder_scope = {
				reverse_war = {
					target = ROOT
					casus_belli = claim
					thirdparty_title = PREV
					infamy = 0
				}
				emf_adventurer_started_war_effect = yes
			}
			break = yes
		}
		random_claim = {
			limit = {
				tier = COUNT
				holder = event_target:emf_adv_target
			}
			log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) starts claimaint adventure war for [This.GetID] ([This.GetFullName])"
			holder_scope = {
				reverse_war = {
					target = ROOT
					casus_belli = claim
					thirdparty_title = PREV
					infamy = 0
				}
				emf_adventurer_started_war_effect = yes
			}
			break = yes
		}
		random_claim = {
			limit = {
				holder = event_target:emf_adv_target
			}
			log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) starts claimaint adventure war for [This.GetID] ([This.GetFullName])"
			holder_scope = {
				reverse_war = {
					target = ROOT
					casus_belli = claim
					thirdparty_title = PREV
					infamy = 0
				}
				emf_adventurer_started_war_effect = yes
			}
			break = yes
		}
		
		log = "ERROR: adventurer: [Root.GetFullName] (ID: [Root.GetID]) did not, after all, have an approprite claim to use for [Root.GetHerHis] claimant adventurer war -- removing adventurer status"
		emf_adventurer_abandon_effect = yes
	}
}

# emf_adventurer.50 [Adventurer]
#
# on_new_holder[_usurpation|inheritance] handler for adventurers gaining regular titles before they've launched their war
character_event = {
	id = emf_adventurer.50
	
	is_triggered_only = yes
	hide_window = yes
	
	has_character_flag = planning_claimant_adventure
	
	trigger = {
		FROM = { adventurer = no }
	}
	
	immediate = {
		emf_adventurer_reset_target_effect = yes
		log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) will abandon [Root.GetHerHis] adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID]) due to gaining the title [From.GetID] ([From.GetFullBaseName])"
		emf_adventurer_abandon_effect = yes
		event_target:emf_adv_target = { character_event = { id = emf_adventurer.43 } } # notify
	}
}

# emf_adventurer.51 [Adventurer]
#
# Claimant adventure has invalidated
character_event = {
	id = emf_adventurer.51
	
	hide_window = yes
	
	only_rulers = yes
	min_age = 16
	has_character_flag = planning_claimant_adventure
	
	trigger = {
		emf_adventurer_is_valid_trigger = no
	}
	
	mean_time_to_happen = {
		days = 1
	}
	
	immediate = {
		emf_adventurer_reset_target_effect = yes
		if = {
			limit = { trait = incapable }
			log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) will abandon [Root.GetHerHis] adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID]) due to becoming incapable"
			emf_adventurer_abandon_effect = yes
			event_target:emf_adv_target = { character_event = { id = emf_adventurer.42 } } # notify
			break = yes
		}
		if = {
			limit = { prisoner = yes } # TODO: allow imprisonment but not for more than 12 months
			log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) will abandon [Root.GetHerHis] adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID]) due to rotting in the dungeons of [Root.Host.GetTitledName] ([Root.Host.PrimaryTitle.GetID] / ID: [Root.Host.GetID])"
			emf_adventurer_abandon_effect = yes
			# TODO: create 'because adventurer is rotting in a dungeon' notification
			event_target:emf_adv_target = { character_event = { id = emf_adventurer.41 } } # notify
			break = yes
		}
		log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) will abandon [Root.GetHerHis] adventure against [emf_adv_target.GetTitledName] (ID: [emf_adv_target.GetID]) due to the adventure invalidating"
		emf_adventurer_abandon_effect = yes
		event_target:emf_adv_target = { character_event = { id = emf_adventurer.41 } } # notify
	}
}

# emf_adventurer.52 [Adventurer]
#
# Adventurer is at least halfway to being ready to launch invasion, warn the target
character_event = {
	id = emf_adventurer.52
	
	hide_window = yes
	
	only_rulers = yes
	min_age = 16
	only_capable = yes
	prisoner = no
	has_character_flag = planning_claimant_adventure
	
	trigger = {
		emf_adventurer_is_valid_trigger = yes
		NOT = { has_character_flag = warned_adventurer_target }
		OR = {
			wealth = 200
			AND = {
				wealth = 100
				diplomacy = 10
				martial = 10
				OR = {
					diplomacy = 16
					trait = genius
					trait = brilliant_strategist
				}
			}
		}
		had_character_flag = { flag = planning_claimant_adventure days = 180 }
	}
	
	mean_time_to_happen = {
		days = 1
	}
	
	immediate = {
		emf_adventurer_reset_target_effect = yes
		event_target:emf_adv_target = { character_event = { id = emf_adventurer.40 } } # notify
		set_character_flag = warned_adventurer_target
	}
}

# emf_adventurer.53 [Adventurer]
#
# Adventurer now feels prepared to launch invasion
character_event = {
	id = emf_adventurer.53
	
	hide_window = yes
	
	only_rulers = yes
	min_age = 16
	only_capable = yes
	prisoner = no
	has_character_flag = planning_claimant_adventure
	
	trigger = {
		emf_adventurer_is_valid_trigger = yes
		war = no
		# has been planning for a minimum of one year
		had_character_flag = { flag = planning_claimant_adventure days = 365 }
		# is not currently disqualified
		NOR = {
			trait = wounded
			is_ill = yes
			has_character_flag = began_adventure
		}
		OR = {
			# has enough wealth on their own
			wealth = 400
			# has half the wealth and is very capable
			AND = {
				wealth = 200
				diplomacy = 10
				martial = 10
				OR = {
					diplomacy = 16
					trait = genius
					trait = brilliant_strategist
				}
			}
		}
	}
	
	mean_time_to_happen = {
		days = 600
		
		modifier = {
			factor = 2
			trait = patient
		}
		modifier = {
			factor = 2
			trait = paranoid
		}
		modifier = {
			factor = 1.333
			martial = 10
		}
		modifier = {
			factor = 1.333
			martial = 12
		}
		modifier = {
			factor = 1.333
			martial = 14
		}
		modifier = {
			factor = 1.333
			martial = 16
		}
		modifier = {
			factor = 1.333
			martial = 18
		}
		modifier = {
			factor = 1.333
			martial = 20
		}
		modifier = {
			factor = 0.667
			NOT = { martial = 8 }
		}
		modifier = {
			factor = 0.5
			trait = wroth
		}
		modifier = {
			factor = 0.2
			OR = {
				trait = lunatic
				trait = possessed
			}
		}
		modifier = {
			factor = 0.2
			had_character_flag = { flag = planning_claimant_adventure days = 730 }
		}
		modifier = {
			factor = 0.2
			had_character_flag = { flag = planning_claimant_adventure days = 900 }
		}
		modifier = {
			factor = 0.2
			had_character_flag = { flag = planning_claimant_adventure days = 1000 }
		}
	}
	
	immediate = {
		set_character_flag = began_adventure
		emf_can_disturb_effect = yes
		character_event = { id = emf_adventurer.49 } # launch invasion
	}
}

# emf_adventurer.54 [Adventurer]
#
# When adventurer is idle, send him off to a new realm (if possible}
character_event = {
	id = emf_adventurer.54
	
	hide_window = yes
	
	only_rulers = yes
	min_age = 16
	prisoner = no
	capable_only = yes
	has_character_flag = planning_claimant_adventure
	
	trigger = {
		emf_adventurer_is_valid_trigger = yes
		emf_can_disturb_trigger = yes
		NOT = { wealth = 1000 }
	}
	
	mean_time_to_happen = {
		days = 30
		modifier = {
			factor = 2
			wealth = 400
		}
		modifier = {
			factor = 2
			wealth = 600
		}
		modifier = {
			factor = 2
			wealth = 800
		}
	}
	
	immediate = {
		character_event = { id = emf_adventurer.10 } # Adventurer moves on
	}
}

# emf_adventurer.55 [Dying Adventurer]
#
# Adventurer dies while holding the title
character_event = {
	id = emf_adventurer.55
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		OR = {
			has_character_flag = claimant_adventurer
			has_character_modifier = planning_claimant_adventure
		}
		any_demesne_title = { adventurer = yes }
	}
	
	immediate = {
		log = "INFO: adventurer: [Root.GetFullName] (ID: [Root.GetID]) has died before completing adventure -- removing adventurer status"
		
		# deal with adventurer's wealth
		if = {
			limit = {
				current_heir = {
					OR = {
						is_child_of = ROOT
						is_married = ROOT
						dynasty = ROOT
					}
				}
			}
			current_heir = {
				ROOT = {
					transfer_scaled_wealth = {
						to = PREV
						value = all
					}
				}
			}
		}
		if = {
			limit = {
				current_heir = {
					NOR = {
						is_child_of = ROOT
						is_married = ROOT
						dynasty = ROOT
					}
				}
			}
			clear_wealth = yes
		}
		
		emf_adventurer_reset_target_effect = yes
		event_target:emf_adv_target = { character_event = { id = emf_adventurer.46 } } # notify target
		emf_adventurer_abandon_effect = yes
	}
}

### DUCHY ADVENTURES
#
# Disabled for now, as I don't have time to create all of these regions used by CK2Plus for both SWMH and vanilla maps, and
# even substituting the vanilla duchy adventurer / other adventurer code back in here may (or may not) be super-easy, as for
# whatever reason the claimant-adventurer-rewritten stuff is in the TOG DLC namespace, and I'd need to be careful about splicing
# the two-- just to keep the relatively dysfunctional vanilla duchy adventurers. Some other day, perhaps.
