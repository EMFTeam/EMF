# -*- ck2.events -*-


namespace = emf_cb

# emf_cb.0 [Attacker]
#
# A smarter version of occupy_minor_holdings_of_occupied_settlements + gain_all_occupied_titles
# that, among other things, limits the occupied title gain to only those titles within certain
# de jure territory.
#
# NOTE: Removed due to broken scripting interface for tribal vassals that are called to war by their liege, making this
# problem intractable for tribals.  Could still be used for special CBs that definitely won't encounter tribals or when,
# if ever, the fundamentally broken scripting interface for reflecting vassal/liege/realm/hostility/war-participants/etc.
# status of such tribal vassals is fixed.
#
# Relevant scopes:
#  emf_cb_title: De jure count- to empire-tier title with which to constrain occupation gains (target title in invasion CBs)
#  ROOT: attacker
#  FROMFROM: defender
# character_event = {
	# id = emf_cb.0
	# hide_window = yes
	# is_triggered_only = yes

	# immediate = {
		# event_target:emf_cb_title = {
			# any_de_jure_vassal_title = {
				# limit = {
					# tier = BARON
					# is_capital = yes # County capital is occupied
					# is_occupied = yes
					# holder_scope = { # ... and is defender's
						# or = {
							# character = FROMFROM
							# is_liege_or_above = FROMFROM
						# }
					# }
					# controller = { # ... and the controller is a participant on the attacking side of this war
						# any_war = {
							# attacker = { character = ROOT }
							# defender = { character = FROMFROM }
							# any_attacker = { character = PREVPREV }
						# }
					# }
				# }

				# dejure_liege_title = {
					# gain_title = ROOT # Gain the county

					# # Gain all holdings from FROMFROM's realm (and apply recently_conquered holding modifiers and such)
					# ROOT = {
						# gain_settlements_under_title = {
							# title = PREV
							# enemy = FROMFROM
							# is_crusade = yes
							# type = invasion
						# }
					# }
				# }
			# }
		# }
	# }
# }

# emf_cb.5 -- invalidate all civil wars from which ROOT is defending
character_event = {
	id = emf_cb.5

	is_triggered_only = yes
	hide_window = yes

	only_playable = yes
	war = yes

	immediate = {
		any_war = {
			limit = {
				defender = { character = ROOT }
				# NOTE: last time I tested, this OR cannot be a scripted trigger (v2.5 -- Conclave) because
				# of weirdness with either the `using_cb` trigger or simply being in `any_war` scope -- it's
				# weird, and I'd love it if someone could show me it now worked. That's the only reason these
				# exist as utility events.
				OR = {
					using_cb = claim_on_liege
					using_cb = claim_on_liege_plot
					using_cb = claim_on_vassal_plot
					using_cb = other_claim_on_liege
					using_cb = bid_for_independence
					using_cb = overthrow_ruler
					using_cb = overthrow_ruler_no_calls
					using_cb = cb_faction_independence
					using_cb = cb_install_antiking
					using_cb = cb_install_khan
					using_cb = increase_council_power_war
					using_cb = truebelievers_bid_for_independence
					using_cb = abrahamic_antihellenic_revolt
					using_cb = emf_faction_gender_succ_agnatic
					using_cb = emf_faction_gender_succ_cognatic
					using_cb = emf_faction_gender_succ_true_cognatic
					using_cb = emf_faction_gender_succ_enatic_cognatic
					using_cb = emf_faction_gender_succ_enatic
					using_cb = emf_faction_overthrow
					using_cb = emf_faction_overthrow_CA
					using_cb = emf_faction_overthrow_TO
					using_cb = emf_faction_overthrow_obligations
					using_cb = emf_faction_succ_aztec_elective
					using_cb = emf_faction_succ_byzantine_elective
					using_cb = emf_faction_succ_dynastic_elective
					using_cb = emf_faction_succ_eldership
					using_cb = emf_faction_succ_elective_gavelkind
					using_cb = emf_faction_succ_feudal_elective
					using_cb = emf_faction_succ_gavelkind
					using_cb = emf_faction_succ_hre_elective
					using_cb = emf_faction_succ_mirath
					using_cb = emf_faction_succ_pictish_elective
					using_cb = emf_faction_succ_primogeniture
					using_cb = emf_faction_succ_seniority
					using_cb = emf_faction_succ_tanistry
					using_cb = emf_faction_succ_turkish_succession
					using_cb = emf_faction_succ_ultimogeniture
					using_cb = emf_resist_viceroy_revocation
				}
			}
			end_war = invalid
		}
	}
}

# emf_cb.6 -- invalidate all civil wars in which ROOT is the [primary participant] rebel [leader]
character_event = {
	id = emf_cb.6

	is_triggered_only = yes
	hide_window = yes

	only_rulers = yes
	war = yes

	immediate = {
		any_war = {
			limit = {
				attacker = { character = ROOT }
				# NOTE: last time I tested, this OR cannot be a scripted trigger (v2.5 -- Conclave) because
				# of weirdness with either the `using_cb` trigger or simply being in `any_war` scope -- it's
				# weird, and I'd love it if someone could show me it now worked. That's the only reason these
				# exist as utility events.
				OR = {
					using_cb = claim_on_liege
					using_cb = claim_on_liege_plot
					using_cb = claim_on_vassal_plot
					using_cb = other_claim_on_liege
					using_cb = bid_for_independence
					using_cb = overthrow_ruler
					using_cb = overthrow_ruler_no_calls
					using_cb = cb_faction_independence
					using_cb = cb_install_antiking
					using_cb = cb_install_khan
					using_cb = increase_council_power_war
					using_cb = truebelievers_bid_for_independence
					using_cb = abrahamic_antihellenic_revolt
					using_cb = emf_faction_gender_succ_agnatic
					using_cb = emf_faction_gender_succ_cognatic
					using_cb = emf_faction_gender_succ_true_cognatic
					using_cb = emf_faction_gender_succ_enatic_cognatic
					using_cb = emf_faction_gender_succ_enatic
					using_cb = emf_faction_overthrow
					using_cb = emf_faction_overthrow_CA
					using_cb = emf_faction_overthrow_TO
					using_cb = emf_faction_overthrow_obligations
					using_cb = emf_faction_succ_aztec_elective
					using_cb = emf_faction_succ_byzantine_elective
					using_cb = emf_faction_succ_dynastic_elective
					using_cb = emf_faction_succ_eldership
					using_cb = emf_faction_succ_elective_gavelkind
					using_cb = emf_faction_succ_feudal_elective
					using_cb = emf_faction_succ_gavelkind
					using_cb = emf_faction_succ_hre_elective
					using_cb = emf_faction_succ_mirath
					using_cb = emf_faction_succ_pictish_elective
					using_cb = emf_faction_succ_primogeniture
					using_cb = emf_faction_succ_seniority
					using_cb = emf_faction_succ_tanistry
					using_cb = emf_faction_succ_turkish_succession
					using_cb = emf_faction_succ_ultimogeniture
					using_cb = emf_resist_viceroy_revocation
				}
			}
			end_war = invalid
		}
	}
}


# emf_cb.10
#
# Remove 'recently_conquered' modifiers and refill demesne levies
# within event_target:emf_cb_title
character_event = {
	id = emf_cb.10
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		any_demesne_title = {
			limit = {
				tier = BARON
				de_jure_liege_or_above = event_target:emf_cb_title
			}
			remove_holding_modifier = recently_conquered
			refill_holding_levy = yes
		}
	}
}

# emf_cb.50-51 [Roman Emperor]
#
# Loop over counties not completely-controlled within IR tier 1.
character_event = {
	id = emf_cb.50

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		clear_event_target = emf_ir_uncontrolled_prov
		random_province = {
			limit = { has_flag = emf_ir_uncontrolled_prov }
			clr_flag = emf_ir_uncontrolled_prov
			save_event_target_as = emf_ir_uncontrolled_prov
		}
	}

	option = {
		name = OK
		trigger = {
			event_target:emf_ir_uncontrolled_prov = { always = yes }
		}
		character_event = { id = emf_cb.51 }
	}

	option = {
		name = CANCEL
		trigger = {
			NOT = { event_target:emf_ir_uncontrolled_prov = { always = yes } }
		}
	}
}

character_event = {
	id = emf_cb.51
	desc = emf_cb.51.desc
	picture = GFX_evt_battle_byzantine

	is_triggered_only = yes
	hide_from = yes

	option = {
		name = emf_cb.51.opt.next
		hidden_tooltip = {
			character_event = { id = emf_cb.50 } # Recurse
		}
	}

	option = {
		name = emf_cb.51.opt.done
		hidden_tooltip = {
			any_province = { # Clear any remaining province flags
				limit = { has_flag = emf_ir_uncontrolled_prov }
				clr_flag = emf_ir_uncontrolled_prov
			}
		}
	}
}

# emf_cb.80 -- Invoked from the on_add of the emf_cb_claim_on_vassal_baron_plot CB.
#
# TODO: In CKII v2.8.X, spawn_unit will support `province = closest` (or something like that) which can do this part for
# us much better. Also, revisit the troop calculation bug for these barons in 2.8, as it may have been fixed. [I brought it
# up, but I'm not sure if anybody did anything about it.]
character_event = {
	id = emf_cb.80

	is_triggered_only = yes
	hide_window = yes

	trigger = { tier = BARON }

	immediate = {
		# For every barony we own, try to find a non-hostile nearby province in which to spawn the troop-correction
		# self-matched unit, and then spawn it. Note that technically we're overcompensating if they have multiple
		# baronies in multiple provinces, because I cannot easily match just against the levy of a holding and thus
		# am forced to match against all of their different baronies at once (i.e., match against themselves as a
		# ruler). However, this is typically totally fine, because barons are generally vastly outnumbered by their
		# liege anyway.

		any_demesne_title = {
			refill_holding_levy = yes
			location = { province_event = { id = emf_cb.81 } }
		}
	}
}

# emf_cb.81 -- process a demesne location for baron in emf_cb.80
province_event = {
	id = emf_cb.81

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = { FROMFROM = { NOT = { any_army = { location = { province = ROOT } } } } }
			save_event_target_as = emf_sprov
		}
		random_neighbor_province = {
			limit = {
				NOT = { event_target:emf_sprov = { always = yes } }
				is_land = yes
				FROMFROM = { NOT = { any_army = { location = { province = PREVPREVPREV } } } }
				owner_under_FROMFROM = yes
			}
			save_event_target_as = emf_sprov
		}
		random_neighbor_province = {
			limit = {
				NOT = { event_target:emf_sprov = { always = yes } }
				is_land = yes
				FROMFROM = { NOT = { any_army = { location = { province = PREVPREVPREV } } } }
			}
			save_event_target_as = emf_sprov
		}
		any_neighbor_province = {
			limit = {
				NOT = { event_target:emf_sprov = { always = yes } }
				is_land = yes
				any_neighbor_province = {
					is_land = yes
					FROMFROM = { NOT = { any_army = { location = { province = PREVPREVPREV } } } }
					owner_under_FROMFROM = yes
				}
			}
			random_neighbor_province = {
				limit = {
					NOT = { event_target:emf_sprov = { always = yes } }
					is_land = yes
					FROMFROM = { NOT = { any_army = { location = { province = PREVPREVPREV } } } }
					owner_under_FROMFROM = yes
				}
				save_event_target_as = emf_sprov
			}
			random_neighbor_province = {
				limit = {
					NOT = { event_target:emf_sprov = { always = yes } }
					is_land = yes
					FROMFROM = { NOT = { any_army = { location = { province = PREVPREVPREV } } } }
				}
				save_event_target_as = emf_sprov
			}
			any_neighbor_province = {
				limit = {
					NOT = { event_target:emf_sprov = { always = yes } }
					is_land = yes
					any_neighbor_province = {
						is_land = yes
						FROMFROM = {
							NOT = { any_army = { location = { province = PREVPREVPREV } } }
						}
						owner_under_FROMFROM = yes
					}
				}
				random_neighbor_province = {
					limit = {
						NOT = { event_target:emf_sprov = { always = yes } }
						is_land = yes
						FROMFROM = {
							NOT = { any_army = { location = { province = PREVPREVPREV } } }
						}
						owner_under_FROMFROM = yes
					}
					save_event_target_as = emf_sprov
				}
				random_neighbor_province = {
					limit = {
						NOT = { event_target:emf_sprov = { always = yes } }
						is_land = yes
						FROMFROM = {
							NOT = { any_army = { location = { province = PREVPREVPREV } } }
						}
					}
					save_event_target_as = emf_sprov
				}
			}
		}
		if = {
			limit = { NOT = { event_target:emf_sprov = { always = yes } } }
			# just spawn at home. probably on an island.
			ROOT = { save_event_target_as = emf_sprov }
		}

		if = {
			limit = {
				FROMFROM = {
					ai = no
					any_army = { location = { province = ROOT } }
				}
			}
			# Player actively gaming the system by preventing the levy from even raising in advance, so double
			# the spawn. It's still somewhat pointless since all they need is to siege that one holding and then
			# get 100% WS.
			FROM = {
				spawn_unit = {
					province = event_target:emf_sprov
					home = ROOT
					owner = THIS
					match_character = THIS
					match_mult = 1.0
					disband_on_peace = yes
					cannot_inherit = yes
					reinforces = yes # Try to simulate the reinforcement-in-the-field of actual levies.
					earmark = emf_cb_cvbp_levy
				}
				spawn_unit = {
					province = event_target:emf_sprov
					home = ROOT
					owner = THIS
					match_character = THIS
					match_mult = 0.5
					disband_on_peace = yes
					cannot_inherit = yes
					reinforces = yes # Try to simulate the reinforcement-in-the-field of actual levies.
					earmark = emf_cb_cvbp_levy
				}
				spawn_unit = {
					province = event_target:emf_sprov
					home = ROOT
					owner = THIS
					match_character = THIS
					match_mult = 0.25
					disband_on_peace = yes
					cannot_inherit = yes
					reinforces = yes # Try to simulate the reinforcement-in-the-field of actual levies.
					earmark = emf_cb_cvbp_levy
				}
			}
		}

		FROM = {
			spawn_unit = {
				province = event_target:emf_sprov
				home = ROOT
				owner = THIS
				match_character = THIS
				match_mult = 1.0
				disband_on_peace = yes
				cannot_inherit = yes
				reinforces = yes # Try to simulate the reinforcement-in-the-field of actual levies.
				earmark = emf_cb_cvbp_levy
			}
			spawn_unit = {
				province = event_target:emf_sprov
				home = ROOT
				owner = THIS
				match_character = THIS
				match_mult = 0.5
				disband_on_peace = yes
				cannot_inherit = yes
				reinforces = yes # Try to simulate the reinforcement-in-the-field of actual levies.
				earmark = emf_cb_cvbp_levy
			}
			spawn_unit = {
				province = event_target:emf_sprov
				home = ROOT
				owner = THIS
				match_character = THIS
				match_mult = 0.25
				disband_on_peace = yes
				cannot_inherit = yes
				reinforces = yes # Try to simulate the reinforcement-in-the-field of actual levies.
				earmark = emf_cb_cvbp_levy
			}
		}
	}

	after = { clear_event_target = emf_sprov }
}
