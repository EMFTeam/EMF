# -*- ck2.events -*-


namespace = emf_cb

# emf_cb.0 [Attacker]
#
# A smarter version of occupy_minor_holdings_of_occupied_settlements + gain_all_occupied_titles
# that, among other things, limits the occupied title gain to only those titles within certain
# de jure territory.
#
# NOTE: Removed due to broken scripting interface for tribal vassals that are called to war by their liege, making this
# problem intractable for tribals.  Could still be used for special CBs that definitely won't encounter tribals or when,
# if ever, the fundamentally broken scripting interface for reflecting vassal/liege/realm/hostility/war-participants/etc.
# status of such tribal vassals is fixed.
#
# Relevant scopes:
#  emf_cb_title: De jure count- to empire-tier title with which to constrain occupation gains (target title in invasion CBs)
#  ROOT: attacker
#  FROMFROM: defender
# character_event = {
	# id = emf_cb.0
	# hide_window = yes
	# is_triggered_only = yes
	
	# immediate = {
		# event_target:emf_cb_title = {
			# any_de_jure_vassal_title = {
				# limit = {
					# tier = BARON
					# is_capital = yes # County capital is occupied
					# is_occupied = yes
					# holder_scope = { # ... and is defender's
						# or = {
							# character = FROMFROM
							# is_liege_or_above = FROMFROM
						# }
					# }
					# controller = { # ... and the controller is a participant on the attacking side of this war
						# any_war = {
							# attacker = { character = ROOT }
							# defender = { character = FROMFROM }
							# any_attacker = { character = PREVPREV }
						# }
					# }
				# }

				# dejure_liege_title = {
					# gain_title = ROOT # Gain the county
					
					# # Gain all holdings from FROMFROM's realm (and apply recently_conquered holding modifiers and such)
					# ROOT = {
						# gain_settlements_under_title = {
							# title = PREV
							# enemy = FROMFROM
							# is_crusade = yes
							# type = invasion
						# }
					# }
				# }
			# }
		# }
	# }
# }


# emf_cb.10
#
# Remove 'recently_conquered' modifiers and refill demesne levies
# within event_target:emf_cb_title
character_event = {
	id = emf_cb.10
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		any_demesne_title = {
			limit = {
				tier = BARON
				de_jure_liege_or_above = event_target:emf_cb_title
			}
			remove_holding_modifier = recently_conquered
			refill_holding_levy = yes
		}
	}
}

# emf_cb.50-51 [Roman Emperor]
#
# Loop over counties not completely-controlled within IR tier 1.
character_event = {
	id = emf_cb.50
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		clear_event_target = emf_ir_uncontrolled_prov
		random_province = {
			limit = { has_province_flag = emf_ir_uncontrolled_prov }
			clr_province_flag = emf_ir_uncontrolled_prov
			save_event_target_as = emf_ir_uncontrolled_prov
		}
	}
	
	option = {
		name = OK
		trigger = {
			event_target:emf_ir_uncontrolled_prov = { always = yes }
		}
		character_event = { id = emf_cb.51 }
	}
	
	option = {
		name = CANCEL
		trigger = {
			NOT = { event_target:emf_ir_uncontrolled_prov = { always = yes } }
		}
	}
}

character_event = {
	id = emf_cb.51
	desc = emf_cb.51.desc
	picture = GFX_evt_battle_byzantine
	
	is_triggered_only = yes
	hide_from = yes
	
	option = {
		name = emf_cb.51.opt.next
		hidden_tooltip = {
			character_event = { id = emf_cb.50 } # Recurse
		}
	}
	
	option = {
		name = emf_cb.51.opt.done
		hidden_tooltip = {
			any_province = { # Clear any remaining province flags
				limit = { has_province_flag = emf_ir_uncontrolled_prov }
				clr_province_flag = emf_ir_uncontrolled_prov
			}
		}
	}
}

# emf_cb.60 -- serve ultimatum to Religious Subjugation war loser (or vassal thereof)
character_event = {
	id = emf_cb.60
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	desc = {
		text = emf_cb.60.desc.overlord
		trigger = { character = event_target:emf_cb_loser }
	}

	desc = {
		text = emf_cb.60.desc.underling
		trigger = {
			NOT = { character = event_target:emf_cb_loser }
			NOT = { religion = event_target:emf_cb_winner }
		}
	}

	desc = {
		text = emf_cb.60.desc.underling_samerel
		trigger = {
			NOT = { character = event_target:emf_cb_loser }
			religion = event_target:emf_cb_winner
		}
	}

	immediate = {
		religion_scope = { save_event_target_as = emf_old_religion }
		if = {
			limit = { character = event_target:emf_cb_loser }
			event_target:emf_cb_winner = { emf_cb_relsub_reset_statistics = yes }
		}
		log = "---> emf_cb.60: [Root.GetTitledFirstName] [Root.GetOnlyDynastyName] (#[Root.GetID]/[Root.PrimaryTitle.GetID]) receives ultimatum"
	}

	option = {
		name = {
			text = emf_cb.60.opt.submit_and_convert
			trigger = { NOT = { religion = event_target:emf_cb_winner } }
		}
		name = {
			text = emf_cb.60.opt.submit_samerel
			trigger = { religion = event_target:emf_cb_winner }
		}
		trigger = {
			emf_cb_relsub_can_submit = yes
			NOT = { religion = event_target:emf_cb_winner }
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0
				any_realm_title = {
					tier = COUNT
					NOT = { de_jure_liege_or_above = event_target:emf_cb_title }
				}
			}
			modifier = {
				factor = 1.333
				trait = humble
			}
			modifier = {
				factor = 0.75
				trait = proud
			}
			# vs. secret conversion + submission, not vs. refusal
			modifier = {
				factor = 1.5
				trait = honest
			}
		}
		hidden_tooltip = { log = "----> chooses to submit & truly convert" }
		emf_cb_relsub_basic_submission_decision = yes
		if = {
			limit = { NOT = { religion = event_target:emf_cb_winner } }
			# Mark converted kings & their convertors for the sainthood mechanic
			if = {
				limit = {
					higher_real_tier_than = DUKE
					NOT = { religion_group = christian }
					event_target:emf_cb_winner = { religion_group = christian }
				}
				set_character_flag = king_converted
				event_target:emf_cb_winner = { set_character_flag = converted_king }
			}
			if = {
				limit = { has_secret_religion = yes }
				clear_secret_religion = yes
			}
			if = {
				limit = { higher_tier_than = BARON }
				religion_authority = { modifier = ruler_mass_converted_from years = 15 }
			}
			religion = event_target:emf_cb_winner
			if = {
				limit = { higher_tier_than = BARON }
				event_target:emf_cb_winner = {
					religion_authority = { modifier = ruler_mass_converted_to years = 15 }
				}
			}
			emf_cb_relsub_convert_court = yes
		}
		emf_cb_relsub_ask_vassals_to_convert = yes
	}

	option = {
		name = emf_cb.60.opt.submit_and_pretend_to_convert
		trigger = {
			emf_cb_relsub_can_submit = yes
			NOT = { religion = event_target:emf_cb_winner }
			# Doesn't already have same secret religion as we'd be converting to (CB winner's public religion)
			NOT = { secret_religion = { target = event_target:emf_cb_winner target_type = public } }
		}
		ai_chance = {
			factor = 80
			modifier = {
				factor = 0
				any_realm_title = {
					tier = COUNT
					NOT = { de_jure_liege_or_above = event_target:emf_cb_title }
				}
			}
			modifier = {
				factor = 1.2
				trait = humble
			}
			modifier = {
				factor = 0.85
				trait = proud
			}
			# not vs. refusal, but non-secret submission
			modifier = {
				factor = 1.5
				trait = deceitful
			}
		}
		hidden_tooltip = { log = "----> chooses to submit & pretend to convert" }
		emf_cb_relsub_basic_submission_decision = yes
		# Since the converted king is pretending, don't mark him, but mark the convertor for the sainthood mechanic
		if = {
			limit = {
				higher_real_tier_than = DUKE
				NOT = { religion_group = christian }
				event_target:emf_cb_winner = { religion_group = christian }
			}
			event_target:emf_cb_winner = { set_character_flag = converted_king }
		}
		if = {
			limit = { higher_tier_than = BARON }
			religion_authority = { modifier = ruler_mass_converted_from years = 15 }
		}
		religion = event_target:emf_cb_winner
		if = {
			limit = { higher_tier_than = BARON }
			event_target:emf_cb_winner = {
				religion_authority = { modifier = ruler_mass_converted_to years = 15 }
			}
		}
		# pretenders don't try to convert their court at all
		trigger_switch = {
			on_trigger = has_secret_religion
			yes = { custom_tooltip = { text = RELSUB_CONTINUE_OBSERVING_SECRET_FAITH } }
			no = { set_secret_religion = event_target:emf_old_religion }
		}
		emf_cb_relsub_ask_vassals_to_convert = yes
	}

	option = {
		name = {
			text = emf_cb.60.opt.refuse_diffrel
			trigger = { NOT = { religion = event_target:emf_cb_winner } }
		}
		name = {
			text = emf_cb.60.opt.refuse_samerelcul
			trigger = {
				religion = event_target:emf_cb_winner
				culture = event_target:emf_cb_winner
			}
		}
		name = {
			text = emf_cb.60.opt.refuse_diffcul
			trigger = {
				religion = event_target:emf_cb_winner
				NOT = { culture = event_target:emf_cb_winner }
			}
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0
				religion = event_target:emf_cb_winner
				NOT = {
					any_realm_title = {
						tier = COUNT
						NOT = { de_jure_liege_or_above = event_target:emf_cb_title }
					}
				}
			}
			# Adds the opinion from 'ROOT' to 'who' multiplied by factor to the score.
			additive_opinion_modifier = {
				who = event_target:emf_cb_winner
				factor = -0.2 # 20 to -20, from least opinion to most opinion
				always = yes
			}
			# Adds the percentage of available troops from 'ROOT' to 'who' multiplied by factor to the score.
			additive_power_diff_modifier = {
				who = event_target:emf_cb_winner
				factor = 0.2 # 0 (when having no relative power) to 20 (when equally powerful)
				always = yes
			}
			# Adds the percentage of realm size from 'ROOT' to 'who' multiplied by factor to the score.
			additive_compared_realm_size_modifier = {
				who = event_target:emf_cb_winner
				factor = 0.5
				always = yes
			}
			# Effects of zeal, rationality, greed, and ambition. Note all tests are simply for "non-negative,"
			# as these properties are on a scale of [-100,100].
			additive_modifier = {
				value = 20
				ai_zeal = 0
				has_secret_religion = no
			}
			additive_modifier = {
				value = -20
				ai_rationality = 0
			}
			additive_modifier = {
				value = -10
				ai_greed = 0
			}
			additive_modifier = {
				value = 20
				ai_ambition = 0
			}
			# Counts and barons are significantly less likely to refuse the ultimatum
			modifier = {
				factor = 0.5
				lower_real_tier_than = DUKE
			}
			# Pagans are more willing to submit & convert than those of organized religions
			modifier = {
				factor = 0.5
				religion_group = pagan_group
				is_reformed_religion = no
			}
			# Zoroastrians should be slightly more willing to submit & convert than normal
			modifier = {
				factor = 0.85
				religion_group = zoroastrian_group
			}
			# Counterbalance modifiers that differ between submit vs. submit & follow secret religion
			modifier = {
				factor = 1.5
				OR = { trait = honest trait = deceitful }
			}
		}
		hidden_tooltip = {
			log = "----> chooses to refuse ultimatum"
			# Ensure that we can be reached later
			reverse_opinion = { who = event_target:emf_cb_winner modifier = refused_my_relsub }
			# Mark titles to be taken
			any_demesne_title = {
				limit = {
					de_jure_liege_or_above = event_target:emf_cb_title
					NOT = { ROOT = { family_palace = { title = PREVPREV } } }
				}
				set_title_flag = emf_relsub_tmp_take_title
				event_target:emf_cb_winner = {
					change_variable = { which = "emf_relsub_titles_taken" value = 1 }
					if = {
						limit = { PREV = { tier = COUNT } }
						change_variable = { which = "emf_relsub_counties_taken" value = 1 }
					}
				}
			}
			# Since we're refusing, our direct vassals shall receive the same peace offer/ultimatum
			any_vassal = {
				limit = { any_realm_title = { de_jure_liege_or_above = event_target:emf_cb_title } }
				character_event = { id = emf_cb.60 }
			}
		}
		if = {
			limit = {
				is_patrician = no # Would have had their family palace to fall back upon
				NOT = {
					any_demesne_title = {
						tier = COUNT
						NOT = { de_jure_liege_or_above = event_target:emf_cb_title }
					}
				}
			}
			custom_tooltip = { text = GAME_OVER_OPTION_WARNING }
			custom_tooltip = { text = emf_ctt_break }
		}
		custom_tooltip = { text = RELSUB_WILL_SEND_ULTIMATUM_TO_DIRECT_VASSALS }
		custom_tooltip = { text = RELSUB_LOSE_ALL_LAND_WITHIN_TARGET_TITLE }
		tooltip = {
			any_demesne_title = {
				limit = {
					tier = COUNT
					de_jure_liege_or_above = event_target:emf_cb_title
				}
				usurp_title = event_target:emf_cb_winner
			}
			any_demesne_title = {
				limit = {
					tier = BARON
					de_jure_liege_or_above = event_target:emf_cb_title
					NOT = { ROOT = { family_palace = { title = PREVPREV } } }
					# Do not list the province capital baronies since we listed the county already
					is_capital = no
				}
				usurp_title = event_target:emf_cb_winner
			}
		}
	}

	after = {
		# After all the recursion's done, we'll be the initial receiver of this event, and we kick back results to
		# the CB winner in order to actually execute the effects.
		if = {
			limit = { character = event_target:emf_cb_loser }
			event_target:emf_cb_winner = { character_event = { id = emf_cb.63 } }
		}
	}
}

# emf_cb.61 -- my liege has bent the knee and [apparently] converted, how do I react? [religious subjugation]
character_event = {
	id = emf_cb.61
	desc = emf_cb.61.desc
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes
	show_from_from = yes # we always bounce through emf_cb.62, so FROMFROM is the portrait to show

	trigger = { NOT = { religion = event_target:emf_cb_winner } }

	immediate = {
		religion_scope = { save_event_target_as = emf_old_religion }
	}

	option = {
		name = emf_cb.61.opt.convert_too
		trigger = {
			can_change_religion = yes
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 1.5
				trait = cynical
			}
			modifier = {
				factor = 1.5
				trait = honest
			}
			modifier = {
				factor = 1.5
				trait = humble
			}
		}
		if = {
			limit = { has_secret_religion = yes }
			clear_secret_religion = yes
		}
		hidden_tooltip = {
			event_target:emf_cb_winner = {
				change_variable = { which = "emf_relsub_lords_converted" value = 1 }
			}
		}
		if = {
			limit = { higher_tier_than = BARON }
			religion_authority = { modifier = ruler_mass_converted_from }
		}
		religion = event_target:emf_cb_winner
		if = {
			limit = { higher_tier_than = BARON }
			event_target:emf_cb_winner = { religion_authority = { modifier = ruler_mass_converted_to } }
		}
		emf_cb_relsub_convert_court = yes
		opinion = { who = LIEGE modifier = opinion_relsub_converted_with_my_liege }
		reverse_opinion = { who = LIEGE modifier = opinion_relsub_converted_with_me }
		# Since we chose to convert, pass the choice on to our direct vassals
		emf_cb_relsub_ask_vassals_to_convert = yes
	}

	option = {
		name = emf_cb.61.opt.pretend_to_convert_too
		trigger = {
			can_change_religion = yes
			# Doesn't already have same secret religion as we'd be converting to (CB winner's public religion)
			NOT = { secret_religion = { target = event_target:emf_cb_winner target_type = public } }
		}
		ai_chance = {
			factor = 60
			modifier = {
				factor = 1.5
				trait = cynical
			}
			modifier = {
				factor = 1.5
				trait = deceitful
			}
			modifier = {
				factor = 1.25
				trait = proud
			}
		}
		hidden_tooltip = {
			event_target:emf_cb_winner = {
				change_variable = { which = "emf_relsub_lords_converted" value = 1 }
			}
		}
		if = {
			limit = { higher_tier_than = BARON }
			religion_authority = { modifier = ruler_mass_converted_from }
		}
		religion = event_target:emf_cb_winner
		if = {
			limit = { higher_tier_than = BARON }
			event_target:emf_cb_winner = { religion_authority = { modifier = ruler_mass_converted_to } }
		}
		# pretenders don't want to try to convert their court and can get away with that, so they don't
		trigger_switch = {
			on_trigger = has_secret_religion
			yes = { custom_tooltip = { text = RELSUB_CONTINUE_OBSERVING_SECRET_FAITH } }
			no = { set_secret_religion = event_target:emf_old_religion }
		}
		opinion = { who = LIEGE modifier = opinion_relsub_converted_with_my_liege }
		reverse_opinion = { who = LIEGE modifier = opinion_relsub_converted_with_me }
		emf_cb_relsub_ask_vassals_to_convert = yes
	}

	option = {
		name = emf_cb.61.opt.refuse
		ai_chance = {
			factor = 100
			modifier = {
				factor = 1.5
				trait = zealous
			}
			modifier = {
				factor = 1.5
				trait = proud
			}
			# Counterbalance modifiers that differ between convert vs. convert & follow secret religion
			modifier = {
				factor = 1.5
				OR = { trait = honest trait = deceitful }
			}
		}
		opinion = { who = event_target:emf_cb_loser modifier = opinion_relsub_submitted_to_infidel_conqueror }
		reverse_opinion = { who = LIEGE modifier = opinion_relsub_refused_to_convert_with_me }
	}
}

# emf_cb.62 -- proxy for emf_cb.62 recursion to filter same-religion lords and yet propogate mass conversion choices to their
#              vassals.
character_event = {
	id = emf_cb.62

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Grr, can't wait for if/else_if/else...
		if = {
			limit = { NOT = { religion = event_target:emf_cb_winner } }
			set_character_flag = emf_relsub_tmp_infidel
		}
		if = { # Infidel to CB winner
			limit = { has_character_flag = emf_relsub_tmp_infidel }
			character_event = { id = emf_cb.61 }
		}
		if = { # Same-religion as CB winner
			limit = { NOT = { has_character_flag = emf_relsub_tmp_infidel } }
			hidden_tooltip = {
				event_target:emf_cb_winner = {
					change_variable = { which = "emf_relsub_lords_liberated" value = 1 }
				}
			}
			emf_cb_relsub_ask_vassals_to_convert = yes
		}
	}

	after = { clr_character_flag = emf_relsub_tmp_infidel }
}

character_event = {
	id = emf_cb.63
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	desc = {
		text = emf_cb.63.desc.subjugated_overlord
		trigger = {
			has_opinion_modifier = { who = event_target:emf_cb_loser modifier = submits_to_my_relsub }
		}
	}

	desc = {
		text = emf_cb.63.desc.subjugated_underlings
		trigger = {
			NOT = { has_opinion_modifier = { who = event_target:emf_cb_loser modifier = submits_to_my_relsub } }
			has_any_opinion_modifier = submits_to_my_relsub
		}
	}

	desc = {
		text = emf_cb.63.desc.subjugated_nobody
		trigger = {
			NOT = { has_any_opinion_modifier = submits_to_my_relsub }
		}
	}

	immediate = {
		# Lords are also nobles
		change_variable = { which = "emf_relsub_nobles_converted" which = "emf_relsub_lords_converted" }
		log = "---> emf_cb.63: results are in:"
		log = "----> [Root.emf_relsub_titles_taken.GetValue] titles to take ([Root.emf_relsub_counties_taken.GetValue] counties)"
		log = "----> [Root.emf_relsub_nobles_converted.GetValue] nobles converted ([Root.emf_relsub_lords_converted.GetValue] rulers)"
		log = "----> [Root.emf_relsub_lords_liberated.GetValue] same-religion rulers liberated"
	}

	option = {
		name = {
			text = emf_cb.63.opt.ok_normal
			trigger = {
				OR = {
					check_variable = { which = "emf_relsub_counties_taken" value = 1 }
					check_variable = { which = "emf_relsub_lords_converted" value = 1 }
				}
			}
		}
		name = {
			text = emf_cb.63.opt.ok_no_counties_seized
			trigger = {
				NOT = { check_variable = { which = "emf_relsub_counties_taken" value = 1 } }
			}
		}
		name = {
			text = emf_cb.63.opt.ok_no_lords_converted
			trigger = {
				NOT = { check_variable = { which = "emf_relsub_lords_converted" value = 1 } }
			}
		}
		custom_tooltip = { text = RELSUB_LORDS_WHO_BENT_THE_KNEE }
		any_opinion_modifier_target = {
			limit = {
				tier = KING
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_cb_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = DUKE
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_cb_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = COUNT
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_cb_relsub_subjugate = yes
		}
		any_opinion_modifier_target = {
			limit = {
				tier = BARON
				reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
			}
			emf_cb_relsub_subjugate = yes
		}
		custom_tooltip = { text = RELSUB_TITLES_SEIZED }
		# Instead of choosing the considerably more efficient way to access the titles marked for taking (i.e., scope
		# to rulers via refused_my_relsub TOM and then scope to their flagged demesne titles), we use
		# any_landed_title so that we can ensure the tier-based sort/priority order is upheld in the tooltip:
		any_landed_title = {
			limit = {
				tier = COUNT
				has_title_flag = emf_relsub_tmp_take_title
				owner = { reverse_has_opinion_modifier = { who = ROOT modifier = refused_my_relsub } }
			}
			usurp_title_plus_barony_if_unlanded = { target = event_target:emf_cb_winner type = holy_war }
		}
		any_landed_title = {
			limit = {
				tier = BARON
				has_title_flag = emf_relsub_tmp_take_title
				owner = { reverse_has_opinion_modifier = { who = ROOT modifier = refused_my_relsub } }
			}
			# Hide usurpation tooltip for province capital baronies, as they're covered by the count-tier case
			if = {
				limit = { is_capital = yes }
				hidden_tooltip = {
					usurp_title_plus_barony_if_unlanded = {
						target = event_target:emf_cb_winner
						type = holy_war
					}
				}
			}
			if = {
				limit = { is_capital = no }
				usurp_title_plus_barony_if_unlanded = { target = event_target:emf_cb_winner type = holy_war }
			}
		}
	}

	after = {
		# Cleanup our remaining variables, TOMs, and flags
		emf_cb_relsub_reset_statistics = yes
		hidden_tooltip = {
			any_opinion_modifier_target = {
				limit = {
					OR = {
						reverse_has_opinion_modifier = { who = ROOT modifier = submits_to_my_relsub }
						reverse_has_opinion_modifier = { who = ROOT modifier = refused_my_relsub }
					}
				}
				reverse_remove_opinion = { who = ROOT modifier = submits_to_my_relsub }
				reverse_remove_opinion = { who = ROOT modifier = refused_my_relsub }
				any_demesne_title = { clear_flags_with_prefix = emf_relsub_tmp }
			}
		}
	}
}

