namespace = emf_borders

# emf_borders.0 -- playable rulers that either own baronies for which the associated county is outside of their top
# realm or have BARON-tier vassals in counties which are outside of their top realm, MTTH
character_event {
	id = emf_borders.0
	hide_window = yes

	only_playable = yes
	war = no
	ai = yes

	trigger {
		war = no
		ai = yes
		OR {
			independent = yes
			NOT { any_liege { in_revolt = yes } }
		}
		in_revolt = no
		controls_religion = no
		holy_order = no
		is_merchant_republic = no
		is_patrician = no
		NOT {
			any_liege {
				OR {
					controls_religion = yes
					holy_order = yes
					is_merchant_republic = yes
					is_patrician = yes
				}
			}
		}
		OR {
			any_demesne_title {
				tier == BARON
				dejure_liege_title.owner.same_realm != ROOT
			}
			any_vassal {
				tier == BARON
				is_patrician = no
				capital_holding.dejure_liege_title.owner.same_realm != ROOT
			}
		}
	}

	mean_time_to_happen { days = 1 }

	immediate {
		# forfeit owned non-DJ baronies
		any_demesne_title {
			tier == BARON
			dejure_liege_title.owner.same_realm != ROOT
		}
		do {
			save_target = barony_to_shed
			dejure_liege_title.owner.character_event { id = emf_borders.2 }
			clear_target = barony_to_shed
		}
		# transfer non-DJ BARON vassals
		any_vassal {
			tier == BARON
			is_patrician = no
			capital_holding.dejure_liege_title.owner.same_realm != ROOT
		}
		do {
			capital_holding.dejure_liege_title.owner.set_defacto_vassal = PREVPREVPREV
			emf_liege_change = yes
			if { same_realm != ROOT } then {
				character_event { id = emf_borders.1 }
			}
		}
	}
}

# emf_borders.1 -- barons that own baronies outside of their top realm borders
character_event {
	id = emf_borders.1

	is_triggered_only = yes # yearly pulse & from emf_borders.0
	hide_window = yes

	only_rulers = yes
	war = no
	ai = yes

	trigger {
		tier == BARON
		war = no
		in_revolt = no
		independent = no
		ai = yes
		is_patrician = no
		is_merchant_republic = no
		NOT {
			any_liege {
				OR {
					in_revolt = yes
					controls_religion = yes
					holy_order = yes
					is_merchant_republic = yes
					is_patrician = yes
				}
			}
		}
		any_demesne_title {
			location.owner.same_realm != ROOT
		}
	}

	immediate {
		if { num_of_baron_titles == 1 } then {
			capital_holding.location.owner.set_defacto_vassal = ROOT
			emf_liege_change = yes
		}
		else {
			any_demesne_title { location.owner.same_realm != ROOT } do {
				save_target = barony_to_shed
				location.owner.character_event { id = emf_borders.2 }
				clear_target = barony_to_shed
			}
		}
	}
}

# emf_borders.2 -- given a barony target:barony_to_shed, create a new, appropriately-typed character for the barony,
# grant it to the new character, and then vassalize them to the barony's containing province's holder (ROOT).
character_event {
	id = emf_borders.2

	is_triggered_only = yes
	hide_window = yes

	trigger {
		t:barony_to_shed.location.owner.character = ROOT
	}

	immediate {
		if { t:barony_to_shed { holding_type = temple } } then {
			random_list = {
				50 = {
					modifier = {
						factor = 0
						religion_allows_male_temple_holders = no
					}
					create_random_priest = {
						random_traits = yes
						dynasty = none
						female = no
						attributes = {
							diplomacy = 2
							martial = 2
							stewardship = 2
							intrigue = 2
							learning = 5
						}
					}
				}
				50 = {
					modifier = {
						factor = 0
						religion_allows_female_temple_holders = no
					}
					create_random_priest = {
						random_traits = yes
						dynasty = none
						female = yes
						attributes = {
							diplomacy = 2
							martial = 2
							stewardship = 2
							intrigue = 2
							learning = 5
						}
					}
				}
			}
			new_character {
				save_target = new_baron
				remove_trait = slow
				remove_trait = imbecile
				remove_trait = dull
				emf_remove_lifestyle_traits = yes
				random_list {
					60 { }
					25 { add_trait = theologian }
					15 { add_trait = scholar }
					15 { add_trait = erudite }
					5  { add_trait = shrewd }
				}
				if { OR { religion = cathar religion = bogomilist } } then {
					remove_trait = incapable
					remove_trait = cynical
					remove_trait = lustful
					add_trait = zealous
					add_trait = perfecti
					set_flag = consolamentum_taken
				}
				if { religion_group = indian_group } then {
					add_trait = brahmin
					character_event { id = RoI.30121 }
				}
				emf_new_character = yes
			}
		}
		elsif { t:barony_to_shed { holding_type = city } } then {
			random_list = {
				50 = {
					modifier = {
						factor = 0
						has_religion_feature = religion_matriarchal
					}
					create_random_steward = {
						random_traits = yes
						dynasty = none
						female = no
						attributes = {
							diplomacy = 2
							martial = 2
							stewardship = 5
							intrigue = 2
							learning = 2
						}
					}
				}
				50 = {
					modifier = {
						factor = 0
						gender_equality_trigger = no
						NOT = { has_religion_feature = religion_matriarchal }
					}
					create_random_steward = {
						random_traits = yes
						dynasty = none
						female = yes
						attributes = {
							diplomacy = 2
							martial = 2
							stewardship = 5
							intrigue = 2
							learning = 2
						}
					}
				}
			}
			new_character {
				save_target = new_baron
				remove_trait = slow
				remove_trait = imbecile
				remove_trait = dull
				emf_new_character_noble = yes
			}
		}
		else {
			random_list = {
				50 = {
					modifier = {
						factor = 0
						has_religion_feature = religion_matriarchal
					}
					create_random_soldier = {
						random_traits = yes
						dynasty = none
						female = no
						attributes = {
							diplomacy = 2
							martial = 5
							stewardship = 2
							intrigue = 2
							learning = 2
						}
					}
				}
				50 = {
					modifier = {
						factor = 0
						gender_equality_trigger = no
						NOT = { has_religion_feature = religion_matriarchal }
					}
					create_random_soldier = {
						random_traits = yes
						dynasty = none
						female = yes
						attributes = {
							diplomacy = 2
							martial = 5
							stewardship = 2
							intrigue = 2
							learning = 2
						}
					}
				}
			}
			new_character = {
				save_target = new_baron
				remove_trait = weak
				remove_trait = slow
				remove_trait = imbecile
				remove_trait = dull
				emf_new_character_noble = yes
			}
		}
		t:barony_to_shed { grant_title = t:new_baron }
		set_defacto_vassal = t:new_baron
	}
}

# emf_borders.5 -- king+ independent rulers whose de facto capital is disconnected from their de jure primary title's
#                  preferred capital will attempt to change their capital to the preferred capital and surrender their prior
#                  de facto capital. this solves a common problem with wonky capital locations on the map, but the point is
#                  actually to improve the meaning / accuracy of our capital-connectedness tracking. this relies on the
#                  simplified assumption that their [de jure] primary title's preferred capital is much more likely to be
#                  connected to the general "home region" of their realm.
character_event {
	id = emf_borders.5

	is_triggered_only = yes # on_yearly_pulse
	hide_window = yes

	only_independent = yes
	war = no
	ai = yes

	trigger {
		tier > DUKE
		primary_title.capital_scope {
			de_jure_liege_or_above = PREVPREV # title's preferred capital hasn't drifted out of title
			has_flag != emf_capital_connected # not connected to current capital
			owner {
				is_liege_or_above = ROOT
				war = no
				ai = yes
			}
		}
	}

	immediate {
		capital_scope.county.save_target = old_cap
		primary_title.capital_scope {
			county.save_target = new_cap
			owner.save_target = revokee
		}

		log = "emf_borders.5: DEBUG: relocating disconnected AI capital for [This.GetTitledFirstName]/#[This.GetID] of the [This.PrimaryTitle.GetFullBaseName]/[This.PrimaryTitle.GetID] from [old_cap.GetBaseName]/[old_cap.GetID] to [new_cap.GetBaseName]/[new_cap.GetID]"

		# need to make sure that if we get temporarily unlanded, our court & prisoners aren't lost
		if { num_of_count_titles == 1 } then {
			any_demesne_title { set_flag = emf_borders_prior_tmp }
			set_flag = emf_crier_no_title_creation
			primary_title {
				create_title = {
					tier = EMPEROR
					landless = yes
					custom_created = yes
					base_title = THIS
					culture = ROOT
					holder = ROOT
				}
			}
			clr_flag = emf_crier_no_title_creation
			random_demesne_title { has_flag != emf_borders_prior_tmp } do { set_flag = emf_autodestroy }
			any_demesne_title { clr_flag = emf_borders_prior_tmp }
		}

		# grant our current capital to the owner of our preferred capital
		t:old_cap {
			# transfer barons
			any_de_jure_vassal { tier = BARON vassal_of = ROOT } do {
				set_defacto_liege = t:revokee
				emf_liege_change = yes
			}

			# transfer county
			gain_title { target = t:revokee type = grant }
			remove_claim = ROOT

			# and subholdings
			any_direct_de_jure_vassal_title { holder = ROOT } do {
				gain_title { target = t:revokee type = grant }
				remove_claim = ROOT
			}
		}

		# now take our preferred capital
		t:new_cap {
			# transfer barons
			any_de_jure_vassal { tier = BARON vassal_of = t:revokee } do {
				set_defacto_liege = ROOT
				emf_liege_change = yes
			}

			# transfer county
			gain_title { target = ROOT type = revoke }
			remove_claim = t:revokee

			# and subholdings
			any_direct_de_jure_vassal_title {
				owner {
					OR {
						character = t:revokee
						AND {
							is_liege_or_above = t:revokee
							PREV { is_allowed_holding_type = ROOT }
						}
					}
				}
			}
			do {
				gain_title { target = t:revokee type = revoke }
				remove_claim = t:revokee
			}
		}

		# get rid of that landless empire title now, if we have one.
		random_demesne_title { has_flag = emf_autodestroy } do { emf_unsafe_destroy_title = yes }

		# ensure the preferred capital is now our de facto capital
		capital = t:new_cap
	}
}
