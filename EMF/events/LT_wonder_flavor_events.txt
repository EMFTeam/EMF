# -*- ck2.events -*-

###########################################
#                                         #
# Wonder Flavor Events          	      #             
#                                         #
# ID LT.20000-                            #
#                                         #
###########################################

# Written by Pedro Santos

namespace = LT

#Events related to the Grand Library

# Hidden event fired randomly on_yearly_pulse, defines book type, author, author´s nationality and city where the book must be searched.

character_event = {
	id = LT.20001
	hide_window = yes
    is_triggered_only = yes

    only_independent = yes

    trigger = { 
    	ROOT = {
    		any_realm_wonder_upgrade = {
    			is_active = yes
    			OR = {
					has_wonder_upgrade_flag = poetry_and_drama
					has_wonder_upgrade_flag = architecture
					has_wonder_upgrade_flag = history_flag
					has_wonder_upgrade_flag = natural_sciences
					has_wonder_upgrade_flag = math_and_philosophy
				}
			}
		}
    	NOR = {
    		has_character_flag = not_interested_in_books
    		has_character_flag = looking_for_a_book
    	}
    }

    immediate = {
    	set_character_flag = looking_for_a_book
    	random_realm_wonder_upgrade = {
    		limit = {
    			is_active = yes
    			OR = {
					has_wonder_upgrade_flag = poetry_and_drama
					has_wonder_upgrade_flag = architecture
					has_wonder_upgrade_flag = history_flag
					has_wonder_upgrade_flag = natural_sciences
					has_wonder_upgrade_flag = math_and_philosophy
				}
    		}
    		wonder = { 
    			save_event_target_as = wonder
    			event_target:wonder = { location = { save_event_target_as = wonder_province } }
    		}
    	}
 
     	random_list = {
     		10 = {
 	    		trigger = {
	    			ROOT = {
	    				any_realm_wonder_upgrade = {
	    					is_active = yes
							has_wonder_upgrade_flag = poetry_and_drama
						}
					}
				}
				random_list = {
					50 = {
						set_character_flag = book_theme_Drama
			    		random_list = {
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Euripedes
			    						any_artifact = { has_artifact_flag = book_author_Euripedes }
			    					}
			    				}
			    				set_character_flag = book_author_Euripedes
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Sophocles
			    						any_artifact = { has_artifact_flag = book_author_Sophocles }
			    					}
			    				}
			    				set_character_flag = book_author_Sophocles
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Aristophanes
			    						any_artifact = { has_artifact_flag = book_author_Aristophanes }
			    					}
			    				}
			    				set_character_flag = book_author_Aristophanes
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Philemon
			    						any_artifact = { has_artifact_flag = book_author_Philemon }
			    					}
			    				}
			    				set_character_flag = book_author_Philemon
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Aeschylus
			    						any_artifact = { has_artifact_flag = book_author_Aeschylus }
			    					}
			    				}
			    				set_character_flag = book_author_Aeschylus
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    		}
			    	}
			    	50 = {
						set_character_flag = book_theme_Poetry
			    		random_list = {
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Archilochus
			    						any_artifact = { has_artifact_flag = book_author_Archilochus }
			    					}
			    				}
			    				set_character_flag = book_author_Archilochus
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Alcman_of_Sparta
			    						any_artifact = { has_artifact_flag = book_author_Alcman_of_Sparta }
			    					}
			    				}
			    				set_character_flag = book_author_Alcman_of_Sparta
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Theocritus
			    						any_artifact = { has_artifact_flag = book_author_Theocritus }
			    					}
			    				}
			    				set_character_flag = book_author_Theocritus
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Sappho
			    						any_artifact = { has_artifact_flag = book_author_Sappho }
			    					}
			    				}
			    				set_character_flag = book_author_Sappho
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    			10 = {
			    				trigger = {
			    					NOR = { 
			    						has_character_flag = book_author_Asclepiades_of_Samos
			    						any_artifact = { has_artifact_flag = book_author_Asclepiades_of_Samos }
			    					}
			    				}
			    				set_character_flag = book_author_Asclepiades_of_Samos
			    				set_character_flag = book_author_nationality_Greek
			    			}
			    		}
			    	}
			    }	
	    	}
     		10 = {
 	    		trigger = {
	    			ROOT = {
	    				any_realm_wonder_upgrade = {
	    					is_active = yes
							has_wonder_upgrade_flag = architecture
						}
					}
				}
				set_character_flag = book_theme_Architecture
	    		random_list = {
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Hermodorus_of_Salamis
			    				any_artifact = { has_artifact_flag = book_author_Hermodorus_of_Salamis }
			    			}
			    		}
	    				set_character_flag = book_author_Hermodorus_of_Salamis
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Vitruvius
			    				any_artifact = { has_artifact_flag = book_author_Vitruvius }
			    			}
			    		}
	    				set_character_flag = book_author_Vitruvius
	    				set_character_flag = book_author_nationality_Roman
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Rabirius
			    				any_artifact = { has_artifact_flag = book_author_Rabirius }
			    			}
			    		}
	    				set_character_flag = book_author_Rabirius
	    				set_character_flag = book_author_nationality_Roman
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Cocceius_Auctus
			    				any_artifact = { has_artifact_flag = book_author_Cocceius_Auctus }
			    			}
			    		}
	    				set_character_flag = book_author_Cocceius_Auctus
	    				set_character_flag = book_author_nationality_Roman
	    			}
	    		}
	    	}
     		10 = {
 	    		trigger = {
	    			ROOT = {
	    				any_realm_wonder_upgrade = {
	    					is_active = yes
							has_wonder_upgrade_flag = math_and_philosophy
						}
					}
				}
				set_character_flag = book_theme_Philosophy
	    		random_list = {
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Plato
			    				any_artifact = { has_artifact_flag = book_author_Plato }
			    			}
			    		}
	    				set_character_flag = book_author_Plato
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Aristotle
			    				any_artifact = { has_artifact_flag = book_author_Aristotle }
			    			}
			    		}
	    				set_character_flag = book_author_Aristotle
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Pythagoras
			    				any_artifact = { has_artifact_flag = book_author_Pythagoras }
			    			}
			    		}
	    				set_character_flag = book_author_Pythagoras
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Thales_of_Mileto
			    				any_artifact = { has_artifact_flag = book_author_Thales_of_Mileto }
			    			}
			    		}
	    				set_character_flag = book_author_Thales_of_Mileto
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Zeno_of_Elea
			    				any_artifact = { has_artifact_flag = book_author_Zeno_of_Elea }
			    			}
			    		}
	    				set_character_flag = book_author_Zeno_of_Elea
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    		}
	    	}
     		10 = {
 	    		trigger = {
	    			ROOT = {
	    				any_realm_wonder_upgrade = {
	    					is_active = yes
							has_wonder_upgrade_flag = history_flag
						}
					}
				}
				set_character_flag = book_theme_History
	    		random_list = {
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Herodotus
			    				any_artifact = { has_artifact_flag = book_author_Herodotus }
			    			}
			    		}
	    				set_character_flag = book_author_Herodotus
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Thucydides
			    				any_artifact = { has_artifact_flag = book_author_Thucydides }
			    			}
			    		}
	    				set_character_flag = book_author_Thucydides
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Polybius
			    				any_artifact = { has_artifact_flag = book_author_Polybius }
			    			}
			    		}
	    				set_character_flag = book_author_Polybius
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Strabo
			    				any_artifact = { has_artifact_flag = book_author_Strabo }
			    			}
			    		}
	    				set_character_flag = book_author_Strabo
	    				set_character_flag = book_author_nationality_Greek
	    			}
	    		}
	    	}
     		10 = {
 	    		trigger = {
	    			ROOT = {
	    				any_realm_wonder_upgrade = {
	    					is_active = yes
							has_wonder_upgrade_flag = natural_sciences
						}
					}
				}
	    		random_list = {
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Hypatia_of_Alexandria
			    				any_artifact = { has_artifact_flag = book_author_Hypatia_of_Alexandria }
			    			}
			    		}
	    				set_character_flag = book_author_Hypatia_of_Alexandria
	    				set_character_flag = book_author_nationality_Greek
	    				set_character_flag = book_theme_Astronomy
	    			}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Ptolemy
			    				any_artifact = { has_artifact_flag = book_author_Ptolemy }
			    			}
			    		}
	    				set_character_flag = book_author_Ptolemy
	    				set_character_flag = book_author_nationality_Roman
	    				set_character_flag = book_theme_Astronomy
	   				}
	    			10 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Aristarchus_of_Samos
			    				any_artifact = { has_artifact_flag = book_author_Aristarchus_of_Samos }
			    			}
			    		}
	    				set_character_flag = book_author_Aristarchus_of_Samos
	    				set_character_flag = book_author_nationality_Greek
	    				set_character_flag = book_theme_Astronomy
	   				}
	    			30 = {
	    				trigger = {
			    			NOR = { 
			    				has_character_flag = book_author_Hippocrates_of_Kos
			    				any_artifact = { has_artifact_flag = book_author_Hippocrates_of_Kos }
			    			}
			    		}
	    				set_character_flag = book_author_Hippocrates_of_Kos
	    				set_character_flag = book_author_nationality_Greek
	    				set_character_flag = book_theme_Medicine
	   				}
	    		}
	    	}
    		1 = { #it should almost never happen, unless the player has all books or found all books of a specific type.
    		set_character_flag = book_author_Virgil
    		set_character_flag = book_author_nationality_Roman
    		set_character_flag = book_theme_Poetry
    		}
    	}
		random_independent_ruler = {
			limit = {
				religion_group = muslim
				NOT = { ROOT = { top_liege = { character = PREVPREV } } }
				is_landed = yes
				any_realm_province = { 
					distance = { 
						who = ROOT
						value > 500
					}
				}
#				
			}
			random_realm_province = {
				limit = {
					distance = { 
						who = ROOT
						value > 500
					}
				}
				save_event_target_as = book_province
			}

		}

		#Fire the news event
		character_event = { id = LT.20010 days = 2 random = 1 }
    }
}

# The Character first knows of the rumor about the lost book
character_event = {
	id = LT.20010
	title = EVT_TITLE_LT_20010
	desc = EVTDESC_LT_20010.1
	desc = EVTDESC_LT_20010.2
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	
	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		war = no
	}
	
	fail_trigger_effect = {
		if = {
			limit = {
				is_alive = yes
				OR = { 
					is_inaccessible_trigger = yes
					war = yes
				}
			}
			repeat_event = { id = LT.20010 days = 365 random = 50 }
		}
	}
	
	immediate = {
		hidden_effect = {
			create_character = {
				religion = ROOT
				culture = ROOT
				dynasty = none
				age = 43
				random_traits = yes
				female = no
				attributes = {
					learning = 12
				}
				health = 6
				trait = scholarly_theologian
			}
			event_target:book_province = {
				holder_scope = {
					save_event_target_as = book_province_holder
					new_character = {
						move_character = PREV
						emf_dna_set_flags_for_high_health = yes
						emf_new_character_priest = yes
					}
					realm = { save_event_target_as = book_province_realm }
			 	}
			}
			
			random_courtier = {
				limit = { 
					prisoner = no
					age > 20
				}
				preferred_limit = { NOT = { is_ruler = yes } }
				preferred_limit = { NOT = { has_job_title = yes } }
				preferred_limit = { trait = scholar }
				preferred_limit = { is_smart_trigger = yes }
				preferred_limit = { learning > 10 }
				preferred_limit = { NOT = { is_dumb_trigger = yes } }
				save_event_target_as = possible_emissary1
			}
			random_courtier = {
				limit = { 
					prisoner = no
					age > 20
					NOT = { character = event_target:possible_emissary1 }
				}
				preferred_limit = { NOT = { is_ruler = yes } }
				preferred_limit = { NOT = { has_job_title = yes } }
				preferred_limit = { trait = scholar }
				preferred_limit = { is_smart_trigger = yes }
				preferred_limit = { learning > 10 }
				preferred_limit = { NOT = { is_dumb_trigger = yes } }
				save_event_target_as = possible_emissary2
			}
		}
	}

	option = { 
		name = EVTOPTA_LT_20010
		treasury = -30	
		custom_tooltip = { text = EVTOPTA_LT_20010_TT }
		event_target:possible_emissary1 = {
			save_event_target_as = emissary
			add_trait = travelling # On a Journey
		}
		hidden_effect = {
			event_target:emissary = {
				move_character = event_target:book_province_holder
			}
			random_list = {
				10 = { #The Book is found
					modifier = {
      					factor = 2
      					event_target:emissary = { trait = diligent }
				    }
				    modifier = {
				    	factor = 2
      					event_target:emissary = { trait = scholar }
      				}
					character_event = { id = LT.20040 days = 100 random = 50 }
					# ?? How to make time depend on distance?
				}
				10 = { #emissary needs more money
					modifier = {
      					factor = 5
				    	trait = deceitful
				    	NOT = { opinion = { who = ROOT value = 20 } }
				    }
					letter_event = { id = LT.20030 days = 100 random = 50 }
				}
				10 = { #It was just a rumor
					character_event = { id = LT.20020 days = 100 random = 50 }
				}
			}
		}
		ai_chance = {
			factor = 30
			modifier = {
				factor = 0
				NOT = { wealth = 50 }
			}
		}
	}

	option = {
		name = EVTOPTB_LT_20010
		treasury = -30
		custom_tooltip = { text = EVTOPTB_LT_20010_TT }	
		event_target:possible_emissary2 = {
			save_event_target_as = emissary
			add_trait = travelling # On a Journey
		}
		hidden_effect = {
			event_target:emissary = {
				move_character = event_target:book_province_holder
			}
			random_list = {
				10 = { #The Book is found
					modifier = {
      					factor = 2
      					event_target:emissary = { trait = diligent }
				    }
				    modifier = {
				    	factor = 2
      					event_target:emissary = { trait = scholar }
      				}
					character_event = { id = LT.20020 days = 100 random = 50 }
				}
				10 = { #emissary needs more money
					modifier = {
      					factor = 5
				    	trait = deceitful
						NOT = { opinion = { who = ROOT value = 20 } }
				    }
					letter_event = { id = LT.20030 days = 100 random = 50 }
				}
				10 = { #It was just a rumor
					character_event = { id = LT.20040 days = 100 random = 50 }
				}
			}
		}
		ai_chance = {
			factor = 30
			modifier = {
				factor = 0
				NOT = { wealth = 50 }
			}
		}
	}

	option = { #Not a good time
		name = EVTOPTC_LT_20010
		prestige = -20
		ai_chance = {
			factor = 30
		}
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}

	option = {
		name = EVTOPTD_LT_20010
		custom_tooltip = { text = EVTOPTD_LT_20010_TT }
		prestige = -50
		set_character_flag = not_interested_in_books
		ai_chance = {
			factor = 10
			modifier = {
				factor = 5
				NOT = { learning = 6 }
			}
		}
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

#Fallback for if the emissary dies
character_event = {
	id = LT.20011
	title = EVT_TITLE_LT_20011
	desc = EVTDESC_LT_20011
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	hide_new = yes
	portrait = event_target:emissary
	
	is_triggered_only = yes

	immediate = {
		export_to_variable = { 
			which = money_left
			value = stewardship
			who = event_target:emissary
		}
	}

	option = {
		name = EVTOPTA_LT_20011
		treasury = money_left
	}

	after = {
		hidden_effect = {
			clr_character_flag = looking_for_a_book
			clear_flags_with_prefix = book_theme_
			clear_flags_with_prefix = book_author_
			set_variable = { which = money_left value = 0 }
		}
	}
}

#The book does not exist
character_event = {
	id = LT.20020
	title = EVT_TITLE_LT_20020
	desc = EVTDESC_LT_20020
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	hide_new = yes
	portrait = event_target:emissary
	
	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		#war = no
	}
	
	fail_trigger_effect = {
		if = {
			limit = {
				is_alive = yes
				event_target:emissary = { is_alive = yes }
				OR = { 
					is_inaccessible_trigger = yes
					#war = yes
				}
			}
			repeat_event = { id = LT.20020 days = 100 random = 10 }
		}
		
		if = {
			limit = {
				NOT = { event_target:emissary = { is_alive = yes } }
			}
			character_event = { id = LT.20011 days = 3 }
		}
	}

	immediate = {
		event_target:emissary = {
			move_character = ROOT
			remove_trait = travelling 
		}
		export_to_variable = { 
			which = money_left
			value = stewardship
			who = event_target:emissary
		}
	}

	option = {
		name = EVTOPTA_LT_20020
		treasury = money_left
	}

	after = {
		hidden_effect = {
			clr_character_flag = looking_for_a_book
			clear_flags_with_prefix = book_theme_
			clear_flags_with_prefix = book_author_
			set_variable = { which = money_left value = 0 }
		}
	}
}

#The emissary needs more money
letter_event = {
	id = LT.20030
	#title = EVT_TITLE_LT_20030
	desc = EVTDESC_LT_20030
	border = GFX_event_letter_frame_intrigue
	hide_new = yes
	portrait = event_target:emissary

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		war = no
	}
	
	fail_trigger_effect = {
		if = {
			limit = {
				is_alive = yes
				event_target:emissary = { is_alive = yes }
				OR = { 
					is_inaccessible_trigger = yes
					war = yes
				}
			}
			repeat_event = { id = LT.20030 days = 100 random = 10 }
		}
		
		if = {
			limit = {
				NOT = { event_target:emissary = { is_alive = yes } }
			}
			character_event = { id = LT.20011 days = 3 }
		}
	}

	option = { #pay
		name = EVTOPTA_LT_20030
		treasury = -50
		event_target:emissary = {
			opinion = {
				modifier = opinion_grateful
				who = ROOT
			}
		}
		hidden_effect = {
			random_list = {
				60 = { #The Book is found
					character_event = { id = LT.20040 days = 100 random = 50 }
					# ?? How to make time depend on distance?
				}
				20 = { #emissary rips off ROOT
					trigger = {
						NOR = {
							event_target:emissary = {
								opinion = { who = ROOT value > 30 }	
							}
							trait = honest
						}
					}
					modifier = {
      					factor = 10
				    	event_target:emissary = {
							opinion = { who = ROOT value < -10 }	
						}
				    }
				    modifier = {
      					factor = 10
				    	trait = deceitful
				    }
					character_event = { id = LT.20035 days = 50 random = 20 }
				}
				20 = { #It was just a rumor
					character_event = { id = LT.20020 days = 100 random = 50 }
				}
			}
		}
		ai_chance = {
			factor = 50
			modifier = {
				factor = 0
				NOT = { wealth = 50 }
			}
		}
	}

	option = { #give up on search
		name = EVTOPTB_LT_20030
		event_target:emissary = {
			move_character = ROOT
			remove_trait = travelling
		}
		prestige = -10
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
		ai_chance = {
			factor = 50
		}
	}
}

#emissary rips off character
character_event = {
	id = LT.20035
	title = EVT_TITLE_LT_20035
	desc = EVTDESC_LT_20035
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_intrigue
	hide_new = yes
	portrait = event_target:emissary

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		#war = no
	}
	
	fail_trigger_effect = {
		if = {
			limit = {
				is_alive = yes
				event_target:emissary = { is_alive = yes }
				OR = { 
					is_inaccessible_trigger = yes
					#war = yes
				}
			}
			repeat_event = { id = LT.20035 days = 200 random = 10 }
		}
		if = {
			limit = {
				NOT = { event_target:emissary = { is_alive = yes } }
			}
			character_event = { id = LT.20011 days = 3 }
		}
	}

	immediate = {
		event_target:emissary = {
			remove_trait = travelling
			opinion = {
				modifier = opinion_afraid
				who = ROOT
				years = 5
			}
			host = { save_event_target_as = emissary_current_host }
		}
	}

	option = {
		name = EVTOPTA_LT_20035
		opinion = {
			modifier = opinion_traitor
			who = event_target:emissary
			years = 5
		}

	}

	option = {
		name = EVTOPTB_LT_20035
		trigger = { intrigue = 15 }
		tooltip_info = intrigue
		opinion = {
			modifier = opinion_traitor
			who = event_target:emissary
			years = 5
		}
		treasury = -10
		custom_tooltip = { text = EVTOPTB_LT_20035_TT }
		hidden_effect = {
			character_event = { id = LT.20036 days = 50 random = 10 }
		}
	}

	after = {
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

#Assassination attempt on the Emissary
character_event = {
	id = LT.20036
	title = EVT_TITLE_LT_20036
	desc = {
		trigger = { event_target:emissary = { is_alive = no } }
		text = EVTDESC_LT_20036_DEAD
	}
	desc = {
		trigger = { event_target:emissary = { is_alive = yes } }
		text = EVTDESC_LT_20036_ALIVE
	}
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_intrigue
	hide_new = yes
	portrait = event_target:emissary

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		#war = no
	}
	
	fail_trigger_effect = {
		if = {
			limit = {
				is_alive = yes
				event_target:emissary = { is_alive = yes }
				OR = { 
					is_inaccessible_trigger = yes
					#war = yes
				}
			}
			repeat_event = { id = LT.20035 days = 20 random = 2 }
		}
		if = {
			limit = {
				NOT = { event_target:emissary = { is_alive = yes } }
			}
			character_event = { id = LT.20011 days = 3 }
		}
	}

	immediate = {
		event_target:emissary = {
			random_list = {
				70 = {
					trigger = { is_alive = yes }
					modifier = {
      					factor = 2
				    	ROOT = { intrigue = 25 }
				    }
				    death = { death_reason = death_murder_unknown killer = ROOT }
				}
				30 = {
					trigger = { is_alive = yes }
					save_event_target_as = target_victim
					ROOT = { 
						character_event = { id = 11 }
						set_character_flag = failed_assassination_attempt
					} # Consequences of discovery 
				}
			}
		}
	}

	option = {
		trigger = {
			NOT = { has_character_flag = failed_assassination_attempt }
		}
		name = EVTOPTA_LT_20036
	}
	option = {
		trigger = {
			has_character_flag = failed_assassination_attempt
		}
		name = EVTOPTB_LT_20036
	}
}

#book found!
character_event = {
	id = LT.20040
	title = EVT_TITLE_LT_20040
	desc = EVTDESC_LT_20040
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	hide_new = yes
	portrait = event_target:emissary

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		war = no
	}
	
	fail_trigger_effect = {
		if = {
			limit = {
				is_alive = yes
				event_target:emissary = { is_alive = yes }
				OR = { 
					is_inaccessible_trigger = yes
					war = yes
				}
			}
			repeat_event = { id = LT.20040 days = 200 random = 10 }
		}
		if = {
			limit = {
				NOT = { event_target:emissary = { is_alive = yes } }
			}
			character_event = { id = LT.20011 days = 3 }
		}
	}

	immediate = {
		hidden_effect = {
			event_target:emissary = {
				remove_trait = travelling
				move_character = ROOT
			}
			trigger_switch = {
	    		on_trigger = has_character_flag
	    		book_theme_Drama = {
	    			add_artifact = antiquity_book_play
	    		}
	    		book_theme_Poetry = {
	    			add_artifact = antiquity_book_poetry
	    		}
	    		book_theme_Architecture = {
	    			add_artifact = antiquity_book_architecture
	    		}
	    		book_theme_Philosophy = {
	    			add_artifact = antiquity_book_philosophy
	    		}
	    		book_theme_History = {
	    			add_artifact = antiquity_book_history
	    		}
	    		book_theme_Astronomy = {
	    			add_artifact = antiquity_book_astronomy
	    		}
	    		book_theme_Medicine = {
	    			add_artifact = antiquity_book_medicine
	    		}
	    	}
	    	new_artifact = {
				set_description = lost_masterpiece_book_desc
				set_creation_date = 1.1.1
				random = {
					chance = 50
		    		set_artifact_flag = fake_antique_book
		    	}
		    	save_event_target_as = the_book
			}
			trigger_switch = { #copying a flag between scopes; there should be a better way to do this...
				on_trigger = has_character_flag
				book_author_Euripedes = { event_target:the_book = { set_artifact_flag = book_author_Euripedes } }
				book_author_Sophocles = { event_target:the_book = { set_artifact_flag = book_author_Sophocles } }
				book_author_Aristophanes = { event_target:the_book = { set_artifact_flag = book_author_Aristophanes } }
				book_author_Philemon = { event_target:the_book = { set_artifact_flag = book_author_Philemon } }
				book_author_Aeschylus = { event_target:the_book = { set_artifact_flag = book_author_Aeschylus } }
				book_author_Archilochus = { event_target:the_book = { set_artifact_flag = book_author_Archilochus } }
				book_author_Alcman_of_Sparta = { event_target:the_book = { set_artifact_flag = book_author_Alcman_of_Sparta } }
				book_author_Theocritus = { event_target:the_book = { set_artifact_flag = book_author_Theocritus } }
				book_author_Sappho = { event_target:the_book = { set_artifact_flag = book_author_Sappho } }
				book_author_Asclepiades_of_Samos = { event_target:the_book = { set_artifact_flag = book_author_Asclepiades_of_Samos } }
				book_author_Hermodorus_of_Salamis = { event_target:the_book = { set_artifact_flag = book_author_Hermodorus_of_Salamis } }
				book_author_Vitruvius = { event_target:the_book = { set_artifact_flag = book_author_Vitruvius } }
				book_author_Rabirius = { event_target:the_book = { set_artifact_flag = book_author_Rabirius } }
				book_author_Cocceius_Auctus = { event_target:the_book = { set_artifact_flag = book_author_Cocceius_Auctus } }
				book_author_Plato = { event_target:the_book = { set_artifact_flag = book_author_Plato } }
				book_author_Aristotle = { event_target:the_book = { set_artifact_flag = book_author_Aristotle } }
				book_author_Pythagoras = { event_target:the_book = { set_artifact_flag = book_author_Pythagoras } }
				book_author_Thales_of_Mileto = { event_target:the_book = { set_artifact_flag = book_author_Thales_of_Mileto } }
				book_author_Zeno_of_Elea = { event_target:the_book = { set_artifact_flag = book_author_Zeno_of_Elea } }
				book_author_Herodotus = { event_target:the_book = { set_artifact_flag = book_author_Herodotus } }
				book_author_Thucydides = { event_target:the_book = { set_artifact_flag = book_author_Thucydides } }
				book_author_Polybius = { event_target:the_book = { set_artifact_flag = book_author_Polybius } }
				book_author_Strabo = { event_target:the_book = { set_artifact_flag = book_author_Strabo } }
				book_author_Hypatia_of_Alexandria = { event_target:the_book = { set_artifact_flag = book_author_Hypatia_of_Alexandria } }
				book_author_Ptolemy = { event_target:the_book = { set_artifact_flag = book_author_Ptolemy } }
				book_author_Aristarchus_of_Samos = { event_target:the_book = { set_artifact_flag = book_author_Aristarchus_of_Samos } }
				book_author_Hippocrates_of_Kos = { event_target:the_book = { set_artifact_flag = book_author_Hippocrates_of_Kos } }
				book_author_Virgil = { event_target:the_book = { set_artifact_flag = book_author_Virgil } }
			}
		}
	}

	option = { #read the book
		name = EVTOPTA_LT_20040
		trigger = { learning = 6 }
		tooltip_info = learning
		custom_tooltip = { text = EVTOPT_LT_20040_TT }
		change_learning = 1
		if = {
				limit = {
					event_target:the_book = {
						has_artifact_flag = fake_antique_book
					}
				}
				character_event = { id = LT.20055 days = 30 random = 10 } #the fake is discovered by the character
		}
		else = {
			clr_character_flag = looking_for_a_book
			clear_flags_with_prefix = book_theme_
			#clear_flags_with_prefix = book_author_
		}
		ai_chance = {
			factor = 40
		}
	}
	option = { #invite the scholars to court
		name = EVTOPTB_LT_20040
		custom_tooltip = { text = EVTOPT_LT_20040_TT }
		trigger = {
			any_realm_wonder = {
				has_wonder_flag = allows_book_analysis_for_court
				is_active = yes
			}
		}
		treasury = -100
		prestige = 20
		character_event = { id = LT.20060 days = 40 random = 10 } #The gathering happens
		ai_chance = {
			factor = 40
			modifier = {
				factor = 0
				NOT = { wealth = 150 }
			}
		}
	}
	option = { #just store the book
		name = EVTOPTC_LT_20040
		custom_tooltip = { text = EVTOPT_LT_20040_TT }
		prestige = 20
		hidden_effect = {
			if = {
				limit = {
					event_target:the_book = {
						has_artifact_flag = fake_antique_book
					}
				}
				character_event = { id = LT.20050 days = 400 random = 300 } #the fake is discovered by third party scholar
			}
			else = {
				clr_character_flag = looking_for_a_book
				clear_flags_with_prefix = book_theme_
				#clear_flags_with_prefix = book_author_  -> For not repeating real books
			}
		}
		ai_chance = {
			factor = 20
		}
	}

	after = {
		opinion = {
			modifier = opinion_glad
			who = event_target:emissary
			years = 5
		}
	}
}

#the fake is discovered by third party scholar
character_event = {
	id = LT.20050
	title = EVT_TITLE_LT_20050
	desc = EVTDESC_LT_20050
	picture = GFX_evt_scandal
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		war = no
	}
	
	fail_trigger_effect = {
		if = {
			limit = {
				is_alive = yes
				OR = { 
					is_inaccessible_trigger = yes
					war = yes
				}
			}
			repeat_event = { id = LT.20050 days = 200 random = 10 }
		}
	}

	immediate = {
		create_character = {
				religion = ROOT
				culture = ROOT
				dynasty = none
				age = 46
				random_traits = yes
				attributes = {
					learning = 15
				}
				health = 6
				trait = scholar
				trait = honest
				trait = brave
		}
		new_character = {
			emf_dna_set_flags_for_high_health = yes
			emf_new_character_priest = yes
			save_event_target_as = the_whistleblower
		}
		add_artifact = antiquity_book_fake
		new_artifact = { 
			set_description = fake_masterpiece_book_desc 
			copy_artifact_history = event_target:the_book
			set_creation_date = 1.1.1
		}
		event_target:the_book = {
			destroy_artifact = yes
		}
	}

	option = { #inprison the whistleblower
		name = EVTOPTA_LT_20050
		new_character = {
			imprison = ROOT
		}
		prestige = -50
		ai_chance = {
			factor = 50
		}
		add_character_modifier = { name = caught_with_forgery years = 1 }
	}
	option = { #reward and hire the whistleblower
		name = EVTOPTB_LT_20050
		treasury = -30
		reverse_opinion = {
			modifier = opinion_loyal_servant
			who = event_target:the_whistleblower
		}
		ai_chance = {
			factor = 50
			modifier = {
				factor = 0
				NOT = { wealth = 50 }
			}
		}
		add_character_modifier = { name = caught_with_forgery years = 1 }
	}

	after = {
 		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

#the fake is discovered by the character reading the book
character_event = {
	id = LT.20055
	title = EVT_TITLE_LT_20055
	desc = EVTDESC_LT_20055
	picture = GFX_evt_open_book_hf
	border = GFX_event_normal_frame_religion
	hide_new = yes

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		#war = no
	}
	
	fail_trigger_effect = {
		if = {
			limit = {
				is_alive = yes
				OR = { 
					is_inaccessible_trigger = yes
					#war = yes
				}
			}
			repeat_event = { id = LT.20055 days = 100 random = 10 }
		}
	}

	immediate = {
		hidden_effect = {
			add_artifact = antiquity_book_fake
				new_artifact = { 
					set_description = fake_masterpiece_book_desc
					copy_artifact_history = event_target:the_book
					set_creation_date = 1.1.1
				}
			event_target:the_book = { destroy_artifact = yes }
		}
	}

	option = { #At least I gained wisdom
		name = EVTOPTA_LT_20055
		prestige = -50
		change_learning = 1
		add_character_modifier = { name = caught_with_forgery years = 1 }
	}
	option = { #burn the dammed book
		name = EVTOPTB_LT_20055
		prestige = -30
		new_artifact = {
			destroy_artifact = yes
		}
	}

	after = {
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

#the gathering of experts
character_event = {
	id = LT.20060
	title = EVT_TITLE_LT_20060
	picture = GFX_placeholder#GFX_evt_gathering_of_minds
	desc =  {
		trigger = {
			NOT = { event_target:the_book = { has_artifact_flag = fake_antique_book } }
		}
		text = EVTDESC_LT_20060_real_book
		picture = GFX_evt_gathering_of_minds
	}
	desc =  {
		trigger = {
			event_target:the_book = { has_artifact_flag = fake_antique_book }
		}
		text = EVTDESC_LT_20060_fake_book
		picture = GFX_evt_scandal
	}
	
	border = GFX_event_normal_frame_religion
	
	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		war = no
		any_realm_wonder = {
			has_wonder_flag = allows_book_analysis_for_court
			is_active = yes
		}
	}
	
	fail_trigger_effect = {
		if = {
			limit = {
				NOT = {
					any_realm_wonder = {
						has_wonder_flag = allows_book_analysis_for_court
						is_active = yes
					}
				} 
			}
			character_event = { id = LT.20070 } #cleanup, if the character lost all libraries
		}
		else_if = {
			limit = {
				is_alive = yes
				OR = { 
					is_inaccessible_trigger = yes
					war = yes
				}
			}
			repeat_event = { id = LT.20060 days = 100 random = 10 }
		}
	}

	immediate = {
		while = { #select a couple of gathering attendees
			count = 3
			limit = { always = yes } #workaround due to while cycle code bug
			random_playable_ruler = { 
				limit = {
					#has_council = yes
					any_realm_province = { 
						# always = yes
						distance = { 
							who = ROOT
							value < 500
						}
					}
				}
				random_courtier = {
					limit = { 
						prisoner = no
						age > 20
						NOT = { is_ruler = yes }
					}
					preferred_limit = { NOT = { has_job_title = yes } }
					preferred_limit = { trait = scholar }
					preferred_limit = { is_smart_trigger = yes }
					preferred_limit = { learning > 15 }
					preferred_limit = { NOT = { is_dumb_trigger = yes } }
					reverse_opinion = {
						who = ROOT
						modifier = opinion_grateful_invitation
					}
					move_character = ROOT
				}
			}
		}
	}

	option = { #Real Great!
		name = EVTOPTA_LT_20060_real_book
 		trigger = {
    		NOT = { event_target:the_book = { has_artifact_flag = fake_antique_book } }
		}
		prestige = 50
		add_character_modifier = { name = artifact_patron years = 2 }
		economy_techpoints = 50
		chronicle = {
  			entry = CHRONICLE_FOUND_REAL_BOOK
  			#portrait = [Root.GetID]
   		}
	}
	option = { #Great, anyway!
		name = EVTOPTA_LT_20060_fake_book
		trigger = {
    		event_target:the_book = { has_artifact_flag = fake_antique_book }
		}
		hidden_effect = {
			add_artifact = antiquity_book_fake
			new_artifact = { 
				set_description = fake_masterpiece_book_desc
				copy_artifact_history = event_target:the_book
				set_creation_date = 1.1.1
			}
			event_target:the_book = {
				destroy_artifact = yes
			}
		}
		prestige = 30
		culture_techpoints = 50
		economy_techpoints = 50
		military_techpoints = 50
		clear_flags_with_prefix = book_author_
	}

	after = {
 		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
	}
}

#clean-up event, if the character lost all libraries after inviting the scholars
character_event = {
	id = LT.20070
	hide_window = yes
    is_triggered_only = yes

    only_independent = yes

    immediate = {
 		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
	}
}


## Tomb is found during wonder construction. Triggered as a random event from on_wonder_construction_start on_action

# To get a delay from the on_action triggered event
character_event = {
	id = LT.20100
	hide_window = yes
    is_triggered_only = yes

    only_independent = yes

    immediate = { character_event = { id = LT.20101 days = 1000 random = 950 } }
}

character_event = {
	id = LT.20101
	title = EVT_TITLE_LT_20101
	desc = EVTDESC_LT_20101.1
	desc = EVTDESC_LT_20101.2
	picture = GFX_evt_construction_site
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		#war = no
		NOT = { has_character_flag = not_interested_in_ruins }
		any_realm_wonder = {
			OR = { 
				is_building_wonder = yes
				is_building_wonder_upgrade = yes
			}
		}
	}
	
	immediate = {
		random_realm_wonder = {
			limit = { 
				is_building_wonder = yes
			}
			save_event_target_as = wonder_or_upgrade
			save_event_target_as = target_wonder
		}
		if = { 
			limit = { NOT = { event_target:target_wonder = { always = yes } } }
			random_realm_wonder_upgrade = {
				limit = {
					is_building_wonder_upgrade = yes
				}
				save_event_target_as = wonder_or_upgrade
				wonder = { save_event_target_as = target_wonder }
			}
		}
		event_target:target_wonder = {
			location = { save_event_target_as = target_province }
		}
	}

	option = { #Yes investigate
		name = EVTOPTA_LT_20101
		custom_tooltip = { text = EVTOPTA_LT_20101_TT }
		scaled_wealth = { value = -0.3 min = -10 max = -60}
		hidden_effect = {
			random_list = {
				10 = { #Accident
					set_character_flag = tomb_found_accident	
				}
				20 = { #Nothing found
					set_character_flag = tomb_found_nothing	
				}
				30 = { #Found valuables
					set_character_flag = tomb_found_valuables_1
				}
				20 = { #Found valuables
					set_character_flag = tomb_found_valuables_2
				}
				10 = {#Found an important treasure
					set_character_flag = tomb_found_artifact
				}
			}
			character_event = { id = LT.20110 days = 7 random = 3 }
		}
	}
	option = { #Yes investigate, expert
		name = EVTOPTD_LT_20101
		trigger = {
			OR = {
				learning = 15
				trait = erudite
				trait = architect
			}
		}
		tooltip_info_custom = EVTOPTD_LT_20101_TT

		scaled_wealth = { value = -0.4 min = -20 max = -80}
		hidden_effect = {
			random_list = {
				20 = { #Nothing found
					set_character_flag = tomb_found_nothing	
				}
				35 = { #Found valuables
					set_character_flag = tomb_found_valuables_1
				}
				25 = { #Found valuables
					set_character_flag = tomb_found_valuables_2
				}
				10 = {#Found an important treasure
					set_character_flag = tomb_found_artifact
				}
			}
			character_event = { id = LT.20110 days = 7 random = 3 }
		}

	}
	option = { #Not interested
		name = EVTOPTB_LT_20101
	}
	option = { #Don´t bother me with this kind of stuff
		name = EVTOPTC_LT_20101
		custom_tooltip = { text = EVTOPTC_LT_20101_TT }
		set_character_flag = not_interested_in_ruins
	}
}

character_event = {
	id = LT.20110
	title = EVT_TITLE_LT_20101
	desc = {
		trigger = { has_character_flag = tomb_found_accident }
		text = EVTDESC_LT_20110_accident
		picture = GFX_evt_dead_body_hf
	}
	desc = {
		trigger = { has_character_flag = tomb_found_nothing }
		text = EVTDESC_LT_20110_found_nothing
		picture = GFX_evt_bad_news
	}
	desc = {
		trigger = { has_character_flag = tomb_found_valuables_1 }
		text = EVTDESC_LT_20110_found_valuables_1
	}
	desc = {
		trigger = { has_character_flag = tomb_found_valuables_2 }
		text = EVTDESC_LT_20110_found_valuables_2
	}
	desc = {
		trigger = { has_character_flag = tomb_found_artifact }
		text = EVTDESC_LT_20110_found_artifact
		picture = GFX_evt_treasure_chamber
	}

	picture = GFX_evt_pagan_artifacts
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		#war = no
		NOT = { has_character_flag = not_interested_in_ruins }
		event_target:target_wonder = {
			wonder_owner = {
				character = ROOT
			}
		}
	}
	fail_trigger_effect = {
		if = { #character lost the wonder
			limit = {
				NOT = {
					event_target:target_wonder = {
						wonder_owner = {
							character = ROOT
						}
					}
				}
			}
			clear_flags_with_prefix = tomb_found_
			event_target:target_wonder = { clr_wonder_flag = unhappy_builders }
		}
	}
	
	immediate = {
		if = {
			limit = { has_character_flag = tomb_found_artifact }
			random_list = {
				20 = {
					trigger = {
						NOT = { has_artifact = armor_tier_2 }
					}
					add_artifact = armor_tier_2
					new_artifact = {
						set_description = tomb_armor_desc
						set_creation_date = 1.1.1
			    		save_event_target_as = found_artifact
					}	

				}
				20 = {
					trigger = { 
						event_target:target_province = { religion_group = christian }
					}
					add_artifact = fingerbone_of_saint
					new_artifact = {
						set_creation_date = 1.1.1
			    		save_event_target_as = found_artifact
					}
				}
				20 = {
					trigger = {
						NOT = { has_artifact = emerald_scepter }
					}
					add_artifact = emerald_scepter
					new_artifact = {
						set_description = tomb_scepter_desc
						set_creation_date = 1.1.1
			    		save_event_target_as = found_artifact
					}
				}
				20 = {
					trigger = {
						NOT = { has_artifact = sword_tier_2_new }
					}
					add_artifact = sword_tier_2_new
					new_artifact = {
						set_description = tomb_sword_desc
						set_creation_date = 1.1.1
			    		save_event_target_as = found_artifact
					}
				}
				1 = {
					clr_character_flag = tomb_found_artifact
					set_character_flag = tomb_found_valuables_2
				}
			}
		}
	}

	option = { #too bad
		name = EVTOPTA_LT_20110
		trigger = { 
			OR = {
				has_character_flag = tomb_found_accident
				has_character_flag = tomb_found_nothing
			}
		}
		if = {
			limit = { has_character_flag = tomb_found_accident }
			scaled_wealth = { value = -0.15 min = -20 max = -40}
			event_target:target_wonder = { set_wonder_flag = unhappy_builders }
			#custom_tooltip = { text = EVTOPTA_LT_20110_TT_unhappy }
			event_target:target_wonder = {
				show_scope_change = no 
				location = {
					add_province_modifier = {
						name = construction_accident
						duration = 365
 					}
 				}
			}
		}
	}
	option = { #compensate the families
		name = EVTOPTF_LT_20110
		trigger = { 
			OR = {
				has_character_flag = tomb_found_accident
			}
		}
		scaled_wealth = { value = -0.4 min = -40 max = -100}
		if = {
			limit = { trait = greedy }
			random = { chance = 75 remove_trait_greedy_effect = yes }
		}
		else_if = {
			limit = { NOT = { trait = charitable } }
			random = { chance = 30 add_trait_charitable_effect = yes }
		}
	}
	option = { #All to me
		name = EVTOPTB_LT_20110
		trigger = {
			OR = { 
				has_character_flag = tomb_found_valuables_1
				has_character_flag = tomb_found_valuables_2
			}
		}
		#custom_tooltip = { text = EVTOPTB_LT_20110_TT_unhappy }
		event_target:target_wonder = { set_wonder_flag = unhappy_builders }
		trigger_switch = {
			on_trigger = has_character_flag
			tomb_found_valuables_1 = {
				wealth = 100
				if = {
					limit = { trait = charitable }
					random = { chance = 50 remove_trait_charitable_effect = yes }
				}
				else_if = {
					limit = { NOT = { trait = greedy } }
					random = { chance = 20 add_trait_greedy_effect = yes }
				}
			}
			tomb_found_valuables_2 = {
				wealth = 200
				if = {
					limit = { trait = charitable }
					random = { chance = 75 remove_trait_charitable_effect = yes }
				}
				else_if = {
					limit = { NOT = { trait = greedy } }
					random = { chance = 30 add_trait_greedy_effect = yes }
				}
			}
		}
	}
	option = { #share the findings
		name = EVTOPTC_LT_20110
		trigger = {
			OR = { 
				has_character_flag = tomb_found_valuables_1
				has_character_flag = tomb_found_valuables_2
			}
		}

		trigger_switch = {
			on_trigger = has_character_flag
			tomb_found_valuables_1 = {
				wealth = 50
				if = {
					limit = { trait = greedy }
					random = { chance = 50 remove_trait_greedy_effect = yes }
				}
				else_if = {
					limit = { NOT = { trait = charitable } }
					random = { chance = 20 add_trait_charitable_effect = yes }
				}
			}
			tomb_found_valuables_2 = {
				wealth = 100
				if = {
					limit = { trait = greedy }
					random = { chance = 75 remove_trait_greedy_effect = yes }
				}
				else_if = {
					limit = { NOT = { trait = charitable } }
					random = { chance = 30 add_trait_charitable_effect = yes }
				}
			}
		}
	}
	option = { #All to me
		name = EVTOPTD_LT_20110
		trigger = { has_character_flag = tomb_found_artifact }
		custom_tooltip = { text = EVTOPT_LT_20110_TT }
		#custom_tooltip = { text = EVTOPTB_LT_20110_TT_unhappy }
		wealth = 150
		event_target:target_wonder = { set_wonder_flag = unhappy_builders }
		if = {
			limit = { trait = charitable }
			random = { chance = 75 remove_trait_charitable_effect = yes }
		}
		else_if = {
			limit = { NOT = { trait = greedy } }
			random = { chance = 30 add_trait_greedy_effect = yes }
		}
	}
	option = { #share the findings
		name = EVTOPTE_LT_20110
		trigger = { has_character_flag = tomb_found_artifact }
		custom_tooltip = { text = EVTOPT_LT_20110_TT }
		if = {
			limit = { trait = greedy }
			random = { chance = 75 remove_trait_greedy_effect = yes }
		}
		else_if = {
			limit = { NOT = { trait = charitable } }
			random = { chance = 30 add_trait_charitable_effect = yes }
		}
		event_target:target_wonder = { clr_wonder_flag = unhappy_builders }
	}
	
	after = {
		clear_flags_with_prefix = tomb_found_
		event_target:target_wonder = { clr_wonder_flag = unhappy_builders } # Remove this one if doing the new event chain
	}
}

## Smith event chain alternative events for Armory upgrade. Event LT.20201 is triggered from a new option EVTOPTC_MNM_9115 in event MNM.9115 from the smith decision event chain, if the character has the "Armory" wonder upgrade. 

#What kind of weapon would you like? (Equivalent to MNM.9118)
character_event = {
    id = LT.20201
    desc = EVTDESC_LT_20201

    picture = GFX_evt_weaponsmith
    border = GFX_event_normal_frame_economy

    is_triggered_only = yes
    
    trigger = {
    	OR = {
    		has_dlc = "Mystics"
    		has_dlc = "Jade Dragon"
    	}
    }

    #Sword
    option = { 
        trigger = { NOR = { religion_group = muslim has_dharmic_religion_trigger = yes } has_character_flag = weaponsmith }
        name = EVTOPTA_MNM_9118
        custom_tooltip = { text = EVTOPTA_MNM_9118_TT }
        hidden_effect = { event_target:smith = { set_character_flag = weapon_sword } }
        scaled_wealth = { value = -1.5 min = -75 max = -150 }
        ai_chance = { factor = 2 }
    }

	#Zweihander Sword
    option = { 
        trigger = { 
        	NOR = { religion_group = muslim has_dharmic_religion_trigger = yes }
        	OR = {
				culture_group = north_germanic
				culture_group = central_germanic
				culture_group = west_germanic
				culture_group = latin
				culture_group = iberian
				culture_group = italian_group
				culture_group = celtic
			}
        	has_character_flag = weaponsmith
        }
        name = EVTOPTA_zweihanded_LT_20201
        custom_tooltip = { text = EVTOPTA_MNM_LT_20201_TT }
        hidden_effect = { event_target:smith = { set_character_flag = zweihanded_sword } }
        scaled_wealth = { value = -2 min = -100 max = -200 }
        ai_chance = { factor = 2 }
    }

    #Scimitar
    option = {
        trigger = { OR = { religion_group = muslim has_dharmic_religion_trigger = yes } has_character_flag = weaponsmith }
        name = EVTOPTB_MNM_9118
        custom_tooltip = { text = EVTOPTB_MNM_9118_TT }
        hidden_effect = { event_target:smith = { set_character_flag = weapon_scimitar } }
        scaled_wealth = { value = -1.5 min = -75 max = -150 }
        ai_chance = { factor = 2 }
    }
    
    #Lance
    option = {
    	trigger = { has_character_flag = weaponsmith }
        name = EVTOPTC_MNM_9118
        custom_tooltip = { text = EVTOPTC_MNM_9118_TT }
        hidden_effect = { event_target:smith = { set_character_flag = weapon_lance } }
        scaled_wealth = { value = -1.5 min = -75 max = -150 }
        ai_chance = { 
        	factor = 1 
        	modifier = { is_nomadic = yes factor = 2 }
        }
    }
    
    #Axe
    option = {
    	trigger = { has_character_flag = weaponsmith }
        name = EVTOPTD_MNM_9118
        custom_tooltip = { text = EVTOPTD_MNM_9118_TT }
        hidden_effect = { event_target:smith = { set_character_flag = weapon_axe } }
        scaled_wealth = { value = -1.5 min = -75 max = -150 }
        ai_chance = { 
        	factor = 1
        	modifier = { is_tribal = yes factor = 3 }
        }
    }

    #Mace
    option = {
        trigger = { is_nomadic = no has_character_flag = weaponsmith }
        name = EVTOPTE_MNM_9118
        custom_tooltip = { text = EVTOPTE_MNM_9118_TT }
        hidden_effect = { event_target:smith = { set_character_flag = weapon_mace } }
        scaled_wealth = { value = -1.5 min = -75 max = -150 }
        ai_chance = { 
        	factor = 1
        	modifier = { religion = norse_pagan factor = 5 }
        	modifier = { religion = norse_pagan_reformed factor = 5 }
        }
    }

    #Bow
    option = {
        trigger = { is_nomadic = yes has_character_flag = weaponsmith }
        name = EVTOPTF_MNM_9118
        custom_tooltip = { text = EVTOPTF_MNM_9118_TT }
        hidden_effect = { event_target:smith = { set_character_flag = weapon_bow } }
        scaled_wealth = { value = -1.5 min = -75 max = -150 }
        ai_chance = { factor = 5 }
    }

    #Armor
    option = {
    	trigger = { has_character_flag = armorsmith }
        name = EVTOPTG_MNM_9118
        custom_tooltip = { text = EVTOPTG_MNM_9118_TT }
        hidden_effect = { event_target:smith = { set_character_flag = armor_set } }
        scaled_wealth = { value = -1.5 min = -75 max = -150 }
    }

    after = {
        hidden_effect = {
        	event_target:smith = { character_event = { id = LT.20209 days = 50 random = 10  } } #ping event
        	clr_character_flag = weaponsmith
       		clr_character_flag = armorsmith
       	}
    }
}

# Ping Event to be able to reuse MNM.9123 localisation

character_event = {
	id = LT.20209
    hide_window = yes

    is_triggered_only = yes
    
    trigger = {
    	OR = {
    		has_dlc = "Mystics"
    		has_dlc = "Jade Dragon"
    	}
    }

    immediate = {
    	if = {
    		limit = { NOT = { event_target:smith_employer = { is_alive = yes } } }
    		liege = { save_event_target_as = smith_employer }
    	}
    	event_target:smith_employer = { character_event = { id = LT.20210 } }
    }
}

# Good weapon produced in the Armory (equivalent to MNM.9123)
character_event = {
    id = LT.20210
    desc = EVTDESC_MNM_9123
    picture = GFX_evt_weaponsmith
    border = GFX_event_normal_frame_economy

    is_triggered_only = yes
    
    trigger = {
    	OR = {
    		has_dlc = "Mystics"
    		has_dlc = "Jade Dragon"
    	}
    }

    option = { 
        name = EVTOPTA_MNM_9123

        if = {
            limit = { FROM = { has_character_flag = weapon_sword } }
            hidden_effect = {
            	add_artifact = sword_tier_2_new
            }
            set_character_flag = sword_tier_2   
            new_artifact = {
            	set_name = artifact_name
            	set_description = artifact_description_smith_tier_2
            }
        }
		if = {
            limit = { FROM = { has_character_flag = zweihanded_sword } }
            hidden_effect = {
            	add_artifact = zweihander_sword
            }
            set_character_flag = zweihanded_sword
            #set_character_flag = sword_tier_2
            new_artifact = {
            	set_name = artifact_name
            	set_description = artifact_description_smith_tier_2
            }
        }
        if = {
            limit = { FROM = { has_character_flag = weapon_scimitar } }
           	hidden_effect = {
            	add_artifact = scimitar_tier_2_new
            }
            set_character_flag = scimitar_tier_2   
            new_artifact = {
            	set_name = artifact_name
            	set_description = artifact_description_smith_tier_2
            }
        }
        if = {
            limit = { FROM = { has_character_flag = weapon_lance } }
            hidden_effect = {
            	add_artifact = lance_tier_2_new
            }
			set_character_flag = lance_tier_2   
            new_artifact = {
            	set_name = artifact_name
            	set_description = artifact_description_smith_tier_2
            }
        }
        if = {
            limit = { FROM = { has_character_flag = weapon_axe } }
            hidden_effect = {
            	add_artifact = axe_tier_2_new
            }
            set_character_flag = axe_tier_2   
            new_artifact = {
            	set_name = artifact_name
            	set_description = artifact_description_smith_tier_2
            }
        }
        if = {
            limit = { FROM = { has_character_flag = weapon_mace } }
            hidden_effect = {
            	add_artifact = mace_tier_2_new
            }
            set_character_flag = mace_tier_2   
            new_artifact = {
            	set_name = artifact_name
            	set_description = artifact_description_smith_tier_2
            }
        }
        if = {
            limit = { FROM = { has_character_flag = weapon_bow } }
          	hidden_effect = {
            	add_artifact = bow_tier_2_new
            }
            set_character_flag = bow_tier_2   
            new_artifact = {
            	set_name = artifact_name
            	set_description = artifact_description_smith_tier_2
            }
        }
        if = {
            limit = { FROM = { has_character_flag = armor_set } }
            add_artifact = armor_tier_2
            #new_artifact = {
            #	set_name = artifact_name
            #	set_description = artifact_description_smith_tier_2
            #}
        }
    }
    after = {
    	clr_character_flag = amazing_weapons
    	clr_character_flag = expensive_weapons
		clr_character_flag = good_weapons
		clr_character_flag = cheap_weapons
		clr_character_flag = weaponsmith
        clr_character_flag = armorsmith
        clr_character_flag = sword_tier_2
        clr_character_flag = sword_tier_3
        clr_character_flag = scimitar_tier_2
        clr_character_flag = lance_tier_2
        clr_character_flag = axe_tier_2
        clr_character_flag = mace_tier_2
        clr_character_flag = bow_tier_2
        clr_character_flag = weapon_sword
		clr_character_flag = zweihanded_sword
		clr_character_flag = weapon_scimitar
		clr_character_flag = weapon_lance
		clr_character_flag = weapon_axe
		clr_character_flag = weapon_mace
        clr_character_flag = weapon_bow
        clr_character_flag = armor_set
    }
}

## Fired from Decision use_scary_upgrade to Try to Intimidate a character

character_event = {
    id = LT.20301
    desc = {
    	trigger = { event_target:target_character = { NOT = { is_evil_trigger = yes } } }
    	text = EVTDESC_LT_20301
    }
    desc = {
    	trigger = { event_target:target_character = { is_evil_trigger = yes } }
    	text = EVTDESC_LT_20301_evil_reaction
    }
    picture = GFX_evt_torture
    border = GFX_event_normal_frame_intrigue

    is_triggered_only = yes

    option = { 
        name = EVTOPTA_LT_20301
        random_list = {
			15 = {
				modifier = { factor = 0.5 diplomacy < 2}
				modifier = { factor = 0.9 diplomacy < 4}
				modifier = { factor = 0.9 diplomacy < 6}
				modifier = { factor = 0.9 diplomacy < 8}
				modifier = { factor = 0.9 diplomacy < 10}
				modifier = { factor = 1.1 diplomacy > 12}
				modifier = { factor = 1.1 diplomacy > 14}
				modifier = { factor = 1.1 diplomacy > 16}
				modifier = { factor = 1.1 diplomacy > 18}
				modifier = { factor = 3 event_target:target_character = { trait = craven } }
				modifier = { factor = 0.4 event_target:target_character = { is_evil_trigger = yes }}
				event_target:target_character = {
					show_scope_change = no
        			opinion = {
						modifier = opinion_scared_into_submission
						who = ROOT
						months = 24
					}
 		    	}
			}
			5 = {
				modifier = { #Makes it even harder to scare someone 2 steps above you
					factor = 3
					OR = {
						AND = {
							event_target:target_character = { tier = EMPEROR }
							lower_tier_than = KING
						}
						AND = {
							event_target:target_character = { tier = KING }
							tier = BARON
						}
					}
				}
				modifier = { #Makes it harder to scare someone above you
					factor = 3
					event_target:target_character = { higher_tier_than = ROOT }
				}
				modifier = { factor = 3 event_target:target_character = { trait = brave } }

				custom_tooltip = { text = EVTOPTA_LT_20301_TT }

				if = {
					limit = { event_target:target_character = { is_evil_trigger = yes } }
					hidden_effect = {  character_event = { id = LT.20310 } }
				}
				else = {
					event_target:target_character = {
						show_scope_change = no
   		    			opinion = {
							modifier = opinion_threatened_me
							who = ROOT
							months = 24
						}
 				   	}
 				   	prestige = -20
 		    	}  	
			}
		}
    }

    option = { #favor
        name = EVTOPTB_LT_20301
        trigger = {
        	has_dlc = "Conclave"
        }
		random_list = {
			15 = {
				modifier = { factor = 0.5 diplomacy < 2}
				modifier = { factor = 0.9 diplomacy < 4}
				modifier = { factor = 0.9 diplomacy < 6}
				modifier = { factor = 0.9 diplomacy < 8}
				modifier = { factor = 0.9 diplomacy < 10}
				modifier = { factor = 1.1 diplomacy > 12}
				modifier = { factor = 1.1 diplomacy > 14}
				modifier = { factor = 1.1 diplomacy > 16}
				modifier = { factor = 1.1 diplomacy > 18}
				modifier = { factor = 3 event_target:target_character = { trait = craven } }
				modifier = { factor = 0.4 event_target:target_character = { is_evil_trigger = yes } }
				add_favor = event_target:target_character
			}
			5 = {
				modifier = { #Makes it even harder to threaten someone 2 steps above you
					factor = 3
					OR = {
						AND = {
							event_target:target_character = { tier = EMPEROR }
							lower_tier_than = KING
						}
						AND = {
							event_target:target_character = { tier = KING }
							tier = BARON
						}
					}
				}
				modifier = { #Makes it harder to threaten someone above you
					factor = 3
					event_target:target_character = { higher_tier_than = ROOT }
				}
				modifier = { factor = 3 event_target:target_character = { trait = brave } }

				custom_tooltip = { text = EVTOPTB_LT_20301_TT }

				if = {
					limit = { event_target:target_character = { is_evil_trigger = yes } }
					hidden_effect = {  character_event = { id = LT.20310 } }
				}
				else = {
					event_target:target_character = {
						show_scope_change = no
   		    			opinion = {
							modifier = opinion_threatened_me
							who = ROOT
							months = 24
						}
 				   	}
 				   	prestige = -20
 		    	}
			}
		}
    }

    option = { 
        name = EVTOPTC_LT_20301
        trigger = { event_target:target_character = { is_evil_trigger = yes } }
        random_list = {
			5 = {
				modifier = { factor = 1.1 diplomacy > 12}
				modifier = { factor = 1.1 diplomacy > 14}
				modifier = { factor = 1.1 diplomacy > 16}
				modifier = { factor = 1.1 diplomacy > 18}
				event_target:target_character = {
					show_scope_change = no
					opinion = {
						modifier = opinion_thoroughly_impressed
						who = ROOT
						months = 6
					}
				}
			}
			15 = {
				modifier = { factor = 1.1 diplomacy > 12}
				modifier = { factor = 1.1 diplomacy > 14}
				modifier = { factor = 1.1 diplomacy > 16}
				modifier = { factor = 1.1 diplomacy > 18}
				event_target:target_character = {
					show_scope_change = no
					opinion = {
						modifier = opinion_impressed
						who = ROOT
						months = 6
					}
				}
			}
			5 = {
				modifier = { #Makes it even harder to scare someone 2 steps above you
					factor = 3
					OR = {
						AND = {
							event_target:target_character = { tier = EMPEROR }
							lower_tier_than = KING
						}
						AND = {
							event_target:target_character = { tier = KING }
							tier = BARON
						}
					}
				}
				modifier = { #Makes it harder to scare someone above you
					factor = 2
					event_target:target_character = { higher_tier_than = ROOT }
				}
				event_target:target_character = { 
					show_scope_change = no
					opinion = {
						modifier = opinion_unimpressed
						who = ROOT
						months = 6
					}
				}
				prestige = -10
			}
		}
        hidden_effect = {
        	remove_character_modifier = used_scary_upgrade_cd
        }
    }

    option = { 
        name = EVTOPTD_LT_20301
        trigger = { event_target:target_character = { NOT = { is_evil_trigger = yes } } }
        random_list = {
			15 = {
				modifier = { factor = 0.5 diplomacy < 2}
				modifier = { factor = 0.9 diplomacy < 4}
				modifier = { factor = 0.9 diplomacy < 6}
				#modifier = { factor = 0.9 diplomacy < 8}
				#modifier = { factor = 0.9 diplomacy < 10}
				modifier = { factor = 1.1 diplomacy > 12}
				modifier = { factor = 1.1 diplomacy > 14}
				modifier = { factor = 1.1 diplomacy > 16}
				modifier = { factor = 1.1 diplomacy > 18}
				event_target:target_character = {
					show_scope_change = no
					opinion = {
						modifier = opinion_liked_a_good_joke
						who = ROOT
						months = 6
					}
				}
			}
			5 = {
				modifier = { #Makes it even harder to scare someone 2 steps above you
					factor = 3
					OR = {
						AND = {
							event_target:target_character = { tier = EMPEROR }
							lower_tier_than = KING
						}
						AND = {
							event_target:target_character = { tier = KING }
							tier = BARON
						}
					}
				}
				event_target:target_character = { 
					show_scope_change = no
					opinion = {
						modifier = opinion_unimpressed
						who = ROOT
						months = 6
					}
				}
			}
		}
        hidden_effect = {
        	remove_character_modifier = used_scary_upgrade_cd
        }
    }
}

# They only laughed at me!
character_event = {
	id = LT.20310
    desc = EVTDESC_LT_20310
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_intrigue

    is_triggered_only = yes

    option = { 
        name = EVTOPTA_LT_20310
 
        event_target:target_character = { 
			show_scope_change = no
			opinion = {
				modifier = opinion_unimpressed
				who = ROOT
				months = 6
			}
		}
		prestige = -10
		random = {
        	chance = 50
        	add_trait_stressed_effect = yes
        }

    }
}


## Targeted Decision use_secluded_upgrade to use secluded wonder upgrade event chain
## It is implemented as playable from both sides. Up to LT.2043X, odd-numbered events happen to the target, even-numbered events to the decision-making character

character_event = { #invitation
	id = LT.20405
	desc = EVTDESC_LT_20405

	picture = GFX_evt_noble_in_castle
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {  # accept
		name = EVTOPTA_LT_20405
		hidden_effect = { FROMFROM = { character_event = { id = LT.20410 } } }
		ai_chance = {
			factor = 2
			modifier = { 
				factor = 4
				opinion = { who = FROMFROM value = 25 }
			}
		}
	}

	option = { # refuse
		name = EVTOPTB_LT_20405
		trigger = { NOT = { diplomacy = 15 } }
		hidden_effect = { FROMFROM = { character_event = { id = LT.20412 } } }
		ai_chance = {
			factor = 1
			modifier = { 
				factor = 10
				NOT = { opinion = { who = FROMFROM value = -25 } }
			}
		}
	}

	option = {# politely refuse
		name = EVTOPTC_LT_20405
		trigger = { diplomacy = 15 }
		tooltip_info = diplomacy

		set_character_flag = polite_refuse
		hidden_effect = { FROMFROM = { character_event = { id = LT.20412 } } }
		ai_chance = {
			factor = 1
			modifier = { 
				factor = 10
				NOT = { opinion = { who = FROMFROM value = -25 } }
			}
		}
	}
}


character_event = { #What happens at the meeting
	id = LT.20410
	desc = EVTDESC_LT_20410

	picture = GFX_evt_castle_garden
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes
	
	portrait = event_target:target_character

	option = {  # Friendly Chat
		name = EVTOPTA_LT_20410
		hidden_effect = { FROM = { character_event = { id = LT.20421 days = 1 } } }
		tooltip = {
			random_list = { 
				20 = { # Nothing
					modifier = {
						factor = 10 
						FROM = { NOT = { diplomacy = 8 } }
					}
					modifier = {
						factor = 0
						FROM = { diplomacy = 15 }
					}
				}
				60 = { 		
					opinion = {
						modifier = opinion_impressed
						who = FROM
						months = 24
					}
 				}	
				20 = { 
					opinion = {
						modifier = opinion_thoroughly_impressed
						who = FROM
						months = 24
					}
					modifier = {
						factor = 0 
						FROM = { NOT = { diplomacy = 8 } }
					}
					modifier = {
						factor = 5
						FROM = { diplomacy = 15 }
					}
				}
			}
		}
	}

	option = {  # Try to seduce
		name = EVTOPTB_LT_20410
		trigger = {
			NOT = { is_lover = FROM }
		}

		if = {
			limit = {
				OR = {
					AND = {
						emf_divine_blood_religion = yes
						FROM = { emf_divine_blood_religion = yes }
					}
					NOT = { is_close_relative = FROM }
					FROM = { is_married = ROOT }
				}
			}
			custom_tooltip = { text = EVTOPTB_LT_20410_TT }
		}
		else = {
			custom_tooltip = { text = EVTOPTB_LT_20410_TT_unlikely }
		}

		FROM = { character_event = { id = LT.20431 days = 1 } }
		FROM = { clr_character_flag = dummy } #For portrait to appear in option
	}


	option = {  # Continuing Romance
		name = EVTOPTD_LT_20410
		trigger = {
			is_lover = FROM
		}
		custom_tooltip = { text = EVTOPTD_LT_20410_TT }
		FROM = { character_event = { id = LT.20433 days = 1 } }
		if = {
			limit = { trait = stressed }
			random = {
				chance = 30
				remove_trait = stressed
			}
		}
		random = { 
			chance = 30
			opinion = { modifier = opinion_budding_romance who = FROM }
		}
		tooltip = {
			random = { 
				chance = 30
				reverse_opinion = { modifier = opinion_budding_romance who = FROM }
			}
		}
		FROM = { clr_character_flag = dummy } #For portrait to appear in option
	}


	option = {  # Attempt Murder
		name = EVTOPTC_LT_20410
		hidden_effect = { FROM = { character_event = { id = LT.20441 days = 1 } } }
		FROM = { clr_character_flag = dummy } #For portrait to appear in option
		trigger = { 
			OR = {
				intrigue = 15
				trait = deceitful
				trait = impaler
				trait = schemer
				trait = lunatic
				trait = amateurish_plotter
				trait = flamboyant_schemer
				trait = intricate_webweaver
				trait = elusive_shadow
			}
		}
		tooltip_info_custom = EVTOPTC_LT_20410_TT
		custom_tooltip = { text = EVTOPTC_LT_20410_TT_murder }
	}
}

character_event = { #The target refused my invitation
	id = LT.20412
	desc = EVTDESC_LT_20412

	picture = GFX_evt_castle_garden
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {  # ok
		name = EVTOPTA_LT_20412
		if = {
			limit = { FROM = { NOT = { has_character_flag = polite_refuse } } }
			opinion = {
				modifier = opinion_refused_invitation_to_meet
				who = FROM
			}
		}
	}

	after = {
		FROM = { clr_character_flag = polite_refuse }
	}
}

# We had a nice conversation
character_event = { 
	id = LT.20421
	desc = EVTDESC_LT_20421

	picture = GFX_evt_castle_garden
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	immediate = {
		random_list = { 
			20 = { # Nothing
				modifier = {
					factor = 10 
					FROM = { NOT = { diplomacy = 8 } }
				}
				modifier = {
					factor = 0
					FROM = { diplomacy = 15 }
				}
			}
			60 = { set_character_flag = impressed }
			20 = { 
				set_character_flag = thoroughly_impressed
				modifier = {
					factor = 0 
					FROM = { NOT = { diplomacy = 8 } }
				}
				modifier = {
					factor = 5
					FROM = { diplomacy = 15 }
				}
			}
		}
	}

	option = { 
		name = EVTOPTA_LT_20421
		trigger = { has_character_flag = thoroughly_impressed }
		opinion = {
			modifier = opinion_thoroughly_impressed
			who = FROM
			months = 24
		}
	}

	option = { 
		name = EVTOPTB_LT_20421
		trigger = { has_character_flag = impressed }
		opinion = {
			modifier = opinion_impressed
			who = FROM
			months = 12
		}
		hidden_effect = { FROM = { character_event = { id = LT.20422 } } }
	}

	option = { 
		name = EVTOPTC_LT_20421
		trigger = { 
			NOR = {
				has_character_flag = thoroughly_impressed
				has_character_flag = impressed
			}
		}
		hidden_effect = { FROM = { character_event = { id = LT.20422 } } }
	}

	after = {
		clr_character_flag = impressed
		clr_character_flag = thoroughly_impressed
	}
}

#Notification for the initiator that the target was impressed
character_event = {
	id = LT.20422
	desc = EVTDESC_LT_20422
	picture = GFX_evt_courtiers_talking
	
	notification = yes
	
	is_triggered_only = yes
	hide_from = yes
	
	option = {
		name = OK
	}
}

character_event = { #Seduction reaction
	id = LT.20431
	desc = EVTDESC_LT_20431

	picture = GFX_evt_castle_garden
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = { # I want you too!
		name = EVTOPTA_LT_20431
		custom_tooltip = {
			text = EVTOPTC_LT_20431_TT
		}
		FROM = { character_event = { id = LT.20432 days = 1 } }
		tooltip = {
			add_lover = FROM
			opinion = {
				modifier = opinion_seduced_attracted
				who = FROM
			}
		}
		ai_chance = {
			factor = 1
			trigger = { 
				FROM = { event_target:target_character = { attacted_to_prev_trigger = yes } }
			}
			modifier = { 
				factor = 10
				OR = { 
					opinion = { who = FROM value = 45 }
					has_opinion_modifier = { who = FROM modifier = opinion_budding_romance }
				}
			}
			modifier = { 
				factor = 5
				FROM = { 
					OR = {
						trait = seducer
						trait = seductress
					}
				}
			}
			modifier = { 
				factor = 5
				OR = {
					trait = hedonist
					trait = lustful
				}
			}
			modifier = { 
				factor = 0.1 
				OR = {
					#trait = celibate
					trait = chaste
				}
			}
		}
		trigger = {
			OR = {
				NOT = { is_close_relative = FROM }
				is_married = FROM
				ai = no
				emf_divine_blood_true_religion = yes
				AND = {
					emf_willing_to_consider_incest_despite_religion = yes
					random = 25
				}
			}
		}
	}
	option = { # I'm not looking for anything "serious"
		name = EVTOPTA_LT_20431_no_love
		set_character_flag = not_serious_romance
		custom_tooltip = {
			text = EVTOPTC_LT_20431_TT_not_serious_romance
		}
		FROM = { character_event = { id = LT.20432 days = 1 } }
		tooltip = {
			reverse_opinion = {
				modifier = opinion_seduced_attracted
				who = FROM
			}
		}
		ai_chance = {
			factor = 1
			trigger = { 
				FROM = { event_target:target_character = { attacted_to_prev_trigger = yes } }
			}
			modifier = { 
				factor = 5
				OR = {
					trait = seducer
					trait = seductress
				}
			}
			modifier = { 
				factor = 5
				OR = {
					trait = hedonist
					trait = lustful
				}
			}
			modifier = { 
				factor = 1.5
				has_lover = yes
			}
			modifier = { 
				factor = 0.1
				trait = chaste
			}
		}
		trigger = {
			OR = {
				NOT = { is_close_relative = FROM }
				is_married = FROM
				ai = no
				emf_divine_blood_true_religion = yes
				AND = {
					emf_willing_to_consider_incest_despite_religion = yes
					random = 25
				}
			}
		}
	}

	option = { #refuse
		name = EVTOPTB_LT_20431
		FROM = { character_event = { id = LT.20434 days = 1} }
		FROM = { clr_character_flag = dummy } #For portrait to appear in option
		ai_chance = {
			factor = 1
		}
	}

	option = { #Try to Murder
		name = EVTOPTC_LT_20431
		trigger = { 
			OR = {
				intrigue = 10
				trait = deceitful
				trait = impaler
				trait = schemer
				trait = lunatic
				trait = amateurish_plotter
				trait = flamboyant_schemer
				trait = intricate_webweaver
				trait = elusive_shadow
			}
		}
		tooltip_info_custom = EVTOPTC_LT_20410_TT
		custom_tooltip = { text = EVTOPTC_LT_20410_TT_murder }
		set_character_flag = murderer_target
		FROM = { character_event = { id = LT.20441 days = 5} }
		FROM = { clr_character_flag = dummy } #For portrait to appear in option
		ai_chance = {
			factor = 1
		}
	}
}

character_event = { #We are lovers now
	id = LT.20432
	picture = GFX_evt_lovers
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	desc = {
		text = EVTDESC_LT_20432_A
		trigger = {
			FROM = { has_character_flag = not_serious_romance }
		}
	}
	desc = {
		text = EVTDESC_LT_20432_B
		trigger = {
			FROM = { NOT = { has_character_flag = not_serious_romance } }
		}
	}

	option = {  	
		name = {
			text = EVTOPTA_LT_20432_A # I just want them more
			trigger = {
				FROM = { has_character_flag = not_serious_romance }
			}
		}
		name = {
			text = EVTOPTA_LT_20432_B # life is good
			trigger = {
				FROM = { NOT = { has_character_flag = not_serious_romance } }
			}
		}


		if = {
			limit = {
				FROM = { has_character_flag = not_serious_romance }
			}
			reverse_opinion = {
				modifier = opinion_seduced_attracted
				who = FROM
			}	
		}
		else = {
			add_lover = FROM
			reverse_opinion = {
				modifier = opinion_seduced_attracted
				who = FROM
			}
		}
		FROM = { clr_character_flag = not_serious_romance }
	}
}

character_event = { #Lovers make love
	id = LT.20433
	desc = EVTDESC_LT_20433

	picture = GFX_evt_lovers
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {  # ok
		name = EVTOPTA_LT_20432_B
		random = { 
			chance = 30
			opinion = { modifier = opinion_budding_romance who = FROM }
		}
		if = {
			limit = { trait = stressed }
			random = {
				chance = 30
				remove_trait = stressed
			}
		}
	}
}


character_event = { #I was refused!
	id = LT.20434
	desc = EVTDESC_LT_20434

	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {  # ok
		name = EVTOPTA_LT_20434
		prestige = -10
		reverse_opinion = {
			modifier = opinion_dislike
			who = FROM
			years = 1
		}
		opinion = {
			modifier = opinion_advance_rejected
			who = FROM
		}
	}
}


character_event = { #Murder attempt Reaction. This event can happen to either character
	id = LT.20441
	desc = {
		text = EVTDESC_LT_20441
		trigger = { FROM = { NOT = { has_character_flag = murderer_target } } }
	}
	desc = {
		text = EVTDESC_LT_20441_murderer_target
		trigger = { FROM = { has_character_flag = murderer_target } }
	}

	picture = GFX_evt_assassination
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	immediate = {
		FROM = { save_event_target_as = murderer }
	}
	
	option = { #Run away
		name = EVTOPTA_LT_20441
		random_list = {
			25 = {
				custom_tooltip = { text = EVTOPTA_LT_20441_TT_escape }
				modifier = { factor = 3 trait = quick }
				modifier = { factor = 2 trait = genius }
				modifier = { factor = 5 trait = duelist }
				modifier = { factor = 2 trait = shrewd }
				character_event = { id = LT.20450 days = 3 }
				FROM = { character_event = { id = LT.20460 } }
			}
			50 = {
				custom_tooltip = { text = EVTOPTA_LT_20441_TT_wounded }
				add_trait = wounded
				set_character_flag = wounded_in_attempt
				character_event = { id = LT.20450 days = 3 }
				FROM = { character_event = { id = LT.20460 } }
			}
			25 = {  #Dead
				custom_tooltip = { text = EVTOPTA_LT_20441_TT_dead }
				character_event = { id = LT.20455 days = 3 }
				FROM = {
					character_event = { id = LT.20465 }
				}
			}
		}

		ai_chance = {
			factor = 1
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 50 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 40 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 30 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 20 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 10 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 55 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 45 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 35 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 25 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 15 } }
			modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 05 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -05 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -10 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -20 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -30 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -40 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -50 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -15 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -25 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -35 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -45 } }
			modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -55 } }
		}
	}
	option = { #Fight
		name = EVTOPTB_LT_20441
		set_character_flag = murder_fight
		FROM = { set_character_flag = murder_fight }
		random_list = {
			50 = {
				custom_tooltip = { text = EVTOPTB_LT_20441_TT_win }
				character_event = { id = LT.20465  }
				FROM = { character_event = { id = LT.20455 } }
			}
			50 = {  #Dead
				custom_tooltip = { text = EVTOPTB_LT_20441_TT_lose }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 50 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 40 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 30 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 20 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 10 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 55 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 45 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 35 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 25 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 15 } }
				modifier = { factor = 0.75 combat_rating_diff = { character = FROM  value = 05 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -05 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -10 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -20 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -30 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -40 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -50 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -15 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -25 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -35 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -45 } }
				modifier = { factor = 1.5 combat_rating_diff = { character = FROM  value < -55 } }
				character_event = { id = LT.20455  }
				FROM = {
					character_event = { id = LT.20465 }
				}
			}
		}
		ai_chance = {
			factor = 1
		}
	}
	after = {
		opinion = {
			modifier = opinion_murder_attempt
			who = FROM
		}
		clr_character_flag = murderer_target
	}
}

# I escaped alive from the murder attempt!
character_event = { 
	id = LT.20450
	desc = {
		trigger = { NOT = { has_character_flag = wounded_in_attempt } }
		text = EVTDESC_LT_20450
		picture = GFX_evt_bad_news
	}
	desc = {
		trigger = { has_character_flag = wounded_in_attempt }
		text = EVTDESC_LT_20450_wounded
		picture = GFX_evt_court_physician
	}

	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {  # ok
		name = EVTOPTA_LT_20450
		random = { 
			chance = 50 
			add_trait_stressed_effect = yes
		}
	}
}

# I am dying
character_event = { 
	id = LT.20455
	desc = EVTDESC_LT_20455

	picture = GFX_evt_danse_macabre
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {  # ok
		name = EVTOPTA_LT_20455
		death = { death_reason = death_murder }
	}
}

# I failed the murder attempt
character_event = { 
	id = LT.20460
	desc = {
		trigger = { FROM = { NOT = { has_character_flag = wounded_in_attempt } } }
		text = EVTDESC_LT_20460
	}
	desc = {
		trigger = { FROM = { has_character_flag = wounded_in_attempt } } 
		text = EVTDESC_LT_20460_wounded
	}

	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {  # ok
		name = EVTOPTA_LT_20450
		random = { 
			chance = 50 
			add_trait_stressed_effect = yes
		}
	}
	after = { FROM = { clr_character_flag = wounded_in_attempt } }
}

# I killed the other
character_event = { 
	id = LT.20465
	desc = {
		trigger = { has_character_flag = murder_fight }
		text = EVTDESC_LT_20465_fight
	}
	desc = {
		trigger = {
			NOT = { has_character_flag = murder_fight }
		}
		text = EVTDESC_LT_20465
	}

	picture = GFX_evt_danse_macabre
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {  # ok
		name = EVTOPTA_LT_20465
	}
	after = { clr_character_flag = murder_fight } 
}



## Event for burying the character´s predecessor if having wonder upgrade with burial flag


# Setting up event, fires on the dead ruler (on_death)
character_event = {
	id = LT.20501
	hide_window = yes
    is_triggered_only = yes

    only_independent = yes

    trigger = {
    	realm_wonder_or_upgrade_has_flag_burial_ground_trigger = yes
    }

    immediate = { 
    	save_event_target_as = target_dead_ruler

    	any_realm_character = {
    		limit = { opinion = { who = ROOT value = 20 } }
    		set_character_flag = liked_dead_ruler_@ROOT
    	}
    	any_realm_character = {
    		limit = { opinion = { who = ROOT value < -50 } } 
    		set_character_flag = hated_dead_ruler_@ROOT
    	}

    	current_heir = {
    		character_event = { id = LT.20510 days = 1 }
    	}
    }
}

character_event = {
	id = LT.20510
	title = EVT_TITLE_LT_20510
	desc = {
		trigger = { religion_group = pagan_group }
		text = EVTDESC_LT_20510_pagan
		picture = GFX_evt_bad_news
	}
	desc = {
		trigger = { religion_group = christian }
		text = EVTDESC_LT_20510_christian
		picture = GFX_evt_bad_news
	}
	desc = {
		trigger = { religion_group = muslim }
		text = EVTDESC_LT_20510_muslim
		picture = GFX_evt_bad_news
	}
	desc = {
		trigger = { religion_group = jewish_group }
		text = EVTDESC_LT_20510_jewish
		picture = GFX_evt_bad_news
	}
	desc = {
		trigger = { religion_group = indian_group }
		text = EVTDESC_LT_20510_indian
		picture = GFX_evt_bad_news
	}

	picture = GFX_evt_treasure_chamber
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		realm_wonder_or_upgrade_has_flag_burial_ground_trigger = yes
	}
	
	immediate = {
		random_realm_wonder = {
			limit = {
				is_active = yes
				has_wonder_flag = burial_ground
			}
			save_event_target_as = target_wonder
		}
		if = {
			limit = { NOT = { event_target:target_wonder = { always = yes } } }
			random_realm_wonder_upgrade = {
				limit = {
					is_active = yes
					has_wonder_upgrade_flag = burial_ground
				}
				save_event_target_as = target_upgrade
				wonder = { save_event_target_as = target_wonder }
			}
		}
	}

	option = { #The most expensive
		name = EVTOPTA_LT_20510
		custom_tooltip = { text = EVTOPTA_LT_20510_TT }
		scaled_wealth = { value = -0.5 min = -100 max = -400}
		set_character_flag = big_burial
		character_event = { id = LT.20520  days = 10 }
	}
	option = { #A Reasonable amount 
		name = EVTOPTB_LT_20510
		custom_tooltip = { text = EVTOPTB_LT_20510_TT }
		scaled_wealth = { value = -0.3 min = -50 max = -200}
		set_character_flag = normal_burial
		character_event = { id = LT.20520  days = 5}
	}
	option = { #The cheapest
		name = EVTOPTC_LT_20510
		scaled_wealth = { value = -0.1 min = -10 max = -100}
		prestige = -20
		piety = 10
	}
	option = { #S/He does not deserve proper burial
		name = EVTOPTD_LT_20510
		custom_tooltip = { text = EVTOPTD_LT_20510_TT }
		prestige = -50
		piety = -50
		hidden_effect = {
			any_realm_character = {
				limit = { has_character_flag = liked_dead_ruler_@FROM }
				opinion = {
					modifier = opinion_did_not_honor_the_dead
					who = ROOT
				}
			}
			any_realm_character = {
				limit = { has_character_flag = hated_dead_ruler_@FROM }
				opinion = {
					modifier = opinion_did_not_honor_hated_ruler
					who = ROOT
				}
			}
		}
	}
	after = {
		if = {
			limit = {
				NOR = {
					has_flag = big_burial
					has_flag = normal_burial
				}
			}
			clear_flags_with_prefix = liked_dead_ruler_
		}
	}
}

character_event = {
	id = LT.20520
	title = EVT_TITLE_LT_20510
	desc = {
		trigger = { religion_group = pagan_group }
		text = EVTDESC_LT_20520_pagan
		picture = GFX_evt_feast_hf
	}
	desc = {
		trigger = {
			OR = {
				religion_group = christian
				religion_group = jewish_group
				religion_group = muslim
			}
		}
		text = EVTDESC_LT_20520_monoteist
		picture = GFX_evt_died_funeral
	}
	desc = { #Indian traditions with respect to funeral vary much, between cremation and burial, so it is better not to be specific...
		trigger = { religion_group = indian_group }
		text = EVTDESC_LT_20520_indian
		picture = GFX_evt_india_temple
	}

	picture = GFX_evt_treasure_chamber
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_inaccessible_trigger = no
		realm_wonder_or_upgrade_has_flag_burial_ground_trigger = yes
		event_target:target_wonder = {
			wonder_owner = {
				character = ROOT
			}
		}

		OR = {
			has_character_flag = big_burial
			has_character_flag = normal_burial
		}
	}

	option = {
		name = {
			text = EVTOPTA_LT_20520_polyteist
			trigger = {
				OR = {
					religion_group = pagan_group
					religion_group = indian_group
				}
			}
		}
		name = {
			text = EVTOPTA_LT_20520_monoteist
			trigger = {
				OR = {
					religion_group = christian
					religion_group = jewish_group
				}
			}
		}
		name = {
			text = EVTOPTA_LT_20520_muslim
			trigger = {
				OR = {
					religion_group = muslim
				}
			}
		}
		custom_tooltip = { text = EVTOPTA_LT_20520_TT }
		if = {
			limit = { has_character_flag = big_burial }
			prestige = 150
			piety = 50
			hidden_effect = {
				any_realm_character = {
					limit = { has_character_flag = liked_dead_ruler_@FROMFROM }
					opinion = {
						modifier = opinion_did_honor_the_dead
						who = ROOT
					}
				}
				any_realm_character = {
					limit = { has_character_flag = hated_dead_ruler_@FROMFROM }
					opinion = {
						modifier = opinion_did_honor_hated_ruler
						who = ROOT
					}
				}
			}
		}
		else = {
			prestige = 50
			piety = 100
			hidden_effect = {
				any_realm_character = {
					limit = { has_character_flag = liked_dead_ruler_@FROMFROM }
					opinion = {
						modifier = opinion_did_honor_the_dead
						who = ROOT
						years = 1
					}
				}
			}
		}
	}

	after = {
		clear_flags_with_prefix = liked_dead_ruler_
		clr_character_flag = big_burial
		clr_character_flag = normal_burial
	}
}


##Events related to stores_relic flag. It fires from decision store_relic_in_wonder

character_event = {
	id = LT.20601
	desc = {
		text = EVTDESC_LT_20601_one_artifact
		trigger = { NOT = { event_target:target_artifact_2 = { is_artifact_active = yes } } } 
		picture = GFX_evt_relic_box
	}
	desc = {
		text = EVTDESC_LT_20601_two_artifacts
		trigger = {
			event_target:target_artifact_2 = { is_artifact_active = yes }
			NOT = { event_target:target_artifact_3 = { is_artifact_active = yes } }
		}	
	}
	desc = {
		text = EVTDESC_LT_20601_more_artifacts
		trigger = {
			event_target:target_artifact_3 = { is_artifact_active = yes }
		}	
	}

	picture = GFX_evt_treasure_chamber
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

    only_independent = yes

    trigger = {
    	any_realm_wonder_upgrade = {
    		has_wonder_upgrade_flag = stores_relic
    		is_active = no
    	}
    	#event_target:target_artifact_1 = { is_active = yes }
    }

	option = {
		name = EVTOPTA_LT_20601
		trigger = { event_target:target_artifact_1 = { is_artifact_active = yes } }

		event_target:target_artifact_1 = {
			show_scope_change = no
			custom_tooltip = { text = EVTOPTA_LT_20601_TT }
			if = { 		limit = { quality == 5 }  ROOT = { piety = 500 prestige = 500 } }
			else_if = { limit = { quality == 4 }  ROOT = { piety = 400 prestige = 300 } }
			else_if = { limit = { quality == 3 }  ROOT = { piety = 300 prestige = 100 } }
			else_if = { limit = { quality == 2 }  ROOT = { piety = 200 } }
			else = { 							  ROOT = { piety = 100 } }
		}
		hidden_effect = {
			if = { 
				limit = { event_target:target_artifact_1 = { owner = { character = ROOT } } }
				event_target:target_artifact_1 = { unsafe_destroy_artifact = yes }
				event_target:target_upgrade = { set_wonder_upgrade_flag = is_storing_relic }
			}
			else = { character_event = { id = LT.20610 } }   #cheated?
		}
	}

	option = {
		name = EVTOPTB_LT_20601
		trigger = { event_target:target_artifact_2 = { is_artifact_active = yes } }

		event_target:target_artifact_2 = {
			show_scope_change = no
			custom_tooltip = { text = EVTOPTA_LT_20601_TT }
			if = { 		limit = { quality == 5 }  ROOT = { piety = 500 prestige = 500 } }
			else_if = { limit = { quality == 4 }  ROOT = { piety = 400 prestige = 300 } }
			else_if = { limit = { quality == 3 }  ROOT = { piety = 300 prestige = 100 } }
			else_if = { limit = { quality == 2 }  ROOT = { piety = 200 } }
			else = { 							  ROOT = { piety = 100 } }
		}
		hidden_effect = {
			if = { 
				limit = { event_target:target_artifact_2 = { owner = { character = ROOT } } }
				event_target:target_artifact_2 = { unsafe_destroy_artifact = yes }
				event_target:target_upgrade = { set_wonder_upgrade_flag = is_storing_relic }
			}
			else = { character_event = { id = LT.20610 } }   #cheated?
		}
	}

	option = {
		name = EVTOPTC_LT_20601
		trigger = { event_target:target_artifact_3 = { is_artifact_active = yes } } 

		event_target:target_artifact_3 = {
			show_scope_change = no
			custom_tooltip = { text = EVTOPTA_LT_20601_TT }
			if = { 		limit = { quality == 5 }  ROOT = { piety = 500 prestige = 500 } }
			else_if = { limit = { quality == 4 }  ROOT = { piety = 400 prestige = 300 } }
			else_if = { limit = { quality == 3 }  ROOT = { piety = 300 prestige = 100 } }
			else_if = { limit = { quality == 2 }  ROOT = { piety = 200 } }
			else = { 							  ROOT = { piety = 100 } }
		}
		hidden_effect = {
			if = { 
				limit = { event_target:target_artifact_3 = { owner = { character = ROOT } } }
				event_target:target_artifact_3 = { unsafe_destroy_artifact = yes }
				event_target:target_upgrade = { set_wonder_upgrade_flag = is_storing_relic }
			}
			else = { character_event = { id = LT.20610 } }   #cheated?
		}
	}

#	option = {
#		name = EVTOPTD_LT_20601
#		trigger = { event_target:target_artifact_4 = { is_artifact_active = yes } } 
#
#		event_target:target_artifact_4 = {
#			show_scope_change = no
#			custom_tooltip = { text = EVTOPTA_LT_20601_TT }
#			if = { 		limit = { quality == 5 }  ROOT = { piety = 500 prestige = 500 } }
#			else_if = { limit = { quality == 4 }  ROOT = { piety = 400 prestige = 300 } }
#			else_if = { limit = { quality == 3 }  ROOT = { piety = 300 prestige = 100 } }
#			else_if = { limit = { quality == 2 }  ROOT = { piety = 200 } }
#			else = { 							  ROOT = { piety = 100 } }
#		}
#		hidden_effect = {
#			if = { 
#				limit = { event_target:target_artifact_4 = { owner = { character = ROOT } } }
#				event_target:target_artifact_4 = { unsafe_destroy_artifact = yes }
#				event_target:target_upgrade = { set_wonder_upgrade_flag = is_storing_relic }
#			}
#			else = { character_event = { id = LT.20610 } }   #cheated?
#		}
#	}	

	option = { # Not a good idea after all
		name = EVTOPTE_LT_20601
	}

	after = {
		clr_character_flag = taking_relic_decision
	}
}


# I am dead
character_event = { 
	id = LT.20610
	desc = EVTDESC_LT_20610

	picture = GFX_evt_danse_macabre
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {  # ok
		name = EVTOPTA_LT_20610
		death = { death_reason = death_murder_unknown_lightning }
	}
}


## upgrade_strategic_exclaves effect.

# Fired from on_action when the upgrades finishes construction
character_event = {
	id = LT.20700
	title = EVT_TITLE_LT_20700
	desc = EVTDESC_LT_20700
	trigger = {
		FROM = { has_wonder_upgrade_flag = upgrades_walls_on_build }
	}

	picture = GFX_evt_castle_construction
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		FROM = { save_event_target_as = target_upgrade }
		FROMFROM = { save_event_target_as = target_wonder }
		FROMFROMFROM = {
			save_event_target_as = target_province
			any_province_holding = {
				trigger_switch = {
					on_trigger = holding_type
					city = { add_building = ct_wall_5 }
					temple = { add_building = tp_wall_5 }
					castle = { add_building = ca_wall_5 }
					tribal = { add_building = tb_hillfort_4 }
					nomad = { add_building = no_camp_fortifications_8 }
				}
			}
		}
	}
	option = {  # ok
		name = EVTOPTA_LT_20700
		custom_tooltip = { text = EVTOPTA_LT_20700_TT }
	}
}

## Looting Events

#Fired from on_action on_wonder_loot_start

#To set the name the wonder will acquire when looting has finished
#Is done here to save the actual stage of the wonder at the time of looting starting
character_event = {
	id = LT.20799
	hide_window = yes
	trigger = {
		FROM = {  NOT = { has_wonder_flag = was_ruined  } }
	}

    is_triggered_only = yes

    only_independent = yes

    immediate = {
    	FROM = { save_event_target_as = target_wonder }
        FROMFROM = { save_event_target_as = target_province }
        FROM = { 
            original_wonder_owner = { 
                save_event_target_as = wonder_owner_original 
            } 
        }
        event_target:target_wonder = {
            # Name...
            if = {
                limit = { NOT = { has_wonder_flag = was_ruined } }

                set_flag = was_ruined

                if = {
                    limit = {
                        wonder_stage = 3  #it was a high stage building
                    }
                    set_flag = wonder_stage_3
                }
                if = {
                    limit = { NOT = { wonder_stage = 3 } }
                    set_flag = wonder_stage_less_than_3
                }
            }
        }
    }
}


# To get a delay from the on_action triggered event
character_event = {
	id = LT.20800
	hide_window = yes
	trigger = {
		NOT = { has_character_flag = looted_wonder_artifact }
		FROM = { has_wonder_flag = gives_artifact }
	}

    is_triggered_only = yes

    only_independent = yes

    immediate = {
    	FROM = { save_event_target_as = target_wonder }
    	character_event = { id = LT.20805 days = 20 random = 5 }
    }
}

# This event will spawn an artifact of the correct type and give it to the character. It is possible to add more artifacts by creating wonder flags and then adding the artifact here.
character_event = {
	id = LT.20805
	desc = EVTDESC_LT_20805
	picture = GFX_evt_end_of_days
	border = GFX_event_normal_frame_war

    is_triggered_only = yes

    only_independent = yes

	trigger = {
		NOT = { has_character_flag = looted_wonder_artifact }
		event_target:target_wonder = { 
			has_wonder_flag = gives_artifact
			NOT = { has_wonder_flag = artifact_was_looted }
			wonder_owner = {
				character = ROOT
			}
		}
		any_courtier = {
    		is_inaccessible_or_incapable_trigger = no
	    }
	}

    immediate = { 
    	set_character_flag = looted_wonder_artifact
    	event_target:target_wonder = {
    		set_wonder_flag = artifact_was_looted
    	}
	    any_courtier = {
	    	limit = { is_inaccessible_or_incapable_trigger = no }
	    	score_value = { #Prioritizes selecting an interesting courtier...
	            value = 10
	            interesting_courtier_selection_score = yes
	        }

	    	save_event_target_as = target_courtier
	    	event_target:target_wonder = {
		    	trigger_switch = {
		    		on_trigger = has_wonder_flag
		    		gives_artifact_bells = {
		    			PREV = {
		    				add_artifact = wonder_artifact_bells
		    				new_artifact = {
								set_name = looted_wonder_artifact_bells_rename
								set_description = looted_wonder_artifact_bells_desc
								set_creation_date = 1.1.1
	    						save_event_target_as = looted_artifact
				    		}
						}
						any_upgrade_on_wonder = {
							limit = { has_wonder_upgrade_flag = bells }
							destroy_wonder_upgrade = yes
						}
		    		}
		    		gives_artifact_book = {
		    			PREV = {
		    				add_random_book_effect = yes
		    				new_artifact = {
								set_creation_date = 1.1.1
	    						save_event_target_as = looted_artifact
	    					}
						}
		    		}
		    	}
		    }
	    }
    }

    option = {# I want it!
		name = EVTOPTA_LT_20805
		event_target:target_courtier = {
			show_scope_change = no 
			reverse_opinion = {
				modifier = opinion_grateful
				who = ROOT
			}
			event_target:looted_artifact = {
				show_scope_change = no 
				transfer_artifact = { from = PREV to = FROM }
			}
		}
	}

	option = {# give it away
		name = EVTOPTB_LT_20805
		event_target:target_courtier = {
			opinion = {
				modifier = opinion_grateful
				who = ROOT
			}
		}
	}
}

#clean-up event, if a wonder finishes restoration
character_event = {
	id = LT.20808
	hide_window = yes
    is_triggered_only = yes

    immediate = {
 		FROM = { clr_wonder_flag = artifact_was_looted }
	}
}

#Notification for the initiator that looting started and it provoked cultural unrest
character_event = {
	id = LT.20810
	desc = {
		trigger = { FROM = { has_wonder_flag = cost_low }}
		text = EVTDESC_LT_20810_cheap
	}
	desc = {
		trigger = { NOT = { FROM = { has_wonder_flag = cost_low } } }
		text = EVTDESC_LT_20810		
	}

	picture = GFX_evt_courtiers_talking
	
	is_triggered_only = yes
	hide_from = yes
	
	option = {# private looting
		name = EVTOPTA_LT_20810
		FROM = {
			clr_wonder_flag = being_looted_public
			set_wonder_flag = being_looted_private
		}
		FROMFROM = { 
			add_province_modifier = { modifier = cultural_unrest years = 2 }
		}
	}

	option = {# everybody joins
		name = EVTOPTB_LT_20810
		FROM = {
			clr_wonder_flag = being_looted_private
			set_wonder_flag = being_looted_public
		}
	}
}

#Notification for the owner that looting stage finished, fired from on_action on_wonder_stage_loot_finish
character_event = {
	id = LT.20820
	title = EVT_TITLE_LT_20820
	desc = {
		trigger = { FROM = { is_at_lootable_stage = no }}
		text = EVTDESC_LT_20820_the_end
	}
	desc = {
		trigger = { FROM = { is_at_lootable_stage = yes } }
		text = EVTDESC_LT_20820		
	}

	picture = GFX_evt_courtiers_talking
	
	notification = yes
	
	is_triggered_only = yes
	hide_from = yes

	immediate = {
		FROM = { 
			set_variable = { which = global_loot value = 400 }
			trigger_switch = {
				on_trigger = has_wonder_flag
				cost_low = 		{ set_variable = { which = global_loot value = 300 } }
				cost_medium = 	{ set_variable = { which = global_loot value = 500 } }
				cost_high = 	{ set_variable = { which = global_loot value = 800 } }
			}
		}
		if = {
			limit = { FROM = { has_wonder_flag = being_looted_public } }
			multiply_variable = { which = global_loot value = 0.5 }
		}
		wealth = global_loot
	}
	
	option = {
		name = OK
	}

	after = {
		FROM = {
			clr_wonder_flag = being_looted_private
			clr_wonder_flag = being_looted_public
		}
	}
}


# Hagia Sophia conversion event

character_event = {
	id = LT.20900
	title = wonder_cathedral_hagia_sophia
	picture = GFX_evt_hagia_sofia
	desc = {
		trigger = { event_target:target_chaplain = { always = yes } }
		text = EVTDESC_LT_20900_chaplain
	}
	desc = {
		trigger = { NOT =  { event_target:target_chaplain = { always = yes } } }
		text = EVTDESC_LT_20900
	}

	trigger = {
		OR = {
			AND = {
				any_realm_wonder = {
					NOT = { has_wonder_flag = Hagia_Sophia_catholic_cult }
					OR = {
						has_wonder_flag = Hagia_Sophia_orthodox_cult
						has_wonder_flag = Hagia_Sophia_muslim_cult
					}
				}
				religion = catholic
			}
			AND = {
				any_realm_wonder = {
					NOT = { has_wonder_flag = Hagia_Sophia_orthodox_cult }
					OR = {
						has_wonder_flag = Hagia_Sophia_catholic_cult
						has_wonder_flag = Hagia_Sophia_muslim_cult
					}
				}
				religion = orthodox
			}
			AND = {
				any_realm_wonder = {
					NOT = { has_wonder_flag = Hagia_Sophia_muslim_cult }
					OR = {
						has_wonder_flag = Hagia_Sophia_orthodox_cult
						has_wonder_flag = Hagia_Sophia_catholic_cult
					}
				}
				religion_group = muslim
			}
		}
   	}
	border = GFX_event_normal_frame_religion

    is_triggered_only = yes

    only_independent = yes

    immediate = {
    	random_realm_wonder = {
    		limit = {
    			has_wonder = wonder_cathedral_hagia_sophia
    		}
    		save_event_target_as = target_wonder
    	}
    	job_spiritual = {
    		save_event_target_as = target_chaplain
    	}
    	if = {
    		limit = {
    			OR = {
    				event_target:target_wonder = {
    					has_wonder_flag = Hagia_Sophia_catholic_cult
    					location = { religion = catholic }
    				}
    				event_target:target_wonder = {
    					has_wonder_flag = Hagia_Sophia_orthodox_cult
    					location = { religion = orthodox }
    				}
    				event_target:target_wonder = {
    					has_wonder_flag = Hagia_Sophia_muslim_cult
    					location = { religion_group = muslim }
    				}
    			}
    		}
    		event_target:target_wonder = { location = { set_province_flag = people_had_hagia_sophia } }
    	}
    }

    option = { #Convert
		name = EVTOPTA_LT_20900
		event_target:target_wonder = {
			clr_wonder_flag = Hagia_Sophia_catholic_cult
			clr_wonder_flag = Hagia_Sophia_orthodox_cult
			clr_wonder_flag = Hagia_Sophia_muslim_cult
		}
		if = {
			limit = { religion = catholic }
			event_target:target_wonder = {
				set_wonder_flag = Hagia_Sophia_catholic_cult
				set_wonder_model = wonder_hagia_sophia
			}
			
		}
		else_if = {
			limit = { religion = orthodox }
			event_target:target_wonder = {
				set_wonder_flag = Hagia_Sophia_orthodox_cult
				set_wonder_model = wonder_hagia_sophia
			}
		}
		else_if = {
			limit = { religion_group = muslim }
			event_target:target_wonder = {
				set_wonder_flag = Hagia_Sophia_muslim_cult
				set_wonder_model = wonder_hagia_sophia_minarets
			}
		}
		piety = 200
		reverse_opinion = {
			modifier = opinion_religious_tract
			who = event_target:target_chaplain
			years = 5
		}
		event_target:target_wonder = {
			show_scope_change = no
			location = {
				show_scope_change = no
				if = {
					limit = { has_province_flag = people_had_hagia_sophia }
				}
				add_province_modifier = { modifier = religious_tension years = 5 }
			}
		}
	}
    option = { #Not Convert
		name = EVTOPTB_LT_20900
		piety = -50
		reverse_opinion = {
			modifier = opinion_angry
			who = event_target:target_chaplain
			years = 5
		}
		event_target:target_wonder = {
			show_scope_change = no
			location = {
				show_scope_change = no
				if = {
					limit = { has_province_flag = people_had_hagia_sophia }
				}
				add_province_modifier = { modifier = religious_tolerance years = 10 }
			}
			
		}
	}
}

# After a Siege, things might get out of control and a sack occur. Similar to HL.4813, but weaker. Triggered as random event from on_action on_siege_won_leader
character_event = { 
	id = LT.21000
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		is_nomadic = no #Nomads get their own event ( HL.4813 )
		FROM = {
			OR = {
				holding_type = city
				holding_type = temple
				holding_type = castle
				holding_type = tribal
			}
			num_of_buildings = 4
			location = {
				NOT = {
					has_province_modifier = recently_burnt_the_land_not_owner
				}
			}
			owner = {
				war_with = ROOT # Must be hostile to ruler
			}
		}
		NOT = { has_character_flag = disciplinary_commander }
	}
	weight_multiplier = {
		days = 1
		modifier = {
			factor = 0
			has_character_modifier = strong_leader_modifier
		}
		modifier = {
			factor = 1.5
			has_character_modifier = weak_leader_modifier
		}
		modifier = {
			factor = 1.5
			FROM = { is_capital = yes }
		}
		modifier = {
			factor = 3
			has_character_modifier = plundering_leader_modifier
		}
	}
	
	immediate = {
		save_event_target_as = emf_looter
		FROM = {
			save_event_target_as = emf_holding
			holder_scope = {
				save_event_target_as = holder_target
				top_liege = {
					save_event_target_as = top_liege_target
				}
			}
		}
		character_event = { id = emf_siege.203 days = 1 }
	}
}
