# -*- ck2.events -*-

namespace = hip

# hip.0 -- on_yearly_pulse for maintenance of AI Isis, skips maintenance if a player is controlling Isis
character_event = {
	id = hip.0

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
	}

	immediate = {
		if = {
			limit = { ai = yes }
			character_event = { id = hip.1 }
		}
		any_courtier = {
			limit = { trait = emf_isis_courtier }
			# Keep isis courtier immortals relatively cleaned up re: relations:
			any_ward = { remove_guardian = yes }
			any_lover = {
				log = "DEBUG: hip.0: emf_isis_courtier had a lover"
				remove_lover = PREV
			}
			any_consort = {
				log = "DEBUG: hip.0: emf_isis_courtier had a concubine"
				remove_consort = PREV
			}
			any_spouse = {
				log = "DEBUG: hip.0: emf_isis_courtier had a spouse"
				remove_spouse = PREV
			}
			any_friend = { remove_friend = PREV }
			any_rival = { remove_rival = PREV }
			any_claim = { remove_claim = PREV }
			any_child_even_if_dead = {
				any_child_even_if_dead = {
					any_child_even_if_dead = {
						emf_vanish_character = yes
					}
					emf_vanish_character = yes
				}
				emf_vanish_character = yes
			}
			# Ensure that they have their original culture & religion if the PETs are saved:
			if = {
				limit = {
					persistent_event_target:pet_culture = {
						NOT = { culture = PREV }
					}
				}
				culture = persistent_event_target:pet_culture
			}
			if = {
				limit = {
					persistent_event_target:pet_religion = {
						NOT = { religion = PREV }
					}
				}
				religion = persistent_event_target:pet_religion
			}
			clear_focus = yes
			cancel_ambition = yes
			emf_do_not_disturb = yes
		}
	}
}


# hip.1 -- Perform annual maintenance on a non-player Isis
character_event = {
	id = hip.1

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Don't let Isis somehow change culture (she cannot change religion, because she is a religious head)
		if = {
			limit = { NOT = { culture = hip_culture } }
			culture = hip_culture
		}
		any_ward = { remove_guardian = yes }
		# No lovers, consorts, spouses, or children (would be due to some event)
		any_lover = { remove_lover = PREV }
		any_consort = { remove_consort = PREV }
		any_spouse = { remove_spouse = PREV }
		# Isis is not your friend or your foe. Isis sees all. Even the way you look at her portrait.
		any_friend = { remove_friend = ROOT }
		any_rival = { remove_rival = ROOT }
		any_child_even_if_dead = {
			any_child_even_if_dead = {
				any_child_even_if_dead = {
					emf_vanish_character = yes
				}
				emf_vanish_character = yes
			}
			emf_vanish_character = yes
		}
		any_courtier = {
			limit = {
				NOT = { trait = emf_isis_courtier }
				OR = {
					any_heir_title = { higher_tier_than = BARON }
					any_pretender_title = { higher_tier_than = BARON }
					any_claim = {
						has_holder = yes
						higher_tier_than = BARON
					}
				}
			}
			save_event_target_as = emf_courtier
			random_playable_ruler = {
				limit = {
					NOT = { character = ROOT }
					higher_tier_than = BARON
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_heir_title = {
							higher_tier_than = KING
							holder = PREVPREV
						}
					}
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_heir_title = {
							higher_tier_than = DUKE
							holder = PREVPREV
						}
					}
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_heir_title = {
							higher_tier_than = COUNT
							holder = PREVPREV
						}
					}
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_heir_title = {
							higher_tier_than = BARON
							holder = PREVPREV
						}
					}
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_pretender_title = {
							higher_tier_than = DUKE
							holder = PREVPREV
						}
					}
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_pretender_title = {
							higher_tier_than = COUNT
							holder = PREVPREV
						}
					}
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_pretender_title = {
							higher_tier_than = BARON
							holder = PREVPREV
						}
					}
				}
				preferred_limit = {
					independent = yes
					event_target:emf_courtier = {
						any_claim = {
							higher_tier_than = KING
							owner = {
								shares_realm_border_with = PREVPREVPREV
								relative_realm_size = { who = PREVPREVPREV size < 1.15 }
							}
						}
					}
				}
				preferred_limit = {
					independent = yes
					event_target:emf_courtier = {
						any_claim = {
							higher_tier_than = DUKE
							owner = {
								shares_realm_border_with = PREVPREVPREV
								relative_realm_size = { who = PREVPREVPREV size < 1.15 }
							}
						}
					}
				}
				preferred_limit = {
					independent = yes
					event_target:emf_courtier = {
						any_claim = {
							higher_tier_than = COUNT
							owner = {
								shares_realm_border_with = PREVPREVPREV
								relative_realm_size = { who = PREVPREVPREV size < 1.15 }
							}
						}
					}
				}
				preferred_limit = {
					independent = yes
					event_target:emf_courtier = {
						any_claim = {
							higher_tier_than = BARON
							owner = {
								shares_realm_border_with = PREVPREVPREV
								relative_realm_size = { who = PREVPREVPREV size < 1.15 }
							}
						}
					}
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_claim = {
							higher_tier_than = KING
							owner = {
								is_vassal_or_below = PREVPREVPREV
							}
						}
					}
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_claim = {
							higher_tier_than = DUKE
							owner = {
								is_vassal_or_below = PREVPREVPREV
							}
						}
					}
				}
				preferred_limit = {
					event_target:emf_courtier = {
						any_claim = {
							higher_tier_than = COUNT
							owner = {
								is_vassal_or_below = PREVPREVPREV
							}
						}
					}
				}
				ROOT = { move_character = PREV }
			}
		}
		# She can't inherit, but don't let her keep any extra titles anyway.
		any_demesne_title = {
			limit = {
				higher_tier_than = COUNT
				NOR = {
					title = e_hip
					has_flag = emf_isis_temporary_title
				}
			}
			emf_unsafe_destroy_title = yes
		}
		any_demesne_title = {
			limit = { tier = COUNT }
			location = {
				random_neighbor_province = {
					limit = { owner = { NOT = { character = ROOT } } }
					owner = {
						grant_title_no_opinion = PREVPREVPREV
					}
				}
			}
		}
		any_demesne_title = {
			limit = { tier = COUNT }
			location = {
				create_random_soldier = {
					random_traits = yes
					female = no
					religion = THIS
					culture = THIS
				}
				new_character = {
					emf_new_character_noble = yes
					grant_title_no_opinion = PREVPREV
					set_defacto_liege = THIS
				}
			}
		}
		any_demesne_title = {
			limit = { tier = BARON }
			dejure_liege_title = {
				owner = {
					grant_title_no_opinion = PREVPREV
				}
			}
		}
		any_demesne_title = {
			limit = { tier = BARON }
			emf_unsafe_destroy_title = yes
		}
		# Just in case someone accidentally gives a title to Isis and then locks
		# vassals into her untouchable realm. [Again, console or event.]
		any_vassal = {
			set_defacto_liege = THIS
			emf_liege_change = yes
		}
		# Remove any diplo-relations
		any_allied_character = { break_alliance = PREV }
		any_suzerain = { remove_tributary = PREV }
		any_tributary = { ROOT = { remove_tributary = PREV } }
		# Remove hip_religion_group / hip_culture_group / isis's courtier/prisoner characters from the world
		any_character = {
			limit = {
				NOT = { trait = emf_isis_courtier }
				OR = {
					religion_group = ROOT
					culture_group = ROOT
					host = { character = ROOT }
					vassal_of = ROOT
				}
				is_ruler = no
				NOT = { character = ROOT }
			}
			random_list = {
				1 = { death = { killer = ROOT death_reason = death_sacrificed } }
				1 = { death = { killer = ROOT death_reason = death_sacrificed_ancestors } }
				1 = { death = { killer = ROOT death_reason = death_execution_burning } }
				1 = { death = { killer = ROOT death_reason = death_execution_ash } }
				1 = { death = { killer = ROOT death_reason = death_execution_boiling } }
				1 = { death = { killer = ROOT death_reason = death_execution_disembowelment } }
				1 = { death = { killer = ROOT death_reason = death_execution_live_burial } }
				1 = { death = { killer = ROOT death_reason = death_execution_immurement } }
				1 = { death = { killer = ROOT death_reason = death_execution_beheading } }
				1 = { death = { killer = ROOT death_reason = death_execution_flaying } }
				3 = { death = { killer = ROOT death_reason = death_execution_crucifixion } }
				1 = { death = { killer = ROOT death_reason = death_execution_impaling } }
				1 = { death = { killer = ROOT death_reason = death_execution_drowning_pit } }
				1 = { death = { killer = ROOT death_reason = death_execution_eaten } }
			}
		}
		# The `isis` trait should only be held by the actual Isis (some code needs that)
		any_character = {
			limit = {
				trait = isis
				NOT = { character = ROOT }
			}
			remove_trait = isis
		}
		# Nor should she have claims on titles.
		any_claim = { remove_claim = ROOT }
		# No claimants to e_hip, plzkthx
		e_hip = { any_claimant = { e_hip = { remove_claim = PREV } } }
		clear_focus = yes
		cancel_ambition = yes
		emf_remove_all_traits = yes
		add_trait = isis
		emf_do_not_disturb = yes
	}
}

# hip.2 -- handle emf_isis_courtier characters changing courts away from isis [on_employer_change, on_host_change]
character_event	= {
	id = hip.2

	is_triggered_only = yes
	hide_window = yes

	has_character_flag = emf_isis_courtier

	trigger = {
		is_alive = yes
		FROMFROM = {
			NOT = { character = event_target:isis }
		}
	}

	immediate = {
		log = "DEBUG: hip.2: an emf_isis_courtier escaped from the court of [isis.GetBestName]: [This.EMF_GetDebugName]"
		liege = {
			log = " ----> liege:    [This.EMF_GetDebugName]"
		}
		employer = {
			log = " ----> employer: [This.EMF_GetDebugName]"
		}
		host = {
			log = " ----> host:     [This.EMF_GetDebugName]"
		}
		if = {
			limit = { prisoner = yes }
			log = " ----> is prisoner"
		}
		if = {
			limit = { emf_is_voter = yes }
			log = " ----> is councillor / voter"
		}
		if = {
			limit = { has_minor_title = yes }
			log = " ----> has minor title"
		}
		prisoner = no
		move_character = event_target:isis
		if = {
			limit = { NOT = { host = { character = event_target:isis } } }
			force_host = event_target:isis
		}
	}
}

# hip.5
# Handle the "death" of Isis (on_death on_action)
character_event = {
	id = hip.5

	is_triggered_only = yes
	hide_window = yes

	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
	}

	immediate = {
		# Get rid of our temporary title (was just for locking-up diplomacy)
		random_demesne_title = {
			limit = { has_flag = emf_isis_temporary_title }
			emf_unsafe_destroy_title = yes
		}
		# Create Isis Jr.
		create_character = {
			random_traits = no
			name = "Isis"
			female = yes
			age = 32
			immortal_age = 32
			culture = hip_culture
			religion = hip_religion
			dynasty = 2606060 # HIP dynasty
			fertility = -1
			health = 10
			trait = isis
			attributes = {
				diplomacy = 64
				martial = 64
				stewardship = 64
				intrigue = 64
				learning = 64
			}
		}
		new_character = {
			# Yes, this also removes the `isis` trait which is specified in create_character (for immortality):
			emf_remove_all_traits = yes
			# Become Isis's daughter if dynasty is shared (only not when alt. start or other things are screwy):
			if = {
				limit = { dynasty = ROOT }
				set_mother = ROOT
			}
			# Effectively deletes the current Isis from e_hip title history:
			e_hip = { copy_title_history = e_null }
			# Abdicate to my new daughter:
			save_event_target_as = emf_abdicate_real_heir
			ROOT = { emf_willfully_abdicate = yes }
			emf_switch_to_feudal_gov = yes
			character_event = { id = hip.6 } # Create temporary title and give nickname
			character_event = { id = hip.7 } # Inherit state from previous Isis
		}
	}
}


# hip.6
# Helper for hip.5 (ROOT = Isis v2.0, FROM = Isis v1.0), also used
# by character history effect initially (ROOT = Isis v1.0).
character_event = {
	id = hip.6

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { event_target:isis = { always = yes } }
			clear_global_event_target = isis
		}
		save_global_event_target_as = isis
		if = {
			limit = { NOT = { event_target:duat = { title = e_hip } } }
			e_hip = { save_global_event_target_as = duat }
		}

		add_character_modifier = { name = emf_isis duration = -1 }

		# Create a new temporary title to lock-out most diplomatic actions
		create_title = {
			tier = EMPEROR
			landless = yes
			temporary = yes
			culture = ROOT
			name = "ISIS_DIVINE_VISION" # "Goddess Isis's Divine Vision"
			holder = ROOT
		}
		new_title = {
			set_flag = emf_isis_temporary_title
		}

		# Isis gets her own nickname, mostly to prevent her from getting random nicknames
		give_nickname = nick_all_seeing
		emf_do_not_disturb = yes
	}
}

# hip.7 -- inherit important state from previous isis [FROM], whom is dying, so flags / opinion modifiers / etc. don't need
# to be cleared for her (but her 'isis' trait must be cleared before she dies, or else unqualified scoping to isis via the
# cached trait scoping mechanism may scope to a dead isis).
character_event = {
	id = hip.7

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		FROM = {
			# there should only ever be one character with the `isis` trait.
			remove_trait = isis
			ROOT = { add_trait = isis }

			# pass on karling_usurper_tom TOMs
			any_opinion_modifier_target = {
				limit = { reverse_has_opinion_modifier = { who = PREV modifier = karling_usurper_tom } }
				reverse_opinion = { who = ROOT modifier = karling_usurper_tom }
			}
		}
	}
}
