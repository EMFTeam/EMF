# -*- ck2.events -*-

namespace = emf_religion

# Religion Events
# Future home of schism events, (possibly) Shiite school traits, and other things

# Raider Trait Gained
character_event = {
	id = emf_religion.0
	desc = emf_religion.0.desc
	picture = GFX_evt_vikings_arriving_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	hide_from = yes

	min_age = 16
	capable_only = yes
	prisoner = no

	trigger = {
		NOR = {
			trait = raider
			trait = viking
			trait = pirate
			trait = ravager
			trait = seaking
			trait = sea_queen
		}
		NOR = {
			any_owned_bloodline = {
				has_bloodline_flag = bloodline_viking
				bloodline_is_active_for = PREV
			}
			emf_seafaring_religion = yes
		}
	}

	option = {
		name = emf_religion.0.a
		add_trait = raider
	}
}


# emf_religion.1 -- on_new_holder (creation) for holy orders to ensure they are setup correctly
character_event = {
	id = emf_religion.1

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		FROM = { holy_order = yes }
		NOT = { FROMFROM = { always = yes } }
	}

	immediate = {
		# Ensure independent [NOTE: might not want this for all holy_order=yes titles, but currently we do.]
		if = {
			limit = { independent = no }
			set_defacto_liege = ROOT
			emf_liege_change = yes
		}
		set_government_type = order_government
		emf_create_courtiers = yes
		# Award religious authority
		if = {
			limit = { NOT = { religion_authority = 0.75 } }
			religion_authority = { modifier = religious_order_formed }
		}
		# Ensure wealth
		if = {
			limit = { NOT = { wealth = 500 } }
			clear_wealth = yes
			wealth = 500
		}
	}
}

# emf_religion.2 -- Assignment of syncretic traits on_birth, on_conversion, on new characters spawning, etc.
character_event = {
	id = emf_religion.2

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		religion_scope = {
			OR = {
				has_religion_feature = religion_syncretic_christian
				has_religion_feature = religion_syncretic_muslim
				has_religion_feature = religion_syncretic_zoroastrian
				has_religion_feature = religion_syncretic_indian
			}
		}
	}
	
	immediate = {
		if = {
			limit = { has_religion_feature = religion_syncretic_christian }
			add_trait = syncretic_christian
		}
		if = {
			limit = { has_religion_feature = religion_syncretic_muslim }
			add_trait = syncretic_muslim
		}
		if = {
			limit = { has_religion_feature = religion_syncretic_zoroastrian }
			add_trait = syncretic_zoroastrian
		}
		if = {
			limit = { has_religion_feature = religion_syncretic_indian }
			add_trait = syncretic_indian
		}
	}
}

# emf_religion.3 -- Activation of Jewish Great Holy Wars, after Christians and Muslims
narrative_event = {
	id = emf_religion.3
	title = EVTNAME_emf_religion_3
	desc = EVTDESC_emf_religion_3
	picture = GFX_evt_synagogue
	border = GFX_event_narrative_frame_religion

	major = yes

	show_ROOT = yes
	hide_new = yes

	only_playable = yes
	min_age = 16
	religion_group = jewish_group

	trigger = {
		NOT = {
			has_alternate_start_parameter = { key = religion_names value = random }
		}
		controls_religion = yes

		NOT = { has_global_flag = jewish_ghws_unlocked }

		OR = {
			has_global_flag = muslim_jihads_unlocked
			has_global_flag = christian_crusades_unlocked
		}
	}

	mean_time_to_happen = {
		months = 120
		modifier = {
			factor = 0
			has_global_flag = emf_debug_fast_ghw_unlock
		}
	}

	immediate = {
		set_global_flag = jewish_ghws_unlocked
	}

	option = {
		name = EVTOPTA_emf_religion_3
		trigger = {
			religion_group = jewish_group
		}
	}

	option = {
		name = EVTOPTB_emf_religion_3
		trigger = {
			NOT = { religion_group = jewish_group }
		}
	}
}

# emf_religion.4 -- Activation of Mazdan Great Holy Wars, after Christians and Muslims
narrative_event = {
	id = emf_religion.4
	title = EVTNAME_emf_religion_4
	desc = EVTDESC_emf_religion_4
	picture = GFX_evt_zoroaster
	border = GFX_event_narrative_frame_religion

	major = yes

	show_ROOT = yes
	hide_new = yes

	only_playable = yes
	min_age = 16
	religion_group = zoroastrian_group

	trigger = {
		NOT = {
			has_alternate_start_parameter = { key = religion_names value = random }
		}
		controls_religion = yes

		NOT = { has_global_flag = zoroastrian_ghws_unlocked }

		OR = {
			has_global_flag = muslim_jihads_unlocked
			has_global_flag = christian_crusades_unlocked
		}
	}

	mean_time_to_happen = {
		months = 120
		modifier = {
			factor = 0
			has_global_flag = emf_debug_fast_ghw_unlock
		}
	}

	immediate = {
		set_global_flag = zoroastrian_ghws_unlocked
	}

	option = {
		name = EVTOPTA_emf_religion_4
		trigger = {
			religion_group = zoroastrian_group
		}
	}

	option = {
		name = EVTOPTB_emf_religion_4
		trigger = {
			NOT = { religion_group = zoroastrian_group }
		}
	}
}

# emf_religion.6 -- Fix Pagan Reformation God names on loading of a saved game (because changed god lists are saved improperly as of 3.3.0)
character_event = {
	id = emf_religion.6

	is_triggered_only = yes
	hide_window = yes
	
	religion = hip_religion
	
	trigger = {
		has_landed_title = e_hip
		is_save_game = yes
		OR = {
			has_global_flag = norse_reformation
			has_global_flag = tengri_reformation
			has_global_flag = baltic_reformation
			has_global_flag = finnish_reformation
			has_global_flag = aztec_reformation
			has_global_flag = slavic_reformation
			has_global_flag = west_african_reformation
			has_global_flag = zun_reformation
			has_global_flag = bon_reformation
			has_global_flag = hellenic_reformation
		}
	}
	
	immediate = {
		if = {
			limit = { has_global_flag = norse_reformation }
			norse_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = tengri_reformation }
			tengri_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = baltic_reformation }
			baltic_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = finnish_reformation }
			finnish_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = aztec_reformation }
			aztec_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = slavic_reformation }
			slavic_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = west_african_reformation }
			west_african_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = zun_reformation }
			zun_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = bon_reformation }
			bon_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = hellenic_reformation }
			hellenic_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
	}
}

# Stance event for new_crusade when a character is excommunicated
character_event = {
	id = emf_religion.7
	desc = EVTDESC_emf_religion_7
	picture = GFX_evt_throne_room
	is_triggered_only = yes

	trigger = {
		trait = excommunicated
		check_if_fourth_crusade_trigger = no
	}
	option = {
		name = I_SEE
		custom_tooltip = { text = EVTOPTA_HFP_41091_TT }
	}
}

# Religious Head pre-notification of excommunicated crusader
character_event = {
	id = emf_religion.8
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		FROM = { letter_event = { id = emf_religion.9 days = 3 } }
	}
}

# Notification of Excommunicated interaction with Crusades
letter_event = {
	id = emf_religion.9
	desc = EVTDESC_emf_religion_9
	is_triggered_only = yes
	trigger = {
		has_pledged_crusade_participation = yes
		trait = excommunicated
		check_if_fourth_crusade_trigger = no
	}
	option = {
		tooltip_info = excommunicated
		name = I_SEE
	}
}

# Bounce event for de-excommunication from crusade
character_event = {
	id = emf_religion.10
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		trait = excommunicated
	}
	immediate = {
		rightful_religious_head_scope = { character_event = { id = HFP.41056 } }
	}
}

# Excommunicated Beneficiary Message - Player Only
character_event = {
    id = emf_religion.11
    desc = EVTDESC_emf_religion_11
    picture = GFX_evt_throne_room
    notification = yes
    is_triggered_only = yes
    ai = no

    option = {
        name = OK
    }
}

# Character dies after having pledged to the crusade but before it could start
character_event = {
	id = emf_religion.11
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_preparing_crusade = yes
		has_pledged_crusade_participation = yes
	}
	immediate = {
		pledge_crusade_participation = no
		if = {
			limit = { check_if_fourth_crusade_trigger = no }
			trigger_switch = {
				on_trigger = real_tier
				EMPEROR = { add_to_crusade_prestige_pot = -1000 add_to_crusade_piety_pot = -400 }
				KING = { add_to_crusade_prestige_pot = -750 add_to_crusade_piety_pot = -300 }
				DUKE = { add_to_crusade_prestige_pot = -500 add_to_crusade_piety_pot = -200 }
				COUNT = { add_to_crusade_prestige_pot = -250 add_to_crusade_piety_pot = -100 }
				BARON = { add_to_crusade_prestige_pot = -125 add_to_crusade_piety_pot = -50 }
			}
		}
		else = {
			trigger_switch = {
				on_trigger = real_tier
				EMPEROR = { add_to_crusade_prestige_pot = -1000 }
				KING = { add_to_crusade_prestige_pot = -750 }
				DUKE = { add_to_crusade_prestige_pot = -500 }
				COUNT = { add_to_crusade_prestige_pot = -250 }
				BARON = { add_to_crusade_prestige_pot = -125 }
			}
		}
		random = {
			chance = 33
			add_to_crusade_artifact_pot = -1
		}
	}
}

# Character stops being a ruler after having pledged to the crusade but before it could start
character_event = {
	id = emf_religion.12
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_preparing_crusade = yes
		FROMFROM = {
			has_pledged_crusade_participation = yes
			is_ruler = no
		}
	}
	immediate = {
		FROMFROM = {
			pledge_crusade_participation = no
			piety = -100
			add_character_modifier = {
				name = recently_unpledged_to_crusade_cooldown
				hidden = yes
				duration = 365
			}
			if = {
				limit = { check_if_fourth_crusade_trigger = no }
				trigger_switch = {
					on_trigger = real_tier
					EMPEROR = { add_to_crusade_prestige_pot = -1000 add_to_crusade_piety_pot = -400 }
					KING = { add_to_crusade_prestige_pot = -750 add_to_crusade_piety_pot = -300 }
					DUKE = { add_to_crusade_prestige_pot = -500 add_to_crusade_piety_pot = -200 }
					COUNT = { add_to_crusade_prestige_pot = -250 add_to_crusade_piety_pot = -100 }
					BARON = { add_to_crusade_prestige_pot = -125 add_to_crusade_piety_pot = -50 }
				}
			}
			else = {
				trigger_switch = {
					on_trigger = real_tier
					EMPEROR = { add_to_crusade_prestige_pot = -1000 }
					KING = { add_to_crusade_prestige_pot = -750 }
					DUKE = { add_to_crusade_prestige_pot = -500 }
					COUNT = { add_to_crusade_prestige_pot = -250 }
					BARON = { add_to_crusade_prestige_pot = -125 }
				}
			}
			random = {
				chance = 33
				add_to_crusade_artifact_pot = -1
			}
			set_character_flag = asked_to_pledge
		}
	}
}

# Bounce event from stealing artifact
character_event = {
	id = emf_religion.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		event_target:monastic_artifact_stealer = {
			is_alive = yes
			same_society_as = ROOT
			NOT = { is_friend = ROOT }
			NOT = { is_lover = ROOT }
			OR = {
				trait = greedy
				trait = deceitful
			}
			NOT = { character = event_target:monastic_artifact_witness }
			ai = yes
		}
	}
	immediate = {
		event_target:monastic_artifact_stealer = { character_event = { id = MNM.4623 } }
	}
	fail_trigger_effect = {
		clr_character_flag = monastic_artifact_lover
		clr_character_flag = monastic_artifact_seamless_robe_of_jesus
		clr_character_flag = monastic_artifact_crown_of_thorns
		clr_character_flag = monastic_artifact_fragment_of_true_cross
		clr_character_flag = monastic_artifact_holy_foreskin
		clr_character_flag = monastic_artifact_image_of_edessa
		clr_character_flag = monastic_artifact_elaborate_danda
		clr_character_flag = monastic_artifact_sariraka_actual_body_part
		clr_character_flag = monastic_artifact_sarira
	}
}
