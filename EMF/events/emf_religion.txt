# -*- ck2.events -*-

namespace = emf_religion

# Religion Events
# Future home of schism events, (possibly) Shiite school traits, and other things

# Raider Trait Gained
character_event = {
	id = emf_religion.0
	desc = emf_religion.0.desc
	picture = GFX_evt_vikings_arriving_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	hide_from = yes

	min_age = 16
	capable_only = yes
	prisoner = no

	trigger = {
		NOR = {
			trait = raider
			trait = viking
			trait = pirate
			trait = ravager
			trait = seaking
			trait = sea_queen
		}
		NOR = {
			any_owned_bloodline = {
				has_bloodline_flag = bloodline_viking
				bloodline_is_active_for = PREV
			}
			emf_seafaring_religion = yes
		}
	}

	option = {
		name = emf_religion.0.a
		add_trait = raider
	}
}


# emf_religion.1 -- on_new_holder (creation) for holy orders to ensure they are setup correctly
character_event = {
	id = emf_religion.1

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		FROM = { holy_order = yes }
		NOT = { FROMFROM = { always = yes } }
	}

	immediate = {
		# Ensure independent [NOTE: might not want this for all holy_order=yes titles, but currently we do.]
		if = {
			limit = { independent = no }
			set_defacto_liege = ROOT
			emf_liege_change = yes
		}
		set_government_type = order_government
		emf_create_courtiers = yes
		# Award religious authority
		if = {
			limit = { NOT = { religion_authority = 0.75 } }
			religion_authority = { modifier = religious_order_formed }
		}
		# Ensure wealth
		if = {
			limit = { NOT = { wealth = 500 } }
			clear_wealth = yes
			wealth = 500
		}
	}
}

# emf_religion.2 -- Assignment of syncretic traits on_birth, on_conversion, on new characters spawning, etc.
character_event = {
	id = emf_religion.2

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		religion_scope = {
			OR = {
				has_religion_feature = religion_syncretic_christian
				has_religion_feature = religion_syncretic_muslim
				has_religion_feature = religion_syncretic_zoroastrian
				has_religion_feature = religion_syncretic_indian
			}
		}
	}
	
	immediate = {
		if = {
			limit = { has_religion_feature = religion_syncretic_christian }
			add_trait = syncretic_christian
		}
		if = {
			limit = { has_religion_feature = religion_syncretic_muslim }
			add_trait = syncretic_muslim
		}
		if = {
			limit = { has_religion_feature = religion_syncretic_zoroastrian }
			add_trait = syncretic_zoroastrian
		}
		if = {
			limit = { has_religion_feature = religion_syncretic_indian }
			add_trait = syncretic_indian
		}
	}
}

# emf_religion.3 -- Activation of Jewish Great Holy Wars, after two of Christians, Muslims, and Pagans
narrative_event = {
	id = emf_religion.3
	title = EVTNAME_emf_religion_3
	desc = {
		trigger = {
			has_global_flag = muslim_jihads_unlocked
			has_global_flag = christian_crusades_unlocked
		}
		text = EVTDESCA_emf_religion_3
	}
	desc = {
		trigger = {
			has_global_flag = pagan_ghws_unlocked
			has_global_flag = christian_crusades_unlocked
		}
		text = EVTDESCB_emf_religion_3
	}
	desc = {
		trigger = {
			has_global_flag = muslim_jihads_unlocked
			has_global_flag = pagan_ghws_unlocked
		}
		text = EVTDESCC_emf_religion_3
	}
	picture = GFX_evt_synagogue
	border = GFX_event_narrative_frame_religion

	major = yes

	show_ROOT = yes
	hide_new = yes

	only_playable = yes
	min_age = 16
	religion_group = jewish_group

	trigger = {
		controls_religion = yes
		is_heretic = no
		can_call_crusade = yes
		NOT = { has_alternate_start_parameter = { key = religion_names value = random } }
		NOT = { has_global_flag = jewish_ghws_unlocked }
		calc_true_if = {
			amount = 2
			has_global_flag = muslim_jihads_unlocked
			has_global_flag = christian_crusades_unlocked
			has_global_flag = pagan_ghws_unlocked
		}
	}

	mean_time_to_happen = {
		months = 120
		modifier = {
			factor = 0
			has_global_flag = emf_debug_fast_ghw_unlock
		}
		modifier = {
			factor = 0.5
			any_landed_title = {
				is_holy_site = ROOT
				owner = {
					top_liege = {
						NOR = {
							religion_group = ROOT
							ROOT = { emf_syncretized_religion_with_PREV = yes }
						}
						trigger_if = {
							limit = { religion_group = christian }
							has_global_flag = christian_crusades_unlocked
						}
						trigger_else_if = {
							limit = { religion_group = muslim }
							has_global_flag = muslim_jihads_unlocked
						}
						trigger_else_if = {
							limit = { religion_group = pagan_group }
							has_global_flag = pagan_ghws_unlocked
						}
						trigger_else_if = {
							limit = { religion_group = zoroastrian_group }
							has_global_flag = zoroastrian_ghws_unlocked
						}
					}
				}
			}
		}
		modifier = {
			factor = 2
			NAND = {
				ROOT = { religion_scope = { has_religion_feature = religion_syncretic_christian } }
				has_global_flag = christian_crusades_unlocked
			}
			NAND = {
				ROOT = { religion_scope = { has_religion_feature = religion_syncretic_muslim } }
				has_global_flag = muslim_jihads_unlocked
			}
			NAND = {
				ROOT = { religion_scope = { has_religion_feature = religion_syncretic_zoroastrian } }
				has_global_flag = zoroastrian_ghws_unlocked
			}
			NOT = {
				any_landed_title = {
					is_holy_site = ROOT
					NOT = {
						owner = {
							top_liege = {
								OR = {
									religion_group = jewish_group
									ROOT = { emf_syncretized_religion_with_PREV = yes }
									liege_before_war = {
										OR = {
											religion_group = jewish_group
											ROOT = { emf_syncretized_religion_with_PREV = yes }
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	immediate = {
		set_global_flag = jewish_ghws_unlocked
	}

	option = {
		name = EVTOPTA_emf_religion_3
		trigger = {
			religion_group = jewish_group
		}
	}

	option = {
		name = EVTOPTB_emf_religion_3
		trigger = {
			NOT = { religion_group = jewish_group }
		}
	}
}

# emf_religion.4 -- Activation of Mazdan Great Holy Wars, after two of Christians, Muslims, and Pagans
narrative_event = {
	id = emf_religion.4
	title = EVTNAME_emf_religion_4
	desc = {
		trigger = {
			has_global_flag = muslim_jihads_unlocked
			has_global_flag = christian_crusades_unlocked
		}
		text = EVTDESCA_emf_religion_4
	}
	desc = {
		trigger = {
			has_global_flag = pagan_ghws_unlocked
			has_global_flag = christian_crusades_unlocked
		}
		text = EVTDESCB_emf_religion_4
	}
	desc = {
		trigger = {
			has_global_flag = muslim_jihads_unlocked
			has_global_flag = pagan_ghws_unlocked
		}
		text = EVTDESCC_emf_religion_4
	}
	picture = GFX_evt_zoroaster
	border = GFX_event_narrative_frame_religion

	major = yes

	show_ROOT = yes
	hide_new = yes

	only_playable = yes
	min_age = 16
	religion_group = zoroastrian_group

	trigger = {
		controls_religion = yes
		is_heretic = no
		can_call_crusade = yes
		NOT = { has_alternate_start_parameter = { key = religion_names value = random } }
		NOT = { has_global_flag = zoroastrian_ghws_unlocked }
		calc_true_if = {
			amount = 2
			has_global_flag = muslim_jihads_unlocked
			has_global_flag = christian_crusades_unlocked
			has_global_flag = pagan_ghws_unlocked
		}
	}

	mean_time_to_happen = {
		months = 120
		modifier = {
			factor = 0
			has_global_flag = emf_debug_fast_ghw_unlock
		}
		modifier = {
			factor = 0.5
			any_landed_title = {
				is_holy_site = ROOT
				owner = {
					top_liege = {
						NOR = {
							religion_group = ROOT
							ROOT = { emf_syncretized_religion_with_PREV = yes }
						}
						trigger_if = {
							limit = { religion_group = christian }
							has_global_flag = christian_crusades_unlocked
						}
						trigger_else_if = {
							limit = { religion_group = muslim }
							has_global_flag = muslim_jihads_unlocked
						}
						trigger_else_if = {
							limit = { religion_group = pagan_group }
							has_global_flag = pagan_ghws_unlocked
						}
						trigger_else_if = {
							limit = { religion_group = jewish_group }
							has_global_flag = jewish_ghws_unlocked
						}
					}
				}
			}
		}
		modifier = {
			factor = 2
			NAND = {
				ROOT = { religion_scope = { has_religion_feature = religion_syncretic_christian } }
				has_global_flag = christian_crusades_unlocked
			}
			NAND = {
				ROOT = { religion_scope = { has_religion_feature = religion_syncretic_muslim } }
				has_global_flag = muslim_jihads_unlocked
			}
			NOT = {
				any_landed_title = {
					is_holy_site = ROOT
					NOT = {
						owner = {
							top_liege = {
								OR = {
									religion_group = zoroastrian_group
									ROOT = { emf_syncretized_religion_with_PREV = yes }
									liege_before_war = {
										OR = {
											religion_group = zoroastrian_group
											ROOT = { emf_syncretized_religion_with_PREV = yes }
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	immediate = {
		set_global_flag = zoroastrian_ghws_unlocked
	}

	option = {
		name = EVTOPTA_emf_religion_4
		trigger = {
			religion_group = zoroastrian_group
		}
	}

	option = {
		name = EVTOPTB_emf_religion_4
		trigger = {
			NOT = { religion_group = zoroastrian_group }
		}
	}
}

# emf_religion.5 -- Activation of Pagan Great Holy Wars after losing too many holy sites
narrative_event = {
	id = emf_religion.5
	title = EVTNAME39680
	desc = EVTDESC_emf_religion_5
	picture = {
		trigger = {
			ROOT = {
				OR = {
					religion = hellenic_pagan
					religion = hellenic_pagan_reformed
				}
			}
		}
		picture = GFX_evt_hellenic_temple
	}
	picture = {
		trigger = {
			ROOT = {
				OR = {
					religion = west_african_pagan
					religion = west_african_pagan_reformed
				}
			}
		}
		picture = GFX_evt_west_african_ruler
	}
	picture = {
		trigger = {
			ROOT = {
				OR = {
					religion = aztec
					religion = aztec_reformed
				}
			}
		}
		picture = GFX_evt_throne_room_mesoamerican
	}
	picture = {
		trigger = {
			ROOT = {
				OR = {
					religion = tengri_pagan
					religion = tengri_pagan_reformed
					religion = bon
					religion = bon_reformed
				}
			}
		}
		picture = GFX_evt_steppe_mercenaries
	}
	picture = {
		trigger = {
			ROOT = {
				OR = {
					religion = zun_pagan
					religion = zun_pagan_reformed
				}
			}
		}
		picture = GFX_evt_religious_exultation
	}
	picture = {
		trigger = {
			ROOT = {
				NOR = {
					religion = hellenic_pagan
					religion = hellenic_pagan_reformed
					religion = west_african_pagan
					religion = west_african_pagan_reformed
					religion = aztec
					religion = aztec_reformed
					religion = tengri_pagan
					religion = tengri_pagan_reformed
					religion = bon
					religion = bon_reformed
					religion = zun_pagan
					religion = zun_pagan_reformed
				}
			}
		}
		picture = GFX_evt_midwinter_blot_oldgods
	}
	border = GFX_event_narrative_frame_religion

	major = yes

	show_ROOT = yes
	hide_new = yes

	only_playable = yes
	min_age = 16
	religion_group = pagan_group

	trigger = {
		controls_religion = yes
		is_heretic = no
		can_call_crusade = yes
		NOT = { has_alternate_start_parameter = { key = religion_names value = random } }
		NOT = { has_global_flag = pagan_ghws_unlocked }
		trigger_if = {
			limit = {
				OR = {
					has_global_flag = muslim_jihads_unlocked
					has_global_flag = christian_crusades_unlocked
				}
			}
			any_landed_title = { # Two of our holy sites not under our control
				count = 2
				is_holy_site = ROOT
				NOT = {
					owner = {
						top_liege = {
							OR = {
								religion = ROOT
								is_reformed_religion = ROOT
								ROOT = {
									OR = {
										is_reformed_religion = PREV
										emf_syncretized_religion_with_PREV = yes
									}
								}
								liege_before_war = {
									OR = {
										religion = ROOT
										is_reformed_religion = ROOT
										ROOT = {
											OR = {
												is_reformed_religion = PREV
												emf_syncretized_religion_with_PREV = yes
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		trigger_else = {
			any_landed_title = { # Three of our holy sites not under our control
				count = 3
				is_holy_site = ROOT
				NOT = {
					owner = {
						top_liege = {
							OR = {
								religion = ROOT
								is_reformed_religion = ROOT
								ROOT = {
									OR = {
										is_reformed_religion = PREV
										emf_syncretized_religion_with_PREV = yes
									}
								}
								liege_before_war = {
									OR = {
										religion = ROOT
										is_reformed_religion = ROOT
										ROOT = {
											OR = {
												is_reformed_religion = PREV
												emf_syncretized_religion_with_PREV = yes
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	mean_time_to_happen = {
		months = 3
		modifier = {
			factor = 0
			has_global_flag = emf_debug_fast_ghw_unlock
		}
	}

	immediate = {
		set_global_flag = pagan_ghws_unlocked
	}

	option = {
		name = EVTOPTA39680
		trigger = {
			religion = ROOT
		}
	}

	option = {
		name = EVTOPTB39680
		trigger = {
			religion_group = pagan_group
			NOT = { religion = ROOT }
		}
	}

	option = {
		name = EVTOPTC39680
		trigger = {
			NOT = { religion_group = pagan_group }
		}
	}
}

# emf_religion.6 -- Fix Pagan Reformation God names on loading of a saved game (because changed god lists are saved improperly as of 3.3.0)
character_event = {
	id = emf_religion.6

	is_triggered_only = yes
	hide_window = yes
	
	religion = hip_religion
	
	trigger = {
		has_landed_title = e_hip
		is_save_game = yes
		OR = {
			has_global_flag = norse_reformation
			has_global_flag = tengri_reformation
			has_global_flag = baltic_reformation
			has_global_flag = finnish_reformation
			has_global_flag = aztec_reformation
			has_global_flag = slavic_reformation
			has_global_flag = west_african_reformation
			has_global_flag = zun_reformation
			has_global_flag = bon_reformation
			has_global_flag = hellenic_reformation
		}
	}
	
	immediate = {
		if = {
			limit = { has_global_flag = norse_reformation }
			norse_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = tengri_reformation }
			tengri_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = baltic_reformation }
			baltic_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = finnish_reformation }
			finnish_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = aztec_reformation }
			aztec_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = slavic_reformation }
			slavic_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = west_african_reformation }
			west_african_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = zun_reformation }
			zun_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = bon_reformation }
			bon_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
		if = {
			limit = { has_global_flag = hellenic_reformation }
			hellenic_pagan_reformed = {
				reformation_god_names_changes_effect = yes
			}
		}
	}
}

# Stance event for new_crusade when a character is excommunicated
character_event = {
	id = emf_religion.7
	desc = EVTDESC_emf_religion_7
	picture = GFX_evt_throne_room
	is_triggered_only = yes

	trigger = {
		trait = excommunicated
		check_if_fourth_crusade_trigger = no
	}
	option = {
		name = I_SEE
		custom_tooltip = { text = EVTOPTA_HFP_41091_TT }
	}
}

# Religious Head pre-notification of excommunicated crusader
character_event = {
	id = emf_religion.8
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		FROM = { letter_event = { id = emf_religion.9 days = 3 } }
	}
}

# Notification of Excommunicated interaction with Crusades
letter_event = {
	id = emf_religion.9
	desc = EVTDESC_emf_religion_9
	is_triggered_only = yes
	trigger = {
		has_pledged_crusade_participation = yes
		trait = excommunicated
		check_if_fourth_crusade_trigger = no
	}
	option = {
		tooltip_info = excommunicated
		name = I_SEE
	}
}

# Bounce event for de-excommunication from crusade
character_event = {
	id = emf_religion.10
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		trait = excommunicated
	}
	immediate = {
		rightful_religious_head_scope = { character_event = { id = HFP.41056 } }
	}
}

# Excommunicated Beneficiary Message - Player Only
character_event = {
    id = emf_religion.11
    desc = EVTDESC_emf_religion_11
    picture = GFX_evt_throne_room
    notification = yes
    is_triggered_only = yes
    ai = no

    option = {
        name = OK
    }
}

# Character dies after having pledged to the crusade but before it could start
character_event = {
	id = emf_religion.12
	hide_window = yes
	is_triggered_only = yes
	
	religion_group = christian
	only_rulers = yes
	
	trigger = {
		OR = {
			religion = catholic
			religion = fraticelli
		}
		religion_head = { is_preparing_crusade = yes } # Need to scope to religious head because this character is dying
		has_pledged_crusade_participation = yes
	}
	immediate = {
		pledge_crusade_participation = no
		if = {
			limit = { check_if_fourth_crusade_trigger = no }
			trigger_switch = {
				on_trigger = real_tier
				EMPEROR = { add_to_crusade_prestige_pot = -1000 add_to_crusade_piety_pot = -400 }
				KING = { add_to_crusade_prestige_pot = -750 add_to_crusade_piety_pot = -300 }
				DUKE = { add_to_crusade_prestige_pot = -500 add_to_crusade_piety_pot = -200 }
				COUNT = { add_to_crusade_prestige_pot = -250 add_to_crusade_piety_pot = -100 }
				BARON = { add_to_crusade_prestige_pot = -125 add_to_crusade_piety_pot = -50 }
			}
		}
		else = {
			trigger_switch = {
				on_trigger = real_tier
				EMPEROR = { add_to_crusade_prestige_pot = -1000 }
				KING = { add_to_crusade_prestige_pot = -750 }
				DUKE = { add_to_crusade_prestige_pot = -500 }
				COUNT = { add_to_crusade_prestige_pot = -250 }
				BARON = { add_to_crusade_prestige_pot = -125 }
			}
		}
		random = {
			chance = 33
			add_to_crusade_artifact_pot = -1
		}
	}
}

# Character stops being a ruler after having pledged to the crusade but before it could start
character_event = {
	id = emf_religion.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_preparing_crusade = yes
		FROMFROM = {
			has_pledged_crusade_participation = yes
			is_ruler = no
		}
	}
	immediate = {
		FROMFROM = {
			pledge_crusade_participation = no
			piety = -100
			add_character_modifier = {
				name = recently_unpledged_to_crusade_cooldown
				hidden = yes
				duration = 365
			}
			if = {
				limit = { check_if_fourth_crusade_trigger = no }
				trigger_switch = {
					on_trigger = real_tier
					EMPEROR = { add_to_crusade_prestige_pot = -1000 add_to_crusade_piety_pot = -400 }
					KING = { add_to_crusade_prestige_pot = -750 add_to_crusade_piety_pot = -300 }
					DUKE = { add_to_crusade_prestige_pot = -500 add_to_crusade_piety_pot = -200 }
					COUNT = { add_to_crusade_prestige_pot = -250 add_to_crusade_piety_pot = -100 }
					BARON = { add_to_crusade_prestige_pot = -125 add_to_crusade_piety_pot = -50 }
				}
			}
			else = {
				trigger_switch = {
					on_trigger = real_tier
					EMPEROR = { add_to_crusade_prestige_pot = -1000 }
					KING = { add_to_crusade_prestige_pot = -750 }
					DUKE = { add_to_crusade_prestige_pot = -500 }
					COUNT = { add_to_crusade_prestige_pot = -250 }
					BARON = { add_to_crusade_prestige_pot = -125 }
				}
			}
			random = {
				chance = 33
				add_to_crusade_artifact_pot = -1
			}
			set_character_flag = asked_to_pledge
		}
	}
}

# Bounce event from stealing artifact
character_event = {
	id = emf_religion.14
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		event_target:monastic_artifact_stealer = {
			is_alive = yes
			same_society_as = ROOT
			NOT = { is_friend = ROOT }
			NOT = { is_lover = ROOT }
			OR = {
				trait = greedy
				trait = deceitful
			}
			NOT = { character = event_target:monastic_artifact_witness }
			ai = yes
		}
	}
	immediate = {
		event_target:monastic_artifact_stealer = { character_event = { id = MNM.4623 } }
	}
	fail_trigger_effect = {
		clr_character_flag = monastic_artifact_lover
		clr_character_flag = monastic_artifact_seamless_robe_of_jesus
		clr_character_flag = monastic_artifact_crown_of_thorns
		clr_character_flag = monastic_artifact_fragment_of_true_cross
		clr_character_flag = monastic_artifact_holy_foreskin
		clr_character_flag = monastic_artifact_image_of_edessa
		clr_character_flag = monastic_artifact_elaborate_danda
		clr_character_flag = monastic_artifact_sariraka_actual_body_part
		clr_character_flag = monastic_artifact_sarira
	}
}

# emf_religion.15 -- Activation of Christian Crusades, after Muslims and Pagans
narrative_event = {
	id = emf_religion.15
	title = EVTNAME39660
	desc = EVTDESC_emf_religion_15
	picture = GFX_evt_crusaders
	border = GFX_event_narrative_frame_religion

	major = yes

	show_ROOT = yes
	hide_new = yes

	only_playable = yes
	min_age = 16
	religion_group = christian

	trigger = {
		controls_religion = yes
		OR = {
			religion = catholic
			religion = fraticelli
		}
		can_call_crusade = yes
		OR = {
			is_heretic = no
			AND = {
				catholic = { persistent_event_target:emf_religion_dummy_character = { is_heretic = yes } }
				fraticelli = { persistent_event_target:emf_religion_dummy_character = { is_heretic = yes } }
			}
		}
		NOT = { has_alternate_start_parameter = { key = religion_names value = random } }
		NOT = { has_global_flag = christian_crusades_unlocked }
		has_global_flag = muslim_jihads_unlocked
		has_global_flag = pagan_ghws_unlocked
	}

	mean_time_to_happen = {
		months = 120
		modifier = {
			factor = 0
			has_global_flag = emf_debug_fast_ghw_unlock
		}
		modifier = {
			factor = 0.5
			any_landed_title = {
				is_holy_site = ROOT
				owner = {
					top_liege = {
						NOR = {
							AND = {
								religion_group = christian
								NOR = {
									is_heresy_of = ROOT
									is_parent_religion = ROOT
									AND = {
										religion = bogomilist
										is_heretic = yes
										ROOT = {
											religion = catholic
											is_heretic = no
										}
									}
								}
							}
							ROOT = { emf_syncretized_religion_with_PREV = yes }
							liege_before_war = {
								OR = {
									AND = {
										religion_group = christian
										NOR = {
											is_heresy_of = ROOT
											is_parent_religion = ROOT
											AND = {
												religion = bogomilist
												is_heretic = yes
												ROOT = {
													religion = catholic
													is_heretic = no
												}
											}
										}
									}
									ROOT = { emf_syncretized_religion_with_PREV = yes }
								}
							}
						}
						OR = {
							religion_group = muslim
							religion_group = pagan_group
							trigger_if = {
								limit = { religion_group = zoroastrian_group }
								has_global_flag = zoroastrian_ghws_unlocked
							}
							trigger_else_if = {
								limit = { religion_group = jewish_group }
								has_global_flag = jewish_ghws_unlocked
							}
							liege_before_war = {
								OR = {
									religion_group = muslim
									religion_group = pagan_group
									trigger_if = {
										limit = { religion_group = zoroastrian_group }
										has_global_flag = zoroastrian_ghws_unlocked
									}
									trigger_else_if = {
										limit = { religion_group = jewish_group }
										has_global_flag = jewish_ghws_unlocked
									}
								}
							}
						}
					}
				}
			}
		}
		modifier = {
			factor = 2
			NOT = { ROOT = { religion_scope = { has_religion_feature = religion_syncretic_muslim } } }
			NAND = {
				ROOT = { religion_scope = { has_religion_feature = religion_syncretic_zoroastrian } }
				has_global_flag = zoroastrian_ghws_unlocked
			}
			NOT = {
				any_landed_title = {
					is_holy_site = ROOT
					NOT = {
						owner = {
							top_liege = {
								OR = {
									AND = {
										religion_group = christian
										NOR = {
											is_heresy_of = ROOT
											is_parent_religion = ROOT
											AND = {
												religion = bogomilist
												is_heretic = yes
												ROOT = {
													religion = catholic
													is_heretic = no
												}
											}
										}
									}
									ROOT = { emf_syncretized_religion_with_PREV = yes }
									liege_before_war = {
										OR = {
											AND = {
												religion_group = christian
												NOR = {
													is_heresy_of = ROOT
													is_parent_religion = ROOT
													AND = {
														religion = bogomilist
														is_heretic = yes
														ROOT = {
															religion = catholic
															is_heretic = no
														}
													}
												}
											}
											ROOT = { emf_syncretized_religion_with_PREV = yes }
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	immediate = {
		set_global_flag = christian_crusades_unlocked
		set_global_flag = emf_catholic_crusades_unlocked
	}

	option = {
		name = EVTOPTA39660
		trigger = {
			religion_group = christian
		}
	}

	option = {
		name = EVTOPTB39660
		trigger = {
			NOT = { religion_group = christian }
		}
	}
}

# emf_religion.16 -- Activation of Muslim Jihads, after Christians and Pagans
narrative_event = {
	id = emf_religion.16
	title = EVTNAME39670
	desc = EVTDESC_emf_religion_16
	picture = GFX_evt_moors
	border = GFX_event_narrative_frame_religion

	major = yes

	show_ROOT = yes
	hide_new = yes

	only_playable = yes
	min_age = 16
	religion_group = muslim

	trigger = {
		controls_religion = yes
		can_call_crusade = yes
		is_heretic = no
		NOT = { has_alternate_start_parameter = { key = religion_names value = random } }
		NOT = { has_global_flag = muslim_jihads_unlocked }
		has_global_flag = christian_crusades_unlocked
		has_global_flag = pagan_ghws_unlocked
	}

	mean_time_to_happen = {
		months = 120
		modifier = {
			factor = 0
			has_global_flag = emf_debug_fast_ghw_unlock
		}
		modifier = {
			factor = 0.5
			any_landed_title = {
				is_holy_site = ROOT
				owner = {
					top_liege = {
						NOR = {
							religion_group = ROOT
							ROOT = { emf_syncretized_religion_with_PREV = yes }
							liege_before_war = {
								OR = {
									religion_group = ROOT
									ROOT = { emf_syncretized_religion_with_PREV = yes }
								}
							}
						}
						OR = {
							religion_group = christian
							religion_group = pagan_group
							trigger_if = {
								limit = { religion_group = zoroastrian_group }
								has_global_flag = zoroastrian_ghws_unlocked
							}
							trigger_else_if = {
								limit = { religion_group = jewish_group }
								has_global_flag = jewish_ghws_unlocked
							}
							liege_before_war = {
								OR = {
									religion_group = christian
									religion_group = pagan_group
									trigger_if = {
										limit = { religion_group = zoroastrian_group }
										has_global_flag = zoroastrian_ghws_unlocked
									}
									trigger_else_if = {
										limit = { religion_group = jewish_group }
										has_global_flag = jewish_ghws_unlocked
									}
								}
							}
						}
					}
				}
			}
		}
		modifier = {
			factor = 2
			NOT = { ROOT = { religion_scope = { has_religion_feature = religion_syncretic_christian } } }
			NAND = {
				ROOT = { religion_scope = { has_religion_feature = religion_syncretic_zoroastrian } }
				has_global_flag = zoroastrian_ghws_unlocked
			}
			NOT = {
				any_landed_title = {
					is_holy_site = ROOT
					NOT = {
						owner = {
							top_liege = {
								OR = {
									religion_group = muslim
									ROOT = { emf_syncretized_religion_with_PREV = yes }
									liege_before_war = {
										OR = {
											religion_group = muslim
											ROOT = { emf_syncretized_religion_with_PREV = yes }
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	immediate = {
		set_global_flag = muslim_jihads_unlocked
		set_global_flag = emf_muslim_crusades_unlocked
	}

	option = {
		name = EVTOPTA39670
		trigger = {
			religion_group = muslim
		}
	}

	option = {
		name = EVTOPTB39670
		trigger = {
			NOT = { religion_group = muslim }
		}
	}
}

# emf_religion.17 -- Overwrite vanilla caste assignment from mixed caste marriages so that the child follows their dynastic parent's caste
character_event = {
	id = emf_religion.17
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		emf_religion_has_castes = yes
		# Parents of different caste
		trigger_if = {
			limit = { mother_even_if_dead = { trait = brahmin } }
			father_even_if_dead = { NOT = { trait = brahmin } }
		}
		trigger_else_if = {
			limit = { mother_even_if_dead = { trait = kshatriya } }
			father_even_if_dead = { NOT = { trait = kshatriya } }
		}
		trigger_else_if = {
			limit = { mother_even_if_dead = { trait = vaishya } }
			father_even_if_dead = { NOT = { trait = vaishya } }
		}
		trigger_else = {
			mother_even_if_dead = { always = yes } # Makes sure mother actually exists and so is casteless
			father_even_if_dead = {
				OR = {
					trait = brahmin
					trait = kshatriya
					trait = vaishya
				}
			}
		}
	}
	
	immediate = {
		remove_trait = brahmin
		remove_trait = kshatriya
		remove_trait = vaishya
		mother_even_if_dead = { save_event_target_as = child_mother }
		father_even_if_dead = { save_event_target_as = child_father }
		# Follow marriage if this is a normal child of a marriage
		if = {
			limit = { event_target:child_father = { is_married = event_target:child_mother } }
			if = {
				limit = { event_target:child_mother = { is_married_matrilineally = no } }
				event_target:child_father = { save_event_target_as = caste_source }
			}
			else = {
				event_target:child_mother = { save_event_target_as = caste_source }
			}
		}
		# Follow senior consort if this is a child of a concubinage
		else_if = {
			limit = { event_target:child_mother = { is_consort = event_target:child_father } }
			event_target:child_father = { save_event_target_as = caste_source }
		}
		else_if = {
			limit = { event_target:child_father = { is_consort = event_target:child_mother } }
			event_target:child_mother = { save_event_target_as = caste_source }
		}
		# Same dynasty as only one parent, so just use that parent
		else_if = {
			limit = {
				dynasty = event_target:child_father
				NOT = { dynasty = event_target:child_mother }
			}
			event_target:child_father = { save_event_target_as = caste_source }
		}
		else_if = {
			limit = {
				dynasty = event_target:child_mother
				NOT = { dynasty = event_target:child_father }
			}
			event_target:child_mother = { save_event_target_as = caste_source }
		}
		# Bastard or some other complex situation, use the same trigger as event id 301 (father decides what to do with bastard)
		else_if = {
			limit = {
				event_target:child_father = {
					event_target:child_mother = {
						NOR = {
							lower_tier_than = PREV #In case the mother is a higher tier ruler, she gets to decide what happens to the child.
							AND = {
								tier = PREV	# In case mother is same tier as real_father, real_father gets to claim the child provided that agnatic succession is in place.
								NOR = {
									has_law = enatic_succession
									has_law = enatic_cognatic_succession
									has_law = true_cognatic_succession
								}
							}
						}
					}
				}
			}
			event_target:child_father = { save_event_target_as = caste_source }
		}
		else = {
			event_target:child_mother = { save_event_target_as = caste_source }
		}
		# Copy caste from source
		event_target:caste_source = { ROOT = { emf_copy_caste_from_PREV = yes } }
	}
}

# emf_religion.18 -- Fill in the gaps on startup for characters with missing caste traits
character_event = {
	id = emf_religion.18
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		any_character = { emf_needs_caste_trait_at_startup = yes }
	}
	
	immediate = {
		# First pass: fill in rulers, their dynasty, spouses, and their dynasty based on holding types
		any_independent_ruler = {
			any_realm_character = {
				limit = { emf_needs_caste_trait_at_startup = yes }
				if = {
					limit = { is_ruler = yes }
					if = {
						limit = { is_theocracy = yes }
						add_trait = brahmin
						any_dynasty_member = {
							limit = {
								is_landed = no
								emf_needs_caste_trait_at_startup = yes
								OR = {
									is_vassal_or_below_of = PREV
									NOT = { # Has a better liege whose caste should be copied
										any_liege = {
											dynasty = PREV
											emf_needs_caste_trait_at_startup = yes
										}
									}
								}
							}
							add_trait = brahmin
						}
					}
					else_if = {
						limit = { is_republic = yes }
						add_trait = vaishya
						any_dynasty_member = {
							limit = {
								is_ruler = no
								emf_needs_caste_trait_at_startup = yes
								OR = {
									is_vassal_or_below_of = PREV
									NOT = { # Has a better liege whose caste should be copied
										any_liege = {
											dynasty = PREV
											emf_needs_caste_trait_at_startup = yes
										}
									}
								}
							}
							add_trait = vaishya
						}
					}
					else_if = {
						limit = {
							emf_can_hold_temples = yes
							OR = {
								has_education_learning_trigger = yes
								NOT = {
									any_demesne_title = {
										OR = {
											tier = COUNT
											tier = BARON
										}
										NOT = { holding_type = temple }
									}
								}
							}
						}
						add_trait = brahmin
						any_dynasty_member = {
							limit = {
								is_landed = no
								emf_needs_caste_trait_at_startup = yes
								OR = {
									is_vassal_or_below_of = PREV
									NOT = { # Has a better liege whose caste should be copied
										any_liege = {
											dynasty = PREV
											emf_needs_caste_trait_at_startup = yes
										}
									}
								}
							}
							add_trait = brahmin
						}
					}
					else = {
						add_trait = kshatriya
						any_dynasty_member = {
							limit = {
								is_ruler = no
								emf_needs_caste_trait_at_startup = yes
								OR = {
									is_vassal_or_below_of = PREV
									NOT = { # Has a better liege whose caste should be copied
										any_liege = {
											dynasty = PREV
											emf_needs_caste_trait_at_startup = yes
										}
									}
								}
							}
							add_trait = kshatriya
						}
					}
				}
				else_if = {
					limit = {
						any_spouse = { is_ruler = yes }
						NOT = {
							any_liege = { # Has a better liege whose caste should be copied
								dynasty = PREV
								emf_needs_caste_trait_at_startup = yes
							}
						}
					}
					random_spouse = {
						limit = { is_ruler = yes }
						preferred_limit = {
							is_main_spouse = yes
						}
						save_event_target_as = target_spouse
					}
					if = {
						limit = { event_target:target_spouse = { is_theocracy = yes } }
						add_trait = brahmin
						any_dynasty_member = {
							limit = {
								is_ruler = no
								emf_needs_caste_trait_at_startup = yes
								OR = {
									is_vassal_or_below_of = event_target:target_spouse
									NOT = { # Has a better liege whose caste should be copied
										any_liege = {
											dynasty = PREV
											emf_needs_caste_trait_at_startup = yes
										}
									}
								}
							}
							add_trait = brahmin
						}
					}
					else_if = {
						limit = { event_target:target_spouse = { is_republic = yes } }
						add_trait = vaishya
						any_dynasty_member = {
							limit = {
								is_ruler = no
								emf_needs_caste_trait_at_startup = yes
								OR = {
									is_vassal_or_below_of = event_target:target_spouse
									NOT = { # Has a better liege whose caste should be copied
										any_liege = {
											dynasty = PREV
											emf_needs_caste_trait_at_startup = yes
										}
									}
								}
							}
							add_trait = vaishya
						}
					}
					else_if = {
						limit = {
							event_target:target_spouse = {
								emf_can_hold_temples = yes
								OR = {
									has_education_learning_trigger = yes
									NOT = {
										any_demesne_title = {
											OR = {
												tier = COUNT
												tier = BARON
											}
											NOT = { holding_type = temple }
										}
									}
								}
							}
						}
						add_trait = brahmin
						any_dynasty_member = {
							limit = {
								is_ruler = no
								emf_needs_caste_trait_at_startup = yes
								OR = {
									is_vassal_or_below_of = event_target:target_spouse
									NOT = { # Has a better liege whose caste should be copied
										any_liege = {
											dynasty = PREV
											emf_needs_caste_trait_at_startup = yes
										}
									}
								}
							}
							add_trait = brahmin
						}
					}
					else = {
						limit = { event_target:target_spouse = { is_feudal = yes } }
						add_trait = kshatriya
						any_dynasty_member = {
							limit = {
								is_ruler = no
								emf_needs_caste_trait_at_startup = yes
								OR = {
									is_vassal_or_below_of = event_target:target_spouse
									NOT = { # Has a better liege whose caste should be copied
										any_liege = {
											dynasty = PREV
											emf_needs_caste_trait_at_startup = yes
										}
									}
								}
							}
							add_trait = kshatriya
						}
					}
				}
			}
		}
		# Second pass: only unlanded courtiers with no ruler or ruler consort dynasty members remain, so fill them in based on education
		any_character = {
			limit = { emf_needs_caste_trait_at_startup = yes }
			if = {
				limit = { has_education_learning_trigger = yes }
				add_trait = brahmin
			}
			else_if = {
				limit = { has_education_stewardship_trigger = yes }
				add_trait = vaishya
			}
			else = {
				add_trait = kshatriya
			}
		}
	}
}
