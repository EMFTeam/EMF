
namespace = emf_nomad

# emf_nomad.0 [Settling Nomad]
#
# Invoked by nomad settlement decisions, prior to conversion to non-nomadic
# government. Determines how many provinces in the new realm will be "settled"
# (converted to culture & religion of nomad).
character_event = {
	id = emf_nomad.0
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_variable = { which = n_convert value = 0 }
		if = {
			limit = { population_and_manpower = 5000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 10000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 15000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 20000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 25000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 30000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 35000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 40000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 45000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 50000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 55000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 60000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 65000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 70000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 75000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 80000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 85000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 90000 }
			change_variable = { which = n_convert value = 1 }
		}
		if = {
			limit = { population_and_manpower = 95000 }
			change_variable = { which = n_convert value = 1 }
		}
	}
}


# emf_nomad.1 [Settling Ex-Nomad]
#
# Continuation of emf_nomad.0, invoked after change to non-nomadic government.
character_event = {
	id = emf_nomad.1
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# Settle new capital ...

		capital_scope = {
			religion = ROOT
			culture = ROOT
			set_province_flag = emf_nomad_settled
		}

		# Settle up to `n_convert` provinces with our religion/culture via
		# "cluster-blobbing" technique, starting at new capital ...

		character_event = { id = emf_nomad.2 }

		# Cleanup ...

		any_realm_province = {
			clr_province_flag = emf_nomad_settled
		}

		set_variable = { which = n_convert value = 0 }
	}
}


# emf_nomad.2 [Settling Ex-Nomad]
#
# The guts of emf_nomad.1: Recursive "cluster-blobbing" algorithm that focuses
# upon "converting" contiguous group(s) of provinces in a random yet plausible
# manner.
character_event = {
	id = emf_nomad.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		check_variable = { which = n_convert value = 0.1 }
	}

	option = {
		name = OK

		random_realm_province = {
			limit = {
				has_province_flag = emf_nomad_settled
				any_neighbor_province = {
					nand = {
						religion = ROOT
						culture = ROOT
					}
					any_province_holding = {
						not = { holding_type = nomad }
					}
					owner = {
						same_realm = ROOT
					}
				}
			}

			# Mark any already same-religion/culture neighbors as settled,
			# but don't count them towards conversion total.
			any_neighbor_province = {
				limit = {
					religion = ROOT
					culture = ROOT
					any_province_holding = {
						not = { holding_type = nomad }
					}
					owner = {
						same_realm = ROOT
					}
				}
				set_province_flag = emf_nomad_settled
			}

			# Select a random eligible neighbor province to settle
			random_neighbor_province = {
				limit = {
					nand = {
						religion = ROOT
						culture = ROOT
					}
					any_province_holding = {
						not = { holding_type = nomad }
					}
					owner = {
						same_realm = ROOT
					}
				}
				religion = ROOT
				culture = ROOT
				set_province_flag = emf_nomad_settled
				ROOT = {
					change_variable = { which = n_convert value = -1 }
					character_event = { id = emf_nomad.2 } # Recurse
					break = yes # <-- Very important
				}
			}
		}

		# If we reach this point, we couldn't find any conversion targets next to
		# already-settled provinces, so we should branch-out and find a new seed
		# province from which to continue trying to cluster randomly.

		# First, let's prefer new seeds that have the potential to grow to at least
		# a 2-cluster (it's too easy to select a province with, say, just a temple
		# in the middle of nomadic lands)

		random_realm_province = {
			limit = {
				nand = {
					religion = ROOT
					culture = ROOT
				}
				any_province_holding = {
					not = { holding_type = nomad }
				}
				any_neighbor_province = {
					nand = {
						religion = ROOT
						culture = ROOT
					}
					any_province_holding = {
						not = { holding_type = nomad }
					}
					owner = {
						same_realm = ROOT
					}
				}
			}
			religion = ROOT
			culture = ROOT
			set_province_flag = emf_nomad_settled
			ROOT = {
				change_variable = { which = n_convert value = -1 }
				character_event = { id = emf_nomad.2 } # Recurse
				break = yes # <-- Very important
			}
		}

		# If we reach this point, we first failed to grow the current cluster, then
		# we failed to seed a province that had the potential to be a 2-cluster, so
		# now we're just going to try converting any random non-nomadic province.

		random_realm_province = {
			limit = {
				any_province_holding = {
					not = { holding_type = nomad }
				}
				nand = {
					religion = ROOT
					culture = ROOT
				}
			}
			religion = ROOT
			culture = ROOT
			set_province_flag = emf_nomad_settled
			ROOT = {
				change_variable = { which = n_convert value = -1 }
				character_event = { id = emf_nomad.2 } # Recurse
			}
		}
	}
}


# emf_nomad.3 [Settling Nomad]
#
# Invoked by nomad settlement decisions, prior to conversion to non-nomadic
# government.
#
# Marks all nomadic demesne provinces so that the ones which are connected to the
# new non-nomadic realm can be transferred back to the player after conversion to
# a non-nomadic government. This is to override the hard-coded behavior which
# transfers all nomadic provinces to the new Khagan of the remaining nomadic title.
character_event = {
	id = emf_nomad.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	immediate = {
		any_demesne_title = {
			limit = {
				tier = count
				location = {
					not = {
						any_province_holding = {
							nor = {
								holding_type = nomad
								holding_type = temple
							}
						}
					}
				}
			}
			location = {
				set_province_flag = emf_nomad_demesne
			}
		}
	}
}


# emf_nomad.4 [Ex-Nomad]
#
# Completion event for emf_nomad.3 that actually transfers the ex-nomad's old
# empty provinces, if they're connected to his new realm, back to him after he's
# changed to a non-nomadic government.
character_event = {
	id = emf_nomad.4
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	immediate = {
		# If the hard-code for some reason left us some nomadic provinces, then
		# go ahead and remove them from this equation now.

		any_realm_province = {
			limit = {
				has_province_flag = emf_nomad_demesne
			}
			clr_province_flag = emf_nomad_demesne
		}

		# Recursively reclaim realm-connected provinces ...

		character_event = { id = emf_nomad.5 }

		# Cleanup any flag state we've left behind (realm-unconnected nomadic
		# provinces)...

		any_title = {
			limit = {
				tier = count
				location = {
					has_province_flag = emf_nomad_demesne
				}
			}
			location = {
				clr_province_flag = emf_nomad_demesne
			}
		}
	}
}


# emf_nomad.5 [Ex-Nomad]
#
# Guts of emf_nomad.4. Recurses upon realm provinces which border provinces
# flagged as emf_nomad_demesne and reclaims them until there are no such
# provinces left to reclaim.
character_event = {
	id = emf_nomad.5
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_realm_province = {
			any_neighbor_province = {
				has_province_flag = emf_nomad_demesne
			}
		}
	}

	immediate = {
		random_realm_province = {
			limit = {
				any_neighbor_province = {
					has_province_flag = emf_nomad_demesne
				}
			}

			any_neighbor_province = {
				limit = {
					has_province_flag = emf_nomad_demesne
				}

				county = {
					grant_title_no_opinion = ROOT
				}
				clr_province_flag = emf_nomad_demesne
			}
		}

		repeat_event = { id = emf_nomad.5 }
	}
}

# emf_nomad.20 [New Empty County Holder]
#
# on_new_holder_usurpation listener for empty/nomadic provinces that enforces
# the equivalent of the scripted effect emf_cb_nomadic_province_effect upon
# all usurped empty counties.
#
# The scripted effect is still used throughout CBs, because this method needs to
# convert culture/religion _back_ to what it was before the title transfer, and
# if our CB code didn't try to minimize usage of this fall-back method, then
# it's possible that SoA heresy-takeover mechanics could be triggered by some
# conquests when they should not be.
#
# This should be considered the general, catch-all case for ensuring the invariant
# that non-nomadic rulers conquering (or event-usurping) empty counties or nomadic
# rulers of different culture than such a conquered county will always receive a
# county with a new tribal settlement in it (and the province should be the prior
# culture). NOTE: We don't listen to regular on_new_holder, because we don't
# want this behavior for title grants/gains, which should be exempt. Some CBs use
# such methods, so again, a mixed approach is necessary.
#
# If the logic here is updated, then the aforementioned scripted effect should
# also be updated.
#
# As always:
#   ROOT = new holder
#   FROM = title
#   FROMFROM = previous holder
character_event = {
	id = emf_nomad.20
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		FROM = { tier = count } # Filter only county titles ...
		FROM = { # ... that correspond to empty/nomadic provinces.
			location = {
				not = {
					any_province_holding = {
						not = { holding_type = nomad }
					}
				}
			}
		}
		# And the new holder isn't a nomad, or the culture of the new & prior
		# holders is not the same.
		ROOT = {
			or = {
				is_nomadic = no
				not = { culture = FROMFROM }
			}
		}
		# We depend upon being able to query character religion/culture, so this
		# is here as a sort of assertion:
		FROMFROM = { is_alive = yes }
	}

	immediate = {
		FROM = {
			location = {
				build_holding = { type = tribal }
				random_province_holding = {
					limit = {
						holding_type = tribal
						ROOT = { is_nomadic = no }
					}
					make_capital_holding = yes
				}
				religion = FROMFROM
				culture = FROMFROM
			}
		}
	}
}
