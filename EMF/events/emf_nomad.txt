# -*- ck2.events -*-


namespace = emf_nomad

# emf_nomad.0 [Settling Nomad]
#
# Invoked by nomad settlement decisions, prior to conversion to non-nomadic
# government. Determines how many provinces in the new realm will be "settled"
# (converted to culture & religion of nomad). Marks provinces that are part
# of our non-nomadic subrealm or demesne.
character_event = {
	id = emf_nomad.0
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# Gets around rounding issues
		set_variable = { which = n_convert value = 0 }
		export_to_variable = { which = total_population value = population_and_manpower }
		while = {
			limit = {
				check_variable = { which = total_population value = 5000 }
				num_of_count_titles_in_realm = n_convert # We can only ever convert realm provinces upon settling, so make sure this number isn't exceeded in the case of large populations.
			}
			subtract_variable = { which = total_population value = 5000 }
			change_variable = { which = n_convert value = 1 }
		}

		any_realm_province = {
			limit = {
				owner = {
					OR = {
						character = ROOT
						AND = {
							is_liege_or_above = ROOT # Is below us, but...
							NOR = { # Isn't nomadic and has no other nomadic liege
								is_nomadic = yes
								any_liege = {
									NOT = { character = ROOT }
									is_nomadic = yes
								}
							}
						}
					}
				}
			}
			set_flag = emf_old_khan_claim
		}
	}
}


# emf_nomad.1 [Settling Ex-Nomad]
#
# Continuation of emf_nomad.0, invoked after change to non-nomadic government.
character_event = {
	id = emf_nomad.1
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# "Press" our settlement claim upon provinces that the settlement
		# hard-code did in fact give us.
		any_realm_province = {
			clr_flag = emf_old_khan_claim
		}

		# Settle new capital ...
		capital_scope = {
			religion = ROOT
			culture = ROOT
			set_flag = emf_nomad_settled
		}

		# Settle up to `n_convert` provinces with our religion/culture via
		# "cluster-blobbing" technique, starting at new capital ...
		character_event = { id = emf_nomad.2 }
		any_realm_province = { clr_flag = emf_nomad_settled }
		set_variable = { which = n_convert value = 0 }
		# Find new nomadic title holder
		random_landed_title = {
			limit = {
				tier = EMPEROR
				has_flag = emf_settling_khanate
			}
			save_event_target_as = emf_khanate
			owner = { save_event_target_as = emf_new_khan }
			clr_flag = emf_settling_khanate
		}
		# Sanity checks:
		if = {
			limit = { NOT = { event_target:emf_khanate = { always = yes } } }
			log = "ERROR: emf_nomad.1: Could not locate prior Khanate title after settlement of [Root.EMF_GetDebugName]"
			any_province = { clr_flag = emf_old_khan_claim }
			break = yes
		}
		else_if = {
			limit = { NOT = { event_target:emf_new_khan = { always = yes } } }
			log = "ERROR: emf_nomad.1: Could not find new Khan of the [emf_khanate.GetFullName] after settlement of [Root.EMF_GetDebugName]"
			any_province = { clr_flag = emf_old_khan_claim }
			break = yes
		}
		else_if = {
			limit = { character = event_target:emf_new_khan }
			log = "ERROR: emf_nomad.1: Old Khan is still ruling the [emf_khanate.GetFullName] after settlement: [Root.EMF_GetDebugName]"
			any_province = { clr_flag = emf_old_khan_claim }
			break = yes
		}
		# Mark all the provinces within the prior nomadic realm that are contiguous
		# to its capital...
		event_target:emf_new_khan = {
			capital_scope = { set_flag = emf_capital_path }
			character_event = { id = emf_nomad.3 }
		}
		# Reclaim any provinces not marked contiguous-to-capitals that we have
		# claim upon and are connected to our own non-nomadic realm.
		character_event = { id = emf_nomad.4 }
		# Cleanup...
		event_target:emf_new_khan = {
			any_realm_province = {
				clr_flag = emf_capital_path
				clr_flag = emf_old_khan_claim
			}
		}
	}
}


# emf_nomad.2 [Settling Ex-Nomad]
#
# The guts of emf_nomad.1: Recursive "cluster-blobbing" algorithm that focuses
# upon "converting" contiguous group(s) of provinces in a random yet plausible
# manner.
character_event = {
	id = emf_nomad.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		check_variable = { which = n_convert value = 0.1 }
	}

	option = {
		name = OK

		random_realm_province = {
			limit = {
				has_flag = emf_nomad_settled
				any_neighbor_province = {
					NAND = {
						religion = ROOT
						culture = ROOT
					}
					any_province_holding = {
						NOT = { holding_type = nomad }
					}
					owner = {
						same_realm = ROOT
					}
				}
			}
			# Mark any already same-religion/culture neighbors as settled,
			# but don't count them towards conversion total.
			any_neighbor_province = {
				limit = {
					religion = ROOT
					culture = ROOT
					any_province_holding = {
						NOT = { holding_type = nomad }
					}
					owner = {
						same_realm = ROOT
					}
				}
				set_flag = emf_nomad_settled
			}
			# Select a random eligible neighbor province to settle
			random_neighbor_province = {
				limit = {
					NAND = {
						religion = ROOT
						culture = ROOT
					}
					any_province_holding = {
						NOT = { holding_type = nomad }
					}
					owner = {
						same_realm = ROOT
					}
				}
				religion = ROOT
				culture = ROOT
				set_flag = emf_nomad_settled
				ROOT = {
					change_variable = { which = n_convert value = -1 }
					repeat_event = { id = emf_nomad.2 } # Recurse
					break = yes # <-- Very important
				}
			}
		}
		# If we reach this point, we couldn't find any conversion targets next to
		# already-settled provinces, so we should branch-out and find a new seed
		# province from which to continue trying to cluster randomly.
		#
		# First, let's prefer new seeds that have the potential to grow to at least
		# a 2-cluster (it's too easy to select a province with, say, just a temple
		# in the middle of nomadic lands)
		random_realm_province = {
			limit = {
				NAND = {
					religion = ROOT
					culture = ROOT
				}
				any_province_holding = {
					NOT = { holding_type = nomad }
				}
				any_neighbor_province = {
					NAND = {
						religion = ROOT
						culture = ROOT
					}
					any_province_holding = {
						NOT = { holding_type = nomad }
					}
					owner = {
						same_realm = ROOT
					}
				}
			}
			religion = ROOT
			culture = ROOT
			set_flag = emf_nomad_settled
			ROOT = {
				change_variable = { which = n_convert value = -1 }
				character_event = { id = emf_nomad.2 } # Recurse
				break = yes # <-- Very important
			}
		}
		# If we reach this point, we first failed to grow the current cluster, then
		# we failed to seed a province that had the potential to be a 2-cluster, so
		# now we're just going to try converting any random non-nomadic province.
		random_realm_province = {
			limit = {
				any_province_holding = {
					NOT = { holding_type = nomad }
				}
				NAND = {
					religion = ROOT
					culture = ROOT
				}
			}
			religion = ROOT
			culture = ROOT
			set_flag = emf_nomad_settled
			ROOT = {
				change_variable = { which = n_convert value = -1 }
				character_event = { id = emf_nomad.2 } # Recurse
			}
		}
	}
}


# emf_nomad.3 [Khagan from Prior Nomadic Realm]
#
# Mark all provinces which are connected to our clan capital(s) via our realm.
# Assumes all capital(s) have been pre-seeded with `emf_capital_path` flag.
character_event = {
	id = emf_nomad.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_realm_province = {
			has_flag = emf_capital_path
			any_neighbor_province = {
				owner = { same_realm = ROOT }
				NOT = { has_flag = emf_capital_path }
			}
		}
	}

	option = {
		name = OK
		random_realm_province = {
			limit = {
				has_flag = emf_capital_path
				any_neighbor_province = {
					owner = { same_realm = ROOT }
					NOT = { has_flag = emf_capital_path }
				}
			}
			any_neighbor_province = {
				limit = {
					owner = { same_realm = ROOT }
					NOT = { has_flag = emf_capital_path }
				}
				set_flag = emf_capital_path
			}
		}
		repeat_event = { id = emf_nomad.3 } # Recurse
	}
}


# emf_nomad.4 [Ex-Nomad]
#
# Recursively reclaim qualifying provinces from the new khan that are connected
# to our realm but are not connected to the capitals of any of the clan leaders
# of the nomadic realm.
#
# Qualifying provinces for reclamation:
# - marked as being part of our non-nomadic subrealm or demesne prior to settling
#   (has the province flag `emf_old_khan_claim`)
# - not connected to the nomadic capital (doesn't have `emf_capital_path`)
# - part of the nomadic realm
# - connected to our non-nomadic realm
character_event = {
	id = emf_nomad.4
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_realm_province = {
			any_neighbor_province = {
				owner = { same_realm = event_target:emf_new_khan }
				has_flag = emf_old_khan_claim
				NOT = { has_flag = emf_capital_path }
			}
		}
	}

	immediate = {
		random_realm_province = {
			limit = {
				any_neighbor_province = {
					owner = { same_realm = event_target:emf_new_khan }
					has_flag = emf_old_khan_claim
					NOT = { has_flag = emf_capital_path }
				}
			}
			random_neighbor_province = {
				limit = {
					owner = { same_realm = event_target:emf_new_khan }
					has_flag = emf_old_khan_claim
					NOT = { has_flag = emf_capital_path }
				}
				# Reclaim ...
				clr_flag = emf_old_khan_claim
				if = {
					limit = { owner = { is_nomadic = no } }
					# I don't believe that the settlement hardcode will ever
					# actually hit this case, but I'd like to know about if it
					# does.
					log = "emf_nomad.4: INFO: found a non-nomadic county owner among emf_old_khan_claim that didn't transfer to non-nomadic realm"
					if = {
						limit = {
							owner = {
								lower_tier_than = ROOT
								NOT = { # Is entirely contained within emf_old_khan_claim ...
									any_realm_province = {
										NOR = {
											province = PREVPREV # Already stripped the flag here
											has_flag = emf_old_khan_claim
										}
									}
								}
							}
						}
						owner = {
							set_defacto_liege = ROOT
							emf_liege_change = yes
							any_realm_province = {
								clr_flag = emf_old_khan_claim
							}
						}
					}
					ROOT = { repeat_event = { id = emf_nomad.4 } }
					break = yes
				}
				# Just take it back...
				set_global_flag = emf_latb_upon_gain
				county = { gain_title = ROOT }
				clr_global_flag = emf_latb_upon_gain
			}
		}

		repeat_event = { id = emf_nomad.4 }
	}
}


# emf_nomad.5 [Settling Nomad]
#
# Spawn troops proportional to the number of empty holding slots in nomadic
# provinces into event_target:emf_new_capital.
character_event = {
	id = emf_nomad.5
	hide_window = yes
	is_triggered_only = yes

	immediate = {

		any_realm_province = {
			limit = {
				has_flag = emf_old_khan_claim
				NOR = {
					num_of_settlements = 2
					any_province_holding = {
						NOR = {
							holding_type = nomad
							holding_type = temple
							holding_type = tribal
						}
					}
				}
			}
			# Spawn proportional to # of empty holding slots abandoned
			if = {
				limit = { num_of_empty_holdings = 1 }
				emf_nomad_settlement_spawn_unit = yes
			}
			if = {
				limit = { num_of_empty_holdings = 2 }
				emf_nomad_settlement_spawn_unit = yes
			}
			if = {
				limit = { num_of_empty_holdings = 3 }
				emf_nomad_settlement_spawn_unit = yes
			}
			if = {
				limit = { num_of_empty_holdings = 4 }
				emf_nomad_settlement_spawn_unit = yes
			}
			if = {
				limit = { num_of_empty_holdings = 5 }
				emf_nomad_settlement_spawn_unit = yes
			}
			if = {
				limit = { num_of_empty_holdings = 6 }
				emf_nomad_settlement_spawn_unit = yes
			}
			if = {
				limit = { num_of_empty_holdings = 7 }
				emf_nomad_settlement_spawn_unit = yes
			}
		}
	}
}


# emf_nomad.20 [New Empty County Holder]
#
# on_new_holder_usurpation listener for empty/nomadic provinces that enforces
# the equivalent of the scripted effect emf_cb_latb upon
# all usurped empty counties.  Currently, only nomadic ROOT is covered by this event,
# as HL.4999 handles non-nomadic ROOT.
#
# The scripted effect is still used throughout CBs, because this method needs to
# convert culture/religion _back_ to what it was before the title transfer, and
# If our CB code didn't try to minimize usage of this fall-back method, then
# it's possible that SoA heresy-takeover mechanics could be triggered by some
# conquests when they should not be.
#
# This should be considered the general, catch-all case for ensuring the invariant
# that non-nomadic rulers conquering (or event-usurping) empty counties or nomadic
# rulers of different culture than such a conquered county will always receive a
# county with a new tribal settlement in it (and the province should be the prior
# culture). NOTE: We don't listen to regular on_new_holder, because we don't
# want this behavior for title grants/gains, which should be exempt. Some CBs use
# such methods, so again, a mixed approach is necessary.
#
# If the logic here is updated, then the aforementioned scripted effect should
# also be updated.
#
# As always:
#   ROOT = new holder
#   FROM = title
#   FROMFROM = previous holder
character_event = {
	id = emf_nomad.20
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		ROOT = {
			is_nomadic = yes
			NOT = { culture = FROMFROM }
		}
		FROM = { tier = COUNT } # Filter only county titles ...
		FROM = { # ... that correspond to empty/nomadic provinces.
			location = {
				NOR = {
					any_province_holding = { NOT = { holding_type = nomad } }
					has_settlement_construction = yes
				}
			}
		}
		# We depend upon being able to query character religion/culture, so this
		# is here as a sort of assertion:
		FROMFROM = { always = yes }
		NOT = { has_global_flag = emf_config_latb_disabled }
	}

	immediate = {
		FROMFROM = { save_event_target_as = emf_prior_holder }
		FROM = {
			location = {
				if = {
					limit = { has_empty_holding = yes }
					province_event = { id = emf_nomad.22 }
					break = yes
				}
				# If we get here, that means there was no empty holding slot
				# available for the tribal holding (nomadic holding must be
				# occupying the only holding slot, by current game constraints),
				# so try to build it on the next game day.
				if = {
					limit = { NOT = { any_province_holding = { holding_type = nomad } } }
					log = "SERIOUS: emf_nomad.20: conquered empty province '[This.GetName]' seems to have 0 holding slots, or else game constraints have changed"
				}
				province_event = { id = emf_nomad.22 days = 1 }
			}
		}
	}
}


# emf_nomad.21 [New Empty County Holder]
#
# on_new_holder listener equivalent to emf_nomad.21, except that it doesn't trigger
# unless the global flag `emf_latb_upon_gain` is set.
character_event = {
	id = emf_nomad.21
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		# Script specifically enabled this behavior upon title gain/grant (temporarily, presumably)
		has_global_flag = emf_latb_upon_gain
		ROOT = {
			is_nomadic = yes
			NOT = { culture = FROMFROM }
		}
		FROM = { tier = COUNT } # Filter only county titles ...
		FROM = { # ... that correspond to empty/nomadic provinces.
			location = {
				NOR = {
					any_province_holding = { NOT = { holding_type = nomad } }
					has_settlement_construction = yes
				}
			}
		}
		# We depend upon being able to query character religion/culture, so this
		# is here as a sort of assertion:
		FROMFROM = { always = yes }
		NOT = { has_global_flag = emf_config_latb_disabled }
	}

	immediate = {
		FROMFROM = { save_event_target_as = emf_prior_holder }
		FROM = {
			location = {
				if = {
					limit = { has_empty_holding = yes }
					province_event = { id = emf_nomad.22 }
					break = yes
				}
				# If we get here, that means there was no empty holding slot
				# available for the tribal holding (nomadic holding must be
				# occupying the only holding slot, by current game constraints),
				# so try to build it on the next game day.
				if = {
					limit = { NOT = { any_province_holding = { holding_type = nomad } } }
					log = "SERIOUS: emf_nomad.21: conquered empty province '[This.GetName]' seems to have 0 holding slots, or else game constraints have changed"
				}
				province_event = { id = emf_nomad.22 days = 1 }
			}
		}
	}
}


# emf_nomad.22 [Newly-Usurped Empty Province]
#
# Actually build a tribal holding in ROOT, which was
# previously held by event_target:emf_prior_holder and
# is now held by FROM.
province_event = {
	id = emf_nomad.22
	hide_window = yes
	is_triggered_only = yes

	trigger = { has_empty_holding = yes }

	immediate = {
		build_holding = { type = tribal }
		random_province_holding = {
			limit = {
				holding_type = tribal
				FROM = { is_nomadic = yes }
				is_capital = yes
			}
			revoke_capital_holding = yes
		}
		random_province_holding = {
			limit = {
				holding_type = tribal
				FROM = { is_nomadic = no }
				is_capital = no
			}
			make_capital_holding = yes
		}
		random_province_holding = {
			limit = { holding_type = tribal }
			set_flag = emf_built_by_latb
			log = "DEBUG: LATB: built tribal holding [This.GetID] ([This.GetBaseName]) in [Root.GetName] ([Root.County.GetID]) -- via on_action"
		}
		religion = event_target:emf_prior_holder
		culture = event_target:emf_prior_holder
	}
}


# emf_nomad.100 [Vassals of newly-tribal Khagan]
#
# When a ruler uses the Adopt Tribalism decision, each
# clan leader receives an event and may decide to go tribal or become independent
character_event = {
	id = emf_nomad.100
	desc = EVTDESC_emf_nomad_100
	picture = GFX_evt_horsemanship

	is_triggered_only = yes

	option = {
		name = EVTOPTA_emf_nomad_100 # Become tribal
		ai_chance = {
			factor = 50
			modifier = {
				factor = 1.25
				opinion = { who = FROMFROM value = 20 }
			}
			modifier = {
				factor = 1.25
				opinion = { who = FROMFROM value = 40 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROMFROM value = 60 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROMFROM value = 80 }
			}
			modifier = {
				factor = 2
				trait = content
			}
			modifier = {
				factor = 1.5
				trait = humble
			}
			modifier = {
				factor = 1.5
				is_weak_trigger = yes
			}
			modifier = {
				factor = 0.1
				NOT = {
					any_realm_title = {
						tier = BARON
						holding_type = castle
					}
				}
			}
			modifier = {
				factor = 2
				any_realm_title = {
					tier = COUNT
					count = 9
				}
			}
			modifier = {
				factor = 2
				any_realm_title = {
					tier = COUNT
					count = 12
				}
			}
		}
		log = "INFO: emf_nomad.100: vassal khan [This.EMF_GetDebugName] settling as tribe..."
		log = "-> current government group: [This.EMF_GetGovernmentGroupName]"
		capital_holding = {
			log = "-> current capital: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
			log = "---> holding type: [This.EMF_GetHoldingType]"
		}
		capital_scope = {
			if = {
				limit = { num_of_max_settlements == 7 }
				log = "-> capital province has 7 holding slots"
			}
			else_if = {
				limit = { num_of_max_settlements == 6 }
				log = "-> capital province has 6 holding slots"
			}
			else_if = {
				limit = { num_of_max_settlements == 5 }
				log = "-> capital province has 5 holding slots"
			}
			else_if = {
				limit = { num_of_max_settlements == 4 }
				log = "-> capital province has 4 holding slots"
			}
			else_if = {
				limit = { num_of_max_settlements == 3 }
				log = "-> capital province has 3 holding slots"
			}
			else_if = {
				limit = { num_of_max_settlements == 2 }
				log = "-> capital province has 2 holding slots"
			}
			else_if = {
				limit = { num_of_max_settlements == 1 }
				log = "-> capital province has 1 holding slot"
			}
			else_if = {
				limit = { num_of_max_settlements < 1 }
				log = "-> capital province has 0 holding slots"
			}
			if = {
				limit = { num_of_settlements == 7 }
				log = "---> 7 slots are used"
			}
			else_if = {
				limit = { num_of_settlements == 6 }
				log = "---> 6 slots are used"
			}
			else_if = {
				limit = { num_of_settlements == 5 }
				log = "---> 5 slots are used"
			}
			else_if = {
				limit = { num_of_settlements == 4 }
				log = "---> 4 slots are used"
			}
			else_if = {
				limit = { num_of_settlements == 3 }
				log = "---> 3 slots are used"
			}
			else_if = {
				limit = { num_of_settlements == 2 }
				log = "---> 2 slots are used"
			}
			else_if = {
				limit = { num_of_settlements == 1 }
				log = "---> 1 slots are used"
			}
			else_if = {
				limit = { num_of_settlements < 1 }
				log = "---> 0 slots are used"
			}
			if = {
				limit = { any_province_holding = { holding_type = nomad } }
				log = "-----> has at least 1 nomad holding"
			}
			if = {
				limit = { any_province_holding = { holding_type = castle } }
				log = "-----> has at least 1 castle holding"
			}
			if = {
				limit = { any_province_holding = { holding_type = tribal } }
				log = "-----> has at least 1 tribal holding"
			}
			if = {
				limit = { any_province_holding = { holding_type = temple } }
				log = "-----> has at least 1 temple holding"
			}
			if = {
				limit = { any_province_holding = { holding_type = city } }
				log = "-----> has at least 1 city holding"
			}
		}
		if = {
			limit = { FROM = { population_and_manpower = 5000 } }
			custom_tooltip = { text = nomad_settle_conversion_tooltip }
		}
		custom_tooltip = { text = NOMAD_CONVERSION_TROOP_SPAWN }
		custom_tooltip = { text = TT_BUILD_TRIBAL_HOLDINGS }
		if = {
			limit = {
				any_vassal = {
					real_tier = KING
					is_nomadic = no
					any_demesne_title = {
						tier = KING
						NOR = {
							is_primary_type_title = yes
							is_landless_type_title = yes
							temporary = yes
							controls_religion = yes
							holy_order = yes
							mercenary = yes
						}
					}
				}
			}
			log = "-> usurping kingdoms from non-nomadic vassal(s):"
		}
		any_vassal = {
			limit = {
				real_tier = KING
				is_nomadic = no
				any_demesne_title = {
					tier = KING
					NOR = {
						is_primary_type_title = yes
						is_landless_type_title = yes
						temporary = yes
						controls_religion = yes
						holy_order = yes
						mercenary = yes
					}
				}
			}
			any_demesne_title = {
				limit = {
					tier = KING
					NOR = {
						is_primary_type_title = yes
						is_landless_type_title = yes
						temporary = yes
						controls_religion = yes
						holy_order = yes
						mercenary = yes
					}
				}
				log = "---> usurping [This.EMF_GetDebugTitleNameWithDeJureLieges]"
				usurp_title = ROOT
			}
		}
		if = {
			limit = {
				any_vassal = {
					is_nomadic = no
					tier = KING
				}
			}
			log = "-> [This.GetFirstName] has at least one non-nomadic vassal king (post-usurpation phase)"
		}
		# Usurp/create duchy of target county, if in own realm or no holder
		capital_scope = {
			duchy = {
				if = {
					limit = {
						OR = {
							has_holder = no
							owner_under_ROOT = yes
						}
					}
					usurp_title = ROOT
				}
			}
		}
		if = {
			limit = {
				NOT = { any_demesne_title = { tier = DUKE } }
			}
			any_vassal = {
				limit = { tier = COUNT }
				set_defacto_liege = FROMFROM
				emf_liege_change = yes
			}
		}
		any_vassal = {
			limit = { tier = DUKE }
			set_defacto_liege = FROMFROM
			emf_liege_change = yes
		}
		any_demesne_title = {
			limit = {
				tier = KING
				NOT = { ROOT = { clan_title = { title = PREVPREV } } }
			}
			usurp_title_only = FROMFROM
		}
		hidden_effect = {
			capital_scope = { save_event_target_as = emf_new_capital }
			character_event = { id = emf_nomad.5 }
		}
		if = {
			limit = { ai = no }
			chronicle = {
				entry = CHRONICLE_ADOPTED_TRIBALISM
				picture = GFX_evt_tribal_lands
			}
		}
		clr_flag = emf_context_nomadic_to_tribal
		set_flag = emf_context_nomadic_to_tribal
		log = "-> setting tribal government type"
		set_government_type = tribal_government
		set_defacto_liege = FROMFROM
		emf_liege_change = yes
		set_flag = emf_no_law_penalties
		hidden_effect = {
			if = {
				limit = {
					emf_unreformed_pagan = yes
				}
				primary_title = {
					add_law = tribal_organization_1
					add_law = centralization_0
				}
			}
			else_if = {
				limit = {
					capital_scope = { NOT = { any_province_holding = { holding_type = castle } } }
				}
				primary_title = {
					add_law = tribal_organization_2
					add_law = centralization_1
				}
			}
			else = {
				primary_title = {
					add_law = tribal_organization_3
					add_law = centralization_1
				}
			}
			log = "-> properties immediately after settlement of [This.EMF_GetDebugName]:"
			if = {
				limit = { any_demesne_title = { tier = EMPEROR } }
				log = "---> empire titles:"
				any_demesne_title = {
					limit = { tier = EMPEROR }
					log = "-----> [This.EMF_GetDebugTitleNameWithDeJureLieges]"
				}
			}
			if = {
				limit = { any_demesne_title = { tier = KING } }
				log = "---> kingdom titles:"
				any_demesne_title = {
					limit = { tier = KING }
					log = "-----> [This.EMF_GetDebugTitleNameWithDeJureLieges]"
				}
			}
			capital_holding = {
				log = "---> capital holding: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
				log = "-----> holding type: [This.EMF_GetHoldingType]"
			}
			log = "---> government group: [This.EMF_GetGovernmentGroupName]"
		}
		clr_flag = emf_no_law_penalties
	}
	option = {
		name = EVTOPTB_emf_nomad_100 # Become independent
		ai_chance = {
			factor = 50
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROMFROM value = -20 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROMFROM value = -40 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROMFROM value = -60 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROMFROM value = -80 } }
			}
			modifier = {
				factor = 0
				NOT = { num_of_count_titles = 3 }
			}
			modifier = {
				factor = 2
				trait = ambitious
			}
			modifier = {
				factor = 1.5
				trait = proud
			}
			modifier = {
				factor = 1.5
				is_strong_trigger = yes
			}
			modifier = {
				factor = 0.5
				NOT = { capital_scope = { region = world_steppe } }
			}
			modifier = {
				factor = 0.5
				NOT = {
					any_realm_title = {
						owner_under_ROOT = yes
						tier = COUNT
						count = 5
					}
				}
			}
			modifier = {
				factor = 0.5
				NOT = {
					any_realm_title = {
						owner_under_ROOT = yes
						tier = COUNT
						count = 7
					}
				}
			}
		}
		prestige = 250
	}
}


# emf_nomad.101 [Tribal ruler becomes Nomad]
#
# Announcement decision for when an Altaic ruler becomes nomadic
narrative_event = {
	id = emf_nomad.101
	title = EVTNAME_emf_nomad_101
	desc = EVTDESC_emf_nomad_101
	picture = GFX_evt_steppe_mercenaries

	is_triggered_only = yes
	major = yes

	major_trigger = {
		OR = {
			character = ROOT
			same_realm = ROOT
			AND = {
				ROOT = { independent = yes }
				is_within_diplo_range = ROOT
			}
		}
	}

	option = {
		name = EVTOPTA_emf_nomad_101
		trigger = { character = ROOT }
	}
	option = {
		name = I_SEE
		trigger = { NOT = { character = ROOT } }
	}
}

# emf_nomad.102 [Tribal vassal becomes Nomad]
#
# Announcement decision for when an Altaic vassal becomes nomadic
narrative_event = {
	id = emf_nomad.102
	title = EVTNAME_emf_nomad_101
	desc = EVTDESC_emf_nomad_102
	picture = GFX_evt_steppe_mercenaries

	is_triggered_only = yes
	major = yes

	major_trigger = {
		OR = {
			character = ROOT
			same_realm = ROOT
		}
	}

	option = {
		name = EVTOPTA_emf_nomad_101
		trigger = { character = ROOT }
	}
	option = {
		name = EXCELLENT
		trigger = { NOT = { character = ROOT } }
	}
}

# emf_nomad.120 -- on_new_holder handler for unwanted, auto-created empire titles when converting to/from nomad
character_event = {
	id = emf_nomad.120

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOT = { FROMFROM = { always = yes } }
		FROM = {
			OR = {
				tier = EMPEROR
				tier = KING
			}
			is_de_jure_title = no
		}
		has_flag = emf_context_nomadic_to_tribal
		NOT = { had_flag = { flag = emf_context_nomadic_to_tribal days = 1 } }
		NAND = {
			has_flag = emf_context_tribal_to_nomadic
			NOT = { had_flag = { flag = emf_context_tribal_to_nomadic days = 3 } }
		}
	}

	immediate = {
		log = "DEBUG: emf_nomad.120: titular [From.EMF_GetTierNoun] created for [Root.EMF_GetDebugName] via nomad->tribal conversion: [From.GetFullName] ([From.GetID])"
		log = "-> current government group: [Root.EMF_GetGovernmentGroupName]"
		capital_holding = {
			log = "-> capital holding: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
			log = "---> holding type: [This.EMF_GetHoldingType]"
		}
		clan_title = {
			log = "-> clan title: [This.GetFullName] ([This.GetID])"
		}
		FROM = {
			if = {
				limit = { tier = EMPEROR }
				emf_destroy_title = yes
			}
		}
	}
}

# emf_nomad.200 -- Distribute Grazing Land Modifiers on startup
character_event = {
	id = emf_nomad.200

	is_triggered_only = yes
	hide_window = yes
	
	has_dlc = "Horse Lords"
	religion = hip_religion
	
	immediate = {
		any_province = {
			limit = {
				has_owner = yes
			}
			trigger_switch = {
    			on_trigger = terrain
				arctic = {
					# Yes, reindeer herders are nomadic and live in the arctic/tundra, but:
					# 1) Reindeer herders do not have a societal structure similar to Turkic nomads, which are what CK2's Nomadic governments approximate. This is also why Bedouin and African nomadic peoples also don't use Nomadic governments in CK2.
					# 2) Reindeer herding appeared outside of the game's timeframe as a response to low reindeer population. In the game's timeframe, the peoples who would take up reindeer herding were living hunter-gatherer lifestyles, not nomadic ones.
					add_province_modifier = {
						name = emf_terrible_grazing_land
						duration = -1
					}
				}
				farmlands = {
					add_province_modifier = {
						name = emf_ok_grazing_land
						duration = -1
					}
				}
				forest = {
					add_province_modifier = {
						name = emf_poor_grazing_land
						duration = -1
					}
				}
				hills = {
					add_province_modifier = {
						name = emf_ok_grazing_land
						duration = -1
					}
				}
				woods = {
					add_province_modifier = {
						name = emf_ok_grazing_land
						duration = -1
					}
				}
				mountain = {
					add_province_modifier = {
						name = emf_poor_grazing_land
						duration = -1
					}
				}
				steppe = {
					add_province_modifier = {
						name = emf_excellent_grazing_land
						duration = -1
					}
				}
				plains = {
					add_province_modifier = {
						name = emf_good_grazing_land
						duration = -1
					}
				}
				jungle = {
					add_province_modifier = {
						name = emf_terrible_grazing_land
						duration = -1
					}
				}
				marsh = {
					add_province_modifier = {
						name = emf_good_grazing_land
						duration = -1
					}
				}
				desert = {
					add_province_modifier = {
						name = emf_good_grazing_land
						duration = -1
					}
				}
				fallback = { # Needed for submods that add new terrain types
					add_province_modifier = {
						name = emf_ok_grazing_land
						duration = -1
					}
				}
			}
		}
	}
}
