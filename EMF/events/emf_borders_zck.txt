# -*- ck2 -*-
# Generated from ZCK source code; compiler version: v0.1.1

namespace = emf_borders
character_event = {
	id = emf_borders.0
	hide_window = yes
	only_playable = yes
	war = no
	ai = yes
	trigger = {
		war = no
		ai = yes
		OR = {
			independent = yes
			NOT = {
				any_liege = {
					in_revolt = yes
				}
			}
		}
		in_revolt = no
		controls_religion = no
		holy_order = no
		is_merchant_republic = no
		is_patrician = no
		NOT = {
			any_liege = {
				OR = {
					controls_religion = yes
					holy_order = yes
					is_merchant_republic = yes
					is_patrician = yes
				}
			}
		}
		OR = {
			any_demesne_title = {
				tier = BARON
				dejure_liege_title = {
					owner = {
						NOT = { same_realm = ROOT }
					}
				}
			}
			any_vassal = {
				tier = BARON
				is_patrician = no
				capital_holding = {
					dejure_liege_title = {
						owner = {
							NOT = { same_realm = ROOT }
						}
					}
				}
			}
		}
	}
	mean_time_to_happen = {
		days = 0
	}
	immediate = {
		any_demesne_title = {
			limit = {
				tier = BARON
				dejure_liege_title = {
					owner = {
						NOT = { same_realm = ROOT }
					}
				}
			}
			log = "DEBUG: emf_borders.0: playable ruler has barony whose county is not within the same realm: [Root.EMF_GetDebugName]"
			log = " ----> title: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
			save_event_target_as = barony_to_shed
			dejure_liege_title = {
				owner = {
					character_event = {
						id = emf_borders.2
					}
				}
			}
			clear_event_target = barony_to_shed
		}
		any_vassal = {
			limit = {
				tier = BARON
				is_patrician = no
				capital_holding = {
					dejure_liege_title = {
						owner = {
							NOT = { same_realm = ROOT }
						}
					}
				}
			}
			log = "DEBUG: emf_borders.0: playable ruler has vassal baron whose de jure county is not within the same realm: [Root.EMF_GetDebugName]"
			log = " ----> vassal baron: [This.EMF_GetDebugName]"
			capital_holding = {
				log = " ------> capital holding: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
				dejure_liege_title = {
					owner = {
						top_liege = {
							primary_title = {
								log = " ------> top realm of capital county: [This.GetFullBaseName]"
							}
						}
					}
				}
			}
			capital_holding = {
				dejure_liege_title = {
					owner = {
						set_defacto_vassal = PREVPREVPREV
					}
				}
			}
			emf_liege_change = yes
			if = {
				limit = {
					NOT = { same_realm = ROOT }
				}
				character_event = {
					id = emf_borders.1
				}
			}
		}
	}
}
character_event = {
	id = emf_borders.1
	is_triggered_only = yes
	hide_window = yes
	only_rulers = yes
	war = no
	ai = yes
	trigger = {
		tier = BARON
		war = no
		in_revolt = no
		independent = no
		ai = yes
		is_patrician = no
		is_merchant_republic = no
		NOT = {
			any_liege = {
				OR = {
					in_revolt = yes
					controls_religion = yes
					holy_order = yes
					is_merchant_republic = yes
					is_patrician = yes
				}
			}
		}
		any_demesne_title = {
			location = {
				owner = {
					NOT = { same_realm = ROOT }
				}
			}
		}
	}
	immediate = {
		if = {
			limit = {
				num_of_baron_titles == 1
			}
			log = "DEBUG: emf_borders.1: baron owns a single barony whose de jure county is not within their current realm: [Root.EMF_GetDebugName]"
			capital_holding = {
				log = " ----> capital holding: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
				location = {
					owner = {
						log = " ------> capital county owner: [This.EMF_GetDebugName]"
						top_liege = {
							primary_title = {
								log = " ------> top realm of capital county: [This.GetFullBaseName]"
							}
						}
					}
				}
			}
			capital_holding = {
				location = {
					owner = {
						set_defacto_vassal = ROOT
					}
				}
			}
			emf_liege_change = yes
		}
		else = {
			log = "DEBUG: emf_borders.1: baron owns more than 1 barony; at least one's de jure county is not within their current realm: [Root.EMF_GetDebugName]"
			any_demesne_title = {
				limit = {
					location = {
						owner = {
							NOT = { same_realm = ROOT }
						}
					}
				}
				log = " ----> title: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
				location = {
					owner = {
						log = " ------> capital county owner: [This.EMF_GetDebugName]"
						top_liege = {
							primary_title = {
								log = " ------> top realm of capital county: [This.GetFullBaseName]"
							}
						}
					}
				}
				save_event_target_as = barony_to_shed
				location = {
					owner = {
						character_event = {
							id = emf_borders.2
						}
					}
				}
				clear_event_target = barony_to_shed
			}
		}
	}
}
character_event = {
	id = emf_borders.2
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		event_target:barony_to_shed = {
			location = {
				owner = {
					character = ROOT
				}
			}
		}
	}
	immediate = {
		if = {
			limit = {
				event_target:barony_to_shed = {
					holding_type = temple
				}
			}
			random_list = {
				50 = {
					modifier = {
						factor = 0
						religion_allows_male_temple_holders = no
					}
					create_random_priest = {
						random_traits = yes
						dynasty = none
						female = no
						attributes = {
							diplomacy = 2
							martial = 2
							stewardship = 2
							intrigue = 2
							learning = 5
						}
					}
				}
				50 = {
					modifier = {
						factor = 0
						religion_allows_female_temple_holders = no
					}
					create_random_priest = {
						random_traits = yes
						dynasty = none
						female = yes
						attributes = {
							diplomacy = 2
							martial = 2
							stewardship = 2
							intrigue = 2
							learning = 5
						}
					}
				}
			}
			new_character = {
				save_event_target_as = new_baron
				if = {
					limit = {
						OR = {
							religion = cathar
							religion = bogomilist
						}
					}
					remove_trait = incapable
					remove_trait = cynical
					remove_trait = lustful
					add_trait = zealous
					add_trait = perfecti
					set_flag = consolamentum_taken
				}
				emf_new_character_priest = yes
			}
		}
		else_if = {
			limit = {
				event_target:barony_to_shed = {
					holding_type = city
				}
			}
			random_list = {
				50 = {
					modifier = {
						factor = 0
						has_religion_feature = religion_matriarchal
					}
					create_random_steward = {
						random_traits = yes
						dynasty = none
						female = no
						attributes = {
							diplomacy = 2
							martial = 2
							stewardship = 5
							intrigue = 2
							learning = 2
						}
					}
				}
				50 = {
					modifier = {
						factor = 0
						gender_equality_trigger = no
						NOT = {
							has_religion_feature = religion_matriarchal
						}
					}
					create_random_steward = {
						random_traits = yes
						dynasty = none
						female = yes
						attributes = {
							diplomacy = 2
							martial = 2
							stewardship = 5
							intrigue = 2
							learning = 2
						}
					}
				}
			}
			new_character = {
				save_event_target_as = new_baron
				emf_new_character_steward = yes
			}
		}
		else = {
			random_list = {
				50 = {
					modifier = {
						factor = 0
						has_religion_feature = religion_matriarchal
					}
					create_random_soldier = {
						random_traits = yes
						dynasty = none
						female = no
						attributes = {
							diplomacy = 2
							martial = 5
							stewardship = 2
							intrigue = 2
							learning = 2
						}
					}
				}
				50 = {
					modifier = {
						factor = 0
						gender_equality_trigger = no
						NOT = {
							has_religion_feature = religion_matriarchal
						}
					}
					create_random_soldier = {
						random_traits = yes
						dynasty = none
						female = yes
						attributes = {
							diplomacy = 2
							martial = 5
							stewardship = 2
							intrigue = 2
							learning = 2
						}
					}
				}
			}
			new_character = {
				save_event_target_as = new_baron
				emf_new_character_noble = yes
			}
		}
		event_target:barony_to_shed = {
			grant_title = event_target:new_baron
		}
		set_defacto_vassal = event_target:new_baron
	}
}
character_event = {
	id = emf_borders.5
	is_triggered_only = yes
	hide_window = yes
	only_independent = yes
	war = no
	ai = yes
	trigger = {
		higher_tier_than = DUKE
		primary_title = {
			capital_scope = {
				de_jure_liege_or_above = PREVPREV
				NOT = { has_flag = emf_capital_connected }
				owner = {
					is_liege_or_above = ROOT
					war = no
					ai = yes
				}
			}
		}
	}
	immediate = {
		capital_scope = {
			county = {
				save_event_target_as = old_cap
			}
		}
		primary_title = {
			capital_scope = {
				county = {
					save_event_target_as = new_cap
				}
				owner = {
					save_event_target_as = revokee
				}
			}
		}
		log = "emf_borders.5: DEBUG: relocating disconnected AI capital for [This.GetTitledFirstName]/#[This.GetID] of the [This.PrimaryTitle.GetFullBaseName]/[This.PrimaryTitle.GetID] from [old_cap.GetBaseName]/[old_cap.GetID] to [new_cap.GetBaseName]/[new_cap.GetID]"
		if = {
			limit = {
				num_of_count_titles == 1
			}
			any_demesne_title = {
				set_flag = emf_borders_prior_tmp
			}
			set_flag = emf_crier_no_title_creation
			primary_title = {
				create_title = {
					tier = EMPEROR
					landless = yes
					temporary = no
					custom_created = yes
					base_title = THIS
					culture = ROOT
					holder = ROOT
					copy_title_laws = yes
				}
			}
			clr_flag = emf_crier_no_title_creation
			random_demesne_title = {
				limit = {
					NOT = { has_flag = emf_borders_prior_tmp }
				}
				set_flag = emf_autodestroy
			}
			any_demesne_title = {
				clr_flag = emf_borders_prior_tmp
			}
		}
		event_target:old_cap = {
			any_de_jure_vassal = {
				limit = {
					tier = BARON
					vassal_of = ROOT
				}
				set_defacto_liege = event_target:revokee
				emf_liege_change = yes
			}
			gain_title = {
				target = event_target:revokee
				type = grant
			}
			remove_claim = ROOT
			any_direct_de_jure_vassal_title = {
				limit = {
					holder = ROOT
				}
				gain_title = {
					target = event_target:revokee
					type = grant
				}
				remove_claim = ROOT
			}
		}
		event_target:new_cap = {
			any_de_jure_vassal = {
				limit = {
					tier = BARON
					vassal_of = event_target:revokee
				}
				set_defacto_liege = ROOT
				emf_liege_change = yes
			}
			gain_title = {
				target = ROOT
				type = revoke
			}
			remove_claim = event_target:revokee
			any_direct_de_jure_vassal_title = {
				limit = {
					owner = {
						OR = {
							character = event_target:revokee
							AND = {
								is_liege_or_above = event_target:revokee
								PREV = {
									is_allowed_holding_type = ROOT
								}
							}
						}
					}
				}
				gain_title = {
					target = event_target:revokee
					type = revoke
				}
				remove_claim = event_target:revokee
			}
		}
		random_demesne_title = {
			limit = {
				has_flag = emf_autodestroy
			}
			emf_unsafe_destroy_title = yes
		}
		capital = event_target:new_cap
	}
}
