namespace = emf_prisoner

## Ransom All events
## 0-9 reserved

# Will they ransom?
# Rulers will always ransom themselves if they can
# If not a ruler, liege is asked for ransom
# Lieges always ransom close relatives (seems to line up with is_close_relative)
# Lieges will ransom dynasty members who aren't close relatives if they like them enough (+10 or more opinion)
# Lieges will never ransom folks who don't fit into the previous categories, even if they're consorts or have some other "connection" to the liege
# Unknowns:
# Still need to test whether they will ransom folks with a claim on any of their titles
# Also need to check if lieges will ransom courtiers who are rich enough to reimburse them (and if reimbursement happens)

# What do they pay?
# All characters are assigned a ransom value depending on their tier and their parents
# For unlanded characters:
# If the father is alive and landed, the character's ransom is the father's tier's Relative price
# If the father is dead or unlanded, but mother is alive and landed, it's the mother's tier's Relative price instead
# If both parents are dead or unlanded, and the character is unlanded, the character's ransom value is 10g
# For landed characters:
# Same as above, except the Ruler and Relative prices are added together
# If both parents are dead or unlanded, it's just the Ruler price alone
# Unknowns:
# Does the parent Relative price still add if the character is higher tier than their parent? So far I've only confirmed it adds when they're the same tier

#			Ruler	Relative
# Emp 		385		110
# King	 	250		74
# Duke 		145		46
# Count		70		26
# Baron		25		14

# Determine who pays ransom
character_event = {
	id = emf_prisoner.0
	desc = emf_prisoner.0.desc
	picture = GFX_evt_into_the_dungeon
	is_triggered_only = yes
	
	option = { # Rulers pay their own
		trigger = { is_landed = yes }
		name = emf_prisoner.0.a

		if = {
			limit = { tier = EMPEROR }
			wealth = -385
			host = { wealth = 385 }
			prisoner = no
			break = yes
		}
		if = {
			limit = { tier = KING }			
			wealth = -250
			host = { wealth = 250 }
			prisoner = no
			break = yes
		}
		if = {
			limit = { tier = DUKE }
			wealth = -145
			host = { wealth = 145 }
			prisoner = no
			break = yes
		}
		if = {
			limit = { tier = COUNT }
			wealth = -70
			host = { wealth = 70 }
			prisoner = no
			break = yes
		}
		if = {
			limit = { tier = BARON }
			wealth = -25
			host = { wealth = 25 }
			prisoner = no
			break = yes
		}
	}
	
	option = { # Liege is responsible for others
		trigger = { is_landed = no }
		name = OK
		
		liege = {
			character_event = { id = emf_prisoner.1 }
		}
	}
	
	option = { # Refuse
		trigger = { ai = no }
		name = emf_prisoner.0.b
		
		hidden_tooltip = {
			FROM = {
				character_event = { id = emf_prisoner.2 }
			}
		}
	}
}

# Ask Liege for ransom - FROM is prisoner, FROMFROM is FROM's host
character_event = {
	id = emf_prisoner.1
	desc = emf_prisoner.1.desc
	picture = GFX_evt_into_the_dungeon
	is_triggered_only = yes
	
	trigger = {
		OR = { # Liege is willing to pay
			ai = no
			is_close_relative = FROM
			AND = {
				OR = {
					dynasty = FROM
					is_married = FROM
				}
				opinion = { who = FROM value = 10 }
			}
		}
		FROM = { # Liege has the money
			OR = {
				father_even_if_dead = { # Father is alive and landed
					is_alive = yes
					is_landed = yes
					OR = {
						AND = {
							tier = EMPEROR
							ROOT = { wealth = 110 }
						}
						AND = {
							tier = KING
							ROOT = { wealth = 74 }
						}
						AND = {
							tier = DUKE
							ROOT = { wealth = 46 }
						}
						AND = {
							tier = COUNT
							ROOT = { wealth = 26 }
						}
						AND = {
							tier = BARON
							ROOT = { wealth = 14 }
						}
					}
				}
				AND = { # Father is gone, mother is alive and landed
					OR = {
						NOT = {
							father_even_if_dead = { always = yes }
						}
						father_even_if_dead = {
							OR = {
								is_alive = no
								is_landed = no
							}
						}
					}
					mother_even_if_dead = {
						is_alive = yes
						is_landed = yes
						OR = {
							AND = {
								tier = EMPEROR
								ROOT = { wealth = 110 }
							}
							AND = {
								tier = KING
								ROOT = { wealth = 74 }
							}
							AND = {
								tier = DUKE
								ROOT = { wealth = 46 }
							}
							AND = {
								tier = COUNT
								ROOT = { wealth = 26 }
							}
							AND = {
								tier = BARON
								ROOT = { wealth = 14 }
							}
						}
					}
				}
				AND = { # Both parents are gone
					OR = {
						NOT = {
							father_even_if_dead = { always = yes }
						}
						father_even_if_dead = {
							OR = {
								is_alive = no
								is_landed = no
							}
						}
					}
					OR = {
						NOT = {
							mother_even_if_dead = { always = yes }
						}
						mother_even_if_dead = {
							OR = {
								is_alive = no
								is_landed = no
							}
						}
					}
					ROOT = { wealth = 10 }
				}
			}
		}
	}

	option = { # Will pay
		name = emf_prisoner.1.a
		
		FROM = {
			if = { # Father is alive and landed
				limit = {
					father_even_if_dead = {
						is_alive = yes
						is_landed = yes
					}
				}
				if = {
					limit = {
						father_even_if_dead = { tier = EMPEROR }
					}
					ROOT = { wealth = -110 }
					FROMFROM = { wealth = 110 }
					prisoner = no
				}
				if = {
					limit = {
						father_even_if_dead = { tier = KING }
					}
					ROOT = { wealth = -74 }
					FROMFROM = { wealth = 74 }
					prisoner = no
				}
				if = {
					limit = {
						father_even_if_dead = { tier = DUKE }
					}
					ROOT = { wealth = -46 }
					FROMFROM = { wealth = 46 }
					prisoner = no
				}
				if = {
					limit = {
						father_even_if_dead = { tier = COUNT }
					}
					ROOT = { wealth = -26 }
					FROMFROM = { wealth = 26 }
					prisoner = no
				}
				if = {
					limit = {
						father_even_if_dead = { tier = BARON }
					}
					ROOT = { wealth = -14 }
					FROMFROM = { wealth = 14 }
					prisoner = no
				}
				break = yes
			}
			if = { # Father is gone, mother is alive and landed
				limit = {
					OR = {
						NOT = {
							father_even_if_dead = { always = yes }
						}
						father_even_if_dead = {
							OR = {
								is_alive = no
								is_landed = no
							}
						}
					}
					mother_even_if_dead = {
						is_alive = yes
						is_landed = yes
					}
				}
				if = {
					limit = {
						mother_even_if_dead = { tier = EMPEROR }
					}
					ROOT = { wealth = -110 }
					FROMFROM = { wealth = 110 }
					prisoner = no
				}
				if = {
					limit = {
						mother_even_if_dead = { tier = KING }
					}
					ROOT = { wealth = -74 }
					FROMFROM = { wealth = 74 }
					prisoner = no
				}
				if = {
					limit = {
						mother_even_if_dead = { tier = DUKE }
					}
					ROOT = { wealth = -46 }
					FROMFROM = { wealth = 46 }
					prisoner = no
				}
				if = {
					limit = {
						mother_even_if_dead = { tier = COUNT }
					}
					ROOT = { wealth = -26 }
					FROMFROM = { wealth = 26 }
					prisoner = no
				}
				if = {
					limit = {
						mother_even_if_dead = { tier = BARON }
					}
					ROOT = { wealth = -14 }
					FROMFROM = { wealth = 14 }
					prisoner = no
				}
				break = yes
			}
			if = { # Both parents are gone
				limit = {
					OR = {
						NOT = {
							father_even_if_dead = { always = yes }
						}
						father_even_if_dead = {
							OR = {
								is_alive = no
								is_landed = no
							}
						}
					}
					OR = {
						NOT = {
							mother_even_if_dead = { always = yes }
						}
						mother_even_if_dead = {
							OR = {
								is_alive = no
								is_landed = no
							}
						}
					}
				}
				ROOT = { wealth = -10 }
				FROMFROM = { wealth = 10 }
				prisoner = no
			}
		}
		ai_chance = {
			factor = 1
		}
	}
	option = { # Won't pay
		trigger = { ai = no }
		name = emf_prisoner.1.b
		
		hidden_tooltip = {
			FROMFROM = {
				character_event = { id = emf_prisoner.2 }
			}
		}
	}
}

# Notification of ransom denial
character_event = {
	id = emf_prisoner.2
	desc = emf_prisoner.2.desc
	picture = GFX_evt_into_the_dungeon
	is_triggered_only = yes

	option = {
		name = emf_prisoner.2.a
	}
}

## 10-19 are free

## Prisoner Handling events
## 20-29 reserved
# House Arrest event
character_event = {
	id = emf_prisoner.20
	# Adults, more or less
	desc = {
		text = emf_prisoner.20.desc_dungeon
		trigger = {
			has_character_modifier = the_dungeon
			age = 12
			NOT = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.20.desc_oubliette
		trigger = {
			has_character_modifier = the_oubliette
			age = 12
			NOT = { trait = incapable }
		}
	}
	# Kids
	desc = {
		text = emf_prisoner.20.desc_kid
		trigger = {
			age = 4
			NOT = { age = 12 }
			NOT = { trait = incapable }
		}
	}
	# Incapable or very young
	desc = {
		text = emf_prisoner.20.desc_incapable
		trigger = {
			OR = {
				NOT = { age = 4 }
				trait = incapable
			}
		}
	}
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_intrigue
	is_triggered_only = yes
	
	option = {
		name = { # Adult, more or less
			text = emf_prisoner.20.a_adult
			trigger = {
				age = 12
				NOT = { trait = incapable }
			}
		}
		name = {
			text = emf_prisoner.20.a_kid
			trigger = {
				age = 4
				NOT = { age = 12 }
				NOT = { trait = incapable }
			}
		}
		name = {
			text = emf_prisoner.20.a_incapable
			trigger = {
				OR = {
					NOT = { age = 4 }
					trait = incapable
				}
			}
		}

		hidden_tooltip = {
			remove_character_modifier = house_arrest
			remove_character_modifier = the_dungeon
			remove_character_modifier = the_oubliette
		}
		if = {
			limit = { prisoner = yes }
			add_character_modifier = { 
				name = house_arrest
				duration = -1
			}
		}
	}
}

# Oubliette event
character_event = {
	id = emf_prisoner.21
	# Adult, more or less
	desc = {
		text = emf_prisoner.21.desc_house
		trigger = {
			has_character_modifier = house_arrest
			age = 12
			NOT = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.21.desc_dungeon
		trigger = {
			has_character_modifier = the_dungeon
			age = 12
			NOT = { trait = incapable }
		}
	}
	# Kids
	desc = {
		text = emf_prisoner.21.desc_kid_house
		trigger = {
			has_character_modifier = house_arrest
			age = 4
			NOT = { age = 12 }
			NOT = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.21.desc_kid_dungeon
		trigger = {
			has_character_modifier = the_dungeon
			age = 4
			NOT = { age = 12 }
			NOT = { trait = incapable }
		}
	}
	# Incapable or very young
	desc = {
		text = emf_prisoner.21.desc_incapable
		trigger = {
			OR = {
				NOT = { age = 4 }
				trait = incapable
			}
		}
	}
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_intrigue
	is_triggered_only = yes
	
	option = {
		name = { # Adult, more or less
			text = emf_prisoner.21.a_adult
			trigger = {
				age = 12
				NOT = { trait = incapable }
			}
		}
		name = { # Kid from house arrest
			text = emf_prisoner.21.a_kid_house
			trigger = {
				has_character_modifier = house_arrest
				age = 4
				NOT = { age = 12 }
				NOT = { trait = incapable }
			}
		}
		name = { # Kid from dungeon
			text = emf_prisoner.21.a_kid_dungeon
			trigger = {
				has_character_modifier = the_dungeon
				age = 4
				NOT = { age = 12 }
				NOT = { trait = incapable }
			}
		}
		name = { # Incapable or very young
			text = emf_prisoner.21.a_incapable
			trigger = {
				OR = {
					NOT = { age = 4 }
					trait = incapable
				}
			}
		}

		hidden_tooltip = {
			remove_character_modifier = house_arrest
			remove_character_modifier = the_dungeon
			remove_character_modifier = the_oubliette
		}
		if = {
			limit = { prisoner = yes }
			add_character_modifier = { 
				name = the_oubliette
				duration = -1
			}
		}
	}
}

# Dungeon event
character_event = {
	id = emf_prisoner.22
	# Adult
	desc = {
		text = emf_prisoner.22.desc_house
		trigger = {
			has_character_modifier = house_arrest
			age = 12
			NOT = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.22.desc_oubliette
		trigger = {
			has_character_modifier = the_oubliette
			age = 12
			NOT = { trait = incapable }
		}
	}
	# Kids
	desc = {
		text = emf_prisoner.22.desc_kid_house
		trigger = {
			has_character_modifier = house_arrest
			age = 4
			NOT = { age = 12 }
			NOT = { trait = incapable }
		}
	}
	desc = {
		text = emf_prisoner.22.desc_kid_oubliette
		trigger = {
			has_character_modifier = the_oubliette
			age = 4
			NOT = { age = 12 }
			NOT = { trait = incapable }
		}
	}
	# Incapable or very young
	desc = {
		text = emf_prisoner.22.desc_incapable
		trigger = {
			OR = {
				NOT = { age = 4 }
				trait = incapable
			}
		}
	}
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_intrigue
	is_triggered_only = yes
	
	option = {
		# Adult
		name = {
			text = emf_prisoner.22.a_house
			trigger = {
				has_character_modifier = house_arrest
				age = 12
				NOT = { trait = incapable }
			}
		}
		name = {
			text = emf_prisoner.22.a_oubliette
			trigger = {
				has_character_modifier = the_oubliette
				age = 12
				NOT = { trait = incapable }
			}
		}
		# Kids
		name = {
			text = emf_prisoner.22.a_kid_house
			trigger = {
				has_character_modifier = house_arrest
				age = 4
				NOT = { age = 12 }
				NOT = { trait = incapable }
			}
		}
		name = {
			text = emf_prisoner.22.a_kid_oubliette
			trigger = {
				has_character_modifier = the_oubliette
				age = 4
				NOT = { age = 12 }
				NOT = { trait = incapable }
			}
		}
		# Incapable or very young
		name = {
			text = emf_prisoner.22.a_incapable
			trigger = {
				OR = {
					NOT = { age = 4 }
					trait = incapable
				}
			}
		}

		hidden_tooltip = {
			remove_character_modifier = house_arrest
			remove_character_modifier = the_dungeon
			remove_character_modifier = the_oubliette
		}
		if = {
			limit = { prisoner = yes }
			add_character_modifier = { 
				name = the_dungeon
				duration = -1
			}
		}
	}
}

## Prisoner Transfer events
## 30-39 reserved
# Liege requests prisoner transfer - FROMFROM is liege, FROM is prisoner
character_event = {
	id = emf_prisoner.30
	desc = emf_prisoner.30.desc
	picture = GFX_evt_into_the_dungeon
	hide_from = yes
	show_from_from = yes
	is_triggered_only = yes
	
	option = { # Transfer prisoner
		name = emf_prisoner.30.a
		
		FROM = {
			custom_tooltip = { text = emf_prisoner.30.a_tt }
			hidden_tooltip = {
				prisoner = no
				imprison = FROMFROM
			}
		}
		ai_chance = {
			factor = 4
			modifier = {
				factor = 2
				trait = just
			}
			modifier = {
				factor = 2
				trait = charitable
			}
			modifier = {
				factor = 2
				trait = kind
			}
			modifier = { # Likes liege
				factor = 4
				opinion = { who = FROMFROM value = 0 }
			}
			modifier = { # Barons and Counts seldom refuse
				factor = 4
				lower_tier_than = DUKE
			}
		}
	}
	option = { # Refuse
		name = emf_prisoner.30.b
		
		FROMFROM = { # Notify liege
			hidden_tooltip = {
				character_event = { id = emf_prisoner.31 }
			}
			opinion = {
				who = ROOT
				modifier = opinion_refused_prisoner_transfer
				months = 60
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				trait = greedy
			}
			modifier = {
				factor = 2
				trait = envious
			}
			modifier = {
				factor = 2
				trait = arbitrary
			}
			modifier = { # Dislikes liege
				factor = 4
				NOT = {
					opinion = { who = FROMFROM value = 0 }
				}
			}
		}
	}
}

# Notify liege of refusal
character_event = {
	id = emf_prisoner.31
	desc = emf_prisoner.31.desc
	picture = GFX_evt_into_the_dungeon
	is_triggered_only = yes
	
	option = {
		name = emf_prisoner.31.a
		
		tooltip = {
			opinion = {
				who = FROM
				modifier = opinion_refused_prisoner_transfer
				months = 60
			}
		}
	}
}

# AI prisoner transfer event
character_event = {
	id = emf_prisoner.32
	hide_window = yes
	
	ai = yes
	only_playable = yes
	only_capable = yes
	prisoner = no
	min_age = 16
	
	trigger = {
		war = yes
		any_current_enemy = {
			prisoner = yes
			host = { is_liege_or_above = ROOT }
		}
	}
	mean_time_to_happen = {
		days = 1
	}
	
	immediate = {
		any_current_enemy = {
			limit = {
				prisoner = yes
				host = { is_liege_or_above = ROOT }
			}
			character_event = { id = emf_prisoner.33 }
		}
	}
	
	option = {
		name = OK
	}
}

# AI prisoner bounce event
character_event = {
	id = emf_prisoner.33
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		host = {
			character_event = { id = emf_prisoner.30 }
		}
	}
	
	option = {
		name = OK
	}
}
