# -*- ck2.events -*-


namespace = emf_mr


narrative_event = {
	id = emf_mr.1
	desc = emf_mr.1.desc
	title = emf_mr.1.title
	picture = GFX_evt_busy_trading_dock_republic
	border = GFX_event_narrative_frame_diplomacy
	
	is_triggered_only = yes
	
	immediate = {
		capital_scope = {
			duchy = {
				save_event_target_as = mr_duchy
			}
		}
	}
	
	option = {
		name = OK
		ai_chance = { factor = 100 }
		
		hidden_tooltip = {
		
			# Take control of capital duchy
			grant_title_no_opinion = event_target:mr_duchy

			# Shed extra higher-tier titles

			any_demesne_title = {
				limit = {
					NOR = {
						lower_tier_than = DUKE
						title = event_target:mr_duchy
					}
				}
				save_event_target_as = emf_title
				ROOT = { character_event = { id = emf_mr.9 } }
				clear_event_target = emf_title
			}
			
			# Get rid of / transfer vassals outside the capital duchy
			
			any_vassal = {
				limit = {
					higher_tier_than = BARON
					capital_holding = {
						NOT = { de_jure_liege_or_above = event_target:mr_duchy }
					}
				}
				set_defacto_liege = THIS # Independent, worst-case
				ROOT = {
					liege = {
						if = {
							limit = { NOT = { character = ROOT } }
							set_defacto_vassal = PREVPREV # To our liege, if we're not independent
						}
					}
				}
				capital_scope = {
					kingdom = {
						owner = {
							set_defacto_vassal = PREVPREVPREV # To their kingdom owner, if possible (tier) and owner exists
						}
					}
				}
				capital_scope = {
					duchy = {
						owner = {
							set_defacto_vassal = PREVPREVPREV # To their duchy owner, if possible (tier) and owner exists
						}
					}
				}
				emf_liege_change_effect = yes
			}
			
			any_vassal = { # Non-de-jure baron vassals
				limit = {
					tier = BARON
					capital_holding = {
						NOT = { de_jure_liege_or_above = event_target:mr_duchy }
					}
				}
				# Transfer to owner of their capital holding's de jure county
				capital_holding = {
					dejure_liege_title = {
						owner = {
							set_defacto_vassal = PREVPREVPREV
						}
					}
				}
			}
			
			# Try to make the capital duchy our primary so that any extra vassals are bound to it and not other titles
			event_target:mr_duchy = { make_primary_title = yes }
			
			# Now, do the dangerous thing and just destroy any extra duke-tier or higher titles that we couldn't shed
			# They are probably titular-- hopefully they weren't binding any vassals (would make a mess): apparently
			# never seems to happen in practice, so we must be doing the Right Stuff.
			
			any_demesne_title = {
				limit = {
					NOR = {
						lower_tier_than = DUKE
						title = event_target:mr_duchy
					}
				}
				emf_destroy_title_effect = yes
			}

			# Try again
			event_target:mr_duchy = { make_primary_title = yes }
			
			# Make sure we have either direct or indirect control over all de jure
			# vassal titles of capital duchy...
			
			event_target:mr_duchy = {
				any_de_jure_vassal_title = { # County cleanup...
					limit = {
						tier = COUNT
						owner = {
							NOR = {
								character = ROOT
								is_liege_or_above = ROOT
							}
						}
					}
					if = {
						limit = {
							owner = { higher_tier_than = COUNT } # DUKE+ should not be vassalized
						}
						grant_title_no_opinion = ROOT # Just take direct control over the county
					}
					if = {
						limit = {
							owner = { tier = COUNT } # Can definitely vassalize a count
						}
						owner = { set_defacto_liege = ROOT } # Vassalize
					}
				}
				any_de_jure_vassal_title = { # Barony cleanup...
					limit = {
						tier = BARON
						owner = {
							NOR = {
								character = ROOT
								is_liege_or_above = ROOT
							}
						}
					}
					if = {
						limit = {
							owner = { higher_tier_than = COUNT } # DUKE+ should not be vassalized
						}
						dejure_liege_title = {
							owner = {
								grant_title_no_opinion = PREVPREV # Grant barony to its county's owner
							}
						}
					}
					if = {
						limit = {
							owner = { tier = COUNT } # Counts can be directly vassalized
						}
						owner = { set_defacto_liege = ROOT } # Vassalize
					}
					if = {
						limit = {
							owner = { tier = BARON } # Barons should be vassalized by their de jure county owner
						}
						owner = { save_event_target_as = emf_baron }
						dejure_liege_title = {
							owner = { set_defacto_vassal = event_target:emf_baron } # County owner vassalizes
						}
						clear_event_target = emf_baron
					}
				}
			}
			
			# Grant our own provinces outside the capital duchy to other, neighboring characters in same realm
			character_event = { id = emf_mr.5 }
			
			# Grant our own remaining provinces outside the capital duchy to other, neighboring characters in a different realm
			character_event = { id = emf_mr.6 }
			
			# Become independent
			
			set_defacto_liege = ROOT
			emf_liege_change_effect = yes
			
			# Make our vassals shed any provinces outside the capital duchy to other, neighboring characters in a different realm
			
			any_vassal = {
				limit = { tier = COUNT }
				character_event = { id = emf_mr.6 }
			}
			
			# Create family palace
			
			create_family_palace = yes
			
			set_government_type = merchant_republic_government
			
			# Make sure we own a city and that it's our capital (we assume our capital county has a city or empty holding slot)
			
			character_event = { id = emf_mr.10 }
			
			set_government_type = merchant_republic_government # Vanilla does this twice for some reason, so we'll do it too
			
			# Create a dynasty member to get around situations where we have no valid
			# republican heirs (will be our brother if we have parents)
			
			character_event = { id = emf_mr.7 }
			
			# Every family gets 500g to start with, including Doge
			
			wealth = 500
			
			# Give money and heirs and cities to the 4 auto-generated patrician families
			# after 2 game days (gives the game enough time to generate them)
			
			character_event = { id = emf_mr.2 days = 2 }
			
			# Create a custom de jure kingdom title for the MR duchy if we want
			# Avoids de jure claim CBs if want the MR to surely stay independent
			
			# Ask FROMFROM, if available (diplo-action) ...
			if = {
				limit = { FROMFROM = { is_alive = yes } }
				FROMFROM = { character_event = { id = emf_mr.4 } }
				break = yes
			}

			# Else, ask FROM (direct scenario customization decision)
			FROM = { character_event = { id = emf_mr.4 } }
		}
	}
	
	option = {
		name = CANCEL
		ai_chance = { factor = 0 }
	}
}



# emf_mr.2
#
# Triggered upon the Doge of the new merchant republic 3 game days after start.
# Gives the auto-generated rival patricians wealth and heirs.
#
# Recursive for better randomization.
character_event = {
	id = emf_mr.2
	desc = HIDE_EVENT
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		any_vassal = {
			is_patrician = yes
			NOT = { has_character_flag = ai_patrician }
		}
	}
	
	option = {
		name = OK
		
		random_vassal = {
			limit = {
				is_patrician = yes
				NOT = { has_character_flag = ai_patrician }
			}
			set_character_flag = ai_patrician
			character_event = { id = emf_mr.3 }
		}
		
		character_event = { id = emf_mr.2 }
	}
}


# emf_mr.3 [AI Patrician]
#
# Create heir
character_event = {
	id = emf_mr.3
	desc = AI_EVENT
	hide_window = yes
	
	is_triggered_only = yes
	
	option = {
		name = OK
		
		# Give them a city.
		character_event = { id = emf_mr.11 }
		
		# The engine gives auto-generated patricians 500 gold automatically,
		# so we actually don't do it explicitly.

		#wealth = 500
		
		if = {
			limit = { NOT = { age = 32 } }
			
			# Can't create an adult male son, so instead just create a dynasty member (no known relation).
			character_event = { id = emf_mr.7 }
			
			break = yes
		}
		
		# Create have an adult heir (son)
		
		random_list = {
			10 = {
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					female = no
					age = 16
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { age = 33 }
				}
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					female = no
					age = 17
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { age = 34 }
				}
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					female = no
					age = 18
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { age = 35 }
				}
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					female = no
					age = 19
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { age = 36 }
				}
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					female = no
					age = 20
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { age = 37 }
				}
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					female = no
					age = 21
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
		}
		
		new_character = {
			set_father = ROOT # Don't forget your daddy
			if = {
				limit = {
					religion_group = indian_group
				}
				add_trait = kshatriya
				character_event = { id = RoI.30121 }
			}
		}
	}
}


# emf_mr.4 [Invoker of MR conversion decision/diplo-action]
#
# Give the option to make the new MR a de jure kingdom title
# with no de jure empire, or keep it a simple duchy-level
# republic.
character_event = {
	id = emf_mr.4
	desc = emf_mr.4.desc
	picture = GFX_evt_doge_republic
	border = GFX_event_normal_frame_diplomacy
	
	is_triggered_only = yes
	hide_new = yes
	
	trigger = {
		FROM = {
			primary_title = { title = event_target:mr_duchy }
		}
	}
	
	option = {
		name = YES
		ai_chance = { factor = 0 }
		
		hidden_tooltip = {
			FROM = {
				primary_title = {
					create_title = {
						tier = KING
						landless = no
						temporary = no
						custom_created = yes
						culture = FROM
						holder = FROM
						base_title = THIS
						copy_title_laws = yes
					}
				}
				
				primary_title = {
					event_target:mr_duchy = {
						de_jure_liege = PREV
					}
				}
			}
		}
	}
	option = {
		name = NO
		ai_chance = { factor = 100 }
	}
}


# emf_mr.5 [Ruler]
#
# Recursively shed counties that are not within the MR's de jure duchy.
# This version only sheds them to people in the same original realm as
# the ruler.
character_event = {
	id = emf_mr.5
	desc = HIDE_EVENT
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		any_demesne_title = {
			tier = COUNT
			NOT = { de_jure_liege = event_target:mr_duchy }
			location = {
				any_neighbor_province = {
					county = {
						NOT = { de_jure_liege = event_target:mr_duchy }
					}
					owner = {
						same_realm = ROOT
						NOR = {
							character = ROOT
							is_liege_or_above = ROOT
						}
					}
				}
			}
		}
	}
	
	immediate = {
		random_demesne_title = {
			limit = {
				tier = COUNT
				NOT = { de_jure_liege = event_target:mr_duchy }
				location = {
					any_neighbor_province = {
						county = {
							NOT = { de_jure_liege = event_target:mr_duchy }
						}
						owner = {
							same_realm = ROOT
							NOR = {
								character = ROOT
								is_liege_or_above = ROOT
							}
						}
					}
				}
			}
			save_event_target_as = free_county
		}
	}
	
	option = {
		name = OK
		
		event_target:free_county = {
			location = {
				random_neighbor_province = {
					limit = {
						county = {
							NOT = { de_jure_liege = event_target:mr_duchy }
						}
						owner = {
							same_realm = ROOT
							NOR = {
								character = ROOT
								is_liege_or_above = ROOT
							}
						}
					}
					owner = {
						event_target:free_county = {
							grant_title_no_opinion = PREV # Grant the county
							
							# Grant any baronies we own under the county too...
							
							any_de_jure_vassal_title = {
								limit = { owner = { character = ROOT } }
								grant_title_no_opinion = PREVPREV
							}
							
							# Make sure the rest of the baronies are vassal to the new owner, if possible
							
							any_de_jure_vassal = {
								limit = {
									tier = BARON
									NOT = { character = PREVPREV }
								}
								set_defacto_liege = PREVPREV
							}
						}
					}
				}
			}
		}
		
		clear_event_target = free_county
		character_event = { id = emf_mr.5 } # Recurse
	}
}


# emf_mr.6 [Ruler]
#
# Same as emf_mr.5, but requires granting to neighboring provinces held outside the realm
# of the ruler. Once the MR is independent, can be used on the doge's vassals to make them
# shed their outside-duchy counties too.
character_event = {
	id = emf_mr.6
	desc = HIDE_EVENT
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		any_demesne_title = {
			tier = COUNT
			NOT = { de_jure_liege = event_target:mr_duchy }
			location = {
				any_neighbor_province = {
					county = {
						NOT = { de_jure_liege = event_target:mr_duchy }
					}
					owner = {
						NOT = { same_realm = ROOT }
					}
				}
			}
		}
	}
	
	immediate = {
		random_demesne_title = {
			limit = {
				tier = COUNT
				NOT = { de_jure_liege = event_target:mr_duchy }
				location = {
					any_neighbor_province = {
						county = {
							NOT = { de_jure_liege = event_target:mr_duchy }
						}
						owner = {
							NOT = { same_realm = ROOT }
						}
					}
				}
			}
			save_event_target_as = free_county
		}
	}
	
	option = {
		name = OK
		
		event_target:free_county = {
			location = {
				random_neighbor_province = {
					limit = {
						county = {
							NOT = { de_jure_liege = event_target:mr_duchy }
						}
						owner = {
							NOT = { same_realm = ROOT }
						}
					}
					owner = {
						event_target:free_county = {
							grant_title_no_opinion = PREV # Grant the county
							
							# Grant any baronies we own under the county too...
							
							any_de_jure_vassal_title = {
								limit = { owner = { character = ROOT } }
								grant_title_no_opinion = PREVPREV
							}
							
							# Make sure the rest of the baronies are vassal to the new owner, if possible
							
							any_de_jure_vassal = {
								limit = {
									tier = BARON
									NOT = { character = PREVPREV }
								}
								set_defacto_liege = PREVPREV
							}
						}
					}
				}
			}
		}
		
		clear_event_target = free_county
		character_event = { id = emf_mr.6 } # Recurse
	}
}


# emf_mr.7
#
# Create a dynasty member fit to be a patrician's successor. Try to make them brothers if possible,
# but that can only work for the original Doge, because auto-generated patricians won't have any
# parents.
character_event = {
	id = emf_mr.7
	desc = HIDE_EVENT
	hide_window = yes
	is_triggered_only = yes

	option = {
		name = OK
		
		random_list = {
			10 = {
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					age = 16
					female = no
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { age = 19 }
				}
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					age = 18
					female = no
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { age = 21 }
				}
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					age = 20
					female = no
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { age = 23 }
				}
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					age = 22
					female = no
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { age = 25 }
				}
				create_random_steward = {
					random_traits = yes
					dynasty = ROOT
					age = 24
					female = no
				}
				new_character = {
					emf_new_character_effect = yes
				}
			}
		}
		
		new_character = {
			if = {
				limit = {
					religion_group = indian_group
				}
				add_trait = kshatriya
				character_event = { id = RoI.30121 }
			}

			character_event = { id = emf_mr.8 }			
		}
	}
}


# emf_mr.8
#
# Try to make a character your brother.
character_event = {
	id = emf_mr.8
	desc = HIDE_EVENT
	hide_window = yes
	is_triggered_only = yes
	
	option = {
		name = OK
		
		FROM = { # Our would-be brother
			if = {
				limit = { father_even_if_dead = { always = yes } }
				father_even_if_dead = {
					ROOT = { set_father = PREV }
				}
			}
			if = {
				limit = { mother_even_if_dead = { always = yes } }
				mother_even_if_dead = {
					ROOT = { set_mother = PREV }
				}
			}
		}
	}
}


# emf_mr.9 [Doge]
#
# Shed prior tier >= DUKE feudal title event_target:emf_title
# to an appropriate ruler.
character_event = {
	id = emf_mr.9
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		random_vassal = {
			limit = {
				higher_tier_than = BARON
				is_feudal = yes
				num_of_count_titles = 4
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_vassal = {
			limit = {
				higher_tier_than = BARON
				is_feudal = yes
				num_of_count_titles = 3
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_vassal = {
			limit = {
				higher_tier_than = BARON
				is_feudal = yes
				num_of_count_titles = 2
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_vassal = {
			limit = {
				higher_tier_than = BARON
				is_feudal = yes
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_realm_lord = {
			limit = {
				higher_tier_than = BARON
				is_feudal = yes
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_playable_ruler = {
			limit = {
				is_feudal = yes
				religion = ROOT
				culture = ROOT
				num_of_count_titles = 3
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_playable_ruler = {
			limit = {
				is_feudal = yes
				religion = ROOT
				culture = ROOT
				num_of_count_titles = 2
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_playable_ruler = {
			limit = {
				is_feudal = yes
				religion = ROOT
				culture = ROOT
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_playable_ruler = {
			limit = {
				is_feudal = yes
				religion_group = ROOT
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_vassal = {
			limit = {
				higher_tier_than = BARON
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_realm_lord = {
			limit = {
				higher_tier_than = BARON
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_playable_ruler = {
			limit = {
				religion_group = ROOT
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
		random_playable_ruler = {
			limit = {
				capital_holding = {
					de_jure_liege_or_above = event_target:emf_title
					NOT = { de_jure_liege_or_above = event_target:mr_duchy }
				}
			}
			grant_title_no_opinion = event_target:emf_title
			break = yes
		}
	}
}


# emf_mr.10 [Doge]
#
# Set our capital to a city and make sure it's the province capital.
character_event = {
	id = emf_mr.10
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		capital_scope = { save_event_target_as = emf_capital }
		
		# If we own a city in our capital...
		random_demesne_title = {
			limit = {
				holding_type = city
				location = { province = event_target:emf_capital }
			}
			if = {
				limit = { is_capital = no }
				make_capital_holding = yes
			}
			ROOT = { capital = PREV }
			break = yes
		}
		
		# If there is already SOME city in our capital...
		capital_scope = {
			random_province_holding = {
				limit = {
					holding_type = city
				}
				grant_title_no_opinion = ROOT
				if = {
					limit = { is_capital = no }
					make_capital_holding = yes
				}
				ROOT = { capital = PREV }
				break = yes
			}

			if = {
				limit = { NOT = { has_empty_holding = yes } }
				log = "emf_mr.10: SERIOUS: expected empty holding slot in capital province of [This.GetName]"

				# Do something drastic
				random_province_holding = {
					limit = { holding_type = temple }
					destroy_settlement = THIS
				}

				if = {
					limit = { NOT = { has_empty_holding = yes } }
					random_province_holding = {
						limit = { holding_type = castle is_capital = no }
						destroy_settlement = THIS
					}
				}
				if = {
					limit = { NOT = { has_empty_holding = yes } }
					random_province_holding = {
						limit = { holding_type = castle }
						destroy_settlement = THIS
					}
				}
			}

			if = {
				limit = { NOT = { has_empty_holding = yes } }
				log = "emf_mr.10: FATAL: could not make empty holding slot in capital province of [This.GetName]"
				break = yes
			}

			build_holding = {
				type = city
				holder = ROOT
			}

			random_province_holding = {
				limit = {
					holding_type = city
				}
				make_capital_holding = yes
				ROOT = { capital = PREV }
			}
		}
	}
}


# emf_mr.11 [Patrician]
#
# Try to acquire or build a city.
character_event = {
	id = emf_mr.11
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_patrician = yes
		NOT = {
			any_demesne_title = {
				holding_type = city
			}
		}
	}
	
	immediate = {
		liege = {
			save_event_target_as = emf_liege
			capital_scope = { save_event_target_as = emf_capital }
		}
		
		# Look for an existing coastal city somewhere within the capital duchy (not owned by another patrician)
		# Try to find provinces in which we can make our city capital and take the county too
		event_target:emf_capital = {
			duchy = {
				any_direct_de_jure_vassal_title = {
					limit = {
						location = {
							port = yes
							NOR = {
								province = event_target:emf_capital
								any_province_holding = {
									is_capital = yes
									holding_type = city
									owner = { is_patrician = yes }
								}
							}
						}
					}
					location = {
						random_province_holding = {
							limit = {
								holding_type = city
								owner = {
									OR = {
										character = event_target:emf_liege
										is_patrician = no
									}
								}
							}
							grant_title_no_opinion = ROOT
							dejure_liege_title = {
								grant_title_no_opinion = ROOT
							}
							province_capital = yes
							ROOT = {
								set_defacto_liege = event_target:emf_liege
								emf_liege_change_effect = yes
							}
							break = yes
						}
					}
				}
			}
		}
		
		# Look for an existing city in liege's capital (not owned by another patrician)
		event_target:emf_capital = {
			random_province_holding = {
				limit = {
					holding_type = city
					owner = {
						NOR = {
							character = event_target:emf_liege
							is_patrician = yes
						}
					}
				}
				grant_title_no_opinion = ROOT
				ROOT = {
					set_defacto_liege = event_target:emf_liege
					emf_liege_change_effect = yes
				}
				break = yes
			}
		}
		
		# Look for an existing non-coastal city somewhere within the capital duchy (not owned by another patrician)
		# Try to find provinces in which we can make our city capital and take the county too
		event_target:emf_capital = {
			duchy = {
				any_direct_de_jure_vassal_title = {
					limit = {
						location = {
							port = no
							NOT = { province = event_target:emf_capital }
							NOT = {
								any_province_holding = {
									is_capital = yes
									holding_type = city
									owner = { is_patrician = yes }
								}
							}
						}
					}
					location = {
						random_province_holding = {
							limit = {
								holding_type = city
								owner = {
									OR = {
										character = event_target:emf_liege
										is_patrician = no
									}
								}
							}
							grant_title_no_opinion = ROOT
							dejure_liege_title = {
								grant_title_no_opinion = ROOT
							}
							province_capital = yes
							ROOT = {
								set_defacto_liege = event_target:emf_liege
								emf_liege_change_effect = yes
							}
							break = yes
						}
					}
				}
			}
		}
		
		# Look for an existing coastal city somewhere within the capital duchy (not owned by another patrician)
		# Settle for provinces in which we won't be able to take the county and make our city capital
		event_target:emf_capital = {
			duchy = {
				any_direct_de_jure_vassal_title = {
					limit = {
						location = {
							port = yes
							NOT = { province = event_target:emf_capital }
						}
					}
					location = {
						random_province_holding = {
							limit = {
								holding_type = city
								owner = {
									OR = {
										character = event_target:emf_liege
										is_patrician = no
									}
								}
							}
							grant_title_no_opinion = ROOT
							ROOT = {
								set_defacto_liege = event_target:emf_liege
								emf_liege_change_effect = yes
							}
							break = yes
						}
					}
				}
			}
		}
		
		# Look for an existing non-coastal city somewhere within the capital duchy (not owned by another patrician)
		# Settle for provinces in which we won't be able to take the county and make our city capital
		event_target:emf_capital = {
			duchy = {
				any_direct_de_jure_vassal_title = {
					limit = {
						location = {
							port = no
							NOT = { province = event_target:emf_capital }
						}
					}
					location = {
						random_province_holding = {
							limit = {
								holding_type = city
								owner = {
									OR = {
										character = event_target:emf_liege
										is_patrician = no
									}
								}
							}
							grant_title_no_opinion = ROOT
							ROOT = {
								set_defacto_liege = event_target:emf_liege
								emf_liege_change_effect = yes
							}
							break = yes
						}
					}
				}
			}
		}
		
		# Try to build a city in the capital to hold
		if = {
			limit = {
				event_target:emf_capital = {
					has_empty_holding = yes
				}
			}
			event_target:emf_capital = {
				build_holding = {
					type = city
					holder = ROOT
				}
			}
			# Give it some basic buildings
			random_demesne_title = { 
				limit = { holding_type = city }
				add_building = ct_wall_1
				add_building = ct_wall_2
				add_building = ct_marketplace_1
				add_building = ct_marketplace_2
				add_building = ct_guard_1
				add_building = ct_barracks_1
				if = {
					limit = { location = { port = yes } }
					add_building = ct_port_1
					add_building = ct_shipyard_1
				}
				refill_holding_levy = yes
			}
			set_defacto_liege = event_target:emf_liege
			emf_liege_change_effect = yes
			break = yes
		}
	}
}
