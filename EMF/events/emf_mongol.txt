# -*- ck2.events -*-

namespace = emf_mongol

#######################################
# NEW MONGOL EVENTS
#######################################

### MAINTENANCE EVENTS

# Apply flags at game start
character_event = {
	id = emf_mongol.100

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_global_flag = temujin_born
		NOT = { year = 1242 }
	}

	immediate = {
		# Kill Temujin and his dynasty if they exist before the invasion event
		random_character = {
			limit = {
				has_flag = is_temujin
				is_ruler = no
			}
			log = "emf_mongol.100: unlanded Temujin found - removing him and his dynasty in favor of spawned version"
			any_dynasty_member_even_if_dead = { emf_vanish_character = yes }
			emf_vanish_character = yes
		}

		# Otherwise, the Mongol Empire already exists
		# So mark the sons of Temujin appropriately
		any_character = {
			limit = {
				culture = mongol
				is_female = no
			}
			if = {
				limit = { dynasty = 7379 }
				set_global_flag = jochi_dynasty_created
			}
			else_if = {
				limit = { dynasty = 7380 }
				set_global_flag = chagatai_dynasty_created
			}
			else_if = {
				limit = { dynasty = 1000054550 }
				set_global_flag = ogodei_dynasty_created
			}
			else_if = {
				limit = { dynasty = 101916 }
				set_global_flag = tolui_dynasty_created
			}
			else_if = {
				limit = { dynasty = 11100 } # Borjigin
				if = {
					limit = {
						OR = {
							character = 125502
							c_125502 = {
								OR = {
									is_parent_of = PREV
									is_grandparent_of = PREV
								}
							}
						}
					}
					set_flag = line_of_jochi
				}
				else_if = {
					limit = {
						OR = {
							character = 93062
							c_93062 = {
								OR = {
									is_parent_of = PREV
									is_grandparent_of = PREV
								}
							}
						}
					}
					set_flag = line_of_chagatai
				}
				else_if = {
					limit = {
						OR = {
							character = 172005
							c_172005 = {
								OR = {
									is_parent_of = PREV
									is_grandparent_of = PREV
								}
							}
						}
					}
					set_flag = line_of_ogodei
				}
				else_if = {
					limit = {
						OR = {
							character = 125520
							c_125520 = {
								OR = {
									is_parent_of = PREV
									is_grandparent_of = PREV
								}
							}
						}
					}
					set_flag = line_of_tolui
				}
			}
		}
	}
}

# Maintaining the lines of Genghis's sons [a Borjigin is ROOT, on_death]
character_event = {
	id = emf_mongol.101

	hide_window = yes
	is_triggered_only = yes

	culture = mongol

	trigger = {
		dynasty = 11100 # Borjigin
		num_of_children = 1
		OR = {
			has_flag = line_of_jochi
			has_flag = line_of_chagatai
			has_flag = line_of_ogodei
			has_flag = line_of_tolui
		}
	}

	immediate = {
		any_child = {
			limit = {
				is_female = no
				NOR = {
					trait = bastard
					has_flag = line_of_jochi
					has_flag = line_of_chagatai
					has_flag = line_of_ogodei
					has_flag = line_of_tolui
				}
			}
			if = {
				limit = { ROOT = { has_flag = line_of_jochi } }
				set_flag = line_of_jochi
			}
			if = {
				limit = { ROOT = { has_flag = line_of_chagatai } }
				set_flag = line_of_chagatai
			}
			if = {
				limit = { ROOT = { has_flag = line_of_ogodei } }
				set_flag = line_of_ogodei
			}
			if = {
				limit = { ROOT = { has_flag = line_of_tolui } }
				set_flag = line_of_tolui
			}
		}
	}
}

# Establish new dynasty
character_event = {
	id = emf_mongol.102

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		any_child_even_if_dead = {
			limit = { dynasty = ROOT }
			character_event = { id = emf_mongol.102 }
		}
		dynasty = event_target:new_dynasty_head
	}
}

# Ilkhanate converts to Muslim
character_event = {
	id = emf_mongol.103
	title = EVTNAME_emf_mongol_103
	desc = EVTDESC_emf_mongol_103
	picture = GFX_evt_mongols
	border = GFX_event_normal_frame_religion
	major = yes

	ai = yes
	only_independent = yes
	only_capable = yes
	min_age = 16
	prisoner = no
	religion = tengri_pagan
	culture = mongol
	war = no

	trigger = {
		e_il-khanate = {
			holder = ROOT
			is_primary_holder_title = yes
			NOT = { has_flag = il_khanate_converts }
		}
		OR = {
			is_feudal = yes
			is_tribal = yes
		}
		emf_can_convert_religion = yes
		NOR = {
			trait = zealous
			is_inaccessible_trigger = yes
			is_ill = yes
			controls_religion = yes
		}
		any_realm_province = { religion_group = muslim }
	}

	mean_time_to_happen = {
		months = 480
		modifier = {
			factor = 0.5
			trait = cynical
		}
	}

	immediate = {
		e_il-khanate = { set_flag = il_khanate_converts }
		random_list = {
			10 = {
				modifier = {
					factor = 0
					NOT = { any_realm_province = { religion = sunni } }
				}
				modifier = {
					factor = 10
					capital_scope = { religion = sunni }
				}
				random_realm_province = {
					limit = { religion = sunni }
					save_event_target_as = convert_province
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { any_realm_province = { religion = zikri } }
				}
				modifier = {
					factor = 10
					capital_scope = { religion = zikri }
				}
				random_realm_province = {
					limit = { religion = zikri }
					save_event_target_as = convert_province
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { any_realm_province = { religion = shiite } }
				}
				modifier = {
					factor = 10
					capital_scope = { religion = shiite }
				}
				random_realm_province = {
					limit = { religion = shiite }
					save_event_target_as = convert_province
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { any_realm_province = { religion = zaydi } }
				}
				modifier = {
					factor = 10
					capital_scope = { religion = zaydi }
				}
				random_realm_province = {
					limit = { religion = zaydi }
					save_event_target_as = convert_province
				}
			}
			10 = {
				modifier = {
					factor = 0
					NOT = { any_realm_province = { religion = ismaili } }
				}
				modifier = {
					factor = 10
					capital_scope = { religion = ismaili }
				}
				random_realm_province = {
					limit = { religion = ismaili }
					save_event_target_as = convert_province
				}
			}
		}
		if = {
			limit = { NOT = { event_target:convert_province = { always = yes } } }
			random_realm_province = {
				limit = { religion_group = muslim }
				save_event_target_as = convert_province
			}
		}
		event_target:convert_province = { save_event_target_as = target_religion }
	}

	option = {	# Sunni
		name = EVTOPTA_emf_mongol_103
		trigger = { has_landed_title = e_il-khanate }
		emf_character_set_religion_to_target_religion = yes
		capital_scope = {
			if = {
				limit = { religion = tengri_pagan }
				religion = event_target:convert_province
				religion_authority = {
					modifier = province_converted_to
					years = 5
				}
			}
		}
		any_realm_character = {
			limit = {
				ai = yes
				prisoner = no
				OR = {
					is_feudal = yes
					is_tribal = yes
					AND = {
						is_ruler = no
						liege = {
							OR = {
								is_feudal = yes
								is_tribal = yes
							}
						}
					}
				}
				emf_can_convert_religion = yes
				religion = tengri_pagan
				NOT = { trait = zealous }
				is_incapable = no
				OR = {
					is_close_relative = ROOT
					any_close_relative = { vassal_of = ROOT }
					vassal_of = ROOT
				}
			}
			emf_character_set_religion_to_target_religion = yes
			if = {
				limit = {
					is_playable = yes
					capital_scope = { religion = tengri_pagan }
				}
				capital_scope = {
					religion = event_target:convert_province
					religion_authority = {
						modifier = province_converted_to
						years = 5
					}
				}
			}
		}
	}
	# Other rulers are informed
	option = {
		name = EXCELLENT
		trigger = {
			religion_group = muslim
			NOT = { has_landed_title = e_il-khanate }
		}
	}
	option = {
		name = EVTOPTC_emf_mongol_103
		trigger = {
			religion_group = christian
			NOT = { has_landed_title = e_il-khanate }
		}
	}
	option = {
		name = EVTOPTD_emf_mongol_103
		trigger = {
			NOT = { religion_group = christian }
			NOT = { religion_group = muslim }
			NOT = { has_landed_title = e_il-khanate }
		}
	}
}

# Establish contiguous provinces in mongol realms
character_event = {
	id = emf_mongol.105

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		log = "DEBUG: emf_mongol.105: calculating contiguous provinces in mongol realm for [Root.GetTitledFirstName] [Root.GetOnlyDynastyName] (#[Root.GetID]/[Root.PrimaryTitle.GetID])"

		any_realm_province = {
			limit = {
				owner_under_ROOT = yes # need actual county ownership, not some stray barony
			}
			clr_flag = emf_mongol_connected
		}

		if = {
			limit = {
				NOR = {
					has_landed_title = e_golden_horde
					has_landed_title = e_il-khanate
					has_landed_title = e_chagatai
				}
			}
			log = "--> ASSERT: ROOT has none of the required successor empire titles!"
		}

		set_variable = { which = "n_connected" value = 0 }
		export_to_variable = { which = "n_total" value = num_of_count_titles_in_realm }

		capital_scope = { # Seed the capital
			set_flag = emf_mongol_connected
			ROOT = { change_variable = { which = "n_connected" value = 1 } }
			any_neighbor_province = { # Seed the neighbors
				limit = {
					owner_under_ROOT = yes
					OR = {
						AND = {
							ROOT = { has_landed_title = e_golden_horde }
							emf_golden_horde_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_il-khanate }
							emf_il_khanate_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_chagatai }
							emf_chagatai_province = yes
						}
					}
				}
				set_flag = emf_mongol_connected
				ROOT = { change_variable = { which = "n_connected" value = 1 } }
			}
		}

		# First figure out which provinces in the home region are connected
		while = {
			limit = {
				any_realm_province = {
					NOT = { has_flag = emf_mongol_connected }
					OR = {
						AND = {
							ROOT = { has_landed_title = e_golden_horde }
							emf_golden_horde_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_il-khanate }
							emf_il_khanate_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_chagatai }
							emf_chagatai_province = yes
						}
					}
					owner_under_ROOT = yes # need actual county ownership, not some stray barony
					any_neighbor_province = {
						owner_under_ROOT = yes
						has_flag = emf_mongol_connected
					}
				}
			}
			any_realm_province = {
				limit = {
					NOT = { has_flag = emf_mongol_connected }
					OR = {
						AND = {
							ROOT = { has_landed_title = e_golden_horde }
							emf_golden_horde_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_il-khanate }
							emf_il_khanate_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_chagatai }
							emf_chagatai_province = yes
						}
					}
					owner_under_ROOT = yes # need actual county ownership, not some stray barony
					any_neighbor_province = {
						owner_under_ROOT = yes
						has_flag = emf_mongol_connected
					}
				}
				set_flag = emf_mongol_connected
				ROOT = { change_variable = { which = "n_connected" value = 1 } }
			}
		}

		# Then allow the flags to extend up to two provinces (radially) outside the home region
		while = {
			count = 2
			any_realm_province = {
				limit = {
					NOT = { has_flag = emf_mongol_connected }
					owner_under_ROOT = yes # need actual county ownership, not some stray barony
					any_neighbor_province = {
						owner_under_ROOT = yes
						has_flag = emf_mongol_connected
					}
				}
				set_flag = emf_mongol_connected
				ROOT = { change_variable = { which = "n_connected" value = 1 } }
			}
		}
		
		# Check for any provinces in the home region that are only connected through provinces outside it
		while = {
			limit = {
				any_realm_province = {
					NOT = { has_flag = emf_mongol_connected }
					OR = {
						AND = {
							ROOT = { has_landed_title = e_golden_horde }
							emf_golden_horde_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_il-khanate }
							emf_il_khanate_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_chagatai }
							emf_chagatai_province = yes
						}
					}
					owner_under_ROOT = yes # need actual county ownership, not some stray barony
					any_neighbor_province = {
						owner_under_ROOT = yes
						has_flag = emf_mongol_connected
					}
				}
			}
			any_realm_province = {
				limit = {
					NOT = { has_flag = emf_mongol_connected }
					OR = {
						AND = {
							ROOT = { has_landed_title = e_golden_horde }
							emf_golden_horde_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_il-khanate }
							emf_il_khanate_province = yes
						}
						AND = {
							ROOT = { has_landed_title = e_chagatai }
							emf_chagatai_province = yes
						}
					}
					owner_under_ROOT = yes # need actual county ownership, not some stray barony
					any_neighbor_province = {
						owner_under_ROOT = yes
						has_flag = emf_mongol_connected
					}
				}
				set_flag = emf_mongol_connected
				ROOT = { change_variable = { which = "n_connected" value = 1 } }
			}
		}

		set_variable = { which = "n_disconnected" which = "n_total" }
		subtract_variable = { which = "n_disconnected" which = "n_connected" }

		log = "--> provinces connected: [Root.n_connected.GetValue] / [Root.n_total.GetValue] ([Root.n_disconnected.GetValue] not connnected)"

		set_variable = { which = "n_disconnected" value = 0 }
		set_variable = { which = "n_connected" value = 0 }
		set_variable = { which = "n_total" value = 0 }
	}
}


### MONGOL EMPIRE SPLITS UP

# Khan dies with a large enough empire to split up among sons/brothers [on_death]
character_event = {
	id = emf_mongol.200

	is_triggered_only = yes
	hide_window = yes

	ai = yes
	culture = mongol
	only_independent = yes

	trigger = {
		# always = no # Disabled in CKII v2.8 due to inability to figure out what went wrong with the scripting API
		has_landed_title = e_mongol_empire
		num_of_count_titles_in_realm = 75

		# Has at least twenty provinces for Golden Horde
		any_realm_province = {
			count = 20
			owner_under_ROOT = yes
			emf_golden_horde_province = yes
		}

		# Has at enough holdings in Il-Khanate to create empire
		any_realm_title = {
			count = 120
			tier = BARON
			location = { emf_il_khanate_province = yes }
		}

		# Has at least five provinces for Chagatai
		any_realm_province = {
			count = 5
			owner_under_ROOT = yes
			emf_chagatai_province = yes
		}

		# Has at least three valid heirs
		any_dynasty_member = {
			count = 3
			emf_valid_mongol_heir_for_ROOT = yes
		}
	}

	immediate = {
		log = "INFO: emf_mongol.200: [Root.GetTitledFirstName] [Root.GetOnlyDynastyName] (#[Root.GetID]/[Root.PrimaryTitle.GetID]) has died with sufficient conditions for a 3-way mongol empire split"
		current_heir = {
			log = "--> current_heir: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
		}
		player_heir = {
			log = "--> player_heir: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
		}
		# Stop any wars and disband the initial mongol forces
		any_war = {
			limit = {
				OR = {
					attacker = { character = ROOT }
					defender = { character = ROOT }
				}
			}
			end_war = invalid
		}
		disband_event_forces = horde_invasion
		disband_event_forces = start_troops

		# Invalidate all internal wars as well
		any_vassal = {
			any_war = {
				limit = {
					OR = {
						attacker = { character = PREV }
						defender = { character = PREV }
					}
				}
				end_war = invalid
			}
		}
		any_realm_lord = {
			limit = { tier = DUKE }
			any_war = {
				limit = {
					OR = {
						attacker = { character = PREV }
						defender = { character = PREV }
					}
				}
				end_war = invalid
			}
		}
		any_realm_lord = {
			limit = { tier = COUNT }
			any_war = {
				limit = {
					OR = {
						attacker = { character = PREV }
						defender = { character = PREV }
					}
				}
				end_war = invalid
			}
		}
		any_realm_lord = {
			any_war = {
				limit = {
					OR = {
						attacker = { character = PREV }
						defender = { character = PREV }
					}
				}
				end_war = invalid
			}
		}
		# First attempt to give titles to historical people
		# Starting with Jochi & descendants
		if = {
			limit = { has_flag = is_temujin }
			log = "--> dying khan was Temujin: searching for heirs..."
			random_dynasty_member = {
				limit = {
					has_flag = line_of_jochi
					emf_valid_mongol_heir_for_ROOT = yes
					NOT = {
						any_dynasty_member = {
							NOT = { character = PREV }
							has_flag = line_of_jochi
							emf_valid_mongol_heir_for_ROOT = yes
							is_older_than = PREV
						}
					}
				}
				save_event_target_as = emf_mongol_heir_1
				log = "----> 1st heir is the eldest of the line of Jochi: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
			random_dynasty_member = {
				limit = {
					has_flag = line_of_tolui
					emf_valid_mongol_heir_for_ROOT = yes
					NOT = {
						any_dynasty_member = {
							NOT = { character = PREV }
							has_flag = line_of_tolui
							emf_valid_mongol_heir_for_ROOT = yes
							is_older_than = PREV
						}
					}
				}
				save_event_target_as = emf_mongol_heir_2
				log = "----> 2nd heir is the eldest of the line of Tolui: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
			random_dynasty_member = {
				limit = {
					has_flag = line_of_chagatai
					emf_valid_mongol_heir_for_ROOT = yes
					NOT = {
						any_dynasty_member = {
							NOT = { character = PREV }
							has_flag = line_of_chagatai
							emf_valid_mongol_heir_for_ROOT = yes
							is_older_than = PREV
						}
					}
				}
				save_event_target_as = emf_mongol_heir_3
				log = "----> 3rd heir is the eldest of the line of Chagatai: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		else = {
			log = "--> dying khan was NOT Temujin: searching for heirs..."
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_1 = { always = yes } } }
			current_heir = {
				if = {
					limit = {
						NOR = {
							trait = craven
							trait = content
							trait = humble
							is_infertile_trigger = yes
							is_dumb_trigger = yes
							is_weak_trigger = yes
							has_severe_disability_trigger = yes
							character = event_target:emf_mongol_heir_2
							character = event_target:emf_mongol_heir_3
						}
					}
					save_event_target_as = emf_mongol_heir_1
					log = "----> 1st heir is simply the current heir: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
				}
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_1 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					ROOT = { NOT = { has_flag = line_of_jochi } }
					has_flag = line_of_jochi
					emf_valid_mongol_heir_for_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_2
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_2
								character = event_target:emf_mongol_heir_3
							}
							has_flag = line_of_jochi
							emf_valid_mongol_heir_for_ROOT = yes
							is_older_than = PREV
						}
					}
				}
				save_event_target_as = emf_mongol_heir_1
				log = "----> 1st heir is the eldest of the line of Jochi (but dying khan was not of Jochi's line): [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_2 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					ROOT = { NOT = { has_flag = line_of_tolui } }
					has_flag = line_of_tolui
					emf_valid_mongol_heir_for_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_3
							}
							has_flag = line_of_tolui
							emf_valid_mongol_heir_for_ROOT = yes
							is_older_than = PREV
						}
					}
				}
				save_event_target_as = emf_mongol_heir_2
				log = "----> 2nd heir is the eldest of the line of Tolui (but dying khan was not of Tolui's line): [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_3 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					ROOT = { NOT = { has_flag = line_of_chagatai } }
					has_flag = line_of_chagatai
					emf_valid_mongol_heir_for_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_2
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_2
							}
							has_flag = line_of_chagatai
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
						}
					}
				}
				save_event_target_as = emf_mongol_heir_3
				log = "----> 3rd heir is the eldest of the line of Chagatai (but dying khan was not of Chagatai's line): [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}

		# Otherwise assign areas
		# Give Golden Horde to someone who's already a king in that region
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_1 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = KING
					emf_valid_mongol_heir_for_ROOT = yes
					emf_child_or_heir_grandchild_of_ROOT = yes
					capital_scope = { emf_golden_horde_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_2
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_2
								character = event_target:emf_mongol_heir_3
							}
							tier = KING
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							emf_child_or_heir_grandchild_of_ROOT = yes
							capital_scope = { emf_golden_horde_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_1
				log = "----> 1st heir is the eldest dynastic KING whose capital is in the Golden Horde region and is also a close descendant of dying khan: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_1 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = KING
					emf_valid_mongol_heir_for_ROOT = yes
					capital_scope = { emf_golden_horde_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_2
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_2
								character = event_target:emf_mongol_heir_3
							}
							tier = KING
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							capital_scope = { emf_golden_horde_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_1
				log = "----> 1st heir is the eldest dynastic KING whose capital is in the Golden Horde region: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		# Give Golden Horde to someone who's already a duke in that region
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_1 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = DUKE
					emf_valid_mongol_heir_for_ROOT = yes
					emf_child_or_heir_grandchild_of_ROOT = yes
					capital_scope = { emf_golden_horde_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_2
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_2
								character = event_target:emf_mongol_heir_3
							}
							tier = DUKE
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							emf_child_or_heir_grandchild_of_ROOT = yes
							capital_scope = { emf_golden_horde_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_1
				log = "----> 1st heir is the eldest dynastic DUKE whose capital is in the Golden Horde region and is also a close descendant of dying khan: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_1 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = DUKE
					emf_valid_mongol_heir_for_ROOT = yes
					capital_scope = { emf_golden_horde_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_2
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_2
								character = event_target:emf_mongol_heir_3
							}
							tier = DUKE
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							capital_scope = { emf_golden_horde_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_1
				log = "----> 1st heir is the eldest dynastic DUKE whose capital is in the Golden Horde region: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		# Otherwise give Golden Horde to eldest available heir
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_1 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					emf_valid_mongol_heir_for_ROOT = yes
					emf_child_or_heir_grandchild_of_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_2
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_2
								character = event_target:emf_mongol_heir_3
							}
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							emf_child_or_heir_grandchild_of_ROOT = yes
						}
					}
				}
				save_event_target_as = emf_mongol_heir_1
				log = "----> 1st heir is the eldest available dynastic heir (variant #1): [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_1 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					emf_valid_mongol_heir_for_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_2
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_2
								character = event_target:emf_mongol_heir_3
							}
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
						}
					}
				}
				save_event_target_as = emf_mongol_heir_1
				log = "----> 1st heir is the eldest available dynastic heir: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_1 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					emf_valid_mongol_heir_for_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_2
						character = event_target:emf_mongol_heir_3
					}
				}
				save_event_target_as = emf_mongol_heir_1
				log = "----> 1st heir is some valid dynastic heir (fallback): [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		# Give Il-Khanate to someone who's already a king in that region
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_2 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = KING
					emf_valid_mongol_heir_for_ROOT = yes
					emf_child_or_heir_grandchild_of_ROOT = yes
					capital_scope = { emf_il_khanate_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_3
							}
							tier = KING
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							emf_child_or_heir_grandchild_of_ROOT = yes
							capital_scope = { emf_il_khanate_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_2
				log = "----> 2nd heir is the eldest dynastic KING whose capital is in the il-Khanate region and is also a close descendant of dying khan: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_2 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = KING
					emf_valid_mongol_heir_for_ROOT = yes
					capital_scope = { emf_il_khanate_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_3
							}
							tier = KING
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							capital_scope = { emf_il_khanate_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_2
				log = "----> 2nd heir is the eldest dynastic KING whose capital is in the il-Khanate region: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		# Give Il-Khanate to someone who's already a duke in that region
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_2 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = DUKE
					emf_valid_mongol_heir_for_ROOT = yes
					emf_child_or_heir_grandchild_of_ROOT = yes
					capital_scope = { emf_il_khanate_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_3
							}
							tier = DUKE
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							emf_child_or_heir_grandchild_of_ROOT = yes
							capital_scope = { emf_il_khanate_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_2
				log = "----> 2nd heir is the eldest dynastic DUKE whose capital is in the il-Khanate region and is also a close descendant of dying khan: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_2 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = DUKE
					emf_valid_mongol_heir_for_ROOT = yes
					capital_scope = { emf_il_khanate_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_3
							}
							tier = DUKE
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							capital_scope = { emf_il_khanate_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_2
				log = "----> 2nd heir is the eldest dynastic DUKE whose capital is in the il-Khanate region: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		# Otherwise give Il-Khanate to heir or eldest available heir
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_2 = { always = yes } } }
			current_heir = {
				if = {
					limit = {
						NOR = {
							character = event_target:emf_mongol_heir_1
							character = event_target:emf_mongol_heir_3
						}
					}
					save_event_target_as = emf_mongol_heir_2
					log = "----> 2nd heir is simply the current_heir: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
				}
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_2 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					emf_valid_mongol_heir_for_ROOT = yes
					emf_child_or_heir_grandchild_of_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_3
							}
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							emf_child_or_heir_grandchild_of_ROOT = yes
						}
					}
				}
				save_event_target_as = emf_mongol_heir_2
				log = "----> 2nd heir is the eldest available dynastic heir (variant #1): [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_2 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					emf_valid_mongol_heir_for_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_3
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_3
							}
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
						}
					}
				}
				save_event_target_as = emf_mongol_heir_2
				log = "----> 2nd heir is the eldest available dynastic heir: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_2 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					emf_valid_mongol_heir_for_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_3
					}
				}
				save_event_target_as = emf_mongol_heir_2
				log = "----> 2nd heir is some valid dynastic heir (fallback): [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		# Give Chagatai to someone who's already a king in that region
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_3 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = KING
					emf_valid_mongol_heir_for_ROOT = yes
					emf_child_or_heir_grandchild_of_ROOT = yes
					capital_scope = { emf_chagatai_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_2
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_2
							}
							tier = KING
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							emf_child_or_heir_grandchild_of_ROOT = yes
							capital_scope = { emf_chagatai_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_3
				log = "----> 3rd heir is the eldest dynastic KING whose capital is in the Chagatai region and is also a close descendant of dying khan: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_3 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = KING
					emf_valid_mongol_heir_for_ROOT = yes
					capital_scope = { emf_chagatai_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_2
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_2
							}
							tier = KING
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							capital_scope = { emf_chagatai_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_3
				log = "----> 3rd heir is the eldest dynastic KING whose capital is in the Chagatai region: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		# Give Chagatai to someone who's already a duke in that region
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_3 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = DUKE
					emf_valid_mongol_heir_for_ROOT = yes
					emf_child_or_heir_grandchild_of_ROOT = yes
					capital_scope = { emf_chagatai_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_2
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_2
							}
							tier = DUKE
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							emf_child_or_heir_grandchild_of_ROOT = yes
							capital_scope = { emf_chagatai_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_3
				log = "----> 3rd heir is the eldest dynastic DUKE whose capital is in the Chagatai region and is also a close descendant of dying khan: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_3 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					tier = DUKE
					emf_valid_mongol_heir_for_ROOT = yes
					capital_scope = { emf_chagatai_province = yes }
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_2
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_2
							}
							tier = DUKE
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							capital_scope = { emf_chagatai_province = yes }
						}
					}
				}
				save_event_target_as = emf_mongol_heir_3
				log = "----> 3rd heir is the eldest dynastic DUKE whose capital is in the Chagatai region: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		# Otherwise give Chagatai to heir or eldest available heir
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_3 = { always = yes } } }
			current_heir = {
				if = {
					limit = {
						NOR = {
							character = event_target:emf_mongol_heir_1
							character = event_target:emf_mongol_heir_2
						}
					}
					save_event_target_as = emf_mongol_heir_3
					log = "----> 3rd heir is simply the current_heir: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
				}
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_3 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					emf_valid_mongol_heir_for_ROOT = yes
					emf_child_or_heir_grandchild_of_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_2
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_2
							}
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
							emf_child_or_heir_grandchild_of_ROOT = yes
						}
					}
				}
				save_event_target_as = emf_mongol_heir_3
				log = "----> 3rd heir is the eldest available dynastic heir (variant #1): [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_3 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					emf_valid_mongol_heir_for_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_2
						any_dynasty_member = {
							NOR = {
								character = PREV
								character = event_target:emf_mongol_heir_1
								character = event_target:emf_mongol_heir_2
							}
							is_older_than = PREV
							emf_valid_mongol_heir_for_ROOT = yes
						}
					}
				}
				save_event_target_as = emf_mongol_heir_3
				log = "----> 3rd heir is the eldest available dynastic heir: [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
		if = {
			limit = { NOT = { event_target:emf_mongol_heir_3 = { always = yes } } }
			random_dynasty_member = {
				limit = {
					emf_valid_mongol_heir_for_ROOT = yes
					NOR = {
						character = event_target:emf_mongol_heir_1
						character = event_target:emf_mongol_heir_2
					}
				}
				save_event_target_as = emf_mongol_heir_3
				log = "----> 3rd heir is some valid dynastic heir (fallback): [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}

		log = "--> heir selection complete:"
		log = "----> Golden Horde (#1): [emf_mongol_heir_1.GetTitledFirstName] [emf_mongol_heir_1.GetOnlyDynastyName] (#[emf_mongol_heir_1.GetID]/[emf_mongol_heir_1.PrimaryTitle.GetID])"
		log = "----> il-Khanate (#2): [emf_mongol_heir_2.GetTitledFirstName] [emf_mongol_heir_2.GetOnlyDynastyName] (#[emf_mongol_heir_2.GetID]/[emf_mongol_heir_2.PrimaryTitle.GetID])"
		log = "----> Chagatai (#3): [emf_mongol_heir_3.GetTitledFirstName] [emf_mongol_heir_3.GetOnlyDynastyName] (#[emf_mongol_heir_3.GetID]/[emf_mongol_heir_3.PrimaryTitle.GetID])"

		if = {
			limit = {
				NAND = {
					event_target:emf_mongol_heir_1 = { always = yes }
					event_target:emf_mongol_heir_2 = { always = yes }
					event_target:emf_mongol_heir_3 = { always = yes }
				}
			}
			log = "--> ASSERT: at least one of the three heirs wasn't assigned!"
		}

		### Now do the actual transfer to the new horde titles

		# Locate the capital provinces for the three titles
		# NOTE: it's done this way to accommodate both SWMH and vanilla, which use different counties
		e_golden_horde = { capital_scope = { county = { save_event_target_as = golden_horde_capital } } }
		e_il-khanate = { capital_scope = { county = { save_event_target_as = il_khanate_capital } } }
		e_chagatai = { capital_scope = { county = { save_event_target_as = chagatai_capital } } }

		log = "--> successor title capitals (preferred / de jure):"
		log = "----> Golden Horde: [golden_horde_capital.GetBaseName] (#[golden_horde_capital.Location.GetID]/[golden_horde_capital.GetID])"
		log = "----> il-Khanate: [il_khanate_capital.GetBaseName] (#[il_khanate_capital.Location.GetID]/[il_khanate_capital.GetID])"
		log = "----> Chagatai: [chagatai_capital.GetBaseName] (#[chagatai_capital.Location.GetID]/[chagatai_capital.GetID])"

		if = {
			limit = { NOT = { event_target:golden_horde_capital = { location = { emf_golden_horde_province = yes } } } }
			log = "--> ASSERT: Golden Horde capital is not in its region!"
		}
		if = {
			limit = { NOT = { event_target:il_khanate_capital = { location = { emf_il_khanate_province = yes } } } }
			log = "--> ASSERT: il-Khanate capital is not in its region!"
		}
		if = {
			limit = { NOT = { event_target:chagatai_capital = { location = { emf_chagatai_province = yes } } } }
			log = "--> ASSERT: Chagatai capital is not in its region!"
		}

		# Heirs immediately get new dynasties
		event_target:emf_mongol_heir_1 = { emf_create_mongol_dynasty = yes }
		event_target:emf_mongol_heir_2 = { emf_create_mongol_dynasty = yes }
		event_target:emf_mongol_heir_3 = { emf_create_mongol_dynasty = yes }

		any_realm_province = { clr_flag = emf_capital_connected }

		log = "--> granting successor empires..."

		# Create the new horde titles
		e_golden_horde = {
			activate_title = { title = THIS status = yes }
			set_title_landless = { title = THIS status = yes }
			set_flag = temporary_landless_title
			grant_title = event_target:emf_mongol_heir_1
			copy_title_laws = e_mongol_empire
			make_primary_title = yes
		}

		if = {
			limit = { NOT = { e_golden_horde = { holder = event_target:emf_mongol_heir_1 } } }
			log = "----> ASSERT: failed to grant e_golden_horde"
		}
		if = {
			limit = { NOT = { e_golden_horde = { is_primary_holder_title = yes } } }
			log = "----> ASSERT: failed to switch primary title to e_golden_horde"
		}

		event_target:emf_mongol_heir_1 = {
			set_defacto_liege = THIS
			wealth = 5000
			prestige = 1000
			if = {
				limit = { has_dlc = "Horse Lords" }
				set_government_type = nomadic_government
				steal_population_scaled = { target = ROOT percentage = 0.75 }
				if = {
					limit = { is_nomadic = no }
					log = "----> ASSERT: failed to switch 1st heir's government to nomadic!"
				}
			}
			else = {
				set_government_type = tribal_government
				if = {
					limit = { is_tribal = no }
					log = "----> ASSERT: failed to switch 1st heir's government to tribal!"
				}
			}
		}

		e_il-khanate = {
			activate_title = { title = THIS status = yes }
			set_title_landless = { title = THIS status = yes }
			set_flag = temporary_landless_title
			copy_title_history = e_mongol_empire
			grant_title = event_target:emf_mongol_heir_2
			make_primary_title = yes
		}

		if = {
			limit = { NOT = { e_il-khanate = { holder = event_target:emf_mongol_heir_2 } } }
			log = "----> ASSERT: failed to grant e_il-khanate"
		}
		if = {
			limit = { NOT = { e_il-khanate = { is_primary_holder_title = yes } } }
			log = "----> ASSERT: failed to switch primary title to e_il-khanate"
		}

		event_target:emf_mongol_heir_2 = {
			set_defacto_liege = THIS
			wealth = 4000
			prestige = 800
			emf_switch_to_feudal_gov = yes
			if = {
				limit = { is_feudal = no }
				log = "----> ASSERT: failed to switch 2nd heir's government to feudal!"
			}
		}

		e_chagatai = {
			activate_title = { title = THIS status = yes }
			set_title_landless = { title = THIS status = yes }
			set_flag = temporary_landless_title
			grant_title = event_target:emf_mongol_heir_3
			copy_title_laws = e_mongol_empire
			make_primary_title = yes
		}

		if = {
			limit = { NOT = { e_chagatai = { holder = event_target:emf_mongol_heir_3 } } }
			log = "----> ASSERT: failed to grant e_chagatai"
		}
		if = {
			limit = { NOT = { e_chagatai = { is_primary_holder_title = yes } } }
			log = "----> ASSERT: failed to switch primary title to e_chagatai"
		}

		event_target:emf_mongol_heir_3 = {
			set_defacto_liege = THIS
			wealth = 1000
			prestige = 250
			if = {
				limit = { has_dlc = "Horse Lords" }
				set_government_type = nomadic_government
				steal_population_scaled = { target = ROOT percentage = 1.00 }
				if = {
					limit = { is_nomadic = no }
					log = "----> ASSERT: failed to switch 3rd heir's government to nomadic!"
				}
			}
			else = {
				set_government_type = tribal_government
				if = {
					limit = { is_tribal = no }
					log = "----> ASSERT: failed to switch 3rd heir's government to tribal!"
				}
			}
			if = {
				limit = { NOT = { dynasty = 7380 } }
				log = "--> e_chagatai shall be named Moghulistan since it is not Chagataid"
				e_chagatai = {
					set_name = MOGHUL
					adjective = MOGHUL_ADJ
				}
			}
		}

		log = "--> ensuring heirs get at least one county in their respective regions..."

		set_title_landless = { title = e_mongol_empire status = yes }

		# Ensure first heir gets at least one county in Golden Horde region
		if = {
			limit = {
				event_target:emf_mongol_heir_1 = { NOT = { any_demesne_province = { emf_golden_horde_province = yes } } }
			}
			random_realm_title = {
				limit = {
					OR = {
						title = event_target:golden_horde_capital
						AND = {
							tier = COUNT
							location = { emf_golden_horde_province = yes }
						}
					}
				}
				preferred_limit = {
					title = event_target:golden_horde_capital
				}
				preferred_limit = {
					owner = {
						ai = yes
						num_of_count_titles > 1
						NOT = { has_dynasty_flag = emf_is_historical }
					}
				}
				preferred_limit = {
					owner = {
						ai = yes
						num_of_count_titles > 1
					}
				}
				preferred_limit = {
					owner = {
						ai = yes
						NOT = { has_dynasty_flag = emf_is_historical }
					}
				}
				preferred_limit = {
					owner = { ai = yes }
				}
				preferred_limit = {
					owner = { num_of_count_titles > 1 }
				}
				grant_title = event_target:emf_mongol_heir_1
			}
		}

		if = {
			limit = {
				event_target:emf_mongol_heir_1 = { NOT = { any_demesne_province = { emf_golden_horde_province = yes } } }
			}
			log = "----> ASSERT: 1st heir was given no county in his region!"
		}

		# Ensure second heir gets at least one county (with a castle) in Il-Khanate region
		if = {
			limit = {
				event_target:emf_mongol_heir_2 = { NOT = { any_demesne_province = { emf_il_khanate_province = yes } } }
			}
			random_realm_title = {
				limit = {
					OR = {
						title = event_target:il_khanate_capital
						AND = {
							tier = COUNT
							location = { emf_il_khanate_province = yes }
						}
					}
				}
				preferred_limit = {
					title = event_target:il_khanate_capital
					location = { any_province_holding = { holding_type = castle } }
				}
				preferred_limit = {
					owner = {
						ai = yes
						num_of_count_titles > 1
						NOT = { has_dynasty_flag = emf_is_historical }
					}
					location = { any_province_holding = { holding_type = castle } }
				}
				preferred_limit = {
					owner = {
						ai = yes
						num_of_count_titles > 1
					}
					location = { any_province_holding = { holding_type = castle } }
				}
				preferred_limit = {
					owner = {
						ai = yes
						NOT = { has_dynasty_flag = emf_is_historical }
					}
					location = { any_province_holding = { holding_type = castle } }
				}
				preferred_limit = {
					owner = { ai = yes }
					location = { any_province_holding = { holding_type = castle } }
				}
				preferred_limit = {
					owner = { num_of_count_titles > 1 }
					location = { any_province_holding = { holding_type = castle } }
				}
				preferred_limit = {
					location = { any_province_holding = { holding_type = castle } }
				}
				preferred_limit = {
					title = event_target:il_khanate_capital
				}
				preferred_limit = {
					owner = {
						ai = yes
						num_of_count_titles > 1
						NOT = { has_dynasty_flag = emf_is_historical }
					}
				}
				preferred_limit = {
					owner = {
						ai = yes
						num_of_count_titles > 1
					}
				}
				preferred_limit = {
					owner = {
						ai = yes
						NOT = { has_dynasty_flag = emf_is_historical }
					}
				}
				preferred_limit = {
					owner = { ai = yes }
				}
				preferred_limit = {
					owner = { num_of_count_titles > 1 }
				}
				grant_title = event_target:emf_mongol_heir_2
			}
		}
		if = {
			limit = {
				event_target:emf_mongol_heir_2 = { NOT = { any_demesne_province = { emf_il_khanate_province = yes } } }
			}
			log = "----> ASSERT: 2nd heir was given no county in his region!"
		}
		else_if = {
			limit = {
				event_target:emf_mongol_heir_2 = {
					NOT = {
						any_demesne_province = {
							emf_il_khanate_province = yes
							any_province_holding = { holding_type = castle }
						}
					}
				}
			}
			log = "----> ASSERT: 2nd heir was given no county with a castle in his region!"
		}

		# Ensure third heir gets at least one county in Chagatai region
		if = {
			limit = {
				event_target:emf_mongol_heir_3 = { NOT = { any_demesne_province = { emf_chagatai_province = yes } } }
			}
			random_realm_title = {
				limit = {
					OR = {
						title = event_target:chagatai_capital
						AND = {
							tier = COUNT
							location = { emf_chagatai_province = yes }
						}
					}
				}
				preferred_limit = {
					title = event_target:chagatai_capital
				}
				preferred_limit = {
					owner = {
						ai = yes
						num_of_count_titles > 1
						NOT = { has_dynasty_flag = emf_is_historical }
					}
				}
				preferred_limit = {
					owner = {
						ai = yes
						num_of_count_titles > 1
					}
				}
				preferred_limit = {
					owner = {
						ai = yes
						NOT = { has_dynasty_flag = emf_is_historical }
					}
				}
				preferred_limit = {
					owner = { ai = yes }
				}
				preferred_limit = {
					owner = { num_of_count_titles > 1 }
				}
				grant_title = event_target:emf_mongol_heir_3
			}
		}
		if = {
			limit = {
				event_target:emf_mongol_heir_3 = { NOT = { any_demesne_province = { emf_chagatai_province = yes } } }
			}
			log = "----> ASSERT: 3rd heir was given no county in his region!"
		}

		log = "--> heirs will now exchange lands in each other's respective regions..."

		# Heirs that have lands in another's territory should give them up
		event_target:emf_mongol_heir_1 = {
			emf_grant_il_khanate_titles = yes
			emf_grant_chagatai_titles = yes
		}
		event_target:emf_mongol_heir_2 = {
			emf_grant_golden_horde_titles = yes
			emf_grant_chagatai_titles = yes
		}
		event_target:emf_mongol_heir_3 = {
			emf_grant_golden_horde_titles = yes
			emf_grant_il_khanate_titles = yes
		}

		log = "--> heirs will now exchange vassals in each other's respective regions..."

		# Divvy up the vassals
		any_vassal = {
			limit = { higher_tier_than = BARON }
			character_event = { id = emf_mongol.202 }
		}

		# Any generals and close relatives will be asked to serve a son
		any_courtier = {
			limit = {
				culture = ROOT
				OR = {
					is_close_relative = ROOT
					martial = 12
				}
				NOR = {
					character = event_target:emf_mongol_heir_1
					character = event_target:emf_mongol_heir_2
					character = event_target:emf_mongol_heir_3
				}
			}
			character_event = { id = emf_mongol.203 }
		}

		log = "--> now granting rest of non-primary titles to heirs..."

		# Give up non-primary titles now
		emf_grant_golden_horde_titles = yes
		emf_grant_il_khanate_titles = yes
		emf_grant_chagatai_titles = yes

		# Send events to heirs
		event_target:emf_mongol_heir_1 = { character_event = { id = emf_mongol.204 } }
		event_target:emf_mongol_heir_2 = { character_event = { id = emf_mongol.204 } }
		event_target:emf_mongol_heir_3 = { character_event = { id = emf_mongol.204 } }

		# Get rid of the remaining courtiers
		any_courtier = {
			limit = { prisoner = yes }
			random_list = {
				10 = { imprison = event_target:emf_mongol_heir_1 }
				10 = { imprison = event_target:emf_mongol_heir_2 }
				10 = { imprison = event_target:emf_mongol_heir_3 }
			}
		}
		any_courtier = {
			limit = { is_ruler = no }
			random_list = {
				10 = { move_character = event_target:emf_mongol_heir_1 }
				10 = { move_character = event_target:emf_mongol_heir_2 }
				10 = { move_character = event_target:emf_mongol_heir_3 }
			}
		}
		any_courtier = { banish = yes }

		if = {
			limit = { any_demesne_title = { NOR = { title = e_mongol_empire holding_type = nomad clan = yes } } }
			log = "--> WARNING: dying khan still has at least 1 regular title before succession:"
			any_demesne_title = {
				if = {
					limit = { holding_type = nomad }
					log = "----> [This.GetID] (nomad capital)"
				}
				else_if = {
					limit = { clan = yes }
					log = "----> [This.GetID] (clan title)"
				}
				else_if = {
					limit = { title = e_mongol_empire }
					log = "----> [This.GetID] (splitting empire title)"
				}
				else = {
					log = "----> [This.GetID]"
				}
				if = {
					limit = { is_occupied = yes }
					log = "------> title is occupied"
				}
				if = {
					limit = { has_siege = yes }
					log = "------> title is under siege"
				}
				if = {
					limit = { is_contested = yes }
					log = "------> title is contested"
				}
			}
		}
		# Failsafe for assert: make sure we get rid of ALL titles
		# Disabled for now, because we'd rather catch this as aberrant behavior sooner rather than later
		#any_demesne_title = {
		#	limit = { NOR = { title = e_mongol_empire holding_type = nomad clan = yes } }
		#	grant_title = event_target:mongol_heir_1
		#}

		# Cleanup the Mongol Empire title & our clan's title tomorrow after the inheritance and this major narrative event
		event_target:isis = { character_event = { id = emf_mongol.201 days = 1 } }

		clr_global_flag = jochi_dynasty_created
		clr_global_flag = chagatai_dynasty_created
		clr_global_flag = ogodei_dynasty_created
		clr_global_flag = tolui_dynasty_created
		any_character = {
			clr_flag = line_of_jochi
			clr_flag = line_of_chagatai
			clr_flag = line_of_ogodei
			clr_flag = line_of_tolui
		}
		any_landed_title = { clr_flag = emf_mongol_split_granted }

		# Send out the narrative!
		narrative_event = { id = emf_mongol.210 }
		any_player = {
			limit = { NOT = { character = ROOT } }
			narrative_event = { id = emf_mongol.210 }
		}
	}
}

character_event = {
	id = emf_mongol.201

	is_triggered_only = yes
	hide_window = yes
	
	religion = hip_religion

	trigger = {
		has_landed_title = e_hip
	}

	immediate = {
		# PARANOIA:
		event_target:emf_mongol_heir_1 = { set_defacto_liege = THIS }
		event_target:emf_mongol_heir_2 = { set_defacto_liege = THIS }
		event_target:emf_mongol_heir_3 = { set_defacto_liege = THIS }
		# Mostly paranoia:
		e_mongol_empire = {
			owner = {
				emf_grant_golden_horde_titles = yes
				emf_grant_il_khanate_titles = yes
				emf_grant_chagatai_titles = yes
				any_vassal = {
					limit = { clan = yes }
					emf_grant_golden_horde_titles = yes
					emf_grant_il_khanate_titles = yes
					emf_grant_chagatai_titles = yes
					if = {
						limit = { is_landed = no }
						character_event = { id = HL.130 } # Become a raiding adventurer
					}
					else = {
						clan_title = { emf_unsafe_destroy_title = yes }
						set_defacto_liege = THIS
					}
				}
				clan_title = { emf_unsafe_destroy_title = yes }
			}
			# Kill the title
			set_title_landless = { title = THIS status = no }
			emf_destroy_title = yes
			set_flag = emf_defunct # But never to be created again
		}
	}
}

# Mongol vassals receive notification of liege change
character_event = {
	id = emf_mongol.202
	picture = GFX_evt_mongols

	desc = {
		text = EVTDESC_emf_mongol_202_GHD
		trigger = { capital_scope = { emf_golden_horde_province = yes } }
	}
	desc = {
		text = EVTDESC_emf_mongol_202_IKH
		trigger = { capital_scope = { emf_il_khanate_province = yes } }
	}
	desc = {
		text = EVTDESC_emf_mongol_202_CHA
		trigger = { capital_scope = { emf_chagatai_province = yes } }
	}

	is_triggered_only = yes
	hide_from = yes
	
	immediate = {
		if = {
			limit = { capital_scope = { emf_golden_horde_province = yes } }
			if = {
				limit = {
					FROM = {
						OR = {
							character = event_target:emf_mongol_heir_1
							is_vassal_or_below_of = event_target:emf_mongol_heir_1
						}
					}
				}
				if = {
					limit = { NOT = { vassal_of = FROM } }
					set_defacto_liege = FROM
					emf_liege_change = yes
				}
			}
			else = {
				set_defacto_liege = event_target:emf_mongol_heir_1
				emf_liege_change = yes
			}
			if = {
				limit = { ai = yes }
				opinion = { who = event_target:emf_mongol_heir_1 modifier = opinion_loyal_vassal years = 10 }
			}
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_il_khanate_province = yes
							emf_chagatai_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
			any_courtier = {
				limit = { is_ruler = no }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_il_khanate_province = yes
								emf_chagatai_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
			any_vassal = {
				limit = { tier = BARON }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_il_khanate_province = yes
								emf_chagatai_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
			any_vassal = {
				limit = { higher_tier_than = BARON }
				character_event = { id = emf_mongol.202 }
			}
		}
		else_if = {
			limit = { capital_scope = { emf_il_khanate_province = yes } }
			if = {
				limit = { is_nomadic = yes }
				emf_switch_to_feudal_gov = yes
			}
			if = {
				limit = {
					FROM = {
						OR = {
							character = event_target:emf_mongol_heir_2
							is_vassal_or_below_of = event_target:emf_mongol_heir_2
						}
					}
				}
				if = {
					limit = { NOT = { vassal_of = FROM } }
					set_defacto_liege = FROM
					emf_liege_change = yes
				}
			}
			else = {
				set_defacto_liege = event_target:emf_mongol_heir_2
				emf_liege_change = yes
			}
			if = {
				limit = { ai = yes }
				opinion = { who = event_target:emf_mongol_heir_2 modifier = opinion_loyal_vassal years = 10 }
			}
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_golden_horde_province = yes
							emf_chagatai_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
			any_courtier = {
				limit = { is_ruler = no }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_golden_horde_province = yes
								emf_chagatai_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
			any_vassal = {
				limit = { tier = BARON }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_golden_horde_province = yes
								emf_chagatai_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
			any_vassal = {
				limit = { higher_tier_than = BARON }
				character_event = { id = emf_mongol.202 }
			}
		}
		else_if = {
			limit = { capital_scope = { emf_chagatai_province = yes } }
			if = {
				limit = {
					FROM = {
						OR = {
							character = event_target:emf_mongol_heir_3
							is_vassal_or_below_of = event_target:emf_mongol_heir_3
						}
					}
				}
				if = {
					limit = { NOT = { vassal_of = FROM } }
					set_defacto_liege = FROM
					emf_liege_change = yes
				}
			}
			else = {
				set_defacto_liege = event_target:emf_mongol_heir_3
				emf_liege_change = yes
			}
			if = {
				limit = { ai = yes }
				opinion = { who = event_target:emf_mongol_heir_3 modifier = opinion_loyal_vassal years = 10 }
			}
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_golden_horde_province = yes
							emf_il_khanate_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
			any_courtier = {
				limit = { is_ruler = no }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_golden_horde_province = yes
								emf_il_khanate_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
			any_vassal = {
				limit = { tier = BARON }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_golden_horde_province = yes
								emf_il_khanate_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
			any_vassal = {
				limit = { higher_tier_than = BARON }
				character_event = { id = emf_mongol.202 }
			}
		}
		else = {
			log = "ASSERT: emf_mongol.202: called for [This.EMF_GetDebugName], but [This.GetSheHe]'s capital is not in any Mongol successor state region!"
		}
	}

	option = {
		name = EVTOPTA_emf_mongol_202_GHD
		trigger = { capital_scope = { emf_golden_horde_province = yes } }
		tooltip = {
			if = {
				limit = {
					FROM = {
						OR = {
							character = event_target:emf_mongol_heir_1
							is_vassal_or_below_of = event_target:emf_mongol_heir_1
						}
					}
				}
				if = {
					limit = { NOT = { vassal_of = FROM } }
					set_defacto_liege = FROM
					emf_liege_change = yes
				}
			}
			else = {
				set_defacto_liege = event_target:emf_mongol_heir_1
				emf_liege_change = yes
			}
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_il_khanate_province = yes
							emf_chagatai_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
		}
	}
	option = {
		name = EVTOPTA_emf_mongol_202_IKH
		trigger = { capital_scope = { emf_il_khanate_province = yes } }
		tooltip = {
			if = {
				limit = { is_nomadic = yes }
				emf_switch_to_feudal_gov = yes
			}
			if = {
				limit = {
					FROM = {
						OR = {
							character = event_target:emf_mongol_heir_2
							is_vassal_or_below_of = event_target:emf_mongol_heir_2
						}
					}
				}
				if = {
					limit = { NOT = { vassal_of = FROM } }
					set_defacto_liege = FROM
					emf_liege_change = yes
				}
			}
			else = {
				set_defacto_liege = event_target:emf_mongol_heir_2
				emf_liege_change = yes
			}
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_golden_horde_province = yes
							emf_chagatai_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
		}
	}
	option = {
		name = EVTOPTA_emf_mongol_202_CHA
		trigger = { capital_scope = { emf_chagatai_province = yes } }
		tooltip = {
			if = {
				limit = {
					FROM = {
						OR = {
							character = event_target:emf_mongol_heir_3
							is_vassal_or_below_of = event_target:emf_mongol_heir_3
						}
					}
				}
				if = {
					limit = { NOT = { vassal_of = FROM } }
					set_defacto_liege = FROM
					emf_liege_change = yes
				}
			}
			else = {
				set_defacto_liege = event_target:emf_mongol_heir_3
				emf_liege_change = yes
			}
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_golden_horde_province = yes
							emf_il_khanate_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
		}
	}
}

# Courtiers are given the option to serve one of the heirs
character_event = {
	id = emf_mongol.203

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_adult = yes
		is_ruler = no
		prisoner = no
		OR = {
			is_female = no
			is_married_matrilineally = yes
		}
	}

	immediate = {
		random_list = {
			200 = {
				modifier = {
					factor = 0.1
					opinion_diff = { first = event_target:emf_mongol_heir_2 second = event_target:emf_mongol_heir_1 value = 10 as_if_liege = yes }
				}
				modifier = {
					factor = 0.1
					opinion_diff = { first = event_target:emf_mongol_heir_3 second = event_target:emf_mongol_heir_1 value = 10 as_if_liege = yes }
				}
				move_character = event_target:emf_mongol_heir_1
				opinion = { who = event_target:emf_mongol_heir_1 modifier = opinion_loyal_vassal years = 10 }
			}
			150 = {
				modifier = {
					factor = 0.1
					opinion_diff = { first = event_target:emf_mongol_heir_1 second = event_target:emf_mongol_heir_2 value = 10 as_if_liege = yes }
				}
				modifier = {
					factor = 0.1
					opinion_diff = { first = event_target:emf_mongol_heir_3 second = event_target:emf_mongol_heir_2 value = 10 as_if_liege = yes }
				}
				move_character = event_target:emf_mongol_heir_2
				opinion = { who = event_target:emf_mongol_heir_2 modifier = opinion_loyal_vassal years = 10 }
			}
			100 = {
				modifier = {
					factor = 0.1
					opinion_diff = { first = event_target:emf_mongol_heir_1 second = event_target:emf_mongol_heir_3 value = 10 as_if_liege = yes }
				}
				modifier = {
					factor = 0.1
					opinion_diff = { first = event_target:emf_mongol_heir_2 second = event_target:emf_mongol_heir_3 value = 10 as_if_liege = yes }
				}
				move_character = event_target:emf_mongol_heir_3
				opinion = { who = event_target:emf_mongol_heir_3 modifier = opinion_loyal_vassal years = 10 }
			}
		}

	}
}

# New mongol heirs are informed
character_event = {
	id = emf_mongol.204
	desc = EVTDESC_emf_mongol_204
	picture = GFX_evt_tengri_throneroom_oldgods

	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = { has_landed_title = e_golden_horde }
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_il_khanate_province = yes
							emf_chagatai_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
			opinion = { who = event_target:emf_mongol_heir_2 modifier = in_non_aggression_pact years = 50 }
			opinion = { who = event_target:emf_mongol_heir_3 modifier = in_non_aggression_pact years = 50 }
			capital_scope = { save_event_target_as = emf_target_province }
			while = {
				count = 30
				limit = { always = yes }
				emf_mongol_spawn_unit = yes
			}
			any_courtier = {
				limit = { is_ruler = no }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_il_khanate_province = yes
								emf_chagatai_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
			any_vassal = {
				limit = { tier = BARON }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_il_khanate_province = yes
								emf_chagatai_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
		}
		else_if = {
			limit = { has_landed_title = e_il-khanate }
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_golden_horde_province = yes
							emf_chagatai_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
			opinion = { who = event_target:emf_mongol_heir_1 modifier = in_non_aggression_pact years = 50 }
			opinion = { who = event_target:emf_mongol_heir_3 modifier = in_non_aggression_pact years = 50 }
			capital_scope = { save_event_target_as = emf_target_province }
			while = {
				count = 24
				limit = { always = yes }
				emf_mongol_spawn_unit = yes
			}
			any_courtier = {
				limit = { is_ruler = no }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_golden_horde_province = yes
								emf_chagatai_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
			any_vassal = {
				limit = { tier = BARON }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_golden_horde_province = yes
								emf_chagatai_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
		}
		else_if = {
			limit = { has_landed_title = e_chagatai }
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_golden_horde_province = yes
							emf_il_khanate_province = yes
						}
					}
				}
				limit = { capital_scope = { emf_il_khanate_province = yes } }
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
			opinion = { who = event_target:emf_mongol_heir_1 modifier = in_non_aggression_pact years = 50 }
			opinion = { who = event_target:emf_mongol_heir_2 modifier = in_non_aggression_pact years = 50 }
			capital_scope = { save_event_target_as = emf_target_province }
			while = {
				count = 7
				limit = { always = yes }
				emf_mongol_spawn_unit = yes
			}
			any_courtier = {
				limit = { is_ruler = no }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_golden_horde_province = yes
								emf_il_khanate_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
			any_vassal = {
				limit = { tier = BARON }
				any_claim = {
					limit = {
						capital_scope = {
							OR = {
								emf_golden_horde_province = yes
								emf_il_khanate_province = yes
							}
						}
					}
					remove_claim = PREV
				}
				e_mongol_empire = { remove_claim = PREV }
			}
		}
		else = {
			log = "ASSERT: emf_mongol.204 called for [This.EMF_GetDebugName], but [This.GetSheHe] is not the leader of a Mongol successor state!"
			break = yes
		}
		emf_create_courtiers = yes
		character_event = { id = emf_mongol.105 } # Establish contiguous provinces
		character_event = { id = emf_mongol.205 days = 1 } # Surrender cut-off realm provinces
	}

	option = {
		name = EVTOPTA_emf_mongol_204
		trigger = { has_landed_title = e_golden_horde }
		if = {
			limit = { trait = craven }
			remove_trait = craven
		}
		if = {
			limit = { trait = content }
			remove_trait = content
		}
		if = {
			limit = { trait = humble }
			remove_trait = humble
		}
		custom_tooltip = { text = ESTABLISH_CADET_BRANCH }
		tooltip = {
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_il_khanate_province = yes
							emf_chagatai_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
			opinion = { who = event_target:emf_mongol_heir_2 modifier = in_non_aggression_pact years = 50 }
			opinion = { who = event_target:emf_mongol_heir_3 modifier = in_non_aggression_pact years = 50 }
		}
	}
	option = {
		name = EVTOPTA_emf_mongol_204
		trigger = { has_landed_title = e_il-khanate }
		if = {
			limit = { trait = craven }
			remove_trait = craven
		}
		if = {
			limit = { trait = content }
			remove_trait = content
		}
		if = {
			limit = { trait = humble }
			remove_trait = humble
		}
		custom_tooltip = { text = ESTABLISH_CADET_BRANCH }
		tooltip = {
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_golden_horde_province = yes
							emf_chagatai_province = yes
						}
					}
				}
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
			opinion = { who = event_target:emf_mongol_heir_1 modifier = in_non_aggression_pact years = 50 }
			opinion = { who = event_target:emf_mongol_heir_3 modifier = in_non_aggression_pact years = 50 }
		}
	}
	option = {
		name = EVTOPTA_emf_mongol_204
		trigger = { has_landed_title = e_chagatai }
		if = {
			limit = { trait = craven }
			remove_trait = craven
		}
		if = {
			limit = { trait = content }
			remove_trait = content
		}
		if = {
			limit = { trait = humble }
			remove_trait = humble
		}
		custom_tooltip = { text = ESTABLISH_CADET_BRANCH }
		tooltip = {
			any_claim = {
				limit = {
					capital_scope = {
						OR = {
							emf_golden_horde_province = yes
							emf_il_khanate_province = yes
						}
					}
				}
				limit = { capital_scope = { emf_il_khanate_province = yes } }
				remove_claim = ROOT
			}
			e_mongol_empire = { remove_claim = ROOT }
			opinion = { who = event_target:emf_mongol_heir_1 modifier = in_non_aggression_pact years = 50 }
			opinion = { who = event_target:emf_mongol_heir_2 modifier = in_non_aggression_pact years = 50 }
		}
	}
}

# The heirs surrender cut-off provinces in their realm
character_event = {
	id = emf_mongol.205

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# First grant disconnected titles to the owners of their region
		any_realm_lord = {
			limit = {
				ai = yes
				any_demesne_province = {
					NOT = { has_flag = emf_mongol_connected }
					OR = {
						AND = {
							ROOT = { has_landed_title = e_golden_horde }
							emf_golden_horde_province = no
						}
						AND = {
							ROOT = { has_landed_title = e_il-khanate }
							emf_il_khanate_province = no
						}
						AND = {
							ROOT = { has_landed_title = e_chagatai }
							emf_chagatai_province = no
						}
					}
				}
			}
			if = {
				limit = { capital_scope = { emf_golden_horde_province = yes } }
				any_demesne_title = {
					limit = {
						trigger_if = {
							limit = { higher_tier_than = COUNT }
							capital_scope = {
								NOT = { has_flag = emf_mongol_connected }
								emf_il_khanate_province = yes
							}
						}
						trigger_else = {
							location = {
								NOT = { has_flag = emf_mongol_connected }
								emf_il_khanate_province = yes
							}
						}
					}
					grant_title = event_target:emf_mongol_heir_2
				}
				any_demesne_title = {
					limit = {
						trigger_if = {
							limit = { higher_tier_than = COUNT }
							capital_scope = {
								NOT = { has_flag = emf_mongol_connected }
								emf_chagatai_province = yes
							}
						}
						trigger_else = {
							location = {
								NOT = { has_flag = emf_mongol_connected }
								emf_chagatai_province = yes
							}
						}
					}
					grant_title = event_target:emf_mongol_heir_3
				}
				if = {
					limit = { NOT = { top_liege = { character = event_target:emf_mongol_heir_1 } } }
					set_defacto_liege = event_target:emf_mongol_heir_1
					emf_liege_change = yes
				}
			}
			else_if = {
				limit = { capital_scope = { emf_il_khanate_province = yes } }
				any_demesne_title = {
					limit = {
						trigger_if = {
							limit = { higher_tier_than = COUNT }
							capital_scope = {
								NOT = { has_flag = emf_mongol_connected }
								emf_golden_horde_province = yes
							}
						}
						trigger_else = {
							location = {
								NOT = { has_flag = emf_mongol_connected }
								emf_golden_horde_province = yes
							}
						}
					}
					grant_title = event_target:emf_mongol_heir_1
				}
				any_demesne_title = {
					limit = {
						trigger_if = {
							limit = { higher_tier_than = COUNT }
							capital_scope = {
								NOT = { has_flag = emf_mongol_connected }
								emf_chagatai_province = yes
							}
						}
						trigger_else = {
							location = {
								NOT = { has_flag = emf_mongol_connected }
								emf_chagatai_province = yes
							}
						}
					}
					grant_title = event_target:emf_mongol_heir_3
				}
				if = {
					limit = { NOT = { top_liege = { character = event_target:emf_mongol_heir_2 } } }
					set_defacto_liege = event_target:emf_mongol_heir_2
					emf_liege_change = yes
				}
			}
			else_if = {
				limit = { capital_scope = { emf_chagatai_province = yes } }
				any_demesne_title = {
					limit = {
						trigger_if = {
							limit = { higher_tier_than = COUNT }
							capital_scope = {
								NOT = { has_flag = emf_mongol_connected }
								emf_golden_horde_province = yes
							}
						}
						trigger_else = {
							location = {
								NOT = { has_flag = emf_mongol_connected }
								emf_golden_horde_province = yes
							}
						}
					}
					grant_title = event_target:emf_mongol_heir_1
				}
				any_demesne_title = {
					limit = {
						trigger_if = {
							limit = { higher_tier_than = COUNT }
							capital_scope = {
								NOT = { has_flag = emf_mongol_connected }
								emf_il_khanate_province = yes
							}
						}
						trigger_else = {
							location = {
								NOT = { has_flag = emf_mongol_connected }
								emf_il_khanate_province = yes
							}
						}
					}
					grant_title = event_target:emf_mongol_heir_2
				}
				if = {
					limit = { NOT = { top_liege = { character = event_target:emf_mongol_heir_3 } } }
					set_defacto_liege = event_target:emf_mongol_heir_3
					emf_liege_change = yes
				}
			}
		}

		# Re-evaluate and clean-up
		character_event = { id = emf_mongol.105 days = 1 }
		character_event = { id = emf_mongol.206 days = 2 }
		character_event = { id = emf_mongol.207 days = 3 }
	}
}

# Clean-up events
character_event = {
	id = emf_mongol.206

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# First transfer vassals wholesale if possible instead of transfering county ownership directly
		while = {
			limit = {
				any_realm_lord = {
					higher_real_tier_than = BARON
					is_patrician = no
					is_nomadic = no
					ai = yes
					NOT = {
						any_realm_province = {
							owner_under_PREV = yes
							has_flag = emf_mongol_connected
						}
					}
					any_realm_province = {
						owner_under_PREV = yes
						any_neighbor_province = {
							has_flag = emf_mongol_connected
							owner_under_ROOT = no
							owner = {
								top_liege = {
									OR = {
										character = event_target:emf_mongol_heir_1
										character = event_target:emf_mongol_heir_2
										character = event_target:emf_mongol_heir_3
									}
								}
							}
						}
					}
				}
			}
			random_realm_lord = {
				limit = {
					higher_real_tier_than = BARON
					is_patrician = no
					is_nomadic = no
					ai = yes
					NOT = {
						any_realm_province = {
							owner_under_PREV = yes
							has_flag = emf_mongol_connected
						}
					}
					any_realm_province = {
						owner_under_PREV = yes
						any_neighbor_province = {
							has_flag = emf_mongol_connected
							owner_under_ROOT = no
							owner = {
								top_liege = {
									OR = {
										character = event_target:emf_mongol_heir_1
										character = event_target:emf_mongol_heir_2
										character = event_target:emf_mongol_heir_3
									}
								}
							}
						}
					}
				}
				preferred_limit = {
					real_tier = KING
				}
				preferred_limit = {
					real_tier = DUKE
				}
				set_variable = { which = emf_num_provinces_bordering_mongol_heir_1 value = 0 }
				set_variable = { which = emf_num_provinces_bordering_mongol_heir_2 value = 0 }
				set_variable = { which = emf_num_provinces_bordering_mongol_heir_3 value = 0 }
				any_realm_province = {
					limit = {
						owner_under_PREV = yes
						any_neighbor_province = {
							has_flag = emf_mongol_connected
							owner_under_ROOT = no
							owner = {
								top_liege = {
									OR = {
										character = event_target:emf_mongol_heir_1
										character = event_target:emf_mongol_heir_2
										character = event_target:emf_mongol_heir_3
									}
								}
							}
						}
					}
					if = {
						limit = {
							any_neighbor_province = {
								has_flag = emf_mongol_connected
								owner_under_ROOT = no
								owner = { top_liege = { character = event_target:emf_mongol_heir_1 } }
							}
						}
						PREV = { change_variable = { which = emf_num_provinces_bordering_mongol_heir_1 value = 1 } }
					}
					if = {
						limit = {
							any_neighbor_province = {
								has_flag = emf_mongol_connected
								owner_under_ROOT = no
								owner = { top_liege = { character = event_target:emf_mongol_heir_2 } }
							}
						}
						PREV = { change_variable = { which = emf_num_provinces_bordering_mongol_heir_2 value = 1 } }
					}
					if = {
						limit = {
							any_neighbor_province = {
								has_flag = emf_mongol_connected
								owner_under_ROOT = no
								owner = { top_liege = { character = event_target:emf_mongol_heir_3 } }
							}
						}
						PREV = { change_variable = { which = emf_num_provinces_bordering_mongol_heir_3 value = 1 } }
					}
				}
				if = {
					limit = { check_variable = { which = emf_num_provinces_bordering_mongol_heir_1 which = emf_num_provinces_bordering_mongol_heir_2 } }
					if = {
						limit = { check_variable = { which = emf_num_provinces_bordering_mongol_heir_1 which = emf_num_provinces_bordering_mongol_heir_3 } }
						event_target:emf_mongol_heir_1 = { save_event_target_as = loop_mongol_heir }
					}
					else = {
						event_target:emf_mongol_heir_3 = { save_event_target_as = loop_mongol_heir }
					}
				}
				else_if = {
					limit = { check_variable = { which = emf_num_provinces_bordering_mongol_heir_2 which = emf_num_provinces_bordering_mongol_heir_3 } }
					event_target:emf_mongol_heir_2 = { save_event_target_as = loop_mongol_heir }
				}
				else = {
					event_target:emf_mongol_heir_3 = { save_event_target_as = loop_mongol_heir }
				}
				any_realm_province = {
					limit = {
						owner_under_PREV = yes
						any_neighbor_province = {
							has_flag = emf_mongol_connected
							owner_under_ROOT = no
							owner = { top_liege = { character = event_target:loop_mongol_heir } }
						}
					}
					set_flag = emf_mongol_connected
				}
				while = {
					limit = {
						any_realm_province = {
							owner_under_PREV = yes
							NOT = { has_flag = emf_mongol_connected }
							any_neighbor_province = {
								has_flag = emf_mongol_connected
								owner_under_PREVPREV = yes
							}
						}
					}
					any_realm_province = {
						limit = {
							owner_under_PREV = yes
							NOT = { has_flag = emf_mongol_connected }
							any_neighbor_province = {
								has_flag = emf_mongol_connected
								owner_under_PREVPREV = yes
							}
						}
						set_flag = emf_mongol_connected
					}
				}
				set_defacto_liege = event_target:loop_mongol_heir
				emf_liege_change = yes
				set_variable = { which = emf_num_provinces_bordering_mongol_heir_1 value = 0 }
				set_variable = { which = emf_num_provinces_bordering_mongol_heir_2 value = 0 }
				set_variable = { which = emf_num_provinces_bordering_mongol_heir_3 value = 0 }
				clear_event_target = loop_mongol_heir
			}
		}
		# Then transfer individual titles
		while = {
			limit = {
				any_realm_title = {
					tier = COUNT
					holder_scope = { ai = yes }
					location = {
						NOT = { has_flag = emf_mongol_connected }
						any_neighbor_province = {
							has_flag = emf_mongol_connected
							owner_under_ROOT = no
							owner = {
								top_liege = {
									OR = {
										character = event_target:emf_mongol_heir_1
										character = event_target:emf_mongol_heir_2
										character = event_target:emf_mongol_heir_3
									}
								}
							}
						}
					}
				}
			}
			random_realm_title = {
				limit = {
					tier = COUNT
					holder_scope = { ai = yes }
					location = {
						NOT = { has_flag = emf_mongol_connected }
						any_neighbor_province = {
							has_flag = emf_mongol_connected
							owner_under_ROOT = no
							owner = {
								top_liege = {
									OR = {
										character = event_target:emf_mongol_heir_1
										character = event_target:emf_mongol_heir_2
										character = event_target:emf_mongol_heir_3
									}
								}
							}
						}
					}
				}
				location = {
					set_flag = emf_mongol_connected
					random_neighbor_province = {
						limit = {
							has_flag = emf_mongol_connected
							owner_under_ROOT = no
							owner = {
								top_liege = {
									OR = {
										character = event_target:emf_mongol_heir_1
										character = event_target:emf_mongol_heir_2
										character = event_target:emf_mongol_heir_3
									}
								}
							}
						}
						owner = { top_liege = { grant_title = PREVPREVPREVPREV } }
					}
				}
			}
		}
	}
}

character_event = {
	id = emf_mongol.207

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		any_realm_province = { clr_flag = emf_mongol_connected }
		character_event = { id = emf_core.65 } # Recalculate official capital-connected flags
	}
}

# emf_mongol.210 -- announcement event for the mongol empire split; FROM is the dying khan;
# emf_mongol_heir_[123] targets are the new khans of the new 3-way empire split
narrative_event = {
	id = emf_mongol.210
	desc = EVTDESC_emf_mongol_210
	picture = GFX_evt_mongols

	title = {
		text = EVTNAME_emf_mongol_210
		trigger = { FROM = { NOT = { has_character_modifier = greatest_of_khans } } }
	}
	title = {
		text = EVTNAME_emf_mongol_210_genghis
		trigger = { FROM = { has_character_modifier = greatest_of_khans } }
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA_emf_mongol_210
		trigger = { character = FROM }
	}
	option = {
		name = EVTOPTB_emf_mongol_210
		trigger = {
			NOT = { character = FROM }
			OR = {
				culture = mongol
				same_realm = FROM
			}
		}
		tooltip = {
			event_target:emf_mongol_heir_1 = { custom_tooltip = { text = NOTIFY_TOOLTIP } }
			event_target:emf_mongol_heir_2 = { custom_tooltip = { text = NOTIFY_TOOLTIP } }
			event_target:emf_mongol_heir_3 = { custom_tooltip = { text = NOTIFY_TOOLTIP } }
		}
	}
	option = {
		name = EVTOPTC_emf_mongol_210
		trigger = {
			NOR = {
				character = FROM
				culture = mongol
				same_realm = FROM
			}
		}
		tooltip = {
			event_target:emf_mongol_heir_1 = { custom_tooltip = { text = NOTIFY_TOOLTIP } }
			event_target:emf_mongol_heir_2 = { custom_tooltip = { text = NOTIFY_TOOLTIP } }
			event_target:emf_mongol_heir_3 = { custom_tooltip = { text = NOTIFY_TOOLTIP } }
		}
	}
}

###############################################
#   MONGOL INVASION EVENTS ("PILLAGE-BURN")   #
###############################################

# IDs reserved within emf_mongol: 1000-1099


# emf_mongol.1000 [Mongol Emperor] -- Declare war when the Horde first arrives.
character_event = {
	id = emf_mongol.1000

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		event_target:emf_target_province = {
			owner = { top_liege = { save_event_target_as = emf_defender } }
			kingdom = { save_event_target_as = emf_title }
		}
		set_flag = emf_cb_pass_tmp
		war = {
			casus_belli = emf_mongol_invasion
			target = event_target:emf_defender
			thirdparty_title = event_target:emf_title
			infamy = 0
		}
		event_target:emf_defender = {
			character_event = { id = emf_mongol.1001 days = 1 } # Verify war happened (debugging only)
		}
	}
}

# emf_mongol.1001 [Intended Defender vs. Mongol Emperor] -- Check that war was successfully declared.
character_event = {
	id = emf_mongol.1001

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				NOT = {
					any_war = {
						attacker = { character = FROM }
						defender = { character = ROOT }
						using_cb = emf_mongol_invasion
					}
				}
			}
			log = "WARNING: emf_mongol.1001: script-declared emf_mongol_invasion (by #[From.GetID]/[From.PrimaryTitle.GetID]) failed to work vs. [Root.GetTitledFirstName] of [Root.PrimaryTitle.GetBaseName] (#[Root.GetID]/[Root.PrimaryTitle.GetID])"
		}
	}
}

# emf_mongol.1010 [Mongol Emperor] -- Main mission tick event for the mongol invasion.
character_event = {
	id = emf_mongol.1010

	hide_window = yes

	only_independent = yes
	culture = mongol
	only_capable = yes
	min_age = 16
	prisoner = no
	war = no
	ai = yes

	trigger = {
		emf_mongol_invasion_mission = yes
		# Just adding these from the pre-trigger for `testevent` convenience:
		culture = mongol
		is_incapable = no
		age = 16
		war = no
		ai = yes
		# The `testevent` redundancy ends here:
		has_regent = no

		# Not if we're over our vassal limit
		custom_tooltip = {
			text = MONGOLS_HAVE_SPARE_VASSAL_LIMIT
			hidden_tooltip = {
				NOT = { over_vassal_limit = 0 }
			}
		}

		# Don't consider invasion until it's been awhile since last successful invasion ended
		custom_tooltip = {
			text = MONGOLS_HAVE_NO_INVASION_COOLDOWN
			hidden_tooltip = {
				OR = {
					NOT = { has_flag = emf_mongol_invasion_war_won }
					NOT = { # No cooldown during first 30yr
						had_global_flag = {
							flag = mongol_empire_arrival
							days = 10950
						}
					}
					AND = {
						NOT = { # Minimal cooldown during first 30-60yrs
							had_global_flag = {
								flag = mongol_empire_arrival
								days = 21900
							}
						}
						had_flag = {
							flag = emf_mongol_invasion_war_won
							days = 180
						}
					}
					had_flag = { # Larger cooldown thereafter
						flag = emf_mongol_invasion_war_won
						days = 730
					}
				}
			}
		}

		# Only if we still have our initial event troops
		# IMPORTANT: we do need to start with such earmarked troops, or else this will never fire, the mongols will
		# never be "defeated," and their all-CBs block will never be lifted (i.e., they'll just sit there forever)
		custom_tooltip = {
			text = MONGOLS_HAVE_INVASION_EVENT_TROOPS
			hidden_tooltip = {
				OR = {
					has_earmarked_regiments = horde_invasion
					has_earmarked_regiments = start_troops
				}
			}
		}

		# Minimum gold to fire a scripted invasion
		OR = {
			wealth = 50
			custom_tooltip = {
				text = MONGOLS_ARRIVED_LESS_THAN_40_YEARS_AGO
				hidden_tooltip = {
					NOT = {
						had_global_flag = {
							flag = mongol_empire_arrival
							days = 14600 # 40yr
						}
					}
				}
			}
		}
	}

	mean_time_to_happen = {
		days = 0
	}

	immediate = {
		# If they're particularly low on cash, give them a little, but only support them
		# in this way for awhile after their arrival (duration enforced by event trigger).
		while = {
			limit = { NOT = { wealth = 256 } }
			wealth = 256
		}

		if = {
			limit = { is_landed = no }
			# Something screwed-up happened to our initial invasion (but it wasn't an actual loss), so retry
			# the initial invasion.
			if = {
				limit = { emf_has_swmh = yes }
				1571 = { save_event_target_as = emf_target_province } # Almaliq
			}
			else = {
				1457 = { save_event_target_as = emf_target_province } # Ordu Baliq
			}
			character_event = { id = emf_mongol.1000 } # Declare war
			break = yes
		}

		# Ensure we have the nomadic lucky ruler (+mongols) building
		capital_holding = {
			if = {
				limit = {
					NOR = {
						has_building = no_lucky_1
						year = 1300
					}
				}
				add_building = no_lucky_1
			}
		}

		# Pick a random available target from the core conquest region...
		# Prefer those in the same de jure kingdom as our last launched war(s) for troop locality

		random_realm_province = {
			limit = {
				event_target:emf_mongol_invasion_last_king_title = { tier = THIS }
				owner = { same_realm = ROOT }
				has_flag = emf_capital_connected
				any_neighbor_province = {
					kingdom = { title = event_target:emf_mongol_invasion_last_king_title }
					region = emf_region_mongol_core
					emf_mongol_invasion_valid_target_province = yes
				}
			}
			random_neighbor_province = {
				limit = {
					kingdom = { title = event_target:emf_mongol_invasion_last_king_title }
					region = emf_region_mongol_core
					emf_mongol_invasion_valid_target_province = yes
				}
				kingdom = {
					save_event_target_as = emf_king_title
					break = yes
				}
			}
		}
		random_realm_province = {
			limit = {
				owner = { same_realm = ROOT }
				has_flag = emf_capital_connected
				any_neighbor_province = {
					region = emf_region_mongol_core
					emf_mongol_invasion_valid_target_province = yes
				}
			}
			random_neighbor_province = {
				limit = {
					region = emf_region_mongol_core
					emf_mongol_invasion_valid_target_province = yes
				}
				kingdom = {
					save_event_target_as = emf_king_title
					break = yes
				}
			}
		}

		# If we're still here, there were no available targets in core conquest region.

		if = {
			limit = { NOT = { has_global_flag = emf_mongol_invasion_in_persia } }
			break = yes
		}

		# If we're still here, there were no targets in the core region and we have already penetrated
		# Persia to a reasonable degree, so we're now allowed to look for further targets in the extended
		# conquest zone.
		#
		# As before, prefer those in the same de jure kingdom as our last launched war(s) for troop locality

		random_realm_province = {
			limit = {
				event_target:emf_mongol_invasion_last_king_title = { tier = THIS }
				owner = { same_realm = ROOT }
				has_flag = emf_capital_connected
				any_neighbor_province = {
					kingdom = { title = event_target:emf_mongol_invasion_last_king_title }
					region = emf_region_mongol_extended
					emf_mongol_invasion_valid_target_province = yes
				}
			}
			random_neighbor_province = {
				limit = {
					kingdom = { title = event_target:emf_mongol_invasion_last_king_title }
					region = emf_region_mongol_extended
					emf_mongol_invasion_valid_target_province = yes
				}
				kingdom = {
					save_event_target_as = emf_king_title
					break = yes
				}
			}
		}
		random_realm_province = {
			limit = {
				owner = { same_realm = ROOT }
				has_flag = emf_capital_connected
				any_neighbor_province = {
					region = emf_region_mongol_extended
					emf_mongol_invasion_valid_target_province = yes
				}
			}
			random_neighbor_province = {
				limit = {
					region = emf_region_mongol_extended
					emf_mongol_invasion_valid_target_province = yes
				}
				kingdom = {
					save_event_target_as = emf_king_title
					break = yes
				}
			}
		}
	}

	option = {
		name = OK
		trigger = {
			event_target:emf_king_title = { always = yes }
		}

		# Declare war on everybody we can within the target kingdom that has a border with us
		# at once (allows the Mongols to take advantage of locality of their event troops, to
		# some degree).
		any_playable_ruler = {
			limit = {
				emf_mongol_invasion_valid_target = yes
				any_realm_province = {
					kingdom = { title = event_target:emf_king_title }
					any_neighbor_province = { owner_under_ROOT = yes }
				}
			}
			ROOT = {
				set_flag = emf_cb_pass_tmp
				war = {
					casus_belli = emf_mongol_invasion
					target = PREV
					thirdparty_title = event_target:emf_king_title
					infamy = 0
				}
			}
			character_event = { id = emf_mongol.1001 } # Verify war happened
		}

		event_target:emf_king_title = { save_global_event_target_as = emf_mongol_invasion_last_king_title }
	}

	option = {
		name = CANCEL
		trigger = {
			NOT = { event_target:emf_king_title = { always = yes } }
		}
	}
}

# emf_mongol.1012 [Mongol Emperor]
#
# Set a global flag when e_mongol_empire can unlock their full conquest zone.
character_event = {
	id = emf_mongol.1012
	hide_window = yes

	only_independent = yes
	culture = mongol

	trigger = {
		has_landed_title = e_mongol_empire
		NOT = { has_global_flag = emf_mongol_invasion_in_persia }
		any_realm_province = {
			region = emf_region_mongol_core_fringe
			has_flag = emf_capital_connected
		}
	}

	mean_time_to_happen = {
		days = 0
	}

	immediate = {
		set_global_flag = emf_mongol_invasion_in_persia
	}
}

# emf_mongol.1013 [Mongol Emperor]
#
# Called from on_success_title of emf_mongol_invasion CB
#
# ROOT is the attacker, event_target:emf_defender is the defending character,
# and event_target:emf_king_title is the CB's de jure target kingdom.
character_event = {
	id = emf_mongol.1013
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# Small independents fully-contained within the de jure target kingdom simply swear
		# fealty rather than face the destructive wrath that their neighbors did. They're
		# already at war with the Mongols (AI-only).

		any_playable_ruler = {
			limit = {
				liege = { character = PREV } #independent = yes and any_independent_ruler exclude revolts
				ai = yes
				# Are currently at war with us via this CB
				any_war = {
					defender = { character = PREV }
					attacker = { character = ROOT }
					using_cb = emf_mongol_invasion
					# TODO: don't do this when warscore is significantly in favor of defender
				}
				lower_tier_than = ROOT # Can be vassalized
				# Not the guy who lost the war prompting this potential subjugation
				NOT = { character = event_target:emf_defender }
				# Not weird folks
				mercenary = no
				holy_order = no
				controls_religion = no
				primary_title = { is_landless_type_title = no }
				# Share a border presently
				any_realm_province = {
					any_neighbor_province = {
						owner = {
							same_realm = ROOT
						}
					}
				}
				# Realm provinces are completely within the de jure target kingdom
				NOT = {
					any_realm_title = {
						tier = COUNT
						NOT = { de_jure_liege_or_above = event_target:emf_king_title }
					}
				}
			}
			log = "emf_mongol.1013: INFO: sparing the sword against minor at war with the mongol horde (#[This.GetID]) after nearby mongol victory..."
			emf_ROOT_subjugate_ruler = yes
		}
	}
}

