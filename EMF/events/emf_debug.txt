# -*- ck2.events -*-


namespace = emf_debug

# emf_debug.0
# Alias for emf_core.1000: toggle global developer-mode
character_event = {
	id = emf_debug.0

	is_triggered_only = yes
	hide_window = yes

	immediate = { character_event = { id = emf_core.1000 } }
}

# emf_debug.1
# Multi-option dialog fired by emf_debug_spawn_troops targeted decision
letter_event = {
	id = emf_debug.1
	desc = emf_debug.1.desc

	is_triggered_only = yes

	immediate = {
		FROM = {
			save_event_target_as = emf_owner
			if = {
				limit = { location = { has_owner = yes } }
				location = { save_event_target_as = emf_province }
				break = yes
			}
			if = {
				limit = { capital_scope = { has_owner = yes } }
				capital_scope = { save_event_target_as = emf_province }
				break = yes
			}
			if = {
				limit = { primary_title = { capital_scope = { has_owner = yes } } }
				primary_title = { capital_scope = { save_event_target_as = emf_province } }
				break = yes
			}
		}
		c_roma = { location = { save_event_target_as = emf_province } }
	}

	option = {
		name = emf_debug.1.opt.a # 1200
		event_target:emf_owner = {
			emf_debug_spawn_troops = yes
			spawn_fleet = {
				province = closest
				owner = event_target:emf_owner
				earmark = emf_debug_army
				troops = {
					galleys = { 12 12 }
				}
			}
		}
	}
	option = {
		name = emf_debug.1.opt.b # 3600
		event_target:emf_owner = {
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			spawn_fleet = {
				province = closest
				owner = event_target:emf_owner
				earmark = emf_debug_army
				troops = {
					galleys = { 36 36 }
				}
			}
		}
	}
	option = {
		name = emf_debug.1.opt.c # 10,800
		event_target:emf_owner = {
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			emf_debug_spawn_troops = yes
			spawn_fleet = {
				province = closest
				owner = event_target:emf_owner
				earmark = emf_debug_army
				troops = {
					galleys = { 108 108 }
				}
			}
		}

	}
	option = {
		name = CANCEL
	}
}

# emf_debug.5
# Spawn a claimant adventurer for the target title FROM (called from decision emf_debug_claimant_adventure_title)
character_event = {
	id = emf_debug.5

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_landed_title = FROM
	}

	immediate = {
		create_character = {
			random_traits = no
			dynasty = random
			culture = ROOT
			religion = ROOT
			female = no
			age = 20
			health = 8

			trait = bastard
			trait = genius

			trait = ambitious
			trait = brave
			trait = wroth
			trait = proud

			trait = brilliant_strategist

			attributes = {
				diplomacy = 8
				martial = 8
				stewardship = 8
				intrigue = 8
				learning = 8
			}
		}
		new_character = {
			emf_new_character_noble = yes
			set_flag = event_adventurer
			FROM = { add_claim = PREV }
			character_event = { id = emf_adventurer.100 } # Standard MTTH event for starting claimant adventures
		}
	}
}


letter_event = {
	id = emf_debug.10
	desc = emf_debug.10.desc

	is_triggered_only = yes

	immediate = {
		FROM = { remove_claim = ROOT }
	}

	option = {
		name = emf_debug.10.opt.strong
		FROM = { add_claim = ROOT }
	}
	option = {
		name = emf_debug.10.opt.strong_pressed
		FROM = { add_pressed_claim = ROOT }
	}
	option = {
		name = emf_debug.10.opt.weak
		FROM = { add_weak_claim = ROOT }
	}
	option = {
		name = emf_debug.10.opt.weak_pressed
		FROM = { add_weak_pressed_claim = ROOT }
	}
}

letter_event = {
	id = emf_debug.15
	desc = emf_debug.15.desc
	border = GFX_event_letter_frame_war

	is_triggered_only = yes

	option = {
		name = emf_debug.15.opt.invalid
		any_war = {
			limit = {
				OR = {
					any_attacker = { character = FROM }
					any_defender = { character = FROM }
				}
			}
			end_war = invalid
		}
	}
	option = {
		name = emf_debug.15.opt.success
		any_war = {
			limit = {
				OR = {
					any_attacker = { character = FROM }
					any_defender = { character = FROM }
				}
			}
			end_war = success
		}
	}
	option = {
		name = emf_debug.15.opt.reverse_demand
		any_war = {
			limit = {
				OR = {
					any_attacker = { character = FROM }
					any_defender = { character = FROM }
				}
			}
			end_war = reverse_demand
		}
	}
	option = {
		name = emf_debug.15.opt.whitepeace
		any_war = {
			limit = {
				OR = {
					any_attacker = { character = FROM }
					any_defender = { character = FROM }
				}
			}
			end_war = whitepeace
		}
	}
}

# emf_debug.20 -- log DUKE+ tier title creation, distinguish titular titles from de jure titles
character_event = {
	id = emf_debug.20
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		FROM = {
			higher_tier_than = COUNT
			OR = {
				is_landless_type_title = no
				controls_religion = yes
			}
			clan = no
		}
		NOT = { FROMFROM = { always = yes } }
	}

	immediate = {
		if = {
			limit = { FROM = { is_de_jure_title = no } }
			log = "INFO: [From.EMF_GetTierNoun] title created (titular): [From.EMF_GetDebugTitleNameWithDeJureLieges]"
		}
		else = {
			log = "INFO: [From.EMF_GetTierNoun] title created (de jure): [From.EMF_GetDebugTitleNameWithDeJureLieges]"
		}
		log = " ---> creator: [Root.EMF_GetDebugName]"
	}
}

# emf_debug.25
# Handle playable-tier external inheritances -- on_death
character_event = {
	id = emf_debug.25

	is_triggered_only = yes
	hide_window = yes

	only_playable = yes

	trigger = {
		is_theocracy = no
		is_republic = no
		any_demesne_title = {
			OR = {
				is_landless_type_title = no
				controls_religion = yes
				rebel = yes
				temporary = yes
			}
			current_heir = {
				NOR = {
					same_realm = ROOT
					is_ruler = no
					lower_tier_than = PREV
				}
			}
		}
	}

	immediate = {
		log = "DEBUG: emf_debug.25: external inheritance(s) will happen for dying ruler: [Root.EMF_GetDebugName]:"
		any_demesne_title = {
			limit = {
				tier = EMPEROR
				is_landless_type_title = no
				current_heir = {
					NOR = {
						same_realm = ROOT
						is_ruler = no
						lower_tier_than = PREV
					}
				}
			}
			current_heir = {
				set_flag = emf_ext_inherited_@PREV
				top_liege = {
					if = {
						limit = { character = PREV }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName]"
					}
					if = {
						limit = { NOT = { character = PREV } }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName] into the [This.PrimaryTitle.GetFullName] ([This.PrimaryTitle.GetID])"
					}
				}
			}
		}
		any_demesne_title = {
			limit = {
				tier = KING
				is_landless_type_title = no
				current_heir = {
					NOR = {
						same_realm = ROOT
						is_ruler = no
						lower_tier_than = PREV
					}
				}
			}
			current_heir = {
				set_flag = emf_ext_inherited_@PREV
				top_liege = {
					if = {
						limit = { character = PREV }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName]"
					}
					if = {
						limit = { NOT = { character = PREV } }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName] into the [This.PrimaryTitle.GetFullName] ([This.PrimaryTitle.GetID])"
					}
				}
			}
		}
		any_demesne_title = {
			limit = {
				tier = DUKE
				is_landless_type_title = no
				current_heir = {
					NOR = {
						same_realm = ROOT
						is_ruler = no
						lower_tier_than = PREV
					}
				}
			}
			current_heir = {
				set_flag = emf_ext_inherited_@PREV
				top_liege = {
					if = {
						limit = { character = PREV }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName]"
					}
					if = {
						limit = { NOT = { character = PREV } }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName] into the [This.PrimaryTitle.GetFullName] ([This.PrimaryTitle.GetID])"
					}
				}
			}
		}
		any_demesne_title = {
			limit = {
				tier = COUNT
				is_landless_type_title = no
				current_heir = {
					NOR = {
						same_realm = ROOT
						is_ruler = no
						lower_tier_than = PREV
					}
				}
			}
			current_heir = {
				set_flag = emf_ext_inherited_@PREV
				top_liege = {
					if = {
						limit = { character = PREV }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName]"
					}
					if = {
						limit = { NOT = { character = PREV } }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName] into the [This.PrimaryTitle.GetFullName] ([This.PrimaryTitle.GetID])"
					}
				}
			}
		}
		any_demesne_title = {
			limit = {
				tier = BARON
				is_landless_type_title = no
				current_heir = {
					NOR = {
						same_realm = ROOT
						is_ruler = no
						lower_tier_than = PREV
					}
				}
			}
			current_heir = {
				set_flag = emf_ext_inherited_@PREV
				top_liege = {
					if = {
						limit = { character = PREV }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName]"
					}
					if = {
						limit = { NOT = { character = PREV } }
						log = "--> [PrevPrev.GetID] ([PrevPrev.GetFullBaseName]) will pass to [Prev.EMF_GetDebugName] into the [This.PrimaryTitle.GetFullName] ([This.PrimaryTitle.GetID])"
					}
				}
			}
		}
	}
}

# emf_debug.30
# Log average number of living children per playable ruler whom has been married at least once,
# differentiating between Muslims and non-Muslims.
character_event = {
	id = emf_debug.30

	is_triggered_only = yes # on_yearly_pulse
	hide_window = yes

	religion = hip_religion
	has_global_flag = emf_debug_live_kids

	trigger = {
		has_landed_title = e_hip
	}

	immediate = {
		log = "==== EMF_DEBUG.30 // PLAYABLE RULER LIVING CHILDREN ===="

		set_variable = { which = "playable_muslims" value = 0 }
		set_variable = { which = "playable_others" value = 0 }
		set_variable = { which = "playable_muslim_kids" value = 0 }
		set_variable = { which = "playable_other_kids" value = 0 }

		any_playable_ruler = {
			limit = {
				NOT = { religion_group = muslim }
				spouse_even_if_dead = { always = yes }
			}
			ROOT = { change_variable = { which = "playable_others" value = 1 } }
			any_child = {
				limit = { is_alive = yes }
				ROOT = { change_variable = { which = "playable_other_kids" value = 1 } }
			}
		}

		any_playable_ruler = {
			limit = {
				religion_group = muslim
				spouse_even_if_dead = { always = yes }
			}
			ROOT = { change_variable = { which = "playable_muslims" value = 1 } }
			any_child = {
				limit = { is_alive = yes }
				ROOT = { change_variable = { which = "playable_muslim_kids" value = 1 } }
			}
		}

		if = {
			limit = { check_variable = { which = "playable_others" value > 0 } }
			set_variable = { which = "avg_playable_other_kids" which = "playable_other_kids" }
			divide_variable = { which = "avg_playable_other_kids" which = "playable_others" }
			log = "avg_playable_other_kids = [This.avg_playable_other_kids.GetValue]"
		}
		else = {
			log = "avg_playable_other_kids = N/A (no qualifying rulers)"
		}

		if = {
			limit = { check_variable = { which = "playable_muslims" value > 0 } }
			set_variable = { which = "avg_playable_muslim_kids" which = "playable_muslim_kids" }
			divide_variable = { which = "avg_playable_muslim_kids" which = "playable_muslims" }
			log = "avg_playable_muslim_kids = [This.avg_playable_muslim_kids.GetValue]"
		}
		else = {
			log = "avg_playable_muslim_kids = N/A (no qualifying rulers)"
		}

		log = "==== END EMF_DEBUG.30 ===="
	}

	after = {
		set_variable = { which = "playable_muslims" value = 0 }
		set_variable = { which = "playable_others" value = 0 }
		set_variable = { which = "playable_muslim_kids" value = 0 }
		set_variable = { which = "playable_other_kids" value = 0 }
		set_variable = { which = "avg_playable_muslim_kids" value = 0 }
		set_variable = { which = "avg_playable_other_kids" value = 0 }
	}
}
