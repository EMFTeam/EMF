# -*- ck2.events -*-

namespace = emf_laws

#######################################
# EXTENDED LAW SUPPORT CODE
#######################################


# emf_laws.0 [Isis]
#
# Scenario startup event to ensure that a) specific CA sub-laws are
# at their maximum values given every crown title's historic
# crown_authority setting, and b) correct any gender succession
# laws forced via title history when Full Gender Equality is enabled.
character_event = {
	id = emf_laws.0

	is_triggered_only = yes
	hide_window = yes
	
	religion = hip_religion

	trigger = { has_landed_title = e_hip }

	immediate = {
		character_event = { id = emf_laws.5 } # full gender equality support
		any_playable_ruler = { # crown laws
			limit = {
				higher_real_tier_than = DUKE
				is_tribal = no
				is_nomadic = no
			}
			character_event = { id = emf_laws.1 }
		}
	}
}


# emf_laws.1 [Ruler, a king OR emperor]
#
# Guts of of emf_laws.0
character_event = {
	id = emf_laws.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			is_feudal = yes
			is_republic = yes
		}
	}

	immediate = {
		set_flag = emf_no_law_penalties

		any_demesne_title = {
			limit = {
				higher_tier_than = DUKE
				temporary = no
			}

			if = {
				limit = { has_law = crown_authority_0 }
				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = { NOT = { has_law = revokation_0 } }
						add_law = revokation_0
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_0
				}
				if = {
					limit = { NOT = { has_law = inheritance_0 } }
					add_law = inheritance_0
				}
				if = {
					limit = { NOT = { has_law = king_peace_0 } }
					add_law = king_peace_0
				}
			} # END: Autonomous Vassals

			if = {
				limit = { has_law = crown_authority_1 }

				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = { NOT = { has_law = revokation_1 } }
						add_law = revokation_1
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_1
				}
				if = {
					limit = { NOT = { has_law = inheritance_0 } }
					add_law = inheritance_0
				}
				if = {
					limit = { NOT = { has_law = king_peace_0 } }
					add_law = king_peace_0
				}
			} # END: Low CA

			if = {
				limit = { has_law = crown_authority_2 }

				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = { NOT = { has_law = revokation_2 } }
						add_law = revokation_2
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_2
				}
				if = {
					limit = { NOT = { has_law = inheritance_0 } }
					add_law = inheritance_0
				}
				if = {
					limit = { NOT = { has_law = king_peace_0 } }
					add_law = king_peace_0
				}
			} # END: Medium CA

			if = {
				limit = { has_law = crown_authority_3 }

				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = { NOT = { has_law = revokation_2 } }
						add_law = revokation_2
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_2
				}
				if = {
					limit = { NOT = { has_law = inheritance_1 } }
					add_law = inheritance_1
				}
				if = {
					limit = { NOT = { has_law = king_peace_0 } }
					add_law = king_peace_0
				}
			} # END: High CA

			if = {
				limit = { has_law = crown_authority_4 }
				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = { NOT = { has_law = revokation_2 } }
						add_law = revokation_2
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_2
				}
				if = {
					limit = { NOT = { has_law = inheritance_1 } }
					add_law = inheritance_1
				}
				if = {
					limit = {
						NOR = {
							has_law = king_peace_1
							has_law = king_peace_2
						}
					}
					add_law = king_peace_1
				}
			} # END: Max CA
		}

		clr_flag = emf_no_law_penalties
	}
}


# emf_laws.3 [Holder]
#
# Upon crown title creation, copy-over crown law cooldowns appropriately. Copy the cooldown from either the primary title of
# the holder, or if this is now the primary title (e.g., due to creating an empire title as a king) and a cooldown exists
# upon another crown title in demesne, copy it too. [Second case is a compromise due to the fact that there's no, e.g.,
# `previous_primary_title` scope or an on_action for primary title change, while first case is simply because the prior
# changed law has already been copied to FROM.
#
# Listens to:
# - on_new_holder
#
# FROM = title, FROMFROM = previous holder
character_event = {
	id = emf_laws.3
	hide_window = yes
	is_triggered_only = yes

	only_playable = yes

	trigger = {
		FROM = { higher_tier_than = DUKE }
		NOT = { FROMFROM = { is_alive = yes } }
	}

	immediate = {
		# Crown Authority
		if = {
			limit = { # A secondary crown title creation where primary title has cooldown
				primary_title = {
					higher_tier_than = DUKE
					NOT = { title = FROM }
					ROOT = { has_flag = emf_ca_cooldown_@PREV }
				}
			}
			set_flag = emf_ca_cooldown_@FROM
		}
		if = {
			limit = { # A primary title creation (can only be an empire) where there is a prior cooldown
				FROM = { is_primary_holder_title = yes }
				any_demesne_title = {
					higher_tier_than = DUKE
					ROOT = { has_flag = emf_ca_cooldown_@PREV }
				}
			}
			set_flag = emf_ca_cooldown_@FROM
		}
		# Investiture
		if = {
			limit = { # A secondary crown title creation where primary title has cooldown
				primary_title = {
					higher_tier_than = DUKE
					NOT = { title = FROM }
					ROOT = { has_flag = emf_inv_cooldown_@PREV }
				}
			}
			set_flag = emf_inv_cooldown_@FROM
		}
		if = {
			limit = { # A primary title creation (can only be an empire) where there is a prior cooldown
				FROM = { is_primary_holder_title = yes }
				any_demesne_title = {
					higher_tier_than = DUKE
					ROOT = { has_flag = emf_inv_cooldown_@PREV }
				}
			}
			set_flag = emf_inv_cooldown_@FROM
		}
		# NOTE: Imperial Kingdom Creation law does not need to copy cooldowns upon title creation
	}
}

# emf_laws.4 [Holder]
#
# Upon crown title usurpation, always drop Crown Authority by 1 slider
# increment. Do NOT apply a cooldown to the title, however.
#
# Listens to:
# - on_new_holder_usurpation
#
# FROM = title, FROMFROM = previous holder
character_event = {
	id = emf_laws.4
	hide_window = yes
	is_triggered_only = yes

	only_playable = yes
	ai = no

	trigger = {
		FROM = { higher_tier_than = DUKE }
	}

	immediate = {
		set_flag = emf_no_law_penalties
		FROM = {
			if = {
				limit = { has_law = crown_authority_1 }
				add_law = crown_authority_0
			}
			if = {
				limit = { has_law = crown_authority_2 }
				add_law = crown_authority_1
			}
			if = {
				limit = { has_law = crown_authority_3 }
				add_law = crown_authority_2
			}
			if = {
				limit = { has_law = crown_authority_4 }
				add_law = crown_authority_3
			}
		}
		clr_flag = emf_no_law_penalties
	}
}

# emf_laws.5 -- Full Gender Equality: correct gender succession on titles with incorrect law forced via title history
# Separate event from emf_laws.0 (caller) to allow application via console.
character_event = {
	id = emf_laws.5

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_game_rule = { name = gender value = all }
	}

	immediate = {
		# First, find all the base succession law titles that can be Absolute Cognatic but aren't
		any_landed_title = {
			limit = {
				has_holder = yes
				succ_law_title = {
					NOT = { has_law = true_cognatic_succession }
					is_law_potential = true_cognatic_succession
				}
				NOT = { holder = ROOT }
			}
			succ_law_title = { set_flag = emf_not_feminist_enough }
		}
		# Then, flip those titles
		any_landed_title = {
			limit = { has_flag = emf_not_feminist_enough }
			clr_flag = emf_not_feminist_enough
			holder_scope = { set_flag = emf_no_law_penalties }
			add_law = true_cognatic_succession
			holder_scope = { clr_flag = emf_no_law_penalties }
		}
	}
}

# emf_laws.6 -- when a de jure vassal king (i.e., their kingdom's crown laws are dictated by their liege's imperial
# title) creates another kingdom that isn't subject to their empire's crown laws (i.e., it can have its own crown
# laws), copy their empire's [relevant] crown laws to the newly-created kingdom. otherwise, even if the vassal
# king's primary de jure kingdom effectively had, say, High Crown Authority due to being locked to the imperial
# crown laws, no crown laws will be copied to the new kingdom at all, and it'll have Autonomous Vassals (Min CA).
character_event = {
	id = emf_laws.6

	is_triggered_only = yes # on_new_holder
	hide_window = yes

	trigger = {
		NOT = { FROMFROM = { always = yes } } # Title creation only
		primary_title = {
			tier = KING
			temporary = no
			crownlaw_title = {
				tier = EMPEROR
				owner = {
					is_liege_of = ROOT
					NOT = { character = ROOT }
				}
			}
		}
		FROM = {
			tier = KING
			temporary = no
			is_primary_holder_title = no # Is not the first kingdom held
			crownlaw_title = { title = PREV } # Is its own crown law title
			NOR = { # Not if for some reason non-default crown laws are already on the title (:shrug:)
				emf_laws_has_limited_ca_plus = yes
				has_law = revokation_1
				has_law = revokation_2
				has_law = king_peace_1
				has_law = king_peace_2
				has_law = inheritance_1
				# Note that Investiture doesn't actually have a single default
			}
			is_de_jure_title = yes
		}
	}

	immediate = {
		primary_title = { crownlaw_title = { save_event_target_as = emf_empire } }
		set_flag = emf_no_law_penalties
		event_target:emf_empire = {
			# Crown Authority
			if = {
				limit = {
					has_law = crown_authority_0
					FROM = { is_law_potential = crown_authority_0 }
				}
				FROM = { add_law = crown_authority_0 }
			}
			else_if = {
				limit = { has_law = crown_authority_1 }
				if = {
					limit = { FROM = { is_law_potential = crown_authority_1 } }
					FROM = { add_law = crown_authority_1 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_0 } }
					FROM = { add_law = crown_authority_0 }
				}
			}
			else_if = {
				limit = { has_law = crown_authority_2 }
				if = {
					limit = { FROM = { is_law_potential = crown_authority_2 } }
					FROM = { add_law = crown_authority_2 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_1 } }
					FROM = { add_law = crown_authority_1 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_0 } }
					FROM = { add_law = crown_authority_0 }
				}
			}
			else_if = {
				limit = { has_law = crown_authority_3 }
				if = {
					limit = { FROM = { is_law_potential = crown_authority_3 } }
					FROM = { add_law = crown_authority_3 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_2 } }
					FROM = { add_law = crown_authority_2 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_1 } }
					FROM = { add_law = crown_authority_1 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_0 } }
					FROM = { add_law = crown_authority_0 }
				}
			}
			else_if = {
				limit = { has_law = crown_authority_4 }
				if = {
					limit = { FROM = { is_law_potential = crown_authority_4 } }
					FROM = { add_law = crown_authority_4 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_3 } }
					FROM = { add_law = crown_authority_3 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_2 } }
					FROM = { add_law = crown_authority_2 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_1 } }
					FROM = { add_law = crown_authority_1 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = crown_authority_0 } }
					FROM = { add_law = crown_authority_0 }
				}
			}
			# CA sub-laws, in case ROOT isn't AI (AIs always have their sub-laws auto-set by CA) -- or if the emperor isn't
			# AI and has non-default sublaws for his level of CA
			#
			# Non-Zeus title revocation:
			if = {
				limit = {
					has_law = revokation_0
					FROM = { is_law_potential = revokation_0 }
				}
				FROM = { add_law = revokation_0 }
			}
			else_if = {
				limit = { has_law = revokation_1 }
				if = {
					limit = { FROM = { is_law_potential = revokation_1 } }
					FROM = { add_law = revokation_1 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = revokation_0 } }
					FROM = { add_law = revokation_0 }
				}
			}
			else_if = {
				limit = { has_law = revokation_2 }
				if = {
					limit = { FROM = { is_law_potential = revokation_2 } }
					FROM = { add_law = revokation_2 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = revokation_1 } }
					FROM = { add_law = revokation_1 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = revokation_0 } }
					FROM = { add_law = revokation_0 }
				}
			}
			# King's peace:
			if = {
				limit = {
					has_law = king_peace_0
					FROM = { is_law_potential = king_peace_0 }
				}
				FROM = { add_law = king_peace_0 }
			}
			else_if = {
				limit = { has_law = king_peace_1 }
				if = {
					limit = { FROM = { is_law_potential = king_peace_1 } }
					FROM = { add_law = king_peace_1 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = king_peace_0 } }
					FROM = { add_law = king_peace_0 }
				}
			}
			else_if = {
				limit = { has_law = king_peace_2 }
				if = {
					limit = { FROM = { is_law_potential = king_peace_2 } }
					FROM = { add_law = king_peace_2 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = king_peace_1 } }
					FROM = { add_law = king_peace_1 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = king_peace_0 } }
					FROM = { add_law = king_peace_0 }
				}
			}
			# External inheritance:
			if = {
				limit = {
					has_law = inheritance_0
					FROM = { is_law_potential = inheritance_0 }
				}
				FROM = { add_law = inheritance_0 }
			}
			else_if = {
				limit = { has_law = inheritance_1 }
				if = {
					limit = { FROM = { is_law_potential = inheritance_1 } }
					FROM = { add_law = inheritance_1 }
				}
				else_if = {
					limit = { FROM = { is_law_potential = inheritance_0 } }
					FROM = { add_law = inheritance_0 }
				}
			}
		}
		clr_flag = emf_no_law_penalties
	}
}

#######################################
# REACTIONS TO SUCCESSION LAW CHANGES
# Written by Rylock & zijistark
#######################################

# emf_laws.10 [Holder of Title That's Just Changed Succession Law]
#
# Context:
# - Succession law title has flag emf_succ_title (cleared when we're done)
# - opinion_succ_former_heir points to the former heir (cleared elsewhere)
# - opinion_succ_former_pretender points to the former pretenders (cleared elsewhere)
#
# Fired from non-elective succession law effects immediately after applying
# lower-priority, law-specific succession law reactions.
character_event = {
	id = emf_laws.10

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_alive = yes
	}

	immediate = {
		save_event_target_as = emf_succ_changer

		random_demesne_title = { # Save our title...
			limit = { has_flag = emf_succ_title }
			clr_flag = emf_succ_title
			save_event_target_as = emf_succ_title
		}

		if = {
			limit = { NOT = { event_target:emf_succ_title = { always = yes } } }
			log = "ERROR: emf_laws.10: Succesion law change title (emf_succ_title) not found in demesne of [Root.GetTitledName] (ID: [Root.GetID]); aborting!"
			break = yes
		}

		#log = "DEBUG: emf_laws.10: Processing special succession law change reactions for [emf_succ_title.GetID] ([emf_succ_title.GetFullBaseName]), held by [Root.GetTitledName] (ID: [Root.GetID])..."

		event_target:emf_succ_title = { current_heir = { save_event_target_as = emf_heir } } # ... and its new heir

		if = {
			limit = { NOT = { event_target:emf_heir = { always = yes } } }
			log = "INFO: emf_laws.10: Succesion law change for [emf_succ_title.GetID] resulted in no known successor"
		}

		random_opinion_modifier_target = { # Save our former heir...
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_succ_former_heir } }
			save_event_target_as = emf_former_heir
		}

		if = {
			limit = { NOT = { event_target:emf_former_heir = { always = yes } } }
			log = "INFO: emf_laws.10: No former heir for [emf_succ_title.GetID]"
		}

		# Former pretenders that are now neither heir nor pretender
		any_opinion_modifier_target = {
			limit = {
				reverse_has_opinion_modifier = { who = PREV modifier = opinion_succ_former_pretender }
				NOT = { character = event_target:emf_heir }
				NOT = { any_pretender_title = { title = event_target:emf_succ_title } }
			}
			character_event = { id = emf_laws.13 }
		}

		# Should the former heir have died or somehow not existed, emf_former_heir will be undefined, but that should
		# work just fine for all of the uses below.

		event_target:emf_former_heir = {
			 # Former heir is now neither heir nor pretender
			if = {
				limit = {
					NOT = { character = event_target:emf_heir }
					NOT = { any_pretender_title = { title = event_target:emf_succ_title } }
				}
				character_event = { id = emf_laws.11 }
			}

			# Former heir is now pretender
			if = {
				limit = {
					NOT = { character = event_target:emf_heir }
					any_pretender_title = { title = event_target:emf_succ_title }
				}
				character_event = { id = emf_laws.12 }
			}
		}

		# The new pretenders
		any_character = {
			limit = {
				any_pretender_title = { title = event_target:emf_succ_title }
				NOR = {
					character = event_target:emf_former_heir
					character = event_target:emf_heir
					reverse_has_opinion_modifier = {
						who = ROOT
						modifier = opinion_succ_former_pretender
					}
				}
			}
			character_event = { id = emf_laws.15 }
		}

		# The new heir
		event_target:emf_heir = {
			if = {
				limit = { NOT = { character = event_target:emf_former_heir } }
				character_event = { id = emf_laws.14 }
			}
		}
	}
}

# emf_laws.11 / Plus.605
# A former heir is now neither the heir nor a pretender
character_event = {
	id = emf_laws.11
	picture = GFX_evt_scandal
	desc = emf_laws.11.desc

	is_triggered_only = yes

	option = {
		name = emf_laws.11.opt.so_be_it #So be it
		trigger = {
			NOR = {
				trait = lunatic
				trait = possessed
			}
		}
		ai_chance = {
			factor = 30
			modifier = {
				factor = 3
				trait = content
			}
			modifier = {
				factor = 2
				trait = humble
			}
			modifier = {
				factor = 1.5
				trait = charitable
			}
			modifier = {
				factor = 1.5
				trait = patient
			}
			modifier = {
				factor = 1.5
				trait = trusting
			}
			modifier = {
				factor = 0.5
				trait = proud
			}
			modifier = {
				factor = 0.25
				trait = ambitious
			}
		}
		#log = "DEBUG: emf_laws.11: Former heir [Root.GetTitledName] (ID: [Root.GetID]) is now neither heir NOR pretender (gracefully accepts)"
		event_target:emf_succ_title = {
			ROOT = { set_flag = emf_justified_claimant_@PREV }
		}
		set_flag = justified_claimant
		emf_laws_change_succ_bad_reaction = yes
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
		event_target:emf_succ_title = { add_weak_claim = ROOT }

		custom_tooltip = { text = emf_laws_ctt_succ_change_reaction_to_pretenders }
		any_character = {
			limit = { any_pretender_title = { title = event_target:emf_succ_title } }
			reverse_opinion = { who = ROOT modifier = opinion_resentful months = 240 }
		}
		if = {
			limit = {
				any_spouse = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
			any_spouse = {
				limit = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
			}
		}
		if = {
			limit = {
				any_child = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
			any_child = {
				limit = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
			}
		}
	}
	option = {
		name = emf_laws.11.opt.outraged #This is an outrage!
		ai_chance = {
			factor = 70
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 1.5
				trait = envious
			}
			modifier = {
				factor = 1.5
				trait = greedy
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 1.5
				trait = paranoid
			}
			modifier = {
				factor = 0.5
				trait = humble
			}
			modifier = {
				factor = 0.25
				trait = content
			}
		}
		#log = "DEBUG: emf_laws.11: Former heir [Root.GetTitledName] (ID: [Root.GetID]) is now neither heir NOR pretender (outraged)"
		event_target:emf_succ_title = {
			ROOT = { set_flag = emf_justified_claimant_@PREV }
		}
		set_flag = justified_claimant
		opinion = { who = FROM modifier = succ_law_disinherit months = 240 }
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
		event_target:emf_succ_title = { add_claim = ROOT }

		custom_tooltip = { text = emf_laws_ctt_succ_change_reaction_to_pretenders }
		any_character = {
			limit = { any_pretender_title = { title = event_target:emf_succ_title } }
			reverse_opinion = { who = ROOT modifier = opinion_resentful multiplier = 2 months = 240 }
		}
		if = {
			limit = {
				any_spouse = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
			any_spouse = {
				limit = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
			}
		}
		if = {
			limit = {
				any_child = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
			any_child = {
				limit = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
			}
		}
	}
}

# emf_laws.12 / Plus.606
# A former heir is now pretender
character_event = {
	id = emf_laws.12
	picture = GFX_evt_scandal
	desc = emf_laws.12.desc

	is_triggered_only = yes

	option = {
		name = emf_laws.11.opt.so_be_it #So be it
		trigger = {
			NOR = {
				trait = lunatic
				trait = possessed
			}
		}
		ai_chance = {
			factor = 50
			modifier = {
				factor = 3
				trait = content
			}
			modifier = {
				factor = 2
				trait = humble
			}
			modifier = {
				factor = 1.5
				trait = charitable
			}
			modifier = {
				factor = 1.5
				trait = patient
			}
			modifier = {
				factor = 1.5
				trait = trusting
			}
			modifier = {
				factor = 0.5
				trait = proud
			}
			modifier = {
				factor = 0.25
				trait = ambitious
			}
		}
		#log = "DEBUG: emf_laws.12: Former heir [Root.GetTitledName] (ID: [Root.GetID]) is now merely a pretender (gracefully accepts)"
		event_target:emf_succ_title = { ROOT = { set_flag = emf_justified_claimant_@PREV } }
		set_flag = justified_claimant
		emf_laws_change_succ_bad_reaction = yes
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 120 }
		event_target:emf_succ_title = { add_weak_claim = ROOT }

		if = {
			limit = {
				any_spouse = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
			any_spouse = {
				limit = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
			}
		}
		if = {
			limit = {
				any_child = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
			any_child = {
				limit = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
			}
		}
	}
	option = {
		name = emf_laws.11.opt.outraged #This is an outrage!
		ai_chance = {
			factor = 50
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 1.5
				trait = envious
			}
			modifier = {
				factor = 1.5
				trait = greedy
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 1.5
				trait = paranoid
			}
			modifier = {
				factor = 0.5
				trait = humble
			}
			modifier = {
				factor = 0.25
				trait = content
			}
		}
		# log = "DEBUG: emf_laws.12: Former heir [Root.GetTitledName] (ID: [Root.GetID]) is now merely a pretender (outraged)"
		event_target:emf_succ_title = { ROOT = { set_flag = emf_justified_claimant_@PREV } }
		set_flag = justified_claimant
		emf_laws_change_succ_terrible_reaction = yes
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
		event_target:emf_succ_title = { add_claim = ROOT }

		if = {
			limit = {
				any_spouse = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
			any_spouse = {
				limit = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
			}
		}
		if = {
			limit = {
				any_child = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
			any_child = {
				limit = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
			}
		}
	}
}

# emf_laws.13 / Plus.607
# A former pretender is now neither the heir nor a pretender
character_event = {
	id = emf_laws.13
	picture = GFX_evt_scandal
	desc = emf_laws.13.desc

	is_triggered_only = yes

	option = {
		name = emf_laws.11.opt.so_be_it #So be it
		trigger = {
			NOR = {
				trait = lunatic
				trait = possessed
			}
		}
		ai_chance = {
			factor = 70
			modifier = {
				factor = 3
				trait = content
			}
			modifier = {
				factor = 2
				trait = humble
			}
			modifier = {
				factor = 1.5
				trait = charitable
			}
			modifier = {
				factor = 1.5
				trait = patient
			}
			modifier = {
				factor = 1.5
				trait = trusting
			}
			modifier = {
				factor = 0.5
				trait = proud
			}
			modifier = {
				factor = 0.25
				trait = ambitious
			}
		}
		#log = "DEBUG: emf_laws.13: Former pretender [Root.GetTitledName] (ID: [Root.GetID]) is now neither heir NOR pretender (gracefully accepts)"
		emf_laws_change_succ_bad_reaction = yes
		if = {
			limit = {
				any_spouse = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
			any_spouse = {
				limit = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
				emf_laws_change_succ_bad_reaction = yes
			}
		}
		if = {
			limit = {
				any_child = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
			any_child = {
				limit = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
				emf_laws_change_succ_bad_reaction = yes
			}
		}
	}
	option = {
		name = emf_laws.11.opt.outraged #This is an outrage!
		ai_chance = {
			factor = 30
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 1.5
				trait = envious
			}
			modifier = {
				factor = 1.5
				trait = greedy
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 1.5
				trait = paranoid
			}
			modifier = {
				factor = 0.5
				trait = humble
			}
			modifier = {
				factor = 0.25
				trait = content
			}
		}
		#log = "DEBUG: emf_laws.13: Former pretender [Root.GetTitledName] (ID: [Root.GetID]) is now neither heir NOR pretender (outraged)"
		event_target:emf_succ_title = { ROOT = { set_flag = emf_justified_claimant_@PREV } }
		set_flag = justified_claimant
		emf_laws_change_succ_terrible_reaction = yes
		event_target:emf_succ_title = { add_weak_claim = ROOT }
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }

		custom_tooltip = { text = emf_laws_ctt_succ_change_reaction_to_pretenders }
		any_character = {
			limit = { any_pretender_title = { title = event_target:emf_succ_title } }
			reverse_opinion = { who = ROOT modifier = opinion_resentful months = 240 }
		}
		if = {
			limit = {
				any_spouse = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
			any_spouse = {
				limit = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
			}
		}
		if = {
			limit = {
				any_child = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
			any_child = {
				limit = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
				emf_laws_change_succ_bad_reaction = yes
				opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
			}
		}
	}
}

# emf_laws.14 / Plus.608
# The new heir is informed
character_event = {
	id = emf_laws.14
	picture = GFX_evt_emissary
	desc = emf_laws.14.desc

	is_triggered_only = yes

	option = {
		name = EXCELLENT
		#log = "DEBUG: emf_laws.14: New heir [Root.GetTitledName] (ID: [Root.GetID]) is pleased"
		emf_laws_change_succ_good_reaction = yes
		if = {
			limit = {
				any_spouse = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
			any_spouse = {
				limit = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
				emf_laws_change_succ_good_reaction = yes
			}
		}
		if = {
			limit = {
				any_child = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
			any_child = {
				limit = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
				emf_laws_change_succ_good_reaction = yes
			}
		}
	}
}

# emf_laws.15 / Plus.609
# The new pretenders are informed
character_event = {
	id = emf_laws.15
	picture = GFX_evt_emissary
	desc = emf_laws.15.desc

	is_triggered_only = yes

	option = {
		name = EXCELLENT
		#log = "DEBUG: emf_laws.15: New pretender [Root.GetTitledName] (ID: [Root.GetID]) is pleased"
		emf_laws_change_succ_good_reaction = yes
		if = {
			limit = {
				any_spouse = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
			any_spouse = {
				limit = {
					NOR = {
						character = FROM
						is_parent_of = event_target:emf_heir
					}
				}
				emf_laws_change_succ_good_reaction = yes
			}
		}
		if = {
			limit = {
				any_child = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
			any_child = {
				limit = {
					NOR = {
						character = FROM
						is_married = ROOT
						is_parent_of = event_target:emf_heir
						is_married = event_target:emf_heir
					}
					emf_can_inherit = yes
				}
				emf_laws_change_succ_good_reaction = yes
			}
		}
	}
}


#######################################
# PROTECTED COUNCIL APPOINTMENTS
#######################################

# emf_laws.20
#
# Maintenance event to validate appointment protection opinion bonuses for a given liege's council
#
# This is necessary due to the fact that powerful-vassal status obviously changes over time, and we
# only want the "my job is protected by my liege" bonus to apply when it is, in fact, protected.
character_event = {
	id = emf_laws.20

	hide_window = yes

	only_playable = yes

	trigger = {
		higher_real_tier_than = COUNT
		primary_title = { has_law = protected_appointment_1 }
		OR = {
			any_voter = {
				is_powerful_vassal = yes
				NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_protected_appointment_always } }
			}
			any_voter = {
				NOT = { is_powerful_vassal = yes }
				has_opinion_modifier = { who = ROOT modifier = opinion_protected_appointment_always }
			}
		}
	}

	mean_time_to_happen = {
		days = 1
	}

	immediate = {
		emf_laws_protected_appointment_1_validate_opinion = yes
	}
}


###########################################
# CONVERSION TO UNREFORMED PAGAN RELIGION #
###########################################

# emf_laws.30 -- When a crown law title holder converts to an unreformed pagan religion, their Crown Authority is
# is automatically knocked down to Limited (if they had any higher) and any higher-tier sub-laws are revoked.
# Unreformed pagans cannot pass anything beyond Limited CA, and this keeps the system consistent. If you want to go
# pagan, then it's going to take at least a wee bit of waiting time before you can revoke every title in the realm
# with Free Infidel Title Revocation, e.g.
#
# TODO: This could use a player notification event, as it might be confusing to see the sudden change after
# converting to an unreformed pagan faith. However, the next CA law up (Medium) will display "Is NOT an Unreformed
# Pagan," so that's something.
#
# Called from on_character_convert_religion: ROOT is character
# Also called from emf_laws.31, a title transfer listener, ROOT is still the character holding titles
character_event = {
	id = emf_laws.30

	is_triggered_only = yes
	hide_window = yes

	only_playable = yes
	religion_group = pagan_group

	trigger = {
		emf_unreformed_pagan = yes
		higher_real_tier_than = DUKE
		any_demesne_title = {
			higher_tier_than = DUKE
			emf_laws_has_medium_ca_plus = yes
		}
	}

	immediate = {
		any_demesne_title = {
			limit = {
				higher_tier_than = DUKE
				emf_laws_has_medium_ca_plus = yes
				is_law_potential = crown_authority_1
			}
			add_law = crown_authority_1 # CA system will handle downgrading any CA sub-laws as appropriate
			# Manually add CA change cooldown:
			ROOT = {
				clr_flag = emf_ca_cooldown_@PREV
				set_flag = emf_ca_cooldown_@PREV
			}
		}
		any_demesne_title = {
			limit = {
				higher_tier_than = DUKE
				emf_laws_has_medium_ca_plus = yes
				NOT = { is_law_potential = crown_authority_1 }
				is_law_potential = crown_authority_0
			}
			add_law = crown_authority_0
			# Manually add CA change cooldown:
			ROOT = {
				clr_flag = emf_ca_cooldown_@PREV
				set_flag = emf_ca_cooldown_@PREV
			}
		}
		any_demesne_title = {
			limit = {
				higher_tier_than = DUKE
				emf_laws_has_medium_ca_plus = yes
				NOR = {
					is_law_potential = crown_authority_1
					is_law_potential = crown_authority_0
				}
			}
			revoke_law = crown_authority_0
			revoke_law = crown_authority_1
			revoke_law = crown_authority_2
			revoke_law = crown_authority_3
			revoke_law = crown_authority_4
			revoke_law = revokation_0
			revoke_law = revokation_1
			revoke_law = revokation_2
			revoke_law = king_peace_0
			revoke_law = king_peace_1
			revoke_law = king_peace_2
			revoke_law = inheritance_0
			revoke_law = inheritance_1
			ROOT = {
				# Manually add CA change cooldown:
				clr_flag = emf_ca_cooldown_@PREV
				set_flag = emf_ca_cooldown_@PREV
				primary_title = {
					if = {
						limit = { is_law_potential = ze_revokation_0 }
						add_law = ze_revokation_0
					}
					else = {
						revoke_law = ze_revokation_0
						revoke_law = ze_revokation_1
						revoke_law = ze_revokation_2
					}
				}
			}
		}
	}
}

# emf_laws.31 -- title transfer on_action proxy for emf_laws.30
character_event = {
	id = emf_laws.31

	is_triggered_only = yes
	hide_window = yes

	only_playable = yes
	religion_group = pagan_group

	trigger = {
		emf_unreformed_pagan = yes
		FROM = {
			higher_tier_than = DUKE
			emf_laws_has_medium_ca_plus = yes
		}
	}

	immediate = {
		character_event = { id = emf_laws.30 days = 1 }
	}
}

# emf_laws.40 -- MTTH event to check all held DUKE+ title succession laws, compare them to the current flag
# indicating what the law was when last checked, and if there has been a change from one law to another, set
# the appropriate title flags for the 4-interest faction "demands_revert_succession" mechanics. this used to
# be done immediately when passing succession laws, but since CKII 3.0/HF, succession law effect blocks are
# virtually useless since they usually get executed 2+ times before actually setting the law, which makes
# them no longer useful for tracking succession law changes.
character_event = {
	id = emf_laws.40
	hide_window = yes

	only_playable = yes

	trigger = {
		higher_real_tier_than = COUNT
		any_demesne_title = {
			temporary = no
			succ_law_title = { title = PREV }
			OR = {
				emf_laws_has_old_succ_flag = yes
				emf_laws_has_old_gender_succ_flag = yes
				emf_laws_has_succ_flag = no
				emf_laws_has_gender_succ_flag = no
			}
		}
	}

	mean_time_to_happen = {
		days = 0
	}

	immediate = {
		# Normal succession law changes:
		any_demesne_title = {
			limit = {
				temporary = no
				succ_law_title = { title = PREV }
				emf_has_succ_law_unfit_for_feudal = no
				emf_laws_has_old_succ_flag = yes
			}
			pf_clear_normal_succession_flags_effect = yes # Reset PF "former law X" flags
			# Now set the PF flags to the correct, new value for the former law:
			if = {
				limit = { has_flag = emf_gavelkind }
				set_flag = former_gavelkind
			}
			else_if = {
				limit = { has_flag = emf_elective_gavelkind }
				set_flag = former_elective_gavelkind
			}
			else_if = {
				limit = { has_flag = emf_eldership }
				set_flag = former_eldership
			}
			else_if = {
				limit = { has_flag = emf_seniority }
				set_flag = former_seniority
			}
			else_if = {
				limit = { has_flag = emf_primogeniture }
				set_flag = former_primogeniture
			}
			else_if = {
				limit = { has_flag = emf_feudal_elective }
				set_flag = former_feudal_elective
			}
			else_if = {
				limit = { has_flag = emf_hre_elective }
				set_flag = former_hre_elective
			}
			else_if = {
				limit = { has_flag = emf_aztec_elective }
				set_flag = former_aztec_elective
			}
			else_if = {
				limit = { has_flag = emf_byzantine_elective }
				set_flag = former_byzantine_elective
			}
			else_if = {
				limit = { has_flag = emf_tanistry }
				set_flag = former_tanistry
			}
			else_if = {
				limit = { has_flag = emf_pictish_elective }
				set_flag = former_pictish_elective
			}
			else_if = {
				limit = { has_flag = emf_dynastic_elective }
				set_flag = former_dynastic_elective
			}
			else_if = {
				limit = { has_flag = emf_ultimogeniture }
				set_flag = former_ultimogeniture
			}
			else_if = {
				limit = { has_flag = emf_turkish_succession }
				set_flag = former_turkish_succession
			}
			emf_laws_clr_succ_flags = yes # Clear our current law tracking flag
			emf_laws_set_succ_flag = yes # Set our law tracking flag to correspond to the current law
			ROOT = { pf_tradition_minus6_effect = yes } # Piss off the Tradition Faction
		}
		# Gender succession law changes:
		any_demesne_title = {
			limit = {
				temporary = no
				succ_law_title = { title = PREV }
				emf_has_succ_law_unfit_for_feudal = no
				emf_laws_has_old_gender_succ_flag = yes
			}
			pf_clear_gender_succession_flags_effect = yes
			if = {
				limit = { has_flag = emf_agnatic_succession }
				set_flag = former_agnatic_succession
			}
			else_if = {
				limit = { has_flag = emf_cognatic_succession }
				set_flag = former_cognatic_succession
			}
			else_if = {
				limit = { has_flag = emf_true_cognatic_succession }
				set_flag = former_true_cognatic_succession
			}
			else_if = {
				limit = { has_flag = emf_enatic_cognatic_succession }
				set_flag = former_enatic_cognatic_succession
			}
			else_if = {
				limit = { has_flag = emf_enatic_succession }
				set_flag = former_enatic_succession
			}
			emf_laws_clr_gender_succ_flags = yes
			emf_laws_set_gender_succ_flag = yes
			ROOT = { pf_tradition_minus6_effect = yes }
		}
		# Cases where we have not yet tracked the normal succ. law on this title:
		any_demesne_title = {
			limit = {
				temporary = no
				succ_law_title = { title = PREV }
				emf_has_succ_law_unfit_for_feudal = no
				emf_laws_has_succ_flag = no
			}
			emf_laws_set_succ_flag = yes
		}
		# Cases where we have not yet tracked the gender succ. law on this title:
		any_demesne_title = {
			limit = {
				temporary = no
				succ_law_title = { title = PREV }
				emf_has_succ_law_unfit_for_feudal = no
				emf_laws_has_gender_succ_flag = no
			}
			emf_laws_set_gender_succ_flag = yes
		}
		# Cases where we should stop tracking the succ. laws and former succ. laws on this title:
		any_demesne_title = {
			limit = {
				temporary = no
				succ_law_title = { title = PREV }
				emf_has_succ_law_unfit_for_feudal = yes
			}
			pf_clear_succession_flags_effect = yes
			emf_laws_clr_succ_flags = yes
			emf_laws_clr_gender_succ_flags = yes
		}
	}
}

# emf_laws.41 -- title creation (on_new_holder) handler which clears all stale succ. law and former succ. law
# tracking flags which might be set on the title (from being held previously, then destroyed somehow, and now
# being created again) and initializes the correct law tracking succ. flags.
character_event = {
	id = emf_laws.41

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOT = { FROMFROM = { always = yes } } # Title creation, no immediately-prior holder
		FROM = {
			temporary = no
			OR = {
				pf_has_former_succession_flag = yes
				emf_laws_has_succ_flag = yes
				emf_laws_has_gender_succ_flag = yes
			}
		}
	}

	immediate = {
		FROM = {
			# Clear the stale title flags:
			pf_clear_succession_flags_effect = yes
			emf_laws_clr_succ_flags = yes
			emf_laws_clr_gender_succ_flags = yes
		}
		# Initialize our tracking flags 1 day after today's title transfers:
		clear_delayed_event = { id = emf_laws.40 }
		character_event = { id = emf_laws.40 days = 1 }
	}
}

