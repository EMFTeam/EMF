namespace = emf_laws

#######################################
# EXTENDED LAW SUPPORT CODE
#######################################


# emf_laws.0 [Isis]
# 
# Scenario startup event to ensure that specific CA laws are
# at their maximum values given every crown title's historic
# crown_authority setting. Most titles default to crown_authority_0,
# but some default to other values (e.g., the ERE is at
# crown_authority_2 in 1066). Ideally, far more titles would
# have history overrides for crown authority.
#
# Also may eventually contain logic to dynamically adjust startup
# laws in general based upon certain rules.
character_event = {
	id = emf_laws.0
	hide_window = yes
	is_triggered_only = yes
	
	only_independent = yes
	only_women = yes
	
	trigger = { has_landed_title = e_hip }
	
	immediate = {
		any_playable_ruler = {
			limit = {
				higher_real_tier_than = DUKE
				is_tribal = no
				is_nomadic = no
			}
			character_event = { id = emf_laws.1 }
		}
	}
}


# emf_laws.1 [Ruler, a king OR emperor]
#
# Guts of of emf_laws.0
character_event = {
	id = emf_laws.1
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		OR = {
			is_feudal = yes
			is_republic = yes
		}
	}
	
	immediate = {
		set_character_flag = emf_no_law_penalties
		
		any_demesne_title = {
			limit = { higher_tier_than = duke }
			
			if = {
				limit = { has_law = crown_authority_0 }
				
				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = { NOT = { has_law = revokation_0 } }
						add_law = revokation_0
					}
					if = {
						limit = { NOT = { has_law = king_peace_0 } }
						add_law = king_peace_0
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_0
				}
				if = {
					limit = { NOT = { has_law = inheritance_0 } }
					add_law = inheritance_0
				}
			} # END: Autonomous Vassals
			
			if = {
				limit = { has_law = crown_authority_1 }
				
				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = { NOT = { has_law = revokation_1 } }
						add_law = revokation_1
					}
					if = {
						limit = { NOT = { has_law = king_peace_0 } }
						add_law = king_peace_0
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_1
				}
				if = {
					limit = { NOT = { has_law = inheritance_0 } }
					add_law = inheritance_0
				}
			} # END: Low CA
			
			if = {
				limit = { has_law = crown_authority_2 }
				
				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = {
							NOT = { has_law = succ_feudal_elective }
							NOT = { has_law = revokation_2 }
						}
						add_law = revokation_2
					}
					if = {
						limit = {
							has_law = succ_feudal_elective
							NOT = { has_law = revokation_1 }
						}
						add_law = revokation_1
					}
					if = {
						limit = { NOT = { has_law = king_peace_1 } }
						add_law = king_peace_1
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_2
				}
				if = {
					limit = { NOT = { has_law = inheritance_0 } }
					add_law = inheritance_0
				}
			} # END: Medium CA
			
			if = {
				limit = { has_law = crown_authority_3 }
				
				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = {
							NOT = { has_law = succ_feudal_elective }
							NOT = { has_law = revokation_2 }
						}
						add_law = revokation_2
					}
					if = {
						limit = {
							has_law = succ_feudal_elective
							NOT = { has_law = revokation_1 }
						}
						add_law = revokation_1
					}
					if = {
						limit = { NOT = { has_law = king_peace_1 } }
						add_law = king_peace_1
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_2
				}
				if = {
					limit = {
						NOT = { has_law = succ_feudal_elective }
						NOT = { has_law = inheritance_1 }
					}
					add_law = inheritance_1
				}
				if = {
					limit = {
						has_law = succ_feudal_elective
						NOT = { has_law = inheritance_0 }
					}
					add_law = inheritance_0
				}
			} # END: High CA
			
			if = {
				limit = { has_law = crown_authority_4 }
				if = {
					limit = { NOT = { has_dlc = "Zeus" } }
					if = {
						limit = {
							NOT = { has_law = succ_feudal_elective }
							NOT = { has_law = revokation_2 }
						}
						add_law = revokation_2
					}
					if = {
						limit = {
							has_law = succ_feudal_elective
							NOT = { has_law = revokation_1 }
						}
						add_law = revokation_1
					}
					if = {
						limit = {
							NOT = { has_law = succ_feudal_elective }
							NOT = { has_law = king_peace_2 }
						}
						add_law = king_peace_2
					}
					if = {
						limit = {
							has_law = succ_feudal_elective
							NOT = { has_law = king_peace_1 }
						}
						add_law = king_peace_1
					}
				}
				if = {
					limit = {
						has_dlc = "Zeus"
						is_primary_holder_title = yes
					}
					add_law = ze_revokation_2
				}
				if = {
					limit = {
						NOT = { has_law = succ_feudal_elective }
						NOT = { has_law = inheritance_1 }
					}
					add_law = inheritance_1
				}
				if = {
					limit = {
						has_law = succ_feudal_elective
						NOT = { has_law = inheritance_0 }
					}
					add_law = inheritance_0
				}
			} # END: Max CA
		}
		
		clr_character_flag = emf_no_law_penalties
	}
}


# emf_laws.2 [Holder]
#
# Clear the emf_ca_change title flag on a [potential] crown law title whenever
# it changes hands.
#
# Listens to:
# - on_new_holder_inheritance
#
# FROM = title
character_event = {
	id = emf_laws.2
	hide_window = yes
	is_triggered_only = yes
	
	only_playable = yes
	
	trigger = {
		FROM = { higher_tier_than = duke }
	}
	
	immediate = {
		FROM = {
			clr_title_flag = emf_ca_change
			clr_title_flag = emf_inv_change
		}
	}
}


# emf_laws.3 [Holder]
#
# Upon crown title creation, copy the emf_ca_change flag from either the primary title of the
# holder, OR if this is now the primary title (e.g., due to creating an empire title as a king)
# copy it from any of the kingdom titles of the holder.
#
# Listens to:
# - on_new_holder
#
# FROM = title, FROMFROM = previous holder
character_event = {
	id = emf_laws.3
	hide_window = yes
	is_triggered_only = yes
	
	only_playable = yes
	
	trigger = {
		FROM = { higher_tier_than = DUKE }
	}
	
	immediate = {
		FROM = {
			clr_title_flag = emf_ca_change
			clr_title_flag = emf_inv_change
		}
		
		if = {
			limit = { FROMFROM = { is_alive = yes } } # Title grant or likewise
			break = yes
		}
		
		# Title creation
		if = {
			limit = {
				FROM = { tier = emperor }
				any_demesne_title = {
					higher_tier_than = duke
					has_title_flag = emf_ca_change
				}
			}
			FROM = { set_title_flag = emf_ca_change }
			break = yes
		}
		if = {
			limit = {
				FROM = { tier = king }
				primary_title = {
					higher_tier_than = duke
					has_title_flag = emf_ca_change
				}
			}
			FROM = { set_title_flag = emf_ca_change }
		}
	}
}


# emf_laws.4 [Holder]
#
# Upon crown title usurpation, always drop crown authority by 1 slider
# increment. Do NOT apply a cooldown to the title, however.
#
# Listens to:
# - on_new_holder_usurpation
#
# FROM = title, FROMFROM = previous holder
character_event = {
	id = emf_laws.4
	hide_window = yes
	is_triggered_only = yes
	
	only_playable = yes
	
	trigger = {
		FROM = { higher_tier_than = DUKE }
	}
	
	immediate = {
		FROM = {
			clr_title_flag = emf_ca_change
			clr_title_flag = emf_inv_change
			
			if = {
				limit = { has_law = crown_authority_1 }
				add_law = crown_authority_0
			}
			if = {
				limit = { has_law = crown_authority_2 }
				add_law = crown_authority_1
			}
			if = {
				limit = { has_law = crown_authority_3 }
				add_law = crown_authority_2
			}
			if = {
				limit = { has_law = crown_authority_4 }
				add_law = crown_authority_3
			}
		}
	}
}


#######################################
# REACTIONS TO SUCCESSION LAW CHANGES
# Written by Rylock & zijistark
#######################################

# emf_laws.10 [Holder of Title That's Just Changed Succession Law]
#
# Context:
# - Succession law title has flag emf_succ_title (cleared when we're done)
# - opinion_succ_former_heir points to the former heir (cleared elsewhere)
# - opinion_succ_former_pretender points to the former pretenders (cleared elsewhere)
#
# Fired from non-elective succession law effects immediately after applying
# lower-priority, law-specific succession law reactions.
character_event = {
	id = emf_laws.10
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		is_alive = yes
	}
	
	immediate = {
		save_event_target_as = emf_succ_changer
		
		random_demesne_title = { # Save our title...
			limit = { has_title_flag = emf_succ_title }
			clr_title_flag = emf_succ_title
			save_event_target_as = emf_succ_title
		}
		
		if = {
			limit = { NOT = { event_target:emf_succ_title = { always = yes } } }
			log = "ERROR: emf_laws.10: Succesion law change title (emf_succ_title) not found in demesne of [Root.GetTitledName] (ID: [Root.GetID]); aborting!"
			break = yes
		}
		
		log = "DEBUG: emf_laws.10: Processing special succession law change reactions for the [emf_succ_title.GetFullBaseName] held by [Root.GetTitledFirstName] (ID: [Root.GetID])..."
		
		event_target:emf_succ_title = { current_heir = { save_event_target_as = emf_heir } } # ... and its new heir
		
		if = {
			limit = { NOT = { event_target:emf_heir = { always = yes } } }
			log = "INFO: emf_laws.10: Succesion law change for the [emf_succ_title.GetFullBaseName] resulted in no known successor."
		}
		
		random_opinion_modifier_target = { # Save our former heir...
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_succ_former_heir } }
			save_event_target_as = emf_former_heir
		}
		
		if = {
			limit = { NOT = { event_target:emf_former_heir = { always = yes } } }
			log = "INFO: emf_laws.10: No former heir for the [emf_succ_title.GetFullBaseName]."
		}
		
		# Should the former heir have died or somehow not existed, emf_former_heir will be undefined, but that should
		# work just fine for all of the uses below.
		
		event_target:emf_former_heir = {
			 # Former heir is now neither heir nor pretender
			if = {
				limit = {
					NOT = { character = event_target:emf_heir }
					NOT = { any_pretender_title = { title = event_target:emf_succ_title } }
				}
				character_event = { id = emf_laws.11 }
			}
			
			# Former heir is now pretender
			if = {
				limit = {
					NOT = { character = event_target:emf_heir }
					any_pretender_title = { title = event_target:emf_succ_title }
				}
				character_event = { id = emf_laws.12 }
			}
		}
		
		# Former pretenders that are now neither heir nor pretender
		any_opinion_modifier_target = {
			limit = {
				reverse_has_opinion_modifier = { who = PREV modifier = opinion_succ_former_pretender }
				NOT = { character = event_target:emf_heir }
				NOT = { any_pretender_title = { title = event_target:emf_succ_title } }
			}
			character_event = { id = emf_laws.13 }
		}
		
		# The new heir
		event_target:emf_heir = {
			if = {
				limit = { NOT = { character = event_target:emf_former_heir } }
				character_event = { id = emf_laws.14 }
			}
		}
		
		# The new pretenders
		any_character = {
			limit = {
				any_pretender_title = { title = event_target:emf_succ_title }
				NOR = {
					character = event_target:emf_former_heir
					character = event_target:emf_heir
					reverse_has_opinion_modifier = {
						who = ROOT
						modifier = opinion_succ_former_pretender
					}
				}
			}
			character_event = { id = emf_laws.15 }
		}
	}
}

# emf_laws.11 / Plus.605
# A former heir is now neither the heir nor a pretender
character_event = {
	id = emf_laws.11
	picture = GFX_evt_scandal
	desc = emf_laws.11.desc
	
	is_triggered_only = yes
	
	option = {
		name = emf_laws.11.opt.so_be_it #So be it
		trigger = {
			NOR = {
				trait = lunatic
				trait = possessed
			}
		}
		ai_chance = {
			factor = 30
			modifier = {
				factor = 3
				trait = content
			}
			modifier = {
				factor = 2
				trait = humble
			}
			modifier = {
				factor = 1.5
				trait = charitable
			}
			modifier = {
				factor = 1.5
				trait = patient
			}
			modifier = {
				factor = 1.5
				trait = trusting
			}
			modifier = {
				factor = 0.5
				trait = proud
			}
			modifier = {
				factor = 0.25
				trait = ambitious
			}
		}
		log = "DEBUG: emf_laws.11: Former heir [Root.GetTitledName] (ID: [Root.GetID]) is now neither heir NOR pretender (gracefully accepts)"
		
		emf_laws_change_succ_bad_reaction_effect = yes
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
		
		custom_tooltip = { text = emf_laws_ctt_succ_change_reaction_to_pretenders }
		any_character = {
			limit = { any_pretender_title = { title = event_target:emf_succ_title } }
			reverse_opinion = { who = ROOT modifier = opinion_resentful months = 240 }
		}
		if = {
			limit = {
				any_spouse = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
		}
		any_spouse = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
		}
		if = {
			limit = {
				any_child = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
					NOT = { any_spouse = { character = event_target:emf_heir } }
					emf_can_inherit_trigger = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
		}
		any_child = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
				NOT = { any_spouse = { character = event_target:emf_heir } }
				emf_can_inherit_trigger = yes
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
		}
	}
	option = {
		name = emf_laws.11.opt.outraged #This is an outrage!
		ai_chance = {
			factor = 70
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 1.5
				trait = envious
			}
			modifier = {
				factor = 1.5
				trait = greedy
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 1.5
				trait = paranoid
			}
			modifier = {
				factor = 0.5
				trait = humble
			}
			modifier = {
				factor = 0.25
				trait = content
			}
		}
		log = "DEBUG: emf_laws.11: Former heir [Root.GetTitledName] (ID: [Root.GetID]) is now neither heir NOR pretender (outraged)"
		
		set_character_flag = justified_claimant_@event_target:emf_succ_title
		opinion = { who = FROM modifier = succ_law_disinherit months = 240 }
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
		event_target:emf_succ_title = { add_claim = ROOT }
		
		custom_tooltip = { text = emf_laws_ctt_succ_change_reaction_to_pretenders }
		any_character = {
			limit = { any_pretender_title = { title = event_target:emf_succ_title } }
			reverse_opinion = { who = ROOT modifier = opinion_resentful multiplier = 2 months = 240 }
		}
		if = {
			limit = {
				any_spouse = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
		}
		any_spouse = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
		}
		if = {
			limit = {
				any_child = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
					NOT = { any_spouse = { character = event_target:emf_heir } }
					emf_can_inherit_trigger = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
		}
		any_child = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
				NOT = { any_spouse = { character = event_target:emf_heir } }
				emf_can_inherit_trigger = yes
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
		}
	}
}

# emf_laws.12 / Plus.606
# A former heir is now pretender
character_event = {
	id = emf_laws.12
	picture = GFX_evt_scandal
	desc = emf_laws.12.desc
	
	is_triggered_only = yes
	
	option = {
		name = emf_laws.11.opt.so_be_it #So be it
		trigger = {
			NOR = {
				trait = lunatic
				trait = possessed
			}
		}
		ai_chance = {
			factor = 50
			modifier = {
				factor = 3
				trait = content
			}
			modifier = {
				factor = 2
				trait = humble
			}
			modifier = {
				factor = 1.5
				trait = charitable
			}
			modifier = {
				factor = 1.5
				trait = patient
			}
			modifier = {
				factor = 1.5
				trait = trusting
			}
			modifier = {
				factor = 0.5
				trait = proud
			}
			modifier = {
				factor = 0.25
				trait = ambitious
			}
		}
		log = "DEBUG: emf_laws.12: Former heir [Root.GetTitledName] (ID: [Root.GetID]) is now merely a pretender (gracefully accepts)"
		
		emf_laws_change_succ_bad_reaction_effect = yes
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 120 }
		
		if = {
			limit = {
				any_spouse = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
		}
		any_spouse = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
		}
		if = {
			limit = {
				any_child = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
					NOT = { any_spouse = { character = event_target:emf_heir } }
					emf_can_inherit_trigger = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
		}
		any_child = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
				NOT = { any_spouse = { character = event_target:emf_heir } }
				emf_can_inherit_trigger = yes
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
		}
	}
	option = {
		name = emf_laws.11.opt.outraged #This is an outrage!
		ai_chance = {
			factor = 50
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 1.5
				trait = envious
			}
			modifier = {
				factor = 1.5
				trait = greedy
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 1.5
				trait = paranoid
			}
			modifier = {
				factor = 0.5
				trait = humble
			}
			modifier = {
				factor = 0.25
				trait = content
			}
		}
		log = "DEBUG: emf_laws.12: Former heir [Root.GetTitledName] (ID: [Root.GetID]) is now merely a pretender (outraged)"
		
		set_character_flag = justified_claimant_@event_target:emf_succ_title
		emf_laws_change_succ_terrible_reaction_effect = yes
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
		event_target:emf_succ_title = { add_claim = ROOT }
		
		if = {
			limit = {
				any_spouse = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
		}
		any_spouse = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
		}
		if = {
			limit = {
				any_child = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
					NOT = { any_spouse = { character = event_target:emf_heir } }
					emf_can_inherit_trigger = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
		}
		any_child = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
				NOT = { any_spouse = { character = event_target:emf_heir } }
				emf_can_inherit_trigger = yes
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 5 months = 240 }
		}
	}
}

# emf_laws.13 / Plus.607
# A former pretender is now neither the heir nor a pretender
character_event = {
	id = emf_laws.13
	picture = GFX_evt_scandal
	desc = emf_laws.13.desc
	
	is_triggered_only = yes
	
	option = {
		name = emf_laws.11.opt.so_be_it #So be it
		trigger = {
			NOR = {
				trait = lunatic
				trait = possessed
			}
		}
		ai_chance = {
			factor = 70
			modifier = {
				factor = 3
				trait = content
			}
			modifier = {
				factor = 2
				trait = humble
			}
			modifier = {
				factor = 1.5
				trait = charitable
			}
			modifier = {
				factor = 1.5
				trait = patient
			}
			modifier = {
				factor = 1.5
				trait = trusting
			}
			modifier = {
				factor = 0.5
				trait = proud
			}
			modifier = {
				factor = 0.25
				trait = ambitious
			}
		}
		log = "DEBUG: emf_laws.13: Former pretender [Root.GetTitledName] (ID: [Root.GetID]) is now neither heir NOR pretender (gracefully accepts)"
		emf_laws_change_succ_bad_reaction_effect = yes
		if = {
			limit = {
				any_spouse = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
		}
		any_spouse = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
			}
			emf_laws_change_succ_bad_reaction_effect = yes
		}
		if = {
			limit = {
				any_child = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
					NOT = { any_spouse = { character = event_target:emf_heir } }
					emf_can_inherit_trigger = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
		}
		any_child = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
				NOT = { any_spouse = { character = event_target:emf_heir } }
				emf_can_inherit_trigger = yes
			}
			emf_laws_change_succ_bad_reaction_effect = yes
		}
	}
	option = {
		name = emf_laws.11.opt.outraged #This is an outrage!
		ai_chance = {
			factor = 30
			modifier = {
				factor = 3
				trait = ambitious
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 1.5
				trait = envious
			}
			modifier = {
				factor = 1.5
				trait = greedy
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 1.5
				trait = paranoid
			}
			modifier = {
				factor = 0.5
				trait = humble
			}
			modifier = {
				factor = 0.25
				trait = content
			}
		}
		log = "DEBUG: emf_laws.13: Former pretender [Root.GetTitledName] (ID: [Root.GetID]) is now neither heir NOR pretender (outraged)"
		
		set_character_flag = justified_claimant_@event_target:emf_succ_title
		emf_laws_change_succ_terrible_reaction_effect = yes
		event_target:emf_succ_title = { add_weak_claim = ROOT }
		opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
		
		custom_tooltip = { text = emf_laws_ctt_succ_change_reaction_to_pretenders }
		any_character = {
			limit = { any_pretender_title = { title = event_target:emf_succ_title } }
			reverse_opinion = { who = ROOT modifier = opinion_resentful months = 240 }
		}
		if = {
			limit = {
				any_spouse = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
		}
		any_spouse = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
		}
		if = {
			limit = {
				any_child = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
					NOT = { any_spouse = { character = event_target:emf_heir } }
					emf_can_inherit_trigger = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
		}
		any_child = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
				NOT = { any_spouse = { character = event_target:emf_heir } }
				emf_can_inherit_trigger = yes
			}
			emf_laws_change_succ_bad_reaction_effect = yes
			opinion = { who = event_target:emf_heir modifier = opinion_resentful multiplier = 2 months = 240 }
		}
	}
}

# emf_laws.14 / Plus.608
# The new heir is informed
character_event = {
	id = emf_laws.14
	picture = GFX_evt_emissary
	desc = emf_laws.14.desc
	
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
		log = "DEBUG: emf_laws.14: New heir [Root.GetTitledName] (ID: [Root.GetID]) is pleased"
		emf_laws_change_succ_good_reaction_effect = yes
		if = {
			limit = {
				any_spouse = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
		}
		any_spouse = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		if = {
			limit = {
				any_child = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
					NOT = { any_spouse = { character = event_target:emf_heir } }
					emf_can_inherit_trigger = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
		}
		any_child = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
				NOT = { any_spouse = { character = event_target:emf_heir } }
				emf_can_inherit_trigger = yes
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
	}
}

# emf_laws.15 / Plus.609
# The new pretenders are informed
character_event = {
	id = emf_laws.15
	picture = GFX_evt_emissary
	desc = emf_laws.15.desc
	
	is_triggered_only = yes
	
	option = {
		name = EXCELLENT
		log = "DEBUG: emf_laws.15: New pretender [Root.GetTitledName] (ID: [Root.GetID]) is pleased"
		emf_laws_change_succ_good_reaction_effect = yes
		if = {
			limit = {
				any_spouse = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_spouse_reactions }
		}
		any_spouse = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
		if = {
			limit = {
				any_child = {
					NOT = { character = FROM }
					NOT = { any_child = { character = event_target:emf_heir } }
					NOT = { any_spouse = { character = event_target:emf_heir } }
					emf_can_inherit_trigger = yes
				}
			}
			custom_tooltip = { text = emf_laws_ctt_succ_change_child_reactions }
		}
		any_child = {
			limit = {
				NOT = { character = FROM }
				NOT = { any_child = { character = event_target:emf_heir } }
				NOT = { any_spouse = { character = event_target:emf_heir } }
				emf_can_inherit_trigger = yes
			}
			emf_laws_change_succ_good_reaction_effect = yes
		}
	}
}



#######################################
# SUCCESSION LAW ADJUDICATION
#######################################


# emf_laws.20
#
# on_new_holder on_action listener to [try to] handle unreadable succession laws upon title grant to player
# - since this isn't for on_new_holder_inheritance, there is no delay between title receipt and law adjudication. Guts
# of adjudication fix-up are in emf_laws.21 (for reuse), however.
character_event = {
	id = emf_laws.20
	
	is_triggered_only = yes
	hide_window = yes
	
	ai = no
	
	trigger = {
		FROM = { succ_law_title = { emf_laws_has_playable_succession_law_trigger = no } }
	}
	
	immediate = {
		FROM = { succ_law_title = { save_event_target_as = emf_title } }
		
		log = "DEBUG: Player ([Root.GetID]) gained a title without a readable succession law ([From.GetID])"
		
		if = {
			limit = { FROMFROM = { is_ruler = yes } }
			log = "----> Title was received from [FromFrom.GetTitledName] ([FromFrom.GetID] / [FromFrom.PrimaryTitle.GetID])"
			FROMFROM = { primary_title = { save_event_target_as = emf_ref_title } }
			character_event = { id = emf_laws.21 }
			break = yes
		}
		
		character_event = { id = emf_laws.21 }
	}
}


# emf_laws.21
#
# Try to fix unreadable succession laws on event_target:emf_title. Use the succession law of event_target:emf_ref_title
# as reference while attempting to find the correct law.
character_event = {
	id = emf_laws.21
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		log = "DEBUG: Adjudicating succession law for title [emf_title.GetID] ([emf_title.GetFullName])..."
		
		event_target:emf_title = {
			# Before anything, take care of some high-priority cases:
			
			if = {
				limit = { is_law_potential = succ_patrician_elective }
				log = "----> succ_patrician_elective (due to base case)"
				succession = patrician_elective
				break = yes
			}
			if = {
				limit = { is_law_potential = succ_nomad_succession }
				log = "----> succ_nomad_succession (due to base case)"
				succession = nomad_succession
				break = yes
			}
			
			# Next, try to base the law off emf_ref_title. Note that we do require the allow of the base
			# succession law, as vanilla hard-code would. [This is why a Primogeniture liege can grant titles to
			# vassals yet have the granted title's law adjudicated to Gavelkind, e.g.]
			if = {
				limit = { event_target:emf_ref_title = { always = yes } }
				log = "----> Attempting to use reference title [emf_ref_title.GetID] ([emf_ref_title.GetFullName])..."
				if = {
					limit = {
						event_target:emf_ref_title = { has_law = succ_gavelkind }
						is_law_potential = succ_adopt_gavelkind
						is_law_allowed = succ_gavelkind
					}
					log = "----> succ_gavelkind (due to reference title)"
					succession = gavelkind
					break = yes
				}
				if = {
					limit = {
						event_target:emf_ref_title = { has_law = succ_elective_gavelkind }
						is_law_potential = succ_adopt_elective_gavelkind
						is_law_allowed = succ_elective_gavelkind
					}
					log = "----> succ_elective_gavelkind (due to reference title)"
					succession = elective_gavelkind
					break = yes
				}
				if = {
					limit = {
						event_target:emf_ref_title = { has_law = succ_seniority }
						is_law_potential = succ_adopt_seniority
						is_law_allowed = succ_seniority
					}
					log = "----> succ_seniority (due to reference title)"
					succession = seniority
					break = yes
				}
				if = {
					limit = {
						event_target:emf_ref_title = { has_law = succ_primogeniture }
						is_law_potential = succ_adopt_primogeniture
						is_law_allowed = succ_primogeniture
					}
					log = "----> succ_primogeniture (due to reference title)"
					succession = primogeniture
					break = yes
				}
				if = {
					limit = {
						event_target:emf_ref_title = { has_law = succ_feudal_elective }
						is_law_potential = succ_adopt_feudal_elective
						is_law_allowed = succ_feudal_elective
						OR = {
							higher_tier_than = DUKE
							AND = {
								is_primary_holder_title = yes
								tier = DUKE
							}
						}
					}
					log = "----> succ_feudal_elective (due to reference title)"
					succession = feudal_elective
					break = yes
				}
				if = {
					limit = {
						event_target:emf_ref_title = { has_law = succ_tanistry }
						is_law_potential = succ_adopt_tanistry
						is_law_allowed = succ_tanistry
					}
					log = "----> succ_tanistry (due to reference title)"
					succession = tanistry
					break = yes
				}
				if = {
					limit = {
						event_target:emf_ref_title = { has_law = succ_ultimogeniture }
						is_law_potential = succ_adopt_ultimogeniture
						is_law_allowed = succ_ultimogeniture
					}
					log = "----> succ_ultimogeniture (due to reference title)"
					succession = ultimogeniture
					break = yes
				}
				if = {
					limit = {
						event_target:emf_ref_title = { has_law = succ_turkish_succession }
						is_law_potential = succ_adopt_turkish_succession
						is_law_allowed = succ_turkish_succession
					}
					log = "----> succ_turkish_succession (due to reference title)"
					succession = turkish_succession
					break = yes
				}
			}
			
			# Failing that, try to align with our primary title. Note that we do not care about law allow
			# conditions in this case.
			
			log = "----> Attempting to use primary title as reference..."
			
			if = {
				limit = {
					primary_title = { has_law = succ_gavelkind }
					is_law_potential = succ_adopt_gavelkind
				}
				log = "----> succ_gavelkind (due to primary title)"
				succession = gavelkind
				break = yes
			}
			if = {
				limit = {
					primary_title = { has_law = succ_elective_gavelkind }
					is_law_potential = succ_adopt_elective_gavelkind
				}
				log = "----> succ_elective_gavelkind (due to primary title)"
				succession = elective_gavelkind
				break = yes
			}
			if = {
				limit = {
					primary_title = { has_law = succ_seniority }
					is_law_potential = succ_adopt_seniority
				}
				log = "----> succ_seniority (due to primary title)"
				succession = seniority
				break = yes
			}
			if = {
				limit = {
					primary_title = { has_law = succ_primogeniture }
					is_law_potential = succ_adopt_primogeniture
				}
				log = "----> succ_primogeniture (due to primary title)"
				succession = primogeniture
				break = yes
			}
			if = {
				limit = {
					primary_title = { has_law = succ_feudal_elective }
					is_law_potential = succ_adopt_feudal_elective
					OR = {
						higher_tier_than = DUKE
						AND = {
							is_primary_holder_title = yes
							tier = DUKE
						}
					}
				}
				log = "----> succ_feudal_elective (due to primary title)"
				succession = feudal_elective
				break = yes
			}
			if = {
				limit = {
					primary_title = { has_law = succ_tanistry }
					is_law_potential = succ_adopt_tanistry
				}
				log = "----> succ_tanistry (due to primary title)"
				succession = tanistry
				break = yes
			}
			if = {
				limit = {
					primary_title = { has_law = succ_ultimogeniture }
					is_law_potential = succ_adopt_ultimogeniture
				}
				log = "----> succ_ultimogeniture (due to primary title)"
				succession = ultimogeniture
				break = yes
			}
			if = {
				limit = {
					primary_title = { has_law = succ_turkish_succession }
					is_law_potential = succ_adopt_turkish_succession
				}
				log = "----> succ_turkish_succession (due to primary title)"
				succession = turkish_succession
				break = yes
			}
		}

		# If emf_title actually _is_ our primary, we were probably granted a title of higher tier than our previous.
		# In that case, we're going with an ad hoc solution where we try to find a readable succession law on a non-crown
		# title in our demesne and use it.
		
		random_demesne_title = {
			limit = {
				event_target:emf_title = {
					is_primary_holder_title = yes
					NOT = { title = PREV }
				}
				lower_tier_than = KING
				emf_laws_has_playable_succession_law_trigger = yes
			}
			save_event_target_as = emf_other_ref_title
		}
		
		
		event_target:emf_title = {
			if = {
				limit = { event_target:emf_other_ref_title = { always = yes } }
				
				# NOTE: We do not care at all for succession law allow conditions in this fallback case
				log = "----> Attempting to use other, demesne reference title [emf_other_ref_title.GetID] ([emf_other_ref_title.GetFullName])..."
				if = {
					limit = {
						event_target:emf_other_ref_title = { has_law = succ_gavelkind }
						is_law_potential = succ_adopt_gavelkind
					}
					log = "----> succ_gavelkind (due to demesne reference title)"
					succession = gavelkind
					break = yes
				}
				if = {
					limit = {
						event_target:emf_other_ref_title = { has_law = succ_elective_gavelkind }
						is_law_potential = succ_adopt_elective_gavelkind
					}
					log = "----> succ_elective_gavelkind (due to demesne reference title)"
					succession = elective_gavelkind
					break = yes
				}
				if = {
					limit = {
						event_target:emf_other_ref_title = { has_law = succ_seniority }
						is_law_potential = succ_adopt_seniority
					}
					log = "----> succ_seniority (due to demesne reference title)"
					succession = seniority
					break = yes
				}
				if = {
					limit = {
						event_target:emf_other_ref_title = { has_law = succ_primogeniture }
						is_law_potential = succ_adopt_primogeniture
					}
					log = "----> succ_primogeniture (due to demesne reference title)"
					succession = primogeniture
					break = yes
				}
				if = {
					limit = {
						event_target:emf_other_ref_title = { has_law = succ_feudal_elective }
						is_law_potential = succ_adopt_feudal_elective
						OR = {
							higher_tier_than = DUKE
							AND = {
								is_primary_holder_title = yes
								tier = DUKE
							}
						}
					}
					log = "----> succ_feudal_elective (due to demesne reference title)"
					succession = feudal_elective
					break = yes
				}
				if = {
					limit = {
						event_target:emf_other_ref_title = { has_law = succ_tanistry }
						is_law_potential = succ_adopt_tanistry
					}
					log = "----> succ_tanistry (due to demesne reference title)"
					succession = tanistry
					break = yes
				}
				if = {
					limit = {
						event_target:emf_other_ref_title = { has_law = succ_ultimogeniture }
						is_law_potential = succ_adopt_ultimogeniture
					}
					log = "----> succ_ultimogeniture (due to demesne reference title)"
					succession = ultimogeniture
					break = yes
				}
				if = {
					limit = {
						event_target:emf_other_ref_title = { has_law = succ_turkish_succession }
						is_law_potential = succ_adopt_turkish_succession
					}
					log = "----> succ_turkish_succession (due to demesne reference title)"
					succession = turkish_succession
					break = yes
				}
			}
			
			# Failing that, simply check all [player-relevant] succession laws from top to bottom, as vanilla
			# hard-code would, picking our first match. Note: if we were to apply this to all rulers rather than
			# just the player, we'd definitely want to be looking at more succession laws (but that is true
			# generally of this event). Note that, allow conditions are again required in this case.
			log = "----> Attempting standard succession law fallback..."
			if = {
				limit = {
					is_law_potential = succ_adopt_gavelkind
					is_law_allowed = succ_gavelkind
				}
				log = "----> succ_gavelkind (due to standard fallback)"
				succession = gavelkind
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_elective_gavelkind
					is_law_allowed = succ_elective_gavelkind
				}
				log = "----> succ_elective_gavelkind (due to standard fallback)"
				succession = elective_gavelkind
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_seniority
					is_law_allowed = succ_seniority
				}
				log = "----> succ_seniority (due to standard fallback)"
				succession = seniority
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_primogeniture
					is_law_allowed = succ_primogeniture
				}
				log = "----> succ_primogeniture (due to standard fallback)"
				succession = primogeniture
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_feudal_elective
					is_law_allowed = succ_feudal_elective
					OR = {
						higher_tier_than = DUKE
						AND = {
							is_primary_holder_title = yes
							tier = DUKE
						}
					}
				}
				log = "----> succ_feudal_elective (due to standard fallback)"
				succession = feudal_elective
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_tanistry
					is_law_allowed = succ_tanistry
				}
				log = "----> succ_tanistry (due to standard fallback)"
				succession = tanistry
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_ultimogeniture
					is_law_allowed = succ_ultimogeniture
				}
				log = "----> succ_ultimogeniture (due to standard fallback)"
				succession = ultimogeniture
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_turkish_succession
					is_law_allowed = succ_turkish_succession
				}
				log = "----> succ_turkish_succession (due to standard fallback)"
				succession = turkish_succession
				break = yes
			}
			
			# Failing THAT (somehow), drop the allow conditions from the standard fallback.
			log = "----> Attempting final succession law fallback..."
			if = {
				limit = {
					is_law_potential = succ_adopt_gavelkind
				}
				log = "----> succ_gavelkind (due to final fallback)"
				succession = gavelkind
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_elective_gavelkind
				}
				log = "----> succ_elective_gavelkind (due to final fallback)"
				succession = elective_gavelkind
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_seniority
				}
				log = "----> succ_seniority (due to final fallback)"
				succession = seniority
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_primogeniture
				}
				log = "----> succ_primogeniture (due to final fallback)"
				succession = primogeniture
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_feudal_elective
					OR = {
						higher_tier_than = DUKE
						AND = {
							is_primary_holder_title = yes
							tier = DUKE
						}
					}
				}
				log = "----> succ_feudal_elective (due to final fallback)"
				succession = feudal_elective
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_tanistry
				}
				log = "----> succ_tanistry (due to final fallback)"
				succession = tanistry
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_ultimogeniture
				}
				log = "----> succ_ultimogeniture (due to final fallback)"
				succession = ultimogeniture
				break = yes
			}
			if = {
				limit = {
					is_law_potential = succ_adopt_turkish_succession
				}
				log = "----> succ_turkish_succession (due to final fallback)"
				succession = turkish_succession
				break = yes
			}
		}
	}
}


#######################################
# DEBUG
#######################################


# emf_laws.1000
#
# Log all titles which are either held primary or crown-tier, sorted descending by tier with no readable succession law.
character_event = {
	id = emf_laws.1000
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		log = "emf_laws.1000: scanning titles for lack of a regular succession law..."
		any_title = {
			limit = {
				has_holder = yes
				tier = EMPEROR
				OR = {
					is_primary_holder_title = yes
					higher_tier_than = DUKE
				}
				NOT = { succ_law_title = { emf_laws_has_succession_law_trigger = yes } }
			}
			emf_laws_log_succession_effect = yes
		}
		any_title = {
			limit = {
				has_holder = yes
				tier = KING
				OR = {
					is_primary_holder_title = yes
					higher_tier_than = DUKE
				}
				NOT = { succ_law_title = { emf_laws_has_succession_law_trigger = yes } }
			}
			emf_laws_log_succession_effect = yes
		}
		any_title = {
			limit = {
				has_holder = yes
				tier = DUKE
				OR = {
					is_primary_holder_title = yes
					higher_tier_than = DUKE
				}
				NOT = { succ_law_title = { emf_laws_has_succession_law_trigger = yes } }
			}
			emf_laws_log_succession_effect = yes
		}
		any_title = {
			limit = {
				has_holder = yes
				tier = COUNT
				OR = {
					is_primary_holder_title = yes
					higher_tier_than = DUKE
				}
				NOT = { succ_law_title = { emf_laws_has_succession_law_trigger = yes } }
			}
			emf_laws_log_succession_effect = yes
		}
		any_title = {
			limit = {
				has_holder = yes
				tier = BARON
				OR = {
					is_primary_holder_title = yes
					higher_tier_than = DUKE
				}
				NOT = { succ_law_title = { emf_laws_has_succession_law_trigger = yes } }
			}
			emf_laws_log_succession_effect = yes
		}
	}
}
