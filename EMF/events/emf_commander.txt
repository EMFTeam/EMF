# -*- ck2.events -*-


namespace = emf_commander


# emf_commander.0
#
# on_major_battle_won
#
# ROOT is any liege levy subunit commander on victorious
# side of major battle, including flank commanders.
character_event = {
	id = emf_commander.0
	desc = HIDE_EVENT
	hide_window = yes
	is_triggered_only = yes
	
	option = {
		name = OK
		
		# Find which of our lieges is at war and responsible for this battle
		
		# if = {
			# limit = {
				# liege = { character = ROOT }
				# war_with = FROM
			# }
			# save_event_target_as = emf_war_liege
		# }
		
		# any_liege = {
			# limit = {
				# real_tier = EMPEROR
				# war_with = FROM
				# not = { event_target:emf_war_liege = { always = yes } }
			# }
			# save_event_target_as = emf_war_liege
		# }
		# any_liege = {
			# limit = {
				# real_tier = KING
# #				in_revolt = no
				# war_with = FROM
				# not = { event_target:emf_war_liege = { always = yes } }
			# }
			# save_event_target_as = emf_war_liege
		# }
		# any_liege = {
			# limit = {
				# real_tier = DUKE
# #				in_revolt = no
				# war_with = FROM
				# not = { event_target:emf_war_liege = { always = yes } }
			# }
			# save_event_target_as = emf_war_liege
		# }
		# any_liege = {
			# limit = {
				# real_tier = COUNT
# #				in_revolt = no
				# war_with = FROM
				# not = { event_target:emf_war_liege = { always = yes } }
			# }
			# save_event_target_as = emf_war_liege
		# }
		
		# if = {
			# limit = {
				# not = {
					# event_target:emf_war_liege = { always = yes }
				# }
			# }
			# log = "emf_commander.0: '[Root.GetTitledName]' ([Root.GetID]): failed to find liege at war with '[From.GetTitledName]' ([From.GetID]) of the '[From.Realm.GetFullName]'"
		# }

		# event_target:emf_war_liege = {
			# if = {
				# limit = {
					# any_war = {
						# any_defender = { character = event_target:emf_war_liege }
					# }
					# not = {
						# any_war = {
							# any_attacker = { character = event_target:emf_war_liege }
						# }
					# }
				# }
				# log = "emf_commander.0: major victory for the '[This.PrimaryTitle.GetFullName]' (liege: '[This.GetBestName]', war_type: defensive)"
			# }
			# if = {
				# limit = {
					# any_war = {
						# any_attacker = { character = event_target:emf_war_liege }
					# }
					# not = {
						# any_war = {
							# any_defender = { character = event_target:emf_war_liege }
						# }
					# }
				# }
				# log = "emf_commander.0: major victory for the '[This.PrimaryTitle.GetFullName]' (liege: '[This.GetBestName]', war_type: offensive)"
			# }
			# if = {
				# limit = {
					# any_war = {
						# any_attacker = { character = event_target:emf_war_liege }
					# }
					# any_war = {
						# any_defender = { character = event_target:emf_war_liege }
					# }
				# }
				# log = "emf_commander.0: major victory for the '[This.PrimaryTitle.GetFullName]' (liege: '[This.GetBestName]', war_type: ambiguous)"
			# }
			# if = {
				# limit = {
					# not = {
						# any_war = {
							# any_attacker = { character = event_target:emf_war_liege }
						# }
						# any_war = {
							# any_defender = { character = event_target:emf_war_liege }
						# }
					# }
				# }
				# log = "emf_commander.0: major victory for the '[This.PrimaryTitle.GetFullName]' (liege: '[This.GetBestName]', war_type: NEITHER)"
			# }
		# }
		
		if = {
			limit = { trait = commander4 }
			# TODO: Chance to generate claim.

			# For now, simply flag the character as having received a weak claim (assuming same chance for that too).
			
			# random_list = {
				# 500 = { set_character_flag = emf_commander_claim }
				# 500 = { }
			# }
			
			# event_target:emf_war_liege = {
				# primary_title = {
					# if = {
						# limit = {
							# not = { ROOT = { has_claim = PREV } }
							# not = { holder = ROOT }
						# }
						# add_weak_claim = ROOT
					# }
				# }
			# }
			
			break = yes
		}
		
		if = {
			limit = { trait = commander3 }
			random_list = {
				200 = { add_trait = commander4 }
				800 = { }
			}
			break = yes
		}
		
		if = {
			limit = { trait = commander2 }
			random_list = {
				200 = { add_trait = commander3 }
				800 = { }
			}
			break = yes
		}
		
		if = {
			limit = { trait = commander1 }
			random_list = {
				200 = { add_trait = commander2 }
				800 = { }
			}
			break = yes
		}
		
		random_list = {
			100 = { add_trait = commander1 }
			900 = { }
		}
	}
}


character_event = {
	id = emf_commander.100
	
	is_triggered_only = yes
	hide_window = yes
	
	only_independent = yes
	only_playable = yes
	religion = hip_religion
	
	trigger = {
		always = no
		has_landed_title = e_hip
	}
	
	option = {
		name = OK
		
		set_variable = { which = ch_cX value = 0 }
		set_variable = { which = ch_c1 value = 0 }
		set_variable = { which = ch_c2 value = 0 }
		set_variable = { which = ch_c3 value = 0 }
		set_variable = { which = ch_c4 value = 0 }
		
		set_variable = { which = mu_cX value = 0 }
		set_variable = { which = mu_c1 value = 0 }
		set_variable = { which = mu_c2 value = 0 }
		set_variable = { which = mu_c3 value = 0 }
		set_variable = { which = mu_c4 value = 0 }
		
		set_variable = { which = pa_cX value = 0 }
		set_variable = { which = pa_c1 value = 0 }
		set_variable = { which = pa_c2 value = 0 }
		set_variable = { which = pa_c3 value = 0 }
		set_variable = { which = pa_c4 value = 0 }
		
		any_independent_ruler = {
			any_realm_character = {
				limit = {
					is_female = no
					is_adult = yes
					prisoner = no
					NOT = { trait = incapable }
					religion_group = christian
				}
				ROOT = { change_variable = { which = ch_cX value = 1 } }
				if = {
					limit = { trait = commander1 }
					ROOT = { change_variable = { which = ch_c1 value = 1 } }
				}
				if = {
					limit = { trait = commander2 }
					ROOT = { change_variable = { which = ch_c2 value = 1 } }
				}
				if = {
					limit = { trait = commander3 }
					ROOT = { change_variable = { which = ch_c3 value = 1 } }
				}
				if = {
					limit = { trait = commander4 }
					ROOT = { change_variable = { which = ch_c4 value = 1 } }
				}
			}
		}
		any_independent_ruler = {
			any_realm_character = {
				limit = {
					is_female = no
					is_adult = yes
					prisoner = no
					NOT = { trait = incapable }
					religion_group = muslim
				}
				ROOT = { change_variable = { which = mu_cX value = 1 } }
				if = {
					limit = { trait = commander1 }
					ROOT = { change_variable = { which = mu_c1 value = 1 } }
				}
				if = {
					limit = { trait = commander2 }
					ROOT = { change_variable = { which = mu_c2 value = 1 } }
				}
				if = {
					limit = { trait = commander3 }
					ROOT = { change_variable = { which = mu_c3 value = 1 } }
				}
				if = {
					limit = { trait = commander4 }
					ROOT = { change_variable = { which = mu_c4 value = 1 } }
				}
			}
		}
		any_independent_ruler = {
			any_realm_character = {
				limit = {
					is_female = no
					is_adult = yes
					prisoner = no
					NOT = { trait = incapable }
					religion_group = pagan_group
				}
				ROOT = { change_variable = { which = pa_cX value = 1 } }
				if = {
					limit = { trait = commander1 }
					ROOT = { change_variable = { which = pa_c1 value = 1 } }
				}
				if = {
					limit = { trait = commander2 }
					ROOT = { change_variable = { which = pa_c2 value = 1 } }
				}
				if = {
					limit = { trait = commander3 }
					ROOT = { change_variable = { which = pa_c3 value = 1 } }
				}
				if = {
					limit = { trait = commander4 }
					ROOT = { change_variable = { which = pa_c4 value = 1 } }
				}
			}
		}
		
		log = "COMMANDERS: christian: [Root.ch_cX.GetValue] | [Root.ch_c1.GetValue] / [Root.ch_c2.GetValue] / [Root.ch_c3.GetValue] / [Root.ch_c4.GetValue]"
		log = "COMMANDERS: muslim:    [Root.mu_cX.GetValue] | [Root.mu_c1.GetValue] / [Root.mu_c2.GetValue] / [Root.mu_c3.GetValue] / [Root.mu_c4.GetValue]"
		log = "COMMANDERS: pagan:     [Root.pa_cX.GetValue] | [Root.pa_c1.GetValue] / [Root.pa_c2.GetValue] / [Root.pa_c3.GetValue] / [Root.pa_c4.GetValue]"
	}
}

