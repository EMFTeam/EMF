# -*- ck2.events -*-

namespace = emf_siege

# Written by AnaxXiphos
# Loosely based on Meneth's version of Waylit's Dungeons AND Sieges

# Definite future changes:
# Special flavor for looting holy sites of other religions
# Give looters something to do with all the lowborn scum they capture (sell them into slavery AND/OR, per ziji's suggestion, "upgrade" them invisibly so they're sometimes useful as councilors OR generals OR whatever)
# AI will be allowed to massacre folks at the end of sieges, but will be unlikely to do so

# Possible future changes:
# If still generating too many prisoners, escape failure odds might be reduced
# Resurrect the escape events somehow?
# Add new flavor for looting of own holy sites?
# Special mechanics AND/OR flavor for specific religions when they loot?

### WARFARE EVENTS
# During regular warfare, capturing nobles is fairly common, but primary participants in wars are protected
# Protected characters can still be captured, but only rarely
# If the owner of a besieged barony isn't present, the family will still try to escape, but with reduced success
# At the end of a successful siege, the attacker can choose how to treat characters found at the barony

## Defender Events
## 0-49 Reserved
# Initial forwarder - from on_siege_pulse
character_event = {
	id = emf_siege.0
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		siege = { is_attacker = yes }
		NOR = {
			rebel = yes
			primary_title = { has_flag = emf_revolt }
			has_landed_title = e_rebels
			any_liege = {
				OR = {
					rebel = yes
					primary_title = { has_flag = emf_revolt }
					has_landed_title = e_rebels
				}
			}
		}
		location = {
			any_province_lord = {
				OR = { # Either defending the siege OR someone in court is
					siege = { is_attacker = no }
					any_realm_character = {
						at_location = PREVPREV
						siege = { is_attacker = no }
					}
				}
				capital_scope = { province = PREVPREV } # Must be capital province
				NOT = { # First holding always capital for higher tiers, treated as such for barons
					any_demesne_title = {
						tier = BARON
						location = { province = PREVPREVPREV }
						is_occupied = yes
					}
				}
				OR = { # Must be in actual war, because war_with doesn't filter raids
					ROOT = { # Is ROOT at war with owner?
						any_current_enemy = { character = PREVPREV }
					}
					any_liege = { # Is ROOT at war with any liege of owner?
						ROOT = {
							any_current_enemy = { character = PREVPREV }
						}
					}
					ROOT = { # Is any liege of ROOT at war with owner?
						any_liege = {
							any_war = {
								OR = {
									any_attacker = { character = PREVPREVPREVPREV }
									any_defender = { character = PREVPREVPREVPREV }
								}
								OR = {
									any_attacker = { character = PREVPREV }
									any_defender = { character = PREVPREV }
								}
							}
						}
					}
					any_liege = { # Is any liege of owner at war with any liege of ROOT?
						ROOT = {
							any_liege = {
								any_war = {
									OR = {
										any_attacker = { character = PREVPREVPREVPREV }
										any_defender = { character = PREVPREVPREVPREV }
									}
									OR = {
										any_attacker = { character = PREVPREV }
										any_defender = { character = PREVPREV }
									}
								}
							}
						}
					}
				}
			}
		}
	}

	immediate = {
		save_event_target_as = emf_attacker
		location = {
			save_event_target_as = emf_location
			random_province_lord = {
				limit = {
					OR = {
						siege = { is_attacker = no }
						any_realm_character = {
							at_location = event_target:emf_location
							siege = { is_attacker = no }
						}
					}
					capital_scope = { province = event_target:emf_location }
					NOT = {
						any_demesne_title = {
							tier = BARON
							location = { province = event_target:emf_location }
							is_occupied = yes
						}
					}
				}
				save_event_target_as = emf_defender
			}
		}
		if = {
			limit = {
				event_target:emf_defender = {
					NOT = { has_character_modifier = emf_siege_timer }
				}
			}
			event_target:emf_defender = {
				if = { # If leader isn't present, let family run with worse odds
					limit = {
						OR = {
							NOT = { at_location = event_target:emf_location }
							prisoner = yes
							is_inaccessible_trigger = yes
							trait = on_hajj
							trait = on_pilgrimage
							trait = traveling # VIET compatibility
						}
					}
					any_courtier = {
						limit = {
							at_location = event_target:emf_location
							NOT = { character = PREV }
							has_job_action = no
							is_ruler = no
							OR = {
								is_close_relative = PREV
								is_married = PREV
								is_consort = PREV
								AND = {
									is_lowborn = no
									dynasty = PREV
								}
							}
							NOT = { is_inaccessible_trigger = yes }
						}
						set_flag = emf_siege_vulnerable
						character_event = { id = emf_siege.2 }
					}
				}
				if = { # If leader is present, send them options
					limit = {
						at_location = event_target:emf_location
						prisoner = no
						NOT = { is_inaccessible_trigger = yes }
						NOT = { trait = on_hajj }
						NOT = { trait = on_pilgrimage }
						NOT = { trait = traveling } # VIET compatibility
					}
					if = { # Save regent for consistency later
						limit = { has_regent = yes }
						regent = {
							save_event_target_as = emf_regent
						}
					}
					character_event = { id = emf_siege.1 }
				}
				any_courtier = { # Send options to other present rulers
					limit = {
						NOT = { character = PREV }
						host = { character = PREVPREV }
						at_location = event_target:emf_location
						prisoner = no
						has_job_action = no
						is_ruler = yes
						has_regent = no
						NOT = { is_inaccessible_trigger = yes }
					}
					character_event = { id = emf_siege.8 }
				}
				add_character_modifier = {
					name = emf_siege_timer	# May need to be increased to prevent AI from spamming players
					duration = 21			# Adjust this value to = (DAYS_BETWEEN_COMBAT_EVENTS * 2) + 1
					hidden = yes			# REMEMBER TO CHANGE BELOW ALSO
				}
			}
		}
		else_if = {
			limit = {
				event_target:emf_defender = { has_character_modifier = emf_siege_timer }
			}
			event_target:emf_defender = {
				remove_character_modifier = emf_siege_timer
				add_character_modifier = {
					name = emf_siege_timer
					duration = 21 # See note above
					hidden = yes
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Defender choice event
character_event = {
	id = emf_siege.1
	# No regent
	desc = { # Family
		text = emf_siege.1.desc_fam
		trigger = {
			has_regent = no
			has_flag = emf_siege_family
		}
	}
	desc = { # No family
		text = emf_siege.1.desc_nofam
		trigger = {
			has_regent = no
			NOT = { has_flag = emf_siege_family }
		}
	}
	# Regent present
	desc = { # Incapable
		text = emf_siege.1.desc_incapable_regent
		trigger = {
			has_regent = yes
			OR = {
				is_incapable = yes
				NOT = { age = 5 }
			}
			event_target:emf_regent = {
				at_location = event_target:emf_location
				has_job_action = no
			}
		}
	}
	desc = { # Child
		text = emf_siege.1.desc_child_regent
		trigger = {
			has_regent = yes
			is_incapable = no
			age = 5
			event_target:emf_regent = {
				at_location = event_target:emf_location
				has_job_action = no
			}
		}
	}
	# Regent missing
	desc = { # Incapable, has family
		text = emf_siege.1.desc_incapable_noregent_fam
		trigger = {
			has_regent = yes
			OR = {
				is_incapable = yes
				NOT = { age = 5 }
			}
			event_target:emf_regent = {
				OR = {
					NOT = { at_location = event_target:emf_location }
					has_job_action = yes
				}
			}
			has_flag = emf_siege_family
		}
	}
	desc = { # Child, has family
		text = emf_siege.1.desc_child_noregent_fam
		trigger = {
			has_regent = yes
			is_incapable = no
			age = 5
			event_target:emf_regent = {
				OR = {
					NOT = { at_location = event_target:emf_location }
					has_job_action = yes
				}
			}
			has_flag = emf_siege_family
		}
	}
	desc = { # Incapable, no family
		text = emf_siege.1.desc_incapable_noregent_nofam
		trigger = {
			has_regent = yes
			OR = {
				is_incapable = yes
				NOT = { age = 5 }
			}
			event_target:emf_regent = {
				OR = {
					NOT = { at_location = event_target:emf_location }
					has_job_action = yes
				}
			}
			NOT = { has_flag = emf_siege_family }
		}
	}
	desc = { # Child, no family
		text = emf_siege.1.desc_child_noregent_nofam
		trigger = {
			has_regent = yes
			is_incapable = no
			age = 5
			event_target:emf_regent = {
				OR = {
					NOT = { at_location = event_target:emf_location }
					has_job_action = yes
				}
			}
			NOT = { has_flag = emf_siege_family }
		}
	}
	picture = GFX_evt_council
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	immediate = {
		# Start with a clean slate each time
		remove_character_modifier = emf_siege_defender
		remove_character_modifier = emf_siege_failed_escape
		remove_character_modifier = emf_siege_left_behind
		any_courtier = {
			limit = { at_location = event_target:emf_location }
			remove_character_modifier = emf_siege_defender
			remove_character_modifier = emf_siege_failed_escape
			remove_character_modifier = emf_siege_left_behind
		}
		if = { # Check for family
			limit = {
				ai = no
				any_courtier = {
					at_location = event_target:emf_location
					NOT = { character = ROOT }
					has_job_action = no
					is_ruler = no
					OR = {
						is_close_relative = ROOT
						is_married = ROOT
						is_consort = ROOT
						AND = {
							is_lowborn = no
							dynasty = ROOT
						}
					}
					NOT = { is_inaccessible_trigger = yes }
				}
			}
			set_flag = emf_siege_family
		}
		if = { # Check for value
			limit = {
				ai = yes
				OR = {
					ROOT = { any_current_enemy = { character = FROM } }
					FROM = { any_liege = { ROOT = { any_current_enemy = { character = PREVPREV } } } }
				}
			}
			set_flag = emf_siege_valuable
		}
	}

	# AI Options
	option = { # High value AI targets always try to escape, have better chances
		trigger = {
			ai = yes
			has_flag = emf_siege_valuable
		}
		name = AI_EVENT
		clr_flag = emf_siege_valuable
		set_flag = emf_siege_protected
		character_event = { id = emf_siege.2 }
		any_courtier = {
			limit = {
				at_location = event_target:emf_location
				NOT = { character = ROOT }
				has_job_action = no
				is_ruler = no
				OR = {
					is_close_relative = ROOT
					is_married = ROOT
					is_consort = ROOT
					AND = {
						is_lowborn = no
						dynasty = ROOT
					}
				}
				NOT = { is_inaccessible_trigger = yes }
				NOT = { has_character_modifier = emf_siege_failed_escape }
			}
			character_event = { id = emf_siege.2 }
		}
	}
	option = { # Most other AI try to escape
		trigger = {
			ai = yes
			NOT = { has_flag = emf_siege_valuable }
		}
		name = AI_EVENT
		character_event = { id = emf_siege.2 }
		any_courtier = {
			limit = {
				at_location = event_target:emf_location
				NOT = { character = ROOT }
				has_job_action = no
				is_ruler = no
				OR = {
					is_close_relative = ROOT
					is_married = ROOT
					is_consort = ROOT
					AND = {
						is_lowborn = no
						dynasty = ROOT
					}
				}
				NOT = { is_inaccessible_trigger = yes }
				NOT = { has_character_modifier = emf_siege_failed_escape }
			}
			character_event = { id = emf_siege.2 }
		}
		ai_chance = {
			factor = 10
		}
	}
	option = { # But some AI stay and fight
		trigger = {
			ai = yes
			NOT = { has_flag = emf_siege_valuable }
			NOT = { trait = craven }
		}
		name = AI_EVENT
		add_character_modifier = { name = emf_siege_defender duration = 365 }
		any_courtier = {
			limit = {
				at_location = event_target:emf_location
				NOT = { character = ROOT }
				has_job_action = no
				is_ruler = no
				OR = {
					is_close_relative = ROOT
					is_married = ROOT
					is_consort = ROOT
					AND = {
						is_lowborn = no
						dynasty = ROOT
					}
				}
				NOT = { is_inaccessible_trigger = yes }
				NOT = { has_character_modifier = emf_siege_failed_escape }
			}
			set_flag = emf_siege_protected
			character_event = { id = emf_siege.2 }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 0.5
				NOT = { trait = holy_warrior }
				NOT = { trait = crusader }
				NOT = { trait = mujahid  }
				FROM = {
					NOR = {
						religion_group = ROOT
						ROOT = { emf_syncretized_religion_with_PREV = yes }
					}
				}
			}
			modifier = {
				factor = 10
				trait = proud
			}
			modifier = {
				factor = 100
				trait = brave
			}
		}
	}

	# Player Options
	option = { # Attempt escape alone when no family is present OR they're already hiding
		trigger = {
			ai = no
			has_regent = no
			NOT = { has_flag = emf_siege_family }
		}
		name = emf_siege.1.a
		custom_tooltip = { text = emf_siege.1.a_tt }
		hidden_tooltip = {
			random_list = {
				10 = { # Success
					add_trait = in_hiding
					set_flag = emf_siege_in_hiding
					set_flag = do_not_disturb
				}
				1 = { # Failure
					add_character_modifier = {
						name = emf_siege_failed_escape
						duration = 365
					}
				}
			}
			character_event = { id = emf_siege.3 }
		}
	}
	option = { # Stay AND fight when no family is present OR they're already hiding
		trigger = {
			ai = no
			has_regent = no
			NOT = { has_flag = emf_siege_family }
		}
		name = emf_siege.1.b
		add_character_modifier = { name = emf_siege_defender duration = 365 }
	}
	option = { # Attempt escape alone even with family present
		trigger = {
			ai = no
			has_regent = no
			has_flag = emf_siege_family
		}
		name = emf_siege.1.c
		custom_tooltip = { text = emf_siege.1.c_tt }
		any_courtier = { # Family will be furious
			limit = {
				at_location = event_target:emf_location
				NOT = { character = ROOT }
				has_job_action = no
				is_ruler = no
				OR = {
					is_close_relative = ROOT
					is_married = ROOT
					is_consort = ROOT
					AND = {
						is_lowborn = no
						dynasty = ROOT
					}
				}
				NOT = { is_inaccessible_trigger = yes }
			}
			opinion = {
				modifier = opinion_furious
				who = ROOT
				months = 12
			}
		}
		hidden_tooltip = {
			random_list = {
				10 = { # Success
					add_trait = in_hiding
					set_flag = emf_siege_in_hiding
					set_flag = do_not_disturb
					any_courtier = {
						limit = {
							at_location = event_target:emf_location
							NOT = { character = ROOT }
							has_job_action = no
							is_ruler = no
							OR = {
								is_close_relative = ROOT
								is_married = ROOT
								is_consort = ROOT
								AND = {
									is_lowborn = no
									dynasty = ROOT
								}
							}
							NOT = { is_inaccessible_trigger = yes }
						}
						add_character_modifier = { name = emf_siege_left_behind duration = 365 }
					}
				}
				1 = { # Failure
					add_character_modifier = { name = emf_siege_failed_escape duration = 365 }
				}
			}
			character_event = { id = emf_siege.4 }
		}
		clr_flag = emf_siege_family
	}
	option = { # Attempt escape with everyone
		trigger = {
			ai = no
			has_regent = no
			has_flag = emf_siege_family
		}
		name = emf_siege.1.d
		custom_tooltip = { text = emf_siege.1.d_tt }
		hidden_tooltip = {
			random_list = { # Harder to escape with family
				9 = { # Success
					add_trait = in_hiding
					set_flag = emf_siege_in_hiding
					set_flag = do_not_disturb
				}
				2 = { # Failure
					add_character_modifier = { name = emf_siege_failed_escape duration = 365 }
				}
			}
			any_courtier = {
				limit = {
					at_location = event_target:emf_location
					NOT = { character = ROOT }
					has_job_action = no
					is_ruler = no
					OR = {
						is_close_relative = ROOT
						is_married = ROOT
						is_consort = ROOT
						AND = {
							is_lowborn = no
							dynasty = ROOT
						}
					}
					NOT = { is_inaccessible_trigger = yes }
					NOT = { has_character_modifier = emf_siege_failed_escape }
				}
				character_event = { id = emf_siege.2 tooltip = emf_siege.2_tt }
			}
			character_event = { id = emf_siege.3 }
		}
		clr_flag = emf_siege_family
	}
	option = { # Stay AND fight, but send family away
		trigger = {
			ai = no
			has_regent = no
			has_flag = emf_siege_family
		}
		name = emf_siege.1.e
		custom_tooltip = { text = emf_siege.1.e_tt }
		add_character_modifier = { name = emf_siege_defender duration = 365 }
		hidden_tooltip = {
			any_courtier = {
				limit = {
					at_location = event_target:emf_location
					NOT = { character = ROOT }
					has_job_action = no
					is_ruler = no
					OR = {
						is_close_relative = ROOT
						is_married = ROOT
						is_consort = ROOT
						AND = {
							is_lowborn = no
							dynasty = ROOT
						}
					}
					NOT = { is_inaccessible_trigger = yes }
					NOT = { has_character_modifier = emf_siege_failed_escape }
				}
				set_flag = emf_siege_protected
				character_event = { id = emf_siege.2 tooltip = emf_siege.2_tt }
			}
			character_event = { id = emf_siege.3 }
		}
		clr_flag = emf_siege_family
	}
	option = { # Keep everyone together
		trigger = {
			ai = no
			has_regent = no
			has_flag = emf_siege_family
		}
		name = emf_siege.1.f
		add_character_modifier = { name = emf_siege_defender duration = 365 }
		hidden_tooltip = {
			any_courtier = {
				limit = {
					at_location = event_target:emf_location
					NOT = { character = ROOT }
					has_job_action = no
					is_ruler = no
					OR = {
						is_close_relative = ROOT
						is_married = ROOT
						is_consort = ROOT
						AND = {
							is_lowborn = no
							dynasty = ROOT
						}
					}
					NOT = { is_inaccessible_trigger = yes }
				}
				add_character_modifier = { name = emf_siege_defender duration = 365 }
			}
		}
		clr_flag = emf_siege_family
	}

	# Regent Options
	option = { # Regent is present, makes the choices if ruler is incapable OR child
		trigger = {
			ai = no
			has_regent = yes
			event_target:emf_regent = {
				at_location = event_target:emf_location
				has_job_action = no
			}
		}
		name = { # Incapable
			text = emf_siege.1.g_incapable
			trigger = {
				OR = {
					is_incapable = yes
					NOT = { age = 5 }
				}
			}
		}
		name = { # Child
			text = emf_siege.1.g_child
			trigger = {
				is_incapable = no
				age = 5
			}
		}
		if = {
			limit = { has_flag = emf_siege_family }
			custom_tooltip = { text = emf_siege.1.g_tt_family }
		}
		if = {
			limit = {
				NOT = { has_flag = emf_siege_family }
			}
			custom_tooltip = { text = emf_siege.1.g_tt_alone }
		}
		hidden_tooltip = {
			any_courtier = { # Family escapes
				limit = {
					at_location = event_target:emf_location
					NOT = { character = ROOT }
					has_job_action = no
					is_ruler = no
					OR = {
						is_close_relative = ROOT
						is_married = ROOT
						is_consort = ROOT
						AND = {
							is_lowborn = no
							dynasty = ROOT
						}
					}
					NOT = { is_inaccessible_trigger = yes }
					NOT = { has_character_modifier = emf_siege_failed_escape }
				}
				character_event = { id = emf_siege.2 tooltip = emf_siege.2_tt }
			}
			event_target:emf_regent = {
				character_event = { id = emf_siege.5 }
			}
			clr_flag = emf_siege_family
		}
	}
	option = { # Regent is NOT present, family takes you along
		trigger = {
			ai = no
			has_regent = yes
			event_target:emf_regent = {
				OR = {
					NOT = { at_location = event_target:emf_location }
					has_job_action = yes
				}
			}
			has_flag = emf_siege_family
		}
		name = { # Incapable
			text = emf_siege.1.h_incapable_fam
			trigger = {
				OR = {
					is_incapable = yes
					NOT = { age = 5 }
				}
			}
		}
		name = { # Child
			text = emf_siege.1.h_child_fam
			trigger = {
				is_incapable = no
				age = 5
			}
		}
		if = {
			limit = {
				is_incapable = no
			}
			custom_tooltip = { text = emf_siege.1.h_tt }
		}
		hidden_tooltip = { # Attempt escape with family
			random_list = {
				9 = { # Success
					add_trait = in_hiding
					set_flag = emf_siege_in_hiding
					set_flag = do_not_disturb
				}
				2 = { # Failure
					add_character_modifier = { name = emf_siege_failed_escape duration = 365 }
				}
			}
			any_courtier = {
				limit = {
					at_location = event_target:emf_location
					NOT = { character = ROOT }
					has_job_action = no
					is_ruler = no
					OR = {
						is_close_relative = ROOT
						is_married = ROOT
						is_consort = ROOT
						AND = {
							is_lowborn = no
							dynasty = ROOT
						}
					}
					NOT = { is_inaccessible_trigger = yes }
					NOT = { has_character_modifier = emf_siege_failed_escape }
				}
				character_event = { id = emf_siege.2 }
			}
			if = { # Send generic escape event
				limit = {
					is_incapable = no
					age = 5
				}
				character_event = { id = emf_siege.3 }
			}
			if = { # Send special incapable escape event
				limit = {
					OR = {
						is_incapable = yes
						NOT = { age = 5 }
					}
				}
				character_event = { id = emf_siege.7 }
			}
			clr_flag = emf_siege_family
		}
		clear_event_target = emf_regent
	}
	option = { # Completely alone, forced to stay
		trigger = {
			ai = no
			has_regent = yes
			event_target:emf_regent = {
				OR = {
					NOT = { at_location = event_target:emf_location }
					has_job_action = yes
				}
			}
			NOT = { has_flag = emf_siege_family }
		}
		name = { # Incapable
			text = emf_siege.1.i_incapable
			trigger = {
				OR = {
					is_incapable = yes
					NOT = { age = 5 }
				}
			}
		}
		name = { # Child
			text = emf_siege.1.i_child
			trigger = {
				is_incapable = no
				age = 5
			}
		}

		if = {
			limit = {
				is_incapable = no
			}
			custom_tooltip = { text = emf_siege.1.i_tt }
			add_character_modifier = { name = emf_siege_defender duration = 365 }
		}
	}
}

# Determine whether a character escapes a siege
character_event = {
	id = emf_siege.2
	hide_window = yes
	is_triggered_only = yes

	# For protected characters
	option = { # Success!
		trigger = { has_flag = emf_siege_protected }
		name = OK
		clr_flag = emf_siege_protected
		add_trait = in_hiding
		set_flag = emf_siege_in_hiding
		set_flag = do_not_disturb
		ai_chance = {
			factor = 10
		}
	}
	option = { # Failure
		trigger = { has_flag = emf_siege_protected }
		name = OK
		clr_flag = emf_siege_protected
		add_character_modifier = { name = emf_siege_failed_escape duration = 365 }
		ai_chance = {
			factor = 1
		}
	}
	# For regular characters
	option = { # Success!
		trigger = {
			NOT = { has_flag = emf_siege_protected }
			NOT = { has_flag = emf_siege_vulnerable }
		}
		name = OK
		add_trait = in_hiding
		set_flag = emf_siege_in_hiding
		set_flag = do_not_disturb
		ai_chance = {
			factor = 9
		}
	}
	option = { # Failure
		trigger = {
			NOT = { has_flag = emf_siege_protected }
			NOT = { has_flag = emf_siege_vulnerable }
		}
		name = OK
		add_character_modifier = { name = emf_siege_failed_escape duration = 365 }
		ai_chance = {
			factor = 2
		}
	}
	# For vulnerable characters
	option = { # Success!
		trigger = { has_flag = emf_siege_vulnerable }
		name = OK
		clr_flag = emf_siege_vulnerable
		add_trait = in_hiding
		set_flag = emf_siege_in_hiding
		set_flag = do_not_disturb
		ai_chance = {
			factor = 7
		}
	}
	option = { # Failure
		trigger = { has_flag = emf_siege_vulnerable }
		name = OK
		clr_flag = emf_siege_vulnerable
		add_character_modifier = { name = emf_siege_failed_escape duration = 365 }
		ai_chance = {
			factor = 3
		}
	}
}

# Generic escape flavor event
character_event = {
	id = emf_siege.3
	# Alone
	desc = { # Success
		text = emf_siege.3.desc_alone_success
		trigger = {
			has_flag = emf_siege_in_hiding
			NOT = { has_flag = emf_siege_family }
		}
	}
	desc = { # Failure
		text = emf_siege.3.desc_alone_fail
		trigger = {
			has_character_modifier = emf_siege_failed_escape
			NOT = { has_flag = emf_siege_family }
		}
	}
	# Root escapes
	desc = { # No family escaped
		text = emf_siege.3.desc_group_success_nofam
		trigger = {
			has_flag = emf_siege_in_hiding
			has_flag = emf_siege_no_family
		}
	}
	desc = { # Some family escaped
		text = emf_siege.3.desc_group_success_somefam
		trigger = {
			has_flag = emf_siege_in_hiding
			has_flag = emf_siege_some_family
		}
	}
	desc = { # All family escaped
		text = emf_siege.3.desc_group_success_allfam
		trigger = {
			has_flag = emf_siege_in_hiding
			has_flag = emf_siege_all_family
		}
	}
	# Root fails to escape
	desc = { # Nobody escaped
		text = emf_siege.3.desc_group_fail_nofam
		trigger = {
			has_character_modifier = emf_siege_failed_escape
			has_flag = emf_siege_no_family
		}
	}
	desc = { # Some family escaped
		text = emf_siege.3.desc_group_fail_somefam
		trigger = {
			has_character_modifier = emf_siege_failed_escape
			has_flag = emf_siege_some_family
		}
	}
	desc = { # All family escaped
		text = emf_siege.3.desc_group_fail_allfam
		trigger = {
			has_character_modifier = emf_siege_failed_escape
			has_flag = emf_siege_all_family
		}
	}
	# Root stayed
	desc = { # No family escaped
		text = emf_siege.3.desc_def_nofam
		trigger = {
			has_character_modifier = emf_siege_defender
			has_flag = emf_siege_no_family
		}
	}
	desc = { # Some family escaped
		text = emf_siege.3.desc_def_somefam
		trigger = {
			has_character_modifier = emf_siege_defender
			has_flag = emf_siege_some_family
		}
	}
	desc = { # All family escaped
		text = emf_siege.3.desc_def_allfam
		trigger = {
			has_character_modifier = emf_siege_defender
			has_flag = emf_siege_all_family
		}
	}
	picture = GFX_evt_large_army
	border = GFX_event_normal_frame_war
	hide_from = yes
	is_triggered_only = yes

	immediate = {
		if = { # None escaped
			limit = {
				has_flag = emf_siege_family
				NOT = {
					any_courtier = {
						at_location = event_target:emf_location
						NOT = { character = ROOT }
						has_job_action = no
						is_ruler = no
						OR = {
							is_close_relative = ROOT
							is_married = ROOT
							is_consort = ROOT
							AND = {
								is_lowborn = no
								dynasty = ROOT
							}
						}
						has_flag = emf_siege_in_hiding
					}
				}
			}
			set_flag = emf_siege_no_family
		}
		if = { # Some escaped
			limit = {
				has_flag = emf_siege_family
				any_courtier = {
					at_location = event_target:emf_location
					NOT = { character = ROOT }
					has_job_action = no
					is_ruler = no
					OR = {
						is_close_relative = ROOT
						is_married = ROOT
						is_consort = ROOT
						AND = {
							is_lowborn = no
							dynasty = ROOT
						}
					}
					has_flag = emf_siege_in_hiding
				}
				any_courtier = {
					at_location = event_target:emf_location
					NOT = { character = ROOT }
					has_job_action = no
					is_ruler = no
					OR = {
						is_close_relative = ROOT
						is_married = ROOT
						is_consort = ROOT
						AND = {
							is_lowborn = no
							dynasty = ROOT
						}
					}
					has_character_modifier = emf_siege_failed_escape
				}
			}
			set_flag = emf_siege_some_family
		}
		if = { # All family escaped
			limit = {
				has_flag = emf_siege_family
				NOT = {
					any_courtier = {
						at_location = event_target:emf_location
						NOT = { character = ROOT }
						has_job_action = no
						is_ruler = no
						OR = {
							is_close_relative = ROOT
							is_married = ROOT
							is_consort = ROOT
							AND = {
								is_lowborn = no
								dynasty = ROOT
							}
						}
						has_character_modifier = emf_siege_failed_escape
					}
				}
			}
			set_flag = emf_siege_all_family
		}
	}

	option = {
		# Alone
		name = { # Success
			text = emf_siege.3.a_alone_success
			trigger = {
				has_flag = emf_siege_in_hiding
				NOT = { has_flag = emf_siege_family }
			}
		}
		name = { # Failure
			text = emf_siege.3.a_alone_fail
			trigger = {
				has_character_modifier = emf_siege_failed_escape
				NOT = { has_flag = emf_siege_family }
			}
		}
		# Root escapes
		name = { # No family escaped
			text = emf_siege.3.a_group_success_nofam
			trigger = {
				has_flag = emf_siege_in_hiding
				has_flag = emf_siege_no_family
			}
		}
		name = { # Some family escaped
			text = emf_siege.3.a_group_success_somefam
			trigger = {
				has_flag = emf_siege_in_hiding
				has_flag = emf_siege_some_family
			}
		}
		name = { # All family escaped
			text = emf_siege.3.a_group_success_allfam
			trigger = {
				has_flag = emf_siege_in_hiding
				has_flag = emf_siege_all_family
			}
		}
		# Root fails to escape
		name = { # Nobody escaped
			text = emf_siege.3.a_group_fail_nofam
			trigger = {
				has_character_modifier = emf_siege_failed_escape
				has_flag = emf_siege_no_family
			}
		}
		name = { # Some family escaped
			text = emf_siege.3.a_group_fail_somefam
			trigger = {
				has_character_modifier = emf_siege_failed_escape
				has_flag = emf_siege_some_family
			}
		}
		name = { # All family escaped
			text = emf_siege.3.a_group_fail_allfam
			trigger = {
				has_character_modifier = emf_siege_failed_escape
				has_flag = emf_siege_all_family
			}
		}
		# Root stayed
		name = { # No family escaped
			text = emf_siege.3.a_def_nofam
			trigger = {
				has_character_modifier = emf_siege_defender
				has_flag = emf_siege_no_family
			}
		}
		name = { # Some family escaped
			text = emf_siege.3.a_def_somefam
			trigger = {
				has_character_modifier = emf_siege_defender
				has_flag = emf_siege_some_family
			}
		}
		name = { # All family escaped
			text = emf_siege.3.a_def_allfam
			trigger = {
				has_character_modifier = emf_siege_defender
				has_flag = emf_siege_all_family
			}
		}
		clr_flag = emf_siege_no_family
		clr_flag = emf_siege_some_family
		clr_flag = emf_siege_all_family
	}
}

# Ditched family flavor event
character_event = {
	id = emf_siege.4
	# Success
	desc = { # Not mean
		text = emf_siege.4.desc_success
		trigger = {
			has_flag = emf_siege_in_hiding
			NOT = { trait = cruel }
			NOT = { trait = envious }
		}
	}
	desc = { # Mean
		text = emf_siege.4.desc_success_cruel
		trigger = {
			has_flag = emf_siege_in_hiding
			OR = {
				trait = cruel
				trait = envious
			}
		}
	}
	# Failure
	desc = { # Not mean
		text = emf_siege.4.desc_fail
		trigger = {
			has_character_modifier = emf_siege_failed_escape
			NOT = { trait = cruel }
			NOT = { trait = envious }
		}
	}
	desc = { # Mean
		text = emf_siege.4.desc_fail_cruel
		trigger = {
			has_character_modifier = emf_siege_failed_escape
			OR = {
				trait = cruel
				trait = envious
			}
		}
	}
	picture = GFX_evt_large_army
	border = GFX_event_normal_frame_war
	hide_from = yes
	is_triggered_only = yes

	option = {
		# Success
		name = { # Not mean
			text = emf_siege.4.a_success
			trigger = {
				has_flag = emf_siege_in_hiding
				NOT = { trait = cruel }
				NOT = { trait = envious }
			}
		}
		name = { # Mean
			text = emf_siege.4.a_success_cruel
			trigger = {
				has_flag = emf_siege_in_hiding
				OR = {
					trait = cruel
					trait = envious
				}
			}
		}
		# Failure
		name = { # Not mean
			text = emf_siege.4.a_fail
			trigger = {
				has_character_modifier = emf_siege_failed_escape
				NOT = { trait = cruel }
				NOT = { trait = envious }
			}
		}
		name = { # Mean
			text = emf_siege.4.a_fail_cruel
			trigger = {
				has_character_modifier = emf_siege_failed_escape
				OR = {
					trait = cruel
					trait = envious
				}
			}
		}
		hidden_effect = {
			random = { # Punishment, sometimes
				chance = 10
				character_event = { id = emf_siege.61 days = 21 random = 7 }
			}
		}
	}
}

# Regent chooses whether to help
character_event = {
	id = emf_siege.5
	# Regent likes charge
	desc = { # Charge is incapable adult
		text = emf_siege.5.desc_pos_incapable_adult
		trigger = {
			opinion = { who = FROM value = 0 }
			FROM = {
				is_adult = yes
				is_incapable = yes
			}
		}
	}
	desc = { # Charge is incapable child
		text = emf_siege.5.desc_pos_incapable_child
		trigger = {
			opinion = { who = FROM value = 0 }
			FROM = {
				is_adult = no
				is_incapable = yes
			}
		}
	}
	desc = { # Charge is child
		text = emf_siege.5.desc_pos_child
		trigger = {
			opinion = { who = FROM value = 0 }
			FROM = {
				age = 5
				is_adult = no
				is_incapable = no
			}
		}
	}
	desc = { # Charge is young child
		text = emf_siege.5.desc_pos_young_child
		trigger = {
			opinion = { who = FROM value = 0 }
			FROM = {
				NOT = { age = 5 }
				is_incapable = no
			}
		}
	}
	# Regent hates charge
	desc = { # Charge is incapable adult
		text = emf_siege.5.desc_neg_incapable_adult
		trigger = {
			NOT = {
				opinion = { who = FROM value = 0 }
			}
			FROM = {
				is_adult = yes
				is_incapable = yes
			}
		}
	}
	desc = { # Charge is incapable child
		text = emf_siege.5.desc_neg_incapable_child
		trigger = {
			NOT = {
				opinion = { who = FROM value = 0 }
			}
			FROM = {
				is_adult = no
				is_incapable = yes
			}
		}
	}
	desc = { # Charge is child
		text = emf_siege.5.desc_neg_child
		trigger = {
			NOT = {
				opinion = { who = FROM value = 0 }
			}
			FROM = {
				age = 5
				is_adult = no
				is_incapable = no
			}
		}
	}
	desc = { # Charge is young child
		text = emf_siege.5.desc_neg_young_child
		trigger = {
			NOT = {
				opinion = { who = FROM value = 0 }
			}
			FROM = {
				NOT = { age = 5 }
				is_incapable = no
			}
		}
	}
	picture = GFX_evt_guardian
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	option = { # Regent helps charge to escape
		name = { # Regent likes
			text = emf_siege.5.a_pos
			trigger = {
				opinion = { who = FROM value = 0 }
			}
		}
		name = { # Regent hates
			text = emf_siege.5.a_neg
			trigger = {
				NOT = {
					opinion = { who = FROM value = 0 }
				}
			}
		}
		FROM = {
			character_event = { id = emf_siege.6 tooltip = emf_siege.6_tt_help }
		}
		ai_chance = {
			factor = 1
		}
	}
	option = { # Regent refuses to help
		name = { # Charge is incapable
			text = emf_siege.5.b_incapable
			trigger = {
				FROM = { is_incapable = yes }
			}
		}
		name = { # Charge is capable
			text = emf_siege.5.b_capable
			trigger = {
				FROM = {
					is_incapable = no
				}
			}
		}
		FROM = {
			set_flag = emf_siege_regent_ditched
			character_event = { id = emf_siege.6 tooltip = emf_siege.6_tt_ditched }
		}
		ai_chance = {
			factor = 0 # Players only
		}
	}
	option = { # Regent tries to betray young charge, AI only
		trigger = {
			ai = yes
			OR = {
				is_primary_heir = FROM
				any_child = { is_primary_heir = FROM }
			}
			NOT = {
				opinion = { who = FROM value = -5 }
				has_flag = regent_schemer
				has_minor_title = title_queen_mother
				has_minor_title = title_ruler_consort
			}
			FROM = {
				age = 5
				is_adult = no
			}
		}
		name = OK
		FROM = {
			set_flag = emf_siege_regent_ditched
			character_event = { id = emf_siege.6 }
		}
		ai_chance = {
			factor = 128
		}
	}
}

# Incapable OR child ruler with regent escape event
character_event = {
	id = emf_siege.6
	# Regent helped
	desc = {
		text = emf_siege.6.desc_incapable_success
		trigger = {
			OR = {
				is_incapable = yes
				NOT = { age = 5 }
			}
			has_flag = emf_siege_in_hiding
			NOT = { has_flag = emf_siege_regent_ditched }
		}
	}
	desc = {
		text = emf_siege.6.desc_child_success
		trigger = {
			is_incapable = no
			age = 5
			has_flag = emf_siege_in_hiding
			NOT = { has_flag = emf_siege_regent_ditched }
		}
	}
	desc = {
		text = emf_siege.6.desc_incapable_fail
		trigger = {
			OR = {
				is_incapable = yes
				NOT = { age = 5 }
			}
			has_character_modifier = emf_siege_failed_escape
			NOT = { has_flag = emf_siege_regent_ditched }
		}
	}
	desc = {
		text = emf_siege.6.desc_child_fail
		trigger = {
			is_incapable = no
			age = 5
			has_character_modifier = emf_siege_failed_escape
			NOT = { has_flag = emf_siege_regent_ditched }
		}
	}
	# Regent sold you out
	desc = {
		text = emf_siege.6.desc_incapable_success_ditched
		trigger = {
			OR = {
				is_incapable = yes
				NOT = { age = 5 }
			}
			has_flag = emf_siege_in_hiding
			has_flag = emf_siege_regent_ditched
		}
	}
	desc = {
		text = emf_siege.6.desc_child_success_ditched
		trigger = {
			is_incapable = no
			age = 5
			has_flag = emf_siege_in_hiding
			has_flag = emf_siege_regent_ditched
		}
	}
	desc = {
		text = emf_siege.6.desc_incapable_fail_ditched
		trigger = {
			OR = {
				is_incapable = yes
				NOT = { age = 5 }
			}
			has_character_modifier = emf_siege_failed_escape
			has_flag = emf_siege_regent_ditched
		}
	}
	desc = {
		text = emf_siege.6.desc_child_fail_ditched
		trigger = {
			is_incapable = no
			age = 5
			has_character_modifier = emf_siege_failed_escape
			has_flag = emf_siege_regent_ditched
		}
	}
	picture = GFX_evt_child_play
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	immediate = {
		if = { # Regent sells you out
			limit = { has_flag = emf_siege_regent_ditched }
			random_list = {
				10 = { # Success
					modifier = {
						factor = 0.05
						is_incapable = yes
					}
					modifier = {
						factor = 0.1
						NOT = { age = 5 }
					}
					modifier = {
						factor = 2
						age = 5
						NOT = { age = 12 }
					}
					modifier = {
						factor = 4
						age = 12
					}
					add_trait = in_hiding
					set_flag = emf_siege_in_hiding
					set_flag = do_not_disturb
				}
				10 = { # Failure
					add_character_modifier = { name = emf_siege_failed_escape duration = 365 }
				}
			}
			break = yes
		}
		random_list = { # Regent helped you
			9 = { # Success
				add_trait = in_hiding
				set_flag = emf_siege_in_hiding
				set_flag = do_not_disturb
			}
			2 = { # Failure
				add_character_modifier = { name = emf_siege_failed_escape duration = 365 }
			}
		}
	}

	option = { # Success
		trigger = { has_flag = emf_siege_in_hiding }
		# Regent helped
		name = {
			text = emf_siege.6.a_incapable
			trigger = {
				OR = {
					is_incapable = yes
					NOT = { age = 5 }
				}
				NOT = { has_flag = emf_siege_regent_ditched }
			}
		}
		name = {
			text = emf_siege.6.a_child
			trigger = {
				is_incapable = no
				age = 5
				NOT = { has_flag = emf_siege_regent_ditched }
			}
		}
		# Regent sold you out
		name = {
			text = emf_siege.6.a_incapable_ditched
			trigger = {
				OR = {
					is_incapable = yes
					NOT = { age = 5 }
				}
				has_flag = emf_siege_regent_ditched
			}
		}
		name = {
			text = emf_siege.6.a_child_ditched
			trigger = {
				is_incapable = no
				age = 5
				has_flag = emf_siege_regent_ditched
			}
		}

		clr_flag = emf_siege_regent_ditched
		clear_event_target = emf_regent
	}
	option = { # Failure
		trigger = { has_character_modifier = emf_siege_failed_escape }
		# Regent helped
		name = {
			text = emf_siege.6.b_incapable
			trigger = {
				OR = {
					is_incapable = yes
					NOT = { age = 5 }
				}
				NOT = { has_flag = emf_siege_regent_ditched }
			}
		}
		name = {
			text = emf_siege.6.b_child
			trigger = {
				is_incapable = no
				age = 5
				NOT = { has_flag = emf_siege_regent_ditched }
			}
		}
		# Regent sold you out
		name = {
			text = emf_siege.6.b_incapable_ditched
			trigger = {
				OR = {
					is_incapable = yes
					NOT = { age = 5 }
				}
				has_flag = emf_siege_regent_ditched
			}
		}
		name = {
			text = emf_siege.6.b_child_ditched
			trigger = {
				is_incapable = no
				age = 5
				has_flag = emf_siege_regent_ditched
			}
		}
		clr_flag = emf_siege_regent_ditched
	}
}

# Incapable ruler escape event
character_event = {
	id = emf_siege.7
	desc = {
		text = emf_siege.7.desc_success
		trigger = { has_flag = emf_siege_in_hiding }
	}
	desc = {
		text = emf_siege.7.desc_fail
		trigger = { has_character_modifier = emf_siege_failed_escape }
	}
	picture = GFX_evt_child_play
	border = GFX_event_normal_frame_war
	hide_from = yes
	is_triggered_only = yes

	option = {
		name = emf_siege.7.a
	}
}

# Choices for other rulers present at siege
# Could be child being warded at location OR councilor
character_event = {
	id = emf_siege.8
	desc = {
		text = emf_siege.8.desc_adult
		trigger = { is_adult = yes }
	}
	desc = {
		text = emf_siege.8.desc_child
		trigger = { is_adult = no }
	}
	picture = GFX_evt_council
	border = GFX_event_normal_frame_war
	hide_from = yes
	is_triggered_only = yes

	option = { # Run for it
		name = emf_siege.8.a
		custom_tooltip = { text = emf_siege.8.a_tt }
		hidden_tooltip = {
			random_list = {
				10 = { # Success
					add_trait = in_hiding
					set_flag = emf_siege_in_hiding
					set_flag = do_not_disturb
				}
				1 = { # Failure
					add_character_modifier = { name = emf_siege_failed_escape duration = 365 }
				}
			}
			character_event = { id = emf_siege.3 }
		}
	}
	option = { # Be loyal defender
		trigger = { ai = no }
		name = {
			text = emf_siege.8.b_adult
			trigger = { is_adult = yes }
		}
		name = {
			text = emf_siege.8.b_child
			trigger = {
				is_adult = no
				educator = { NOT = { trait = brave } }
			}
		}
		name = {
			text = emf_siege.8.b_child_brave
			trigger = {
				is_adult = no
				educator = { trait = brave }
			}
		}
		if = {
			limit = {
				is_adult = no
				NOT = { trait = craven }
				NOT = { trait = brave }
				educator = { trait = brave }
			}
			add_trait = brave
		}
		add_character_modifier = { name = emf_siege_defender duration = 365 }
	}
}

## Attacker Events
## 50-59 & 5000 Reserved, 5000 sets up 50

# emf_siege.5000
# Send attacker options - from on_siege_over_leader
character_event = {
	id = emf_siege.5000

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOR = {
			rebel = yes
			primary_title = { has_flag = emf_revolt }
			has_landed_title = e_rebels
			any_liege = {
				OR = {
					rebel = yes
					primary_title = { has_flag = emf_revolt }
					has_landed_title = e_rebels
				}
			}
		}
		location = {
			FROM = {
				owner = {
					NOT = { character = ROOT } # Absolutely no silliness allowed
					OR = { # Must be a hostile ruler
						war_with = ROOT
						ROOT = { # Required because unlanded generals can't pass war_with check
							any_liege = { war_with = PREVPREV }
						}
					}
					capital_scope = { province = PREVPREVPREV } # Must be capital province
				}
			}
		}
	}

	immediate = {
		save_event_target_as = emf_leader
		FROM = {
			save_event_target_as = emf_holding
			location = { save_event_target_as = emf_location }
		}
		character_event = { id = emf_siege.50 days = 1 }
	}
}

character_event = {
	id = emf_siege.50
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		event_target:emf_holding = {
			is_occupied = yes
			controller = {
				OR = {
					character = event_target:emf_leader
					is_vassal_or_below = event_target:emf_leader
				}
			}
			owner = {
				NOT = {
					any_demesne_title = { # Same as above, prevents folks showing up at secondary holdings
						count = 2
						tier = BARON
						location = { province = event_target:emf_location }
						is_occupied = yes
					}
				}
			}
		}
	}

	immediate = {
		event_target:emf_holding = {
			controller = {
				save_event_target_as = emf_unit_owner
			}
		}
		if = { # For desc triggers
			limit = { event_target:emf_unit_owner = { at_location = event_target:emf_location } }
			event_target:emf_unit_owner = { set_flag = emf_siege_unit_owner_present }
		}
		event_target:emf_holding = { # Send attacking owner the options
			owner = {
				any_courtier = { # Modifier cleanup
					limit = {
						at_location = event_target:emf_location
						NOT = { character = PREV }
					}
					remove_character_modifier = emf_siege_defender
					remove_character_modifier = emf_siege_failed_escape
					remove_character_modifier = emf_siege_left_behind
				}
				if = { # Enemy leader is present
					limit = {
						at_location = event_target:emf_location
						NOT = { is_inaccessible_trigger = yes }
						NOT = { trait = on_hajj }
						NOT = { trait = on_pilgrimage }
						NOT = { trait = traveling } # VIET compatibility
					}
					random = { # Bonus, sometimes
						chance = 10
						character_event = { id = emf_siege.60 days = 7 random = 7 }
					}
					remove_character_modifier = emf_siege_defender       # Clean
					remove_character_modifier = emf_siege_failed_escape  # Up
					event_target:emf_unit_owner = {
						character_event = { id = emf_siege.51 }
					}
				}
				if = { # Enemy leader nowhere to be found
					limit = {
						OR = {
							NOT = { at_location = event_target:emf_location }
							is_inaccessible_trigger = yes
							trait = on_hajj
							trait = on_pilgrimage
							trait = traveling # VIET compatibility
						}
						any_courtier = {
							at_location = event_target:emf_location
							NOT = { character = PREV }
							has_job_action = no
							OR = {
								is_close_relative = PREV
								is_married = PREV
								is_consort = PREV
								AND = {
									is_lowborn = no
									dynasty = PREV
								}
								AND = {
									is_ruler = yes
									has_regent = no
								}
							}
							NOT = { is_inaccessible_trigger = yes }
						}
					}
					event_target:emf_unit_owner = {
						character_event = { id = emf_siege.52 }
					}
				}
				if = {
					limit = {
						any_courtier = {
							at_location = event_target:emf_location
							host = { character = PREVPREV }
							prisoner = yes
						}
					}
					event_target:emf_unit_owner = {
						character_event = { id = emf_siege.53 }
					}
				}
			}
		}
		event_target:emf_unit_owner = { clr_flag = emf_siege_unit_owner_present }
	}

	option = {
		name = OK
	}
}

# Option event - Leader is found
character_event = {
	id = emf_siege.51
	desc = { # ROOT is personally present, courtiers
		text = emf_siege.51.desc_owner_courtiers
		trigger = {
			has_flag = emf_siege_unit_owner_present
			has_flag = emf_siege_courtiers_present
		}
	}
	desc = { # ROOT is NOT present, courtiers
		text = emf_siege.51.desc_noowner_courtiers
		trigger = {
			NOT = { has_flag = emf_siege_unit_owner_present }
			has_flag = emf_siege_courtiers_present
		}
	}
	desc = { # ROOT is personally present, no courtiers
		text = emf_siege.51.desc_owner_nocourtiers
		trigger = {
			has_flag = emf_siege_unit_owner_present
			NOT = { has_flag = emf_siege_courtiers_present }
		}
	}
	desc = { # ROOT is NOT present, no courtiers
		text = emf_siege.51.desc_noowner_nocourtiers
		trigger = {
			NOT = { has_flag = emf_siege_unit_owner_present }
			NOT = { has_flag = emf_siege_courtiers_present }
		}
	}
	picture = GFX_evt_siege
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				event_target:emf_holding = {
					owner = {
						any_courtier = {
							at_location = event_target:emf_location
							NOT = { character = PREV }
							has_job_action = no
							OR = {
								is_close_relative = PREV
								is_married = PREV
								is_consort = PREV
								AND = {
									is_lowborn = no
									dynasty = PREV
								}
								AND = {
									is_ruler = yes
									has_regent = no
								}
							}
							NOT = { is_inaccessible_trigger = yes }
						}
					}
				}
			}
			set_flag = emf_siege_courtiers_present
		}
	}

	option = { # Take only leader prisoner
		name = { # ROOT is personally present, courtiers
			text = emf_siege.51.a_owner_courtiers
			trigger = {
				has_flag = emf_siege_unit_owner_present
				has_flag = emf_siege_courtiers_present
			}
		}
		name = { # ROOT is NOT present, courtiers
			text = emf_siege.51.a_noowner_courtiers
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
				has_flag = emf_siege_courtiers_present
			}
		}
		name = { # ROOT is personally present, no courtiers
			text = emf_siege.51.a_owner_nocourtiers
			trigger = {
				has_flag = emf_siege_unit_owner_present
				NOT = { has_flag = emf_siege_courtiers_present }
			}
		}
		name = { # ROOT is NOT present, no courtiers
			text = emf_siege.51.a_noowner_nocourtiers
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
				NOT = { has_flag = emf_siege_courtiers_present }
			}
		}
		event_target:emf_holding = {
			owner = {
				hidden_tooltip = { # Clear guardians
					remove_guardian = yes
				}
				imprison = event_target:emf_unit_owner
				hidden_tooltip = { # Notify players
					character_event = { id = emf_siege.54 }
				}
			}
		}
		clr_flag = emf_siege_courtiers_present
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				trait = kind
			}
			modifier = {
				factor = 2
				trait = charitable
			}
			modifier = {
				factor = 4
				trait = just
			}
			modifier = {
				factor = 2
				event_target:emf_holding = {
					owner = { higher_tier_than = COUNT }
				}
			}
			modifier = {
				factor = 2
				event_target:emf_holding = {
					owner = { higher_tier_than = DUKE }
				}
			}
			modifier = {
				factor = 2
				event_target:emf_holding = {
					owner = { higher_tier_than = KING }
				}
			}
			modifier = { # Owner is likely an important war target
				factor = 128
				event_target:emf_holding = {
					owner = {
						ROOT = {
							any_current_enemy = { character = PREVPREV }
						}
					}
				}
			}
		}
	}
	option = { # Take everyone prisoner
		trigger = { has_flag = emf_siege_courtiers_present }
		name = { # ROOT is personally present
			text = emf_siege.51.b_owner
			trigger = { has_flag = emf_siege_unit_owner_present }
		}
		name = { # ROOT is NOT present
			text = emf_siege.51.b_noowner
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
			}
		}
		event_target:emf_holding = {
			owner = {
				hidden_tooltip = { # Clear guardians
					remove_guardian = yes
				}
				imprison = event_target:emf_unit_owner
				hidden_tooltip = { # Notify players
					character_event = { id = emf_siege.54 }
				}
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						NOT = { character = PREV }
						has_job_action = no
						OR = {
							is_close_relative = PREV
							is_married = PREV
							is_consort = PREV
							AND = {
								is_lowborn = no
								dynasty = PREV
							}
							AND = {
								is_ruler = yes
								has_regent = no
							}
						}
						NOT = { is_inaccessible_trigger = yes }
					}
					hidden_tooltip = { # Clear guardians
						remove_guardian = yes
					}
					imprison = event_target:emf_unit_owner
					hidden_tooltip = { # Notify players
						character_event = { id = emf_siege.54 }
					}
				}
			}
		}
		clr_flag = emf_siege_courtiers_present
		ai_chance = {
			factor = 16
			modifier = {
				factor = 2
				OR = {
					trait = greedy
					NOT = { scaled_wealth = 1.0 }
				}
			}
			modifier = {
				factor = 2
				event_target:emf_holding = {
					owner = { higher_tier_than = COUNT }
				}
			}
			modifier = {
				factor = 2
				event_target:emf_holding = {
					owner = { higher_tier_than = DUKE }
				}
			}
			modifier = {
				factor = 2
				event_target:emf_holding = {
					owner = { higher_tier_than = KING }
				}
			}
			modifier = { # Owner is likely an important war target
				factor = 128
				event_target:emf_holding = {
					owner = {
						ROOT = {
							any_current_enemy = { character = PREVPREV }
						}
					}
				}
			}
		}
	}
	option = { # Take leader, execute others
		trigger = { has_flag = emf_siege_courtiers_present }
		name = { # ROOT is personally present
			text = emf_siege.51.c_owner
			trigger = { has_flag = emf_siege_unit_owner_present }
		}
		name = { # ROOT is NOT present
			text = emf_siege.51.c_noowner
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
			}
		}
		custom_tooltip = { text = emf_siege.51.c_tt }
		event_target:emf_holding = {
			owner = {
				hidden_tooltip = { # Clear guardians
					remove_guardian = yes
				}
				imprison = ROOT
				hidden_tooltip = { # Notify players
					set_flag = emf_siege_massacre
					character_event = { id = emf_siege.54 }
				}
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						NOT = { character = PREV }
						has_job_action = no
						OR = {
							is_close_relative = PREV
							is_married = PREV
							is_consort = PREV
							AND = {
								is_lowborn = no
								dynasty = PREV
							}
							AND = {
								is_ruler = yes
								has_regent = no
							}
						}
						NOT = { is_inaccessible_trigger = yes }
					}
					save_event_target_as = kinslayer_target
					tooltip = {
						ROOT = { add_kinslayer_trait_effect = yes }
					}
					hidden_tooltip = {
						save_event_target_as = emf_siege_massacre_victim
						ROOT = {
							character_event = { id = emf_siege.70 }
						}
						clear_event_target = emf_siege_massacre_victim
					}
					death = {
						death_reason = death_execution
						killer = ROOT
					}
				}
			}
		}
		if = {
			limit = { trait = kind }
			remove_trait = kind
		}
		if = {
			limit = {
				NOT = { trait = cruel }
			}
			add_trait = cruel
		}
		clr_flag = emf_siege_courtiers_present
		ai_chance = {
			factor = 1
			modifier = { # Won't do it if good OR lawful
				factor = 0
				OR = {
					trait = kind
					trait = just
				}
			}
			modifier = { # More likely if mean
				factor = 2
				OR = {
					trait = cruel
					trait = impaler
				}
			}
			modifier = { # More likely if religious enemies
				factor = 2
				event_target:emf_holding = {
					owner = {
						ROOT = { emf_hostile_true_religion_to_PREV = yes }
					}
				}
				OR = {
					NOT = { trait = cynical }
					trait = crusader
					trait = mujahid
					trait = holy_warrior
				}
			}
		}
	}
	option = { # Leave them all alone
		name = { # ROOT is personally present, courtiers
			text = emf_siege.51.d_owner_courtiers
			trigger = {
				has_flag = emf_siege_unit_owner_present
				has_flag = emf_siege_courtiers_present
			}
		}
		name = { # ROOT is NOT present, courtiers
			text = emf_siege.51.d_noowner_courtiers
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
				has_flag = emf_siege_courtiers_present
			}
		}
		name = { # ROOT is personally present, no courtiers
			text = emf_siege.51.d_owner_nocourtiers
			trigger = {
				has_flag = emf_siege_unit_owner_present
				NOT = { has_flag = emf_siege_courtiers_present }
			}
		}
		name = { # ROOT is NOT present, no courtiers
			text = emf_siege.51.d_noowner_nocourtiers
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
				NOT = { has_flag = emf_siege_courtiers_present }
			}
		}
		custom_tooltip = { text = emf_siege.51.d_tt }
		event_target:emf_holding = {
			owner = {
				opinion = {
					modifier = opinion_gained_respect
					who = ROOT
					multiplier = 2
					months = 24
				}
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						NOT = { character = PREV }
						has_job_action = no
						OR = {
							is_close_relative = PREV
							is_married = PREV
							is_consort = PREV
							AND = {
								is_lowborn = no
								dynasty = PREV
							}
							AND = {
								is_ruler = yes
								has_regent = no
							}
						}
						NOT = { is_inaccessible_trigger = yes }
					}
					opinion = {
						modifier = opinion_relieved
						who = ROOT
						multiplier = 2
						months = 12
					}
				}
			}
		}
		clr_flag = emf_siege_courtiers_present
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				trait = kind
			}
			modifier = {
				factor = 2
				trait = charitable
			}
		}
	}
}

# Option event - Leader missing, others found
character_event = {
	id = emf_siege.52
	desc = { # ROOT is personally present
		text = emf_siege.52.desc_owner
		trigger = { has_flag = emf_siege_unit_owner_present }
	}
	desc = { # ROOT is NOT present
		text = emf_siege.52.desc_noowner
		trigger = {
			NOT = { has_flag = emf_siege_unit_owner_present }
		}
	}
	picture = GFX_evt_siege
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	option = { # Take everyone prisoner
		name = { # ROOT is personally present
			text = emf_siege.52.a_owner
			trigger = { has_flag = emf_siege_unit_owner_present }
		}
		name = { # ROOT is NOT present
			text = emf_siege.52.a_noowner
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
			}
		}
		event_target:emf_holding = {
			owner = {
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						NOT = { character = PREV }
						has_job_action = no
						OR = {
							is_close_relative = PREV
							is_married = PREV
							is_consort = PREV
							AND = {
								is_lowborn = no
								dynasty = PREV
							}
							AND = {
								is_ruler = yes
								has_regent = no
							}
						}
						NOT = { is_inaccessible_trigger = yes }
					}
					hidden_tooltip = { # Clear guardians
						remove_guardian = yes
					}
					imprison = ROOT
					hidden_tooltip = { # Notify players
						character_event = { id = emf_siege.54 }
					}
				}
			}
		}
		ai_chance = {
			factor = 16
			modifier = {
				factor = 2
				OR = {
					trait = greedy
					NOT = { scaled_wealth = 1.0 }
				}
			}
			modifier = {
				factor = 2
				event_target:emf_holding = {
					owner = { higher_tier_than = COUNT }
				}
			}
			modifier = {
				factor = 2
				event_target:emf_holding = {
					owner = { higher_tier_than = DUKE }
				}
			}
			modifier = {
				factor = 2
				event_target:emf_holding = {
					owner = { higher_tier_than = KING }
				}
			}
		}
	}
	option = { # Kill them all
		name = { # ROOT is personally present
			text = emf_siege.52.b_owner
			trigger = { has_flag = emf_siege_unit_owner_present }
		}
		name = { # ROOT is NOT present
			text = emf_siege.52.b_noowner
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
			}
		}

		custom_tooltip = { text = emf_siege.52.b_tt }
		event_target:emf_holding = {
			owner = {
				hidden_tooltip = { # Notify players of massacre
					character_event = { id = emf_siege.55 }
				}
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						NOT = { character = PREV }
						has_job_action = no
						OR = {
							is_close_relative = PREV
							is_married = PREV
							is_consort = PREV
							AND = {
								is_lowborn = no
								dynasty = PREV
							}
							AND = {
								is_ruler = yes
								has_regent = no
							}
						}
						NOT = { is_inaccessible_trigger = yes }
					}
					save_event_target_as = kinslayer_target
					tooltip = {
						ROOT = { add_kinslayer_trait_effect = yes }
					}
					hidden_tooltip = {
						save_event_target_as = emf_siege_massacre_victim
						ROOT = {
							character_event = { id = emf_siege.70 }
						}
						clear_event_target = emf_siege_massacre_victim
					}
					death = {
						death_reason = death_execution
						killer = ROOT
					}
				}
			}
		}
		if = {
			limit = { trait = kind }
			remove_trait = kind
		}
		if = {
			limit = {
				NOT = { trait = cruel }
			}
			add_trait = cruel
		}
		ai_chance = {
			factor = 1
			modifier = { # Won't do it if good OR lawful
				factor = 0
				OR = {
					trait = kind
					trait = just
				}
			}
			modifier = { # More likely if mean
				factor = 2
				OR = {
					trait = cruel
					trait = impaler
				}
			}
			modifier = { # More likely if religious enemies
				factor = 2
				event_target:emf_holding = {
					owner = {
						ROOT = { emf_hostile_true_religion_to_PREV = yes }
					}
				}
				OR = {
					NOT = { trait = cynical }
					trait = crusader
					trait = mujahid
					trait = holy_warrior
				}
			}
		}
	}
	option = { # Leave them all alone
		name = { # ROOT is personally present
			text = emf_siege.52.c_owner
			trigger = { has_flag = emf_siege_unit_owner_present }
		}
		name = { # ROOT is NOT present
			text = emf_siege.52.c_noowner
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
			}
		}
		custom_tooltip = { text = emf_siege.52.c_tt }
		event_target:emf_holding = {
			owner = {
				opinion = {
					modifier = opinion_gained_respect
					who = ROOT
					months = 24
				}
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						NOT = { character = PREV }
						has_job_action = no
						OR = {
							is_close_relative = PREV
							is_married = PREV
							is_consort = PREV
							AND = {
								is_lowborn = no
								dynasty = PREV
							}
							AND = {
								is_ruler = yes
								has_regent = no
							}
						}
						NOT = { is_inaccessible_trigger = yes }
					}
					opinion = {
						modifier = opinion_relieved
						who = ROOT
						months = 12
					}
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				trait = kind
			}
			modifier = {
				factor = 2
				trait = charitable
			}
		}
	}
}

# Option event - Prisoners are found
character_event = {
	id = emf_siege.53
	desc = { # ROOT is personally present
		text = emf_siege.53.desc_owner
		trigger = { has_flag = emf_siege_unit_owner_present }
	}
	desc = { # ROOT is NOT present
		text = emf_siege.53.desc_noowner
		trigger = {
			NOT = { has_flag = emf_siege_unit_owner_present }
		}
	}
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	option = { # Release all prisoners
		trigger = {
			event_target:emf_holding = {
				owner = {
					any_courtier = {
						at_location = event_target:emf_location
						host = { character = PREVPREV }
						prisoner = yes
					}
				}
			}
		}
		name = { # ROOT is personally present
			text = emf_siege.53.a_owner
			trigger = { has_flag = emf_siege_unit_owner_present }
		}
		name = { # ROOT is NOT present
			text = emf_siege.53.a_noowner
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
			}
		}
		event_target:emf_holding = {
			owner = {
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						host = { character = PREVPREV }
						prisoner = yes
					}
					prisoner = no
					opinion = {
						who = ROOT
						modifier = opinion_grateful
						multiplier = 2
						months = 120
					}
				}
			}
		}
		ai_chance = {
			factor = 2
			modifier = {
				factor = 2
				trait = kind
			}
			modifier = {
				factor = 2
				trait = trusting
			}
		}
	}
	option = { # Release all friendlies
		trigger = {
			event_target:emf_holding = {
				owner = {
					any_courtier = {
						at_location = event_target:emf_location
						host = { character = PREVPREV }
						prisoner = yes
						ROOT = { emf_hostile_religion_to_PREV = no }
						NOT = { war_with = ROOT }
						NOT = { is_foe = ROOT }
					}
				}
			}
		}
		name = { # ROOT is personally present
			text = emf_siege.53.b_owner
			trigger = { has_flag = emf_siege_unit_owner_present }
		}
		name = { # ROOT is NOT present
			text = emf_siege.53.b_noowner
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
			}
		}

		event_target:emf_holding = {
			owner = {
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						host = { character = PREVPREV }
						prisoner = yes
						ROOT = { emf_hostile_religion_to_PREV = no }
						NOT = { war_with = ROOT }
						NOT = { is_foe = ROOT }
					}
					prisoner = no
					opinion = {
						who = ROOT
						modifier = opinion_grateful
						multiplier = 2
						months = 120
					}
				}
			}
		}
		ai_chance = {
			factor = 16
		}
	}
	option = { # Release only my family members
		trigger = {
			event_target:emf_holding = {
				owner = {
					any_courtier = {
						at_location = event_target:emf_location
						host = { character = PREVPREV }
						OR = {
							is_close_relative = ROOT
							is_married = ROOT
							is_consort = ROOT
							AND = {
								is_lowborn = no
								dynasty = ROOT
							}
						}
						prisoner = yes
					}
				}
			}
		}
		name = { # ROOT is personally present
			text = emf_siege.53.c_owner
			trigger = { has_flag = emf_siege_unit_owner_present }
		}
		name = { # ROOT is NOT present
			text = emf_siege.53.c_noowner
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
			}
		}
		event_target:emf_holding = {
			owner = {
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						host = { character = PREVPREV }
						OR = {
							is_close_relative = ROOT
							is_married = ROOT
							is_consort = ROOT
							AND = {
								is_lowborn = no
								dynasty = ROOT
							}
						}
						prisoner = yes
					}
					prisoner = no
					opinion = {
						who = ROOT
						modifier = opinion_grateful
						multiplier = 2
						months = 120
					}
				}
			}
		}
		ai_chance = {
			factor = 0 # This option is for players
		}
	}
	option = { # Release nobody
		trigger = {
			event_target:emf_holding = {
				owner = {
					any_courtier = {
						at_location = event_target:emf_location
						host = { character = PREVPREV }
						prisoner = yes
					}
				}
			}
		}
		name = { # ROOT is personally present
			text = emf_siege.53.d_owner
			trigger = { has_flag = emf_siege_unit_owner_present }
		}
		name = { # ROOT is NOT present
			text = emf_siege.53.d_noowner
			trigger = {
				NOT = { has_flag = emf_siege_unit_owner_present }
			}
		}
		event_target:emf_holding = { # Friendlies will be angry
			owner = {
				any_courtier = {
					limit = {
						at_location = event_target:emf_location
						host = { character = PREVPREV }
						prisoner = yes
						ROOT = { emf_hostile_religion_to_PREV = no }
						NOT = { war_with = ROOT }
						NOT = { is_foe = ROOT }
					}
					opinion = {
						modifier = opinion_furious
						who = ROOT
						multiplier = 2
						months = 12
					}
				}
			}
		}
		ai_chance = {
			factor = 2
			modifier = {
				factor = 2
				trait = cruel
			}
			modifier = {
				factor = 2
				trait = paranoid
			}
		}
	}
}

# Notify players of their capture at end of siege
character_event = {
	id = emf_siege.54
	# Just captured
	desc = {
		text = emf_siege.54.desc_capable
		trigger = {
			NOT = { has_flag = emf_siege_massacre }
			is_incapable = no
			is_adult = yes
		}
	}
	desc = {
		text = emf_siege.54.desc_incapable
		trigger = {
			NOT = { has_flag = emf_siege_massacre }
			OR = {
				is_incapable = yes
				is_adult = no
			}
		}
	}
	# Family massacred
	desc = {
		text = emf_siege.54.desc_massacre_capable
		trigger = {
			has_flag = emf_siege_massacre
			is_incapable = no
			is_adult = yes
		}
	}
	desc = {
		text = emf_siege.54.desc_massacre_incapable
		trigger = {
			has_flag = emf_siege_massacre
			OR = {
				is_incapable = yes
				is_adult = no
			}
		}
	}
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = {
			text = emf_siege.54.a_capable
			trigger = {
				NOT = { has_flag = emf_siege_massacre }
				is_incapable = no
				is_adult = yes
			}
		}
		name = {
			text = emf_siege.54.a_massacre_capable
			trigger = {
				has_flag = emf_siege_massacre
				is_incapable = no
				is_adult = yes
			}
		}
		name = {
			text = emf_siege.54.a_incapable_adult
			trigger = {
				is_incapable = yes
				is_adult = yes
			}
		}
		name = {
			text = emf_siege.54.a_incapable_child
			trigger = {
				is_incapable = yes
				is_adult = no
			}
		}
		custom_tooltip = { text = emf_siege.54.a_tt }
		clr_flag = emf_siege_massacre
	}
}

# Notify players of massacre
character_event = {
	id = emf_siege.55
	desc = {
		text = emf_siege.55.desc_capable
		trigger = {
			is_incapable = no
			is_adult = yes
		}
	}
	desc = {
		text = emf_siege.55.desc_incapable
		trigger = {
			OR = {
				is_incapable = yes
				is_adult = no
			}
		}
	}
	picture = GFX_evt_death
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = {
			text = emf_siege.55.a_capable
			trigger = {
				is_incapable = no
				is_adult = yes
			}
		}
		name = {
			text = emf_siege.55.a_incapable_adult
			trigger = {
				is_incapable = yes
				is_adult = yes
			}
		}
		name = {
			text = emf_siege.55.a_incapable_child
			trigger = {
				is_incapable = yes
				is_adult = no
			}
		}
	}
}

# Notify players that no prisoners were taken at siege?

# Lifting siege event?

## "Reward" Events
## 60-69 Reserved
# Word gets around about bravery in defense - Player only
character_event = {
	id = emf_siege.60
	desc = { # ROOT is in prison
		text = emf_siege.60.desc_prison
		trigger = { prisoner = yes }
	}
	desc = { # ROOT is free
		text = emf_siege.60.desc_free
		trigger = { prisoner = no }
	}
	picture = GFX_evt_courtiers_talking
	border = GFX_event_normal_frame_diplomacy
	hide_from = yes
	is_triggered_only = yes

	trigger = {
		ai = no
		has_character_modifier = emf_siege_defender
		trait = craven
	}

	option = {
		name = { # ROOT is in prison
			text = emf_siege.60.a_prison
			trigger = { prisoner = yes }
		}
		name = { # ROOT is free
			text = emf_siege.60.a_free
			trigger = { prisoner = no }
		}
		remove_trait = craven
	}
}

# Word gets around about ditching family - Player only
character_event = {
	id = emf_siege.61
	desc = { # ROOT is in prison
		text = emf_siege.61.desc_prison
		trigger = { prisoner = yes }
	}
	desc = { # ROOT is free
		text = emf_siege.61.desc_free
		trigger = { prisoner = no }
	}
	picture = GFX_evt_scandal
	border = GFX_event_normal_frame_diplomacy
	hide_from = yes
	is_triggered_only = yes

	trigger = {
		ai = no
		trait = brave
	}

	option = {
		name = { # ROOT is in prison
			text = emf_siege.61.a_prison
			trigger = { prisoner = yes }
		}
		name = { # ROOT is free
			text = emf_siege.61.a_free
			trigger = { prisoner = no }
		}
		remove_trait = brave
	}
}

## Utility Events
## 70-79 Reserved
# Punish war atrocities - Modified version of vanilla event 10
character_event = {
	id = emf_siege.70
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		event_target:emf_siege_massacre_victim = {
			save_event_target_as = kinslayer_target
			ROOT = { add_kinslayer_trait_effect = yes }
			if = {
				limit = {
					NOT = { dynasty = ROOT }
				}
				any_dynasty_member = {
					opinion = {
						who = ROOT
						modifier = opinion_dishonorable
						months = 60
					}
					set_flag = emf_tmp_dishonorable
					if = {
						limit = { ROOT = { is_married = event_target:emf_siege_massacre_victim } }
						opinion = {
							who = ROOT
							modifier = opinion_spouse_slayer
							months = 60
						}
					}
				}
			}
			top_liege = {
				if = {
					limit = {
						NOR = {
							character = ROOT
							has_flag = emf_tmp_dishonorable
						}
					}
					opinion = {
						who = ROOT
						modifier = opinion_dishonorable
						months = 60
					}
					set_flag = emf_tmp_dishonorable
				}
				any_realm_lord = {
					limit = {
						OR = {
							is_playable = yes
							vassal_of = ROOT
						}
						NOR = {
							character = PREV
							character = ROOT
							has_flag = emf_tmp_dishonorable
						}
					}
					opinion = {
						who = ROOT
						modifier = opinion_dishonorable
						months = 60
					}
					set_flag = emf_tmp_dishonorable
				}
			}
			religion_head = {
				if = {
					limit = {
						NOR = {
							character = ROOT
							has_flag = emf_tmp_dishonorable
						}
					}
					opinion = {
						who = ROOT
						modifier = opinion_dishonorable
						months = 60
					}
					set_flag = emf_tmp_dishonorable
				}
			}
			rightful_religious_head_scope = {
				if = {
					limit = {
						NOR = {
							character = ROOT
							has_flag = emf_tmp_dishonorable
						}
					}
					opinion = {
						who = ROOT
						modifier = opinion_dishonorable
						months = 60
					}
					set_flag = emf_tmp_dishonorable
				}
			}
			any_spouse = {
				if = {
					limit = {
						NOR = {
							character = ROOT
							is_married = ROOT
							has_flag = emf_tmp_killed_close_kin
						}
					}
					opinion = {
						who = ROOT
						modifier = opinion_killed_close_kin
					}
					add_rival = ROOT
					set_flag = emf_tmp_killed_close_kin
				}
			}
			mother = {
				if = {
					limit = {
						NOR = {
							character = ROOT
							is_mother = ROOT
							has_flag = emf_tmp_killed_close_kin
						}
					}
					opinion = {
						who = ROOT
						modifier = opinion_killed_close_kin
					}
					add_rival = ROOT
					set_flag = emf_tmp_killed_close_kin
				}
			}
			father = {
				if = {
					limit = {
						NOR = {
							character = ROOT
							is_father = ROOT
							has_flag = emf_tmp_killed_close_kin
						}
					}
					opinion = {
						who = ROOT
						modifier = opinion_killed_close_kin
					}
					add_rival = ROOT
					set_flag = emf_tmp_killed_close_kin
				}
			}
			any_child = {
				limit = {
					NOR = {
						character = ROOT
						is_child_of = ROOT
						has_flag = emf_tmp_killed_close_kin
					}
				}
				opinion = {
					who = ROOT
					modifier = opinion_killed_close_kin
				}
				add_rival = ROOT
				set_flag = emf_tmp_killed_close_kin
			}
			any_sibling = {
				limit = {
					NOR = {
						character = ROOT
						sibling = ROOT
						has_flag = emf_tmp_killed_close_kin
					}
				}
				opinion = {
					who = ROOT
					modifier = opinion_killed_close_kin
				}
				set_flag = emf_tmp_killed_close_kin
			}
			# Cleanup deduplication temporary flags:
			any_dynasty_member = { clear_flags_with_prefix = emf_tmp }
			top_liege = {
				clear_flags_with_prefix = emf_tmp
				any_realm_lord = { clear_flags_with_prefix = emf_tmp }
			}
			religion_head = { clear_flags_with_prefix = emf_tmp }
			rightful_religious_head_scope = { clear_flags_with_prefix = emf_tmp }
			any_spouse = { clear_flags_with_prefix = emf_tmp }
			father = { clear_flags_with_prefix = emf_tmp }
			mother = { clear_flags_with_prefix = emf_tmp }
			any_child = { clear_flags_with_prefix = emf_tmp }
			any_sibling = { clear_flags_with_prefix = emf_tmp }
		}
	}

	option = {
		name = OK
	}
}

# Clear pointless modifiers - from on_siege_over_loc_chars
# Siege winner unit owner in the 'new_character' scope, lost holding title in FROM, local character in ROOT.
character_event = {
	id = emf_siege.72
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		remove_character_modifier = emf_siege_defender
		remove_character_modifier = emf_siege_failed_escape
		remove_character_modifier = emf_siege_left_behind
	}

	option = {
		name = OK
	}
}

# AI comes out of hiding
character_event = {
	id = emf_siege.73
	hide_window = yes

	ai = yes
	only_rulers = yes
	prisoner = no
	war = no

	trigger = {
		NOR = {
			any_liege = { war = yes }
			capital_holding = {
				OR = {
					has_siege = yes
					is_occupied = yes
				}
			}
		}
		OR = {
			AND = {
				trait = in_hiding
				has_flag = emf_siege_in_hiding
			}
			any_courtier = {
				trait = in_hiding
				has_flag = emf_siege_in_hiding
				is_ruler = no
			}
		}
	}
	mean_time_to_happen = {
		days = 0
	}

	immediate = {
		if = {
			limit = {
				trait = in_hiding
				has_flag = emf_siege_in_hiding
			}
			remove_trait = in_hiding
			clr_flag = emf_siege_in_hiding
			clr_flag = do_not_disturb
		}
		any_courtier = {
			limit = {
				trait = in_hiding
				has_flag = emf_siege_in_hiding
				is_ruler = no
			}
			remove_trait = in_hiding
			clr_flag = emf_siege_in_hiding
			clr_flag = do_not_disturb
			remove_character_modifier = emf_siege_defender
			remove_character_modifier = emf_siege_failed_escape
			remove_character_modifier = emf_siege_left_behind
		}
	}

	option = {
		name = OK
	}
}

### LOOTING EVENTS
# Raiding is unlikely to capture nobles AND very unlikely to get rulers
# Lowborn folks AND bishops NOT of the attacker's faith are more likely to be captured
# As with vanilla, Pagans AND Zoroastrians are more likely to capture women
# Non-tribal rulers get a chance to release captured bishops of their own religion; the AI will always do so
# There are no defender events during raiding, because defenders are automatically assumed to be protected
# If non-tribal AND non-Pagan OR reformed Pagan, there are piety penalties for looting temples of your own religion

## Attacker Events
## 100-119 & 10000 & 10100 Reserved, 10000 defers to 100, 10100 defers to 101

# Divvy up that shiny loot - from on_siege_over_loc_chars
# Siege winner unit owner in the 'new_character' scope, lost holding title in FROM, local character in ROOT.
character_event = {
	id = emf_siege.10000

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		new_character = {
			NOR = {
				rebel = yes
				primary_title = { has_flag = emf_revolt }
				has_landed_title = e_rebels
				any_liege = {
					OR = {
						rebel = yes
						primary_title = { has_flag = emf_revolt }
						has_landed_title = e_rebels
					}
				}
			}
		}
		is_ruler = no # Not for rulers, who don't show up anyway; we've got a separate event for them
		NOT = { is_inaccessible_trigger = yes }
	}

	immediate = {
		new_character = { save_event_target_as = emf_looter }
		FROM = { save_event_target_as = emf_holding }
		character_event = { id = emf_siege.100 days = 1 }
	}
}

character_event = {
	id = emf_siege.100
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		event_target:emf_holding = { is_occupied = no }
	}

	option = { # I am safe
		name = OK
		ai_chance = {
			factor = 10
		}
	}
	option = { # I am caught
		name = OK
		imprison = event_target:emf_looter
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2.5
				is_female = yes
				event_target:emf_looter = {
					OR = {
						religion_group = pagan_group
						religion_group = zoroastrian_group
					}
				}
			}
			modifier = {
				factor = 2.5
				is_theocracy = yes
				event_target:emf_looter = {
					emf_hostile_religion_to_ROOT = yes
				}
			}
			modifier = {
				factor = 3
				is_lowborn = yes
			}
		}
	}
}

# Divvy up that shiny loot, ruler edition - from on_siege_over_winner
# Siege winner unit owner = ROOT, barony title = FROM
character_event = {
	id = emf_siege.10100

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOR = {
			rebel = yes
			primary_title = { has_flag = emf_revolt }
			has_landed_title = e_rebels
			any_liege = {
				OR = {
					rebel = yes
					primary_title = { has_flag = emf_revolt }
					has_landed_title = e_rebels
				}
			}
		}
		FROM = {
			owner = { capital_holding = { title = PREVPREV } } # Only at capital
			location = {
				ROOT_FROM = {
					owner = {
						capital_scope = { province = PREVPREVPREV } # Must be capital province
						war_with = ROOT # Must be hostile ruler
					}
				}
			}
		}
	}

	immediate = {
		save_event_target_as = emf_looter
		FROM = {
			save_event_target_as = emf_holding
			location = { save_event_target_as = emf_location }
			owner = { save_event_target_as = emf_holding_owner }
		}
		character_event = { id = emf_siege.101 days = 1 }
	}
}

character_event = {
	id = emf_siege.101
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		event_target:emf_holding = {
			is_occupied = no # Looted, NOT occupied
		}
	}

	immediate = {
		event_target:emf_holding_owner = {
			if = { # Owner is present, attempt capture
				limit = {
					at_location = event_target:emf_location
					NOT = { is_inaccessible_trigger = yes }
					NOT = { trait = on_hajj }
					NOT = { trait = on_pilgrimage }
					NOT = { trait = traveling } # VIET compatibility
				}
				character_event = { id = emf_siege.102 }
			}
			any_courtier = { # Attempt capture of other present rulers
				limit = {
					is_ruler = yes
					NOT = { character = event_target:emf_holding_owner }
					host = { character = event_target:emf_holding_owner }
					at_location = event_target:emf_location
					prisoner = no
					has_job_action = no
					has_regent = no
					NOT = { is_inaccessible_trigger = yes }
				}
				character_event = { id = emf_siege.102 }
			}
		}
	}
}

# Determine if ruler gets captured
# Siege winner unit owner = FROM, barony title = FROMFROM
character_event = {
	id = emf_siege.102
	hide_window = yes
	is_triggered_only = yes

	option = { # Ruler evades capture
		name = OK
		ai_chance = {
			factor = 10
		}
	}
	option = { # Ruler is caught
		name = OK
		if = { # Players get flavor event
			limit = { ai = no }
			long_character_event = { id = emf_siege.105 }
		}
		if = { # AI does NOT
			limit = { ai = yes }
			imprison = event_target:emf_looter
		}
		if = { # Non-tribal rulers get a chance to release bishops of the same religion
			limit = { event_target:emf_holding_owner = { character = ROOT } }
			event_target:emf_looter = {
				character_event = { id = emf_siege.106 days = 7 random = 7 }
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 0.5
				OR = {
					is_landed = yes
					is_patrician = yes
				}
			}
			modifier = {
				factor = 3
				is_lowborn = yes
			}
			modifier = {
				factor = 2.5
				is_theocracy = yes
				event_target:emf_looter = { emf_hostile_religion_to_PREV = yes }
			}
		}
	}
}

# 103 FREE

# 104 FREE

# Ruler captured by looters - Players only
long_character_event = {
	id = emf_siege.105
	desc = {
		text = emf_siege.105.desc_castle
		trigger = {
			event_target:emf_holding = { holding_type = castle }
		}
	}
	desc = {
		text = emf_siege.105.desc_city
		trigger = {
			event_target:emf_holding = { holding_type = city }
		}
	}
	desc = {
		text = emf_siege.105.desc_temple
		trigger = {
			event_target:emf_holding = { holding_type = temple }
		}
	}
	picture = GFX_evt_burning_house
	border = GFX_event_long_frame_war
	is_triggered_only = yes

	immediate = {
		imprison = event_target:emf_looter
	}

	option = {
		name = emf_siege.105.a
		custom_tooltip = { text = emf_siege.105.a_tt }
	}
}

# Looters captured a bishop of their own religion
character_event = {
	id = emf_siege.106
	desc = emf_siege.106.desc
	picture = GFX_evt_throne_room
	border = GFX_event_normal_frame_diplomacy
	hide_from = yes
	is_triggered_only = yes

	trigger = {
		is_tribal = no
		event_target:emf_holding_owner = {
			host = { character = ROOT }
			prisoner = yes
			is_theocracy = yes
			religion = ROOT
		}
	}

	option = { # Release bishop
		name = {
			text = emf_siege.106.a_neutral
			trigger = {
				NOT = { trait = zealous }
				NOT = { trait = cynical }
			}
		}
		name = {
			text = emf_siege.106.a_cynical
			trigger = { trait = cynical }
		}
		name = {
			text = emf_siege.106.a_zealous
			trigger = { trait = zealous }
		}
		event_target:emf_holding_owner = { prisoner = no }
	}
	option = { # Keep prisoner
		trigger = { ai = no } # AI will always release
		name = {
			text = emf_siege.106.b_neutral
			trigger = {
				NOT = { trait = zealous }
				NOT = { trait = cynical }
			}
		}
		name = {
			text = emf_siege.106.b_cynical
			trigger = { trait = cynical }
		}
		name = {
			text = emf_siege.106.b_zealous
			trigger = { trait = zealous }
		}
		piety = -10
	}
}

## Other Looting Mechanics
## 120-129 & 12000 Reserved, 12000 defers to 120

# Non-tribal raiders looted a church of their own faith - Proxy event
character_event = {
	id = emf_siege.12000

	is_triggered_only = yes
	hide_window = yes

	ai = no

	trigger = {
		is_tribal = no
		NOR = {
			rebel = yes
			primary_title = { has_flag = emf_revolt }
			has_landed_title = e_rebels
			any_liege = {
				OR = {
					rebel = yes
					primary_title = { has_flag = emf_revolt }
					has_landed_title = e_rebels
				}
			}
		}
		emf_unreformed_pagan = no
		FROM = {
			holding_type = temple
			owner = {
				religion = ROOT
				war_with = ROOT # Must be hostile to ruler
			}
		}
	}

	immediate = {
		save_event_target_as = emf_looter
		FROM = { save_event_target_as = emf_holding }
		character_event = { id = emf_siege.120 days = 1 }
	}
}

# Non-tribal raiders looted a church of their own faith - Proxy event
character_event = {
	id = emf_siege.120
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_tribal = no
		emf_unreformed_pagan = no
		event_target:emf_holding = {
			is_occupied = no # Looted, NOT occupied
			holding_type = temple
			owner = {
				religion = ROOT
				war_with = ROOT # Must be hostile to ruler
			}
		}
	}

	immediate = {
		if = { # First time
			limit = {
				NOT = { has_flag = emf_siege_zealous_looter }
			}
			character_event = { id = emf_siege.121 }
			break = yes
		}
		if = { # Second
			limit = { has_flag = emf_siege_zealous_looter }
			character_event = { id = emf_siege.122 }
		}
	}

	option = {
		name = OK
	}
}

# Flavor for looting churches of own faith - Players only, seen once per ruler
character_event = {
	id = emf_siege.121
	desc = {
		text = emf_siege.121.desc_present
		trigger = {
			event_target:emf_holding = {
				location = {
					ROOT = { at_location = PREV }
				}
			}
		}
	}
	desc = {
		text = emf_siege.121.desc_distant
		trigger = {
			event_target:emf_holding = {
				location = {
					ROOT = {
						NOT = { at_location = PREV }
					}
				}
			}
		}
	}
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	option = {
		name = {
			text = emf_siege.121.a_neutral
			trigger = {
				NOT = { trait = zealous }
				NOT = { trait = cynical }
			}
		}
		name = {
			text = emf_siege.121.a_cynical
			trigger = { trait = cynical }
		}
		name = {
			text = emf_siege.121.a_zealous
			trigger = { trait = zealous }
		}

		if = {
			limit = {
				event_target:emf_holding = { is_holy_site = ROOT }
			}
			piety = -100
		}
		if = {
			limit = {
				event_target:emf_holding = {
					NOT = { is_holy_site = ROOT }
				}
			}
			piety = -50
		}
		if = {
			limit = { trait = zealous }
			remove_trait = zealous
		}
		set_flag = emf_siege_zealous_looter
		custom_tooltip = { text = emf_siege.121.a_tt }
	}
}

# Notification of piety loss for looting churches of own faith - Players only
character_event = {
	id = emf_siege.122
	desc = {
		text = emf_siege.122.desc_reg
		trigger = {
			event_target:emf_holding = {
				NOT = { is_holy_site = ROOT }
			}
		}
	}
	desc = {
		text = emf_siege.122.desc_holy
		trigger = {
			event_target:emf_holding = { is_holy_site = ROOT }
		}
	}
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war
	is_triggered_only = yes
	notification = yes # Notification portraits seem to require a character in FROM, hence the proxy

	immediate = {
		if = {
			limit = {
				event_target:emf_holding = { is_holy_site = ROOT }
			}
			piety = -100
		}
		if = {
			limit = {
				event_target:emf_holding = {
					NOT = { is_holy_site = ROOT }
				}
			}
			piety = -50
		}
	}

	option = {
		name = OK

		if = {
			limit = {
				event_target:emf_holding = { is_holy_site = ROOT }
			}
			tooltip = { piety = -100 }
		}
		if = {
			limit = {
				event_target:emf_holding = {
					NOT = { is_holy_site = ROOT }
				}
			}
			tooltip = { piety = -50 }
		}
	}
}

## Other Looting Flavor
## 140-149


# Siege event: destroy random building in holding
character_event = {
	id = emf_siege.200

	is_triggered_only = yes
	
	hide_window = yes
	
	trigger = {
		siege = {
			is_attacker = no
		}
		NOT = {
			has_game_rule = {
				name = siege_events
				value = off
			}
		}
	}

	weight_multiplier = {
		months = 1
		modifier = { # Make sure the AI doesn't suffer quite as much; it can't prevent this
			factor = 0.667
			location = {
				owner = { ai = yes }
				any_province_holding = {
					has_siege = yes
					owner = { ai = yes }
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_q_1
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_q_2
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_q_3
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_q_4
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_q_5
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_1
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_2
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_3
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_4
				}
			}
		}
		modifier = {
			factor = 0.85
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ca_wall_5
				}
			}
		}
		modifier = {
			factor = 0.6
			location = {
				has_wonder = yes
				wonder = {
					has_wonder_flag = protects_from_building_destruction
					is_active = yes
				}
			}
		}
		modifier = {
			factor = 0.96
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_q_1
				}
			}
		}
		modifier = {
			factor = 0.96
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_q_2
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_q_3
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_q_4
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_q_5
				}
			}
		}
		modifier = {
			factor = 0.96
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_1
				}
			}
		}
		modifier = {
			factor = 0.96
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_2
				}
			}
		}
		modifier = {
			factor = 0.96
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_3
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_4
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_wall_5
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_rep_arsenal_1
				}
			}
		}
		modifier = {
			factor = 0.85
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_rep_arsenal_2
				}
			}
		}
		modifier = {
			factor = 0.8
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = ct_rep_arsenal_3
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_q_1
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_q_2
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_q_3
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_q_4
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_q_5
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_1
				}
			}
		}
		modifier = {
			factor = 0.95
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_2
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_3
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_4
				}
			}
		}
		modifier = {
			factor = 0.85
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tp_wall_5
				}
			}
		}
		modifier = {
			factor = 0.975
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tb_hillfort_1
				}
			}
		}
		modifier = {
			factor = 0.975
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tb_hillfort_2
				}
			}
		}
		modifier = {
			factor = 0.975
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tb_hillfort_3
				}
			}
		}
		modifier = {
			factor = 0.975
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tb_hillfort_4
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tr_garrison_1
				}
			}
		}
		modifier = {
			factor = 0.8
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tr_garrison_2
				}
			}
		}
		modifier = {
			factor = 0.7
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tr_garrison_3
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tr_silk_road_2
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = tr_silk_road_3
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = mercenary_garrison_2
				}
			}
		}
		modifier = {
			factor = 0.9
			location = {
				any_province_holding = {
					has_siege = yes
					has_building = mercenary_garrison_3
				}
			}
		}
		modifier = {
			factor = 0.2
			location = {
				any_province_holding = {
					has_siege = yes
					holding_type = tribal
				}
			}
		}
		modifier = {
			factor = 1.2
			siege = {
				enemy = {
					leader = {
						trait = wroth
					}
				}
			}
		}
		modifier = {
			factor = 0.8
			siege = {
				enemy = {
					leader = {
						trait = patient
					}
				}
			}
		}
		modifier = {
			factor = 1.2
			siege = {
				enemy = {
					leader = {
						trait = viking
					}				
				}
			}
		}
		modifier = {
			factor = 1.2
			siege = {
				enemy = {
					leader = {
						trait = raider
					}			
				}
			}
		}
		modifier = {
			factor = 1.5
			siege = {
				enemy = {
					leader = {
						trait = ravager
					}			
				}
			}
		}
		modifier = {
			factor = 2.0
			siege = {
				enemy = {
					leader = {
						trait = seaking
					}
				}
			}
		}
		modifier = {
			factor = 2.0
			siege = {
				enemy = {
					leader = {
						trait = sea_queen
					}	
				}
			}
		}
		modifier = {
			factor = 0
			location = {
				any_province_holding = {
					has_siege = yes
					num_of_buildings < 1
				}
			}
		}
		modifier = {
			factor = 1.5
			location = {
				ROOT = {
					emf_hostile_true_religion_to_PREV = yes
				}
				#is_occupied = yes
			}
		}
	}
	
	immediate = {
		location = {
			any_province_holding = {
				limit = {
					has_siege = yes
				}
				destroy_random_building = yes
				owner = { character_event = { id = emf_siege.202 } }
			}
		}
	}
}
character_event = {
	id = emf_siege.201

	is_triggered_only = yes
	
	hide_window = yes
	
	trigger = {
		NOT = {
			has_game_rule = {
				name = siege_events
				value = off
			}
		}
	}

	weight_multiplier = {
		months = 1
		modifier = { # Make sure the AI doesn't suffer quite as much; it can't prevent this
			factor = 0.667
			FROM = {
				location = { owner = { ai = yes } }
				owner = { ai = yes }
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = ca_wall_q_1
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = ca_wall_q_2
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = ca_wall_q_3
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = ca_wall_q_4
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = ca_wall_q_5
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = ca_wall_1
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = ca_wall_2
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = ca_wall_3
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = ca_wall_4
			}
		}
		modifier = {
			factor = 0.85
			FROM = {
				has_building = ca_wall_5
			}
		}
		modifier = {
			factor = 0.6
			location = {
				has_wonder = yes
				wonder = {
					has_wonder_flag = protects_from_building_destruction
					is_active = yes
				}
			}
		}
		modifier = {
			factor = 0.96
			FROM = {
				has_building = ct_wall_q_1
			}
		}
		modifier = {
			factor = 0.96
			FROM = {
				has_building = ct_wall_q_2
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = ct_wall_q_3
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = ct_wall_q_4
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = ct_wall_q_5
			}
		}
		modifier = {
			factor = 0.96
			FROM = {
				has_building = ct_wall_1
			}
		}
		modifier = {
			factor = 0.96
			FROM = {
				has_building = ct_wall_2
			}
		}
		modifier = {
			factor = 0.96
			FROM = {
				has_building = ct_wall_3
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = ct_wall_4
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = ct_wall_5
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = ct_rep_arsenal_1
			}
		}
		modifier = {
			factor = 0.85
			FROM = {
				has_building = ct_rep_arsenal_2
			}
		}
		modifier = {
			factor = 0.8
			FROM = {
				has_building = ct_rep_arsenal_3
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = tp_wall_q_1
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = tp_wall_q_2
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = tp_wall_q_3
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = tp_wall_q_4
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = tp_wall_q_5
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = tp_wall_1
			}
		}
		modifier = {
			factor = 0.95
			FROM = {
				has_building = tp_wall_2
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = tp_wall_3
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = tp_wall_4
			}
		}
		modifier = {
			factor = 0.85
			FROM = {
				has_building = tp_wall_5
			}
		}
		modifier = {
			factor = 0.975
			FROM = {
				has_building = tb_hillfort_1
			}
		}
		modifier = {
			factor = 0.975
			FROM = {
				has_building = tb_hillfort_2
			}
		}
		modifier = {
			factor = 0.975
			FROM = {
				has_building = tb_hillfort_3
			}
		}
		modifier = {
			factor = 0.975
			FROM = {
				has_building = tb_hillfort_4
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = tr_garrison_1
			}
		}
		modifier = {
			factor = 0.8
			FROM = {
				has_building = tr_garrison_2
			}
		}
		modifier = {
			factor = 0.7
			FROM = {
				has_building = tr_garrison_3
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = tr_silk_road_2
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = tr_silk_road_3
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = mercenary_garrison_2
			}
		}
		modifier = {
			factor = 0.9
			FROM = {
				has_building = mercenary_garrison_3
			}
		}
		modifier = {
			factor = 0.2
			FROM = {
				is_tribal = yes
			}
		}
		modifier = {
			factor = 1.2
			trait = wroth
		}
		modifier = {
			factor = 0.8
			trait = patient
		}
		modifier = {
			factor = 1.2
			trait = viking
		}
		modifier = {
			factor = 1.2
			trait = raider
		}
		modifier = {
			factor = 1.5
			trait = ravager
		}
		modifier = {
			factor = 2.0
			trait = seaking
		}
		modifier = {
			factor = 2.0
			trait = sea_queen
		}
		modifier = {
			factor = 0
			FROM = {
				num_of_buildings < 1
			}
		}
		modifier = {
			factor = 1.5
			location = {
				ROOT = {
					emf_hostile_true_religion_to_PREV = yes
				}
				#is_occupied = yes
			}
		}
		modifier = { # Castles have longer sieges, and hence get more pulse events, and more chances of destruction that way.
			factor = 0.5
			FROM = {
				holding_type = castle
			}
		}
	}
	
	immediate = {
		FROM = {
			random_list = {
				70 = {
					modifier = {
						factor = 1.2
						ROOT = {
							trait = patient
						}
					}
					modifier = {
						factor = 0.8
						ROOT = {
							trait = wroth
						}
					}
					modifier = {
						factor = 0.3
						location = {
							ROOT = {
								emf_hostile_true_religion_to_PREV = yes
							}
							#is_occupied = yes
						}
					}
					modifier = { # Castles have longer sieges, and hence get more pulse events, so try to shoot for lower building destruction at the end of a siege
						factor = 2
						holding_type = castle
					}
					set_variable = { which = local_count value = 1 }
				}
				19 = {
					modifier = {
						factor = 0
						num_of_buildings < 2
					}
					modifier = { # Castles have longer sieges, and hence get more pulse events, so try to shoot for lower building destruction at the end of a siege
						factor = 2
						holding_type = castle
					}
					set_variable = { which = local_count value = 2 }					
				}
				10 = {
					modifier = {
						factor = 0
						num_of_buildings < 3
					}	
					modifier = {
						factor = 1.5
						location = {
							ROOT = {
								emf_hostile_true_religion_to_PREV = yes
							}
							#is_occupied = yes
						}
					}		
					set_variable = { which = local_count value = 3 }		
				}
				1 = {
					modifier = {
						factor = 0
						num_of_buildings < 4
					}
					modifier = {
						factor = 2
						location = {
							ROOT = {
								emf_hostile_true_religion_to_PREV = yes
							}
						}
					}
					set_variable = { which = local_count value = 4 }	
				}
			}
			while = {
				limit = {
					check_variable = { which = local_count value > 0 }
				}
				subtract_variable = { which = local_count value = 1 }
				destroy_random_building = yes
			}
			owner = { character_event = { id = emf_siege.202 } }
		}
	}
}

character_event = { # Notification event
	id = emf_siege.202
	desc = emf_siege.200.desc
	title = emf_siege.200.title
	
	picture = GFX_evt_siege
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	
	notification = yes
	
	option = {
		name = emf_siege.200.a
		custom_tooltip = { text = emf_siege.200.a_tt }
	}
}

character_event = {
	id = emf_siege.203
	desc = EVTDESC_LT_21000.1
	desc = EVTDESC_LT_21000.2
	picture = GFX_evt_siege
	border = GFX_event_normal_frame_war
	portrait = event_target:top_liege_target
	
	is_triggered_only = yes
	
	trigger = {
		is_nomadic = no #Nomads get their own event ( HL.4813 )
		event_target:emf_holding = {
			is_occupied = no # Looted, NOT occupied
			OR = {
				holding_type = city
				holding_type = temple
				holding_type = castle
				holding_type = tribal
			}
			num_of_buildings = 4
			location = {
				NOT = {
					has_province_modifier = recently_burnt_the_land_not_owner
				}
			}
			owner = {
				war_with = ROOT # Must be hostile to ruler
			}
		}
		NOT = { has_character_flag = disciplinary_commander }
	}
	
	immediate = {
		event_target:emf_holding = {
			location = {
				add_province_modifier = {
					name = recently_burnt_the_land_not_owner
					years = 10
				}
			}
		}
	}
	
	option = {
		name = EVTOPTA_LT_21000
		
		show_portrait = event_target:holder_target
		show_portrait = event_target:top_liege_target
		
		ai_chance = {
			factor = 40
		}
		trigger_switch = {
			on_trigger = prestige
			1000 = { prestige = -200 }
			500 = { prestige = -100 }
			100 = { prestige = -50 }
			0 = { prestige = -20 }
		}
				
		event_target:emf_holding = {
			destroy_random_building = THIS
			location = {
				show_scope_change = no
				if = {
					limit = { has_wonder = yes }
					random = {
						chance = 30
						wonder = { set_wonder_damaged = yes }
					}
				}
			}
			holder_scope = {
				show_scope_change = no
				opinion = {
					modifier = opinion_furious
					who = ROOT
					years = 3
				}
				top_liege = {
				show_scope_change = no
					opinion = {
						modifier = opinion_furious
						who = ROOT
						years = 3
					}
					hidden_effect = {
						any_realm_character = {
							show_scope_change = no
							limit = {
								NOR = {
									trait = cruel
								}
							}
							opinion = {
								modifier = opinion_dishonorable
								who = ROOT
								years = 10
							}
						}
					}
					custom_tooltip = { text = EVTOPTA_LT_21000_DISHONORABLE_TT }
				}
			}
		}
		add_character_modifier = { name = plundering_leader_modifier years = 2 }
	}

	option = {
		name = EVTOPTB_LT_21000
		
		show_portrait = event_target:holder_target
		show_portrait = event_target:top_liege_target
		
		ai_chance = {
			factor = 10
			modifier = { factor = 5 trait = cruel }
			modifier = { factor = 5 trait = wroth }
		}
		
		if = {
			limit = { NOT = { event_target:emf_holding = { holding_type = tribal } } }
			wealth = 10
		}
		if = {
			limit = { event_target:emf_holding = { holding_type = tribal } }
			wealth = 5
		}
		trigger_switch = {
			on_trigger = prestige
			1000 = { prestige = -400 }
			500 = { prestige = -200 }
			100 = { prestige = -80 }
			0 = { prestige = -40 }
		}
		random = { chance = 50 add_trait_wroth_effect = yes }
		random = { chance = 50 add_trait_cruel_effect = yes }

		event_target:emf_holding = {
			destroy_random_building = THIS
			location = {
				show_scope_change = no
				if = {
					limit = { has_wonder = yes }
					ROOT = { wealth = 30 }
					random = {
						chance = 30
						wonder = { set_wonder_damaged = yes }
					}
				}
			}

			holder_scope = {
				show_scope_change = no
				opinion = {
					modifier = opinion_furious
					who = ROOT
					years = 3
				}
				top_liege = {
				show_scope_change = no
					opinion = {
						modifier = opinion_furious
						who = ROOT
						years = 3
					}
					hidden_effect = {
						any_realm_character = {
							show_scope_change = no
							limit = {
								NOR = {
									trait = cruel
								}
							}
							opinion = {
								modifier = opinion_dishonorable
								who = ROOT
								years = 10
							}
						}
					}
					custom_tooltip = { text = EVTOPTA_LT_21000_DISHONORABLE_TT }
				}
			}
		}
		hidden_effect = {
			remove_character_modifier = plundering_leader_modifier
		}
		add_character_modifier = { name = plundering_leader_modifier years = 2 }
	}
	
	option = {
		name = EVTOPTC_LT_21000
		trigger = {
			NOR = {
				has_character_modifier = strong_leader_modifier
				has_character_modifier = weak_leader_modifier
			}
		}
		ai_chance = {
			factor = 50
		}
		random_list = {
			50 = {
				modifier = { factor = 0.5 martial < 2}
				modifier = { factor = 0.7 martial < 4}
				modifier = { factor = 0.8 martial < 6}
				modifier = { factor = 0.9 martial < 8}
				modifier = { factor = 0.9 martial < 10}
				modifier = { factor = 1.2 martial > 12}
				modifier = { factor = 1.2 martial > 14}
				modifier = { factor = 1.3 martial > 16}
				modifier = { factor = 1.4 martial > 18}
				custom_tooltip = { text = EVTOPTC_LT_21000_CONTROL_TT }
				any_controlled_unit = { troops = -0.05 }
				prestige = 50
				hidden_effect = {
					remove_character_modifier = plundering_leader_modifier
				}
				add_character_modifier = { name = strong_leader_modifier years = 10 }
			}
			50 = {
				custom_tooltip = { text = EVTOPTC_LT_21000_NO_CONTROL_TT }
				event_target:emf_holding = {
					destroy_random_building = THIS
					location = { 
						show_scope_change = no
						if = {
							limit = { has_wonder = yes }
							wonder = { set_wonder_damaged = yes }
						}
					}
				}
				hidden_effect = {
					remove_character_modifier = plundering_leader_modifier
				}
				add_character_modifier = { name = weak_leader_modifier years = 10 }
			}
		}
	}
}
