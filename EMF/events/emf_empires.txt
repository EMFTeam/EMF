# -*- ck2.events -*-


namespace = emf_empires


# emf_empires.0
# Determine if an empire needs to be dismantled due to decline
#
# MTTH event rather than annual pulse so that the 'war = no'
# requirement doesn't prevent empires from being dissolved
# for potentially many years on end.
character_event = {
	id = emf_empires.0
	desc = emf_empires.0.desc
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_war

	only_independent = yes
	war = no

	trigger = {
		tier = EMPEROR
		is_nomadic = no
		had_global_flag = { flag = EMF days = 10950 } # First 30yr of campaign
		any_demesne_title = {
			emf_empires_aed_valid_title = yes
		}
		has_random_dejure = no
	}

	mean_time_to_happen = {
		days = 0
	}

	immediate = {
		random_demesne_title = {
			limit = { emf_empires_aed_valid_title = yes }
			log = "INFO: AED: disentegrating [This.GetID] ([This.GetFullName]), held by [Root.EMF_GetDebugName]..."
			save_event_target_as = emf_empire_title
		}

		# Workaround for issue #574; ex-nomads with spurious clan titles will have the hard-code auto-create a new empire
		# title immediately after AED destroys their current one. Solution: get rid of the spurious clan title before
		# destroying the empire (and don't bug players with an announcement event about this).
		if = {
			limit = {
				any_demesne_title = {
					tier = KING
					clan = yes
				}
			}
			set_flag = emf_aed_skip_announcement
			set_flag = emf_aed_had_spurious_clan_title
			log = "-> ruler has a spurious clan title (announcement event will be skipped), destroying:"
			any_demesne_title = {
				limit = {
					tier = KING
					clan = yes
				}
				log = "---> destroying [This.GetID] ([This.GetFullName])"
				emf_unsafe_destroy_title = yes
			}
		}

		if = { # If we have another empire or king title to fallback-upon, then skip searching for a kingdom
			limit = {
				OR = {
					any_demesne_title = {
						tier = EMPEROR
						is_primary_holder_title = no
						temporary = no
					}
					any_demesne_title = {
						tier = KING
						temporary = no
					}
				}
			}
			log = "-> already has another crown-tier title to fallback upon, skipping search"
			break = yes
		}

		# Then we will try to find one...
		log = "-> searching for a fallback kingdom:"

		set_flag = emf_skip_title_basic_allow_tmp # Temporarily disables title_king_basic_allow requirements

		# First, check capital kingdom for availability
		if = {
			limit = {
				capital_scope = {
					kingdom = {
						has_holder = no
						is_title_active = THIS
						ROOT = { is_landed_title_allowed = PREV }
					}
				}
			}
			# Good. Now determine whether we'd qualify to form it by the 51% rule.
			capital_scope = { kingdom = { save_event_target_as = emf_king_title } }
			character_event = { id = emf_empires.4 } # Check 51% rule
			if = {
				limit = { check_variable = { which = king_county value > 0 } } # 51% rule passes
				event_target:emf_king_title = { save_event_target_as = emf_new_title }
				log = "---> chose capital kingdom: [emf_new_title.EMF_GetDebugTitleNameWithDeJureLieges]"
				break = yes
			}
		}

		# If not found, check all de jure kingdoms of any other empire titles that ROOT has, if the empire is de jure
		any_demesne_title = { # For all the de jure empires...
			limit = { tier = EMPEROR }
			any_direct_de_jure_vassal_title = { # For all the de jure vassal kingdoms...
				limit = {
					tier = KING
					is_de_jure_title = yes
					has_holder = no
					is_title_active = THIS
					ROOT = { is_landed_title_allowed = PREV }
				}
				save_event_target_as = emf_king_title
				ROOT = { character_event = { id = emf_empires.4 } } # Check 50% rule
				if = {
					limit = { ROOT = { check_variable = { which = king_county value > 0 } } } # 51% rule passes
					event_target:emf_king_title = { save_event_target_as = emf_new_title }
					log = "---> chose de jure vassal kingdom: [emf_new_title.EMF_GetDebugTitleNameWithDeJureLieges]"
					break = yes
				}
				clear_event_target = emf_king_title
			}
		}

		# If still not found (empire was probably titular), check every de jure kingdom title in the game...
		any_landed_title = {
			limit = {
				tier = KING
				is_de_jure_title = yes
				has_holder = no
				is_title_active = THIS
				ROOT = { is_landed_title_allowed = PREV }
			}
			save_event_target_as = emf_king_title
			ROOT = { character_event = { id = emf_empires.4 } } # Check 50% rule
			if = {
				limit = { ROOT = { check_variable = { which = king_county value > 0 } } } # 51% rule passes
				event_target:emf_king_title = { save_event_target_as = emf_new_title }
				log = "---> chose any old de jure kingdom: [emf_new_title.EMF_GetDebugTitleNameWithDeJureLieges]"
				break = yes
			}
			clear_event_target = emf_king_title
		}

		# If STILL not found, create a titular kingdom title (might want to make this optional in the future,
		# because some people might prefer not to have a silly titular king-tier title that they cannot destroy
		# until they have another king- or higher-tier title to make primary). Title will have the name and CoA
		# of the ruler's capital county (and some color offset).
		capital_scope = {
			county = {
				create_title = {
					tier = KING
					landless = no
					temporary = no
					custom_created = yes
					culture = ROOT
					holder = ROOT
					base_title = THIS
				}
				new_title = {
					log = "---> created custom titular kingdom [This.GetID] ([This.GetBaseName]) from base county title [Prev.GetID] ([Prev.GetBaseName])"
					save_event_target_as = emf_new_title
					set_flag = emf_autodestroy
					if = {
						limit = { NOT = { empire = { always = yes } } }
						de_jure_liege = e_null
					}
				}
			}
		}
	}

	option = {
		name = emf_empires.0.opt.a
		hidden_effect = {
			any_realm_lord = { character_event = { id = emf_imperial.3299 days = 1 } }
		}
		if = {
			limit = {
				NOT = {
					any_demesne_title = {
						tier = EMPEROR
						NOT = { title = event_target:emf_empire_title }
						temporary = no
					}
				}
			}
			# We will not be able to bind king-tier vassals after the empire is destroyed
			any_vassal = {
				limit = { tier = KING }
				log = "-> setting vassal king independent: [This.EMF_GetDebugName]"
				set_defacto_liege = THIS
				emf_liege_change = yes
			}
		}
		if = {
			limit = { event_target:emf_new_title = { always = yes } }
			# We'll be creating or have created a fallback kingdom title
			set_flag = emf_no_law_penalties
			primary_title = {
				event_target:emf_new_title = {
					if = {
						limit = { NOT = { holder = ROOT } }
						log = "-> granting fallback kingdom: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
						grant_title = { target = ROOT type = created }
					}
					copy_title_laws = PREV
					if = {
						limit = { PREV = { has_law = administration_2 } }
						add_law = administration_1
					}
					set_flag = emf_aed_fallback
				}
			}
			clr_flag = emf_no_law_penalties
		}
		set_flag = emf_context_aed
		set_flag = emf_context_aed_@event_target:emf_empire_title
		event_target:emf_empire_title = {
			set_flag = emf_aed_destroyed
			emf_unsafe_destroy_title = yes
			hidden_effect = {
				ROOT = { character_event = { id = emf_imperial.3299 } }
			}
			hidden_effect = {
				if = {
					limit = { NOT = { ROOT = { has_flag = emf_aed_skip_announcement } } }
					save_event_target_as = emf_crier_dead_title
					any_playable_ruler = {
						limit = { ai = no }
						narrative_event = { id = emf_crier.253 }
					}
					clear_event_target = emf_crier_dead_title
				}
			}
		}
		prestige = -500
	}

	after = {
		hidden_effect = {
			set_variable = { which = king_county value = 0 }
			clr_flag = emf_skip_title_basic_allow_tmp
			clr_flag = emf_aed_skip_announcement
		}
	}
}

# emf_empires.1
#
# Make sure horde invaders act like horde invaders (trait = conqueror)
# Called from on_actions yearly pulse
character_event = {
	id = emf_empires.1

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes
	only_capable = yes
	min_age = 16

	trigger = {
		tier = EMPEROR
		NOT = { trait = conqueror }
		ai = yes
		primary_title = { # Horde invaders
			OR = {
				AND = {
					NOT = { year = 1300 }
					OR = {
						title = e_golden_horde
						title = e_il-khanate
						title = e_mongol_empire
						title = e_chagatai
					}
				}
				title = e_timurids
				title = e_mexikha
			}
		}
		OR = { # So long as they haven't converted to a non-horde religion
			is_nomadic = yes
			primary_title = { title = e_timurids }
			religion = tengri_pagan
			religion = tengri_pagan_reformed
			religion = aztec
			religion = aztec_reformed
		}
	}

	immediate = {
		add_trait = conqueror
	}

	option = { name = OK }
}

# emf_empires.2
#
# Remove conqueror trait from horde invaders that settle down (or become
# player-controlled or incapable).
#
# Called from on_actions biannual pulse
#
# We only worry about still-independent, still empire-tier rulers,
# because none of the other cases really matter.
character_event = {
	id = emf_empires.2

	is_triggered_only = yes
	hide_window = yes

	only_rulers = yes

	trigger = {
		trait = conqueror
		OR = {
			ai = no
			is_incapable = yes
			is_adult = no
			AND = {
				OR = {
					has_landed_title = e_golden_horde
					has_landed_title = e_il-khanate
					has_landed_title = e_mongol_empire
					has_landed_title = e_chagatai
				}
				OR = {
					year = 1300
					NOR = {
						is_nomadic = yes
						religion = tengri_pagan
						religion = tengri_pagan_reformed
					}
				}
			}
			AND = {
				has_landed_title = e_mexikha
				NOR = {
					religion = aztec
					religion = aztec_reformed
				}
			}
		}
	}

	immediate = {
		remove_trait = conqueror
	}
}

# emf_empires.4
#
# Check the 50% rule for kingdom event_target:emf_king_title
character_event = {
	id = emf_empires.4
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_variable = { which = king_county value = 0 }

		event_target:emf_king_title = {
			any_de_jure_vassal_title = {
				limit = {
					tier = COUNT
					owner_under_ROOT = yes
				}
				ROOT = { change_variable = { which = king_county value = 1 } }
			}
			any_de_jure_vassal_title = {
				limit = {
					tier = COUNT
					owner_under_ROOT = no
				}
				ROOT = { change_variable = { which = king_county value = -1 } }
			}
		}
	}
}

# emf_empires.5
#
# on_new_holder on_action which fires whenever a new empire is created.
character_event = {
	id = emf_empires.5

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes

	trigger = {
		FROM = { tier = EMPEROR }
		NOT = { FROMFROM = { always = yes } }
		has_game_started = yes
		FROM = { has_flag = emf_aed_destroyed } # Currently the only thing we do here
	}

	immediate = {
		FROM = {
			clr_flag = emf_aed_destroyed
			# SOMEDAY: might want to store the duration in years or some approximation of the emf_aed_destroyed
			# flag into a cumulative title variable for "years spent disintegrated," but the applications for
			# that don't currently exist (mostly contextual stuff).
			change_variable = { which = emf_aed_restored value = 1 }
		}
	}
}

# emf_empires.20
#
# Remove ahistorical empires
#
# Called from emf_startup for the default de jure setup
character_event = {
	id = emf_empires.20
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_game_rule = { name = ahistorical_empires value = off }
		# Not if the job's already been done for us (no worries: the emf_startup event which ensures every kingdom
		# title with a null empire gets de_jure_liege = e_null will ensure that everything is switched over to
		# e_null and not a truly null empire):
		NOT = { has_alternate_start_parameter = { key = dejure_empires value = none } }
	}

	immediate = {
		clr_global_flag = emf_ahistorical_empires
		any_landed_title = {
			limit = {
				tier = EMPEROR
				is_de_jure_title = yes
				NOR = {
					title = e_hre
					title = e_byzantium
					title = e_persia
					title = e_arabia
					title = e_null # Might already be de jure
				}
			}
			any_direct_de_jure_vassal_title = {
				# Transfer de jure vassal kingdoms to e_null
				de_jure_liege = e_null
				# And mark which empire was our de jure liege title for later (Add Ahistorical Empires)
				set_flag = emf_nae_dejure_vassal_@PREV
			}
			# If this is not our first run (i.e., not prior to completion of campaign setup), then
			# we also deactivate the ahistorical empire title (but only if it has no holder)
			if = {
				limit = {
					has_global_flag = EMF
					has_holder = no
					is_title_active = THIS
				}
				activate_title = { title = THIS status = no }
			}
			set_flag = emf_nae_titular
		}
	}
}

# emf_empires.21
#
# Add ahistorical empires [again]
#
# Console only
character_event = {
	id = emf_empires.21
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_global_flag = emf_ahistorical_empires
		any_landed_title = {
			limit = {
				tier = EMPEROR
				has_flag = emf_nae_titular
			}
			any_landed_title = {
				limit = {
					tier = KING
					has_flag = emf_nae_dejure_vassal_@PREV
				}
				de_jure_liege = PREV
				clr_flag = emf_nae_dejure_vassal_@PREV
			}
			if = {
				limit = { NOT = { is_title_active = THIS } }
				activate_title = { title = THIS status = yes }
			}
			clr_flag = emf_nae_titular
		}
	}
}

# emf_empires.30 [AI Ruler]
#
# Currently only fired from emf_reclaim_byz_capital/on_success_posttitle
character_event = {
	id = emf_empires.30

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		ai = yes
	}

	immediate = {
		d_thrace = {
			# Refill holding levies as if Queen City was immediately settled by the new ERE successor candidate
			# ( as they should also have moved their capital there automatically, although sometimes the AI will
			# choose to move it right back to their primary title's de jure capital #ThingsThatIrritateZiji )
			any_de_jure_vassal_title = {
				limit = {
					tier = BARON
					owner_under_ROOT = yes
				}
				remove_holding_modifier = recently_conquered
				remove_holding_modifier = new_administration
				refill_holding_levy = yes
				set_flag = emf_refill_levy
			}
			ROOT = { character_event = { id = emf_core.40 days = 30 } } # Make sure levies get refilled entirely
		}

		# Ensure that our capital moves to Constantinople
		character_event = { id = emf_empires.31 }

		# Dissolve some potential NAPs
		any_independent_ruler = {
			limit = {
				ai = yes
				has_non_aggression_pact_with = ROOT
				NOT = { is_allied_with = ROOT }
				any_realm_province = {
					empire = { title = e_byzantium }
				}
			}
			reverse_opinion = { who = ROOT modifier = opinion_disabled_nap years = 15 }
		}
	}
}

# emf_empires.31
#
# Try to ensure that our capital becomes/remains Constantinople.
character_event = {
	id = emf_empires.31

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		ai = yes
		NOT = { capital_scope = { province_id = 496 } }
		primary_title = {
			capital_scope = {
				owner = { character = ROOT }
			}
		}
	}

	immediate = {
		primary_title = {
			capital_scope = {
				if = {
					limit = { province_id = 496 }
					ROOT = { capital = PREV } # Event trigger ensures we directly own it
					break = yes
				}
			}
		}
		# Case where we need to give our primary title capital away so that the AI capital change will stick
		random_list = {
			50 = {
				modifier = {
					factor = 0
					has_religion_feature = religion_matriarchal
				}
				create_random_soldier = {
					random_traits = yes
					dynasty = random
					culture = ROOT
					religion = ROOT
					female = no
					age = 26
					trait = brilliant_strategist
					attributes = { martial = 10 }
				}
			}
			50 = {
				modifier = {
					factor = 0
					gender_equality_trigger = no
					NOT = { has_religion_feature = religion_matriarchal }
				}
				create_random_soldier = {
					random_traits = yes
					dynasty = random
					culture = ROOT
					religion = ROOT
					female = yes
					age = 26
					trait = brilliant_strategist
					attributes = { martial = 10 }
				}
			}
		}
		new_character = {
			save_event_target_as = emf_general
			add_trait = brave
			random = { chance = 50 add_trait = zealous }
			random_list = {
				10 = { add_trait = trained_warrior }
				60 = { add_trait = skilled_warrior }
				30 = { add_trait = master_warrior }
			}
			random_list = {
				30 = { add_trait = hunter }
				30 = { add_trait = duelist }
				30 = { add_trait = strategist }
			}
			emf_new_character = yes
		}
		primary_title = {
			capital_scope = {
				county = {
					grant_title = event_target:emf_general
					any_direct_de_jure_vassal_title = {
						limit = { holder = ROOT }
						grant_title = event_target:emf_general
					}
					dejure_liege_title = {
						if = {
							limit = {
								owner = {
									under_ROOT = yes
									ai = yes
								}
							}
							grant_title = event_target:emf_general # less likely to revoke county
						}
						if = {
							limit = { has_holder = no }
							grant_title = {
								target = event_target:emf_general
								type = created
							}
							event_target:emf_general = { prestige = 125 }
						}
					}
				}
			}
		}
		event_target:emf_general = {
			set_defacto_liege = ROOT
			if = {
				limit = { ROOT = { NOT = { job_marshal = { ai = no } } } }
			}
			give_job_title = job_marshal # less likely to revoke county
			add_friend = ROOT # Hopefully less likely to revoke county, and hey, ROOT could use a decent friend.
		}
		# Attempt to move AI capital to Constantinople yet again
		c_byzantion = {
			# If for some reason we don't have direct control of the county, then ensure
			# we do. [Could only happen if mission was started from somewhere other than
			# the emf_reclaim_byz_capital CB.] FWIW, it's guaranteed to be under_ROOT = yes
			# by definition of the mission validation invariants.
			if = {
				limit = { NOT = { holder = ROOT } }
				any_direct_de_jure_vassal_title = {
					limit = {
						owner = { is_liege_or_above = ROOT }
						holding_type = castle
					}
					usurp_title = { target = ROOT type = revoke }
				}
				usurp_title = { target = ROOT type = revoke }
			}
			emf_make_location_ROOT_capital = yes
		}
	}
}


# emf_empires.50 -- on_death handler for feudal elective emperors whose heir has waived the nomination in advance.
# from here, we intend to find an alternative heir before inheritance is allowed to happen.
#
# NOTE: since this screws with the heir of an empire right before death, it should be carefully ordered in the on_death
# on_action event list so as to avoid acting [or failing to act at all] on incorrect information while processing the death.
character_event = {
	id = emf_empires.50

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes

	trigger = {
		tier = EMPEROR
		is_nomadic = no
		any_demesne_title = {
			tier = EMPEROR
			temporary = no
			OR = {
				has_law = succ_feudal_elective
				has_law = succ_hre_elective
			}
			current_heir = {
				has_character_modifier = emf_decline_elective_empire_modifier
			}
		}
	}

	immediate = {
		# NOTE: we assume only one such empire w/ a waived current_heir is held by ROOT
		random_demesne_title = {
			limit = {
				tier = EMPEROR
				temporary = no
				OR = {
					has_law = succ_feudal_elective
					has_law = succ_hre_elective
				}
				current_heir = {
					has_character_modifier = emf_decline_elective_empire_modifier
				}
			}
			save_event_target_as = emf_empire
			current_heir = { save_event_target_as = emf_heir }
		}

		event_target:emf_heir = {
			log = "INFO: emf_empires.50: elective empire inheritance waived for the [emf_empire.GetFullBaseName] ([emf_empire.GetID]) by [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			add_trait = emf_cannot_inherit
		}

		recalc_succession = yes

		event_target:emf_heir = { remove_trait = emf_cannot_inherit }

		# REVISIT: hmm, should we also recalc_succession on the heir after removing the temporary anti-inheritance
		# trait? it might make a difference, depending upon game implementation details.

		event_target:emf_empire = {
			current_heir = {
				log = "---> new heir is [This.GetTitledFirstName] [This.GetOnlyDynastyName] (#[This.GetID]/[This.PrimaryTitle.GetID])"
			}
		}
	}
}


# emf_empires.60 -- Restored Rome [Restorer]
#
# Called from restore_roman_empire decision
narrative_event = {
	id = emf_empires.60

	is_triggered_only = yes

	title = emf_empires_60_title
	picture = GFX_evt_rome_restored_byzantine

	desc = {
		text = emf_empires_60_desc_byz
		trigger = { 
			is_alternate_start = no
			primary_title = { title = e_byzantium }
		}
	}
	desc = {
		text = emf_empires_60_desc_latin
		trigger = { 
			is_alternate_start = no
			primary_title = { title = e_latin_empire }
		}
	}
	desc = {
		text = emf_empires_60_desc_altstart
		trigger = { 
			is_alternate_start = yes
		}
	}
	
	immediate = {
		set_global_flag = rome_restored
		set_flag = emf_context_restored_roman_empire
		e_roman_empire = { set_flag = emf_context_restored_by_@ROOT }
		primary_title = {
			save_event_target_as = emf_old_empire_title
			if = {
				limit = { title = e_byzantium }
				set_flag = emf_context_absorbed_into_roman_empire_by_@ROOT
				e_roman_empire = { set_flag = emf_context_restored_from_byzantium_by_@ROOT }
				ROOT = { set_flag = emf_context_restored_roman_empire_from_byzantium }
			}
			else_if = {
				limit = { title = e_latin_empire }
				set_flag = emf_context_absorbed_into_roman_empire_by_@ROOT
				e_roman_empire = { set_flag = emf_context_restored_from_latin_empire_by_@ROOT }
				ROOT = { set_flag = emf_context_restored_roman_empire_from_latin_empire }
			}
		}
		if = {
			limit = { ai = no }
			set_character_flag = achievement_legacy_of_rome
		}
	}
	
	option = {
		name = emf_empires_60_opt_a
		hidden_effect = {
			primary_title = { any_direct_de_jure_vassal_title = { de_jure_liege = e_roman_empire } }
		}
		primary_title = {
			show_scope_change = no
			e_roman_empire = {
				show_scope_change = no
				grant_title = ROOT
				emf_copy_title_state_from_PREV = yes
				emf_make_primary_title = yes
				copy_title_laws = PREV
				copy_title_history = PREV
			}
			emf_destroy_title = yes
			e_hre_french = {
				show_scope_change = no
				if = {
					limit = { has_holder = yes }
					custom_tooltip = { text = THIS_HRE_TITLE_IS_NOW_KNOWN_AS_FRANCIA_TT }
				}
				hidden_effect = {
					set_name = "Francia"
					set_short_name = no
				}
			}
			e_hre = {
				show_scope_change = no
				if = {
					limit = { has_holder = yes }
					custom_tooltip = { text = THIS_HRE_TITLE_IS_NOW_KNOWN_AS_GERMANIA_TT }
				}
				hidden_effect = {
					set_name = "Germania"
					set_short_name = no
				}
			}
			hidden_effect = {
				activate_title = { title = THIS status = no }
				any_player = {
					limit = { NOT = { character = ROOT } }
					narrative_event = { id = emf_empires.61 }
				}
				if = { #Hellenic Resurgence
					limit = { 
						has_dlc = "Holy Fury" 
						religion_group = christian
						has_game_rule = { name = hellenism_rule value = on }
						OR = { 
							culture = greek
							culture = italian
							culture = roman
							culture_group = italian_group # SWMH
						}
					}
					character_event = { id = HF.23106 days = 15 }				
				}
				if = { #Burn and Rebuild Rome.
					limit = { 
						has_dlc = "Holy Fury" 
						333 = { any_province_holding = { holding_type = temple count = 2 } } #Check if Gengis Khan or whomever hasn't already leveled the place down.
					}
					333 = { province_event = { id = HF.23100 days = 155 } }				
				}
			}
		}
		add_trait = augustus
		give_nickname = nick_the_glorious
		if = {
			limit = { 
				has_dlc = "Holy Fury"
				OR = { 
					religion_group = christian
					religion = hellenic_pagan
					religion = hellenic_pagan_reformed
				}
				NOT = { any_owned_bloodline = { has_bloodline_flag = roman_bloodline } }
			}
			if = {
				limit = { is_female = no }
				create_bloodline = { type = roman_emperor_male }
			}
			else = {
				create_bloodline = { type = roman_emperor_female }
			}
			new_bloodline = { set_description = "bloodline_desc_roman" }
			sound_effect = bloodline_added
		}
	}
}

# emf_empires.61 -- Informed about the restoration of Rome [Third-Party]
#
# Called from emf_empires.60
narrative_event = {
	id = emf_empires.61

	is_triggered_only = yes
	title = emf_empires_61_title
	picture = GFX_evt_rome_restored_byzantine

	desc = {
		text = emf_empires_61_desc_byz
		trigger = { 
			is_alternate_start = no
			event_target:emf_old_empire_title = { title = e_byzantium }
		}
	}
	desc = {
		text = emf_empires_61_desc_latin
		trigger = { 
			is_alternate_start = no
			event_target:emf_old_empire_title = { title = e_latin_empire }
		}
	}
	desc = {
		text = emf_empires_61_desc_altstart
		trigger = { 
			is_alternate_start = yes
		}
	}
	
	option = {
		name = emf_empires_61_opt_a
		trigger = { NOT = { top_liege = { has_landed_title = event_target:emf_global_hre } } }
	}
	option = {
		name = emf_empires_61_opt_b
		trigger = { has_landed_title = event_target:emf_global_hre }
		custom_tooltip = { text = MY_HRE_TITLE_HAS_BECOME_KNOWN_AS_TT }
		prestige = -500
	}
	option = {
		name = emf_empires_61_opt_c
		trigger = {
			independent = no
			real_tier = KING
			top_liege = { has_landed_title = event_target:emf_global_hre }
		}
		custom_tooltip = { text = OUR_HRE_TITLE_HAS_BECOME_KNOWN_AS_TT }
		prestige = -300
	}
	option = {
		name = emf_empires_61_opt_c
		trigger = {
			independent = no
			real_tier = DUKE
			top_liege = { has_landed_title = event_target:emf_global_hre }
		}
		custom_tooltip = { text = OUR_HRE_TITLE_HAS_BECOME_KNOWN_AS_TT }
		prestige = -200
	}
	option = {
		name = emf_empires_61_opt_c
		trigger = {
			independent = no
			real_tier = COUNT
			top_liege = { has_landed_title = event_target:emf_global_hre }
		}
		custom_tooltip = { text = OUR_HRE_TITLE_HAS_BECOME_KNOWN_AS_TT }
		prestige = -100
	}
}

# emf_empires.70 [Emperor of the HRE]
#
# Sends deferred event to the heir of the HRE upon the death of the current emperor in order to potentially move the HRE
# title's preferred capital.
character_event = {
	id = emf_empires.70

	is_triggered_only = yes # on_death
	hide_window = yes

	only_independent = yes
	ai = yes

	trigger = {
		tier = EMPEROR
		has_landed_title = event_target:emf_global_hre
		event_target:emf_global_hre = {
			current_heir = { ai = yes }
		}
	}

	immediate = {
		event_target:emf_global_hre = {
			current_heir = {
				character_event = { id = emf_empires.71 days = 1 }
			}
		}
	}
}


# emf_empires.71 [Emperor of the HRE]
#
# Triggered by emf_empires.70 (inheritance of the HRE) as well as on campaign initialization and upon formation of the HRE.
# Potentially move the preferred capital of the HRE to the best county in the demesne of ROOT, so long as it's part of the
# HRE de jure.
character_event = {
	id = emf_empires.71

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes

	trigger = {
		tier = EMPEROR
		has_landed_title = event_target:emf_global_hre
		any_demesne_title = {
			tier = COUNT
			de_jure_liege_or_above = event_target:emf_global_hre
			capital_holding = { is_preferred_holding_type = ROOT }
		}
	}

	immediate = {
		random_demesne_title = {
			limit = {
				tier = COUNT
				de_jure_liege_or_above = event_target:emf_global_hre
				capital_holding = { is_preferred_holding_type = ROOT }
			}
			preferred_limit = {
				location = { num_of_settlements > 6 }
			}
			preferred_limit = {
				location = { num_of_settlements > 5 }
			}
			preferred_limit = {
				location = { num_of_settlements > 4 }
			}
			preferred_limit = {
				location = { num_of_settlements > 3 }
			}
			preferred_limit = {
				location = { num_of_settlements > 2 }
			}
			preferred_limit = {
				location = { num_of_settlements > 1 }
			}
			event_target:emf_global_hre = { set_preferred_capital = PREV }
			ROOT = { capital = PREV }
		}
	}
}
